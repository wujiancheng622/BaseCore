// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaiseDustDataBean.proto

#ifndef PROTOBUF_RaiseDustDataBean_2eproto__INCLUDED
#define PROTOBUF_RaiseDustDataBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

class RaisuDustData;
class RaisuDustMassage;
class RaisuDustAlarmMessage;
class RaisuDustPlanData;
class RaisuDustAlarmPlanMessage;
class RaisuDustNoiseData;
class RaisuDustNoiseThreshold;
class GetRaisuDustNoiseThreshold;

enum REQUEST_TYPE_OF_RAISE_DUST {
  RAISE_DUST_REQUEST_GET_SRC_DEV_INFO = 1,
  RAISE_DUST_REQUEST_ACTION_LINK = 2
};
bool REQUEST_TYPE_OF_RAISE_DUST_IsValid(int value);
const REQUEST_TYPE_OF_RAISE_DUST REQUEST_TYPE_OF_RAISE_DUST_MIN = RAISE_DUST_REQUEST_GET_SRC_DEV_INFO;
const REQUEST_TYPE_OF_RAISE_DUST REQUEST_TYPE_OF_RAISE_DUST_MAX = RAISE_DUST_REQUEST_ACTION_LINK;
const int REQUEST_TYPE_OF_RAISE_DUST_ARRAYSIZE = REQUEST_TYPE_OF_RAISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_RAISE_DUST_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_RAISE_DUST_Name(REQUEST_TYPE_OF_RAISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_RAISE_DUST_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_RAISE_DUST_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_RAISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_RAISE_DUST>(
    REQUEST_TYPE_OF_RAISE_DUST_descriptor(), name, value);
}
enum RESULT_TYPE_OF_RAISE_DUST {
  RAISE_DUST_MESSAGE_RESULT_IS_OK = 1,
  RAISE_DUST_MESSAGE_RESULT_IS_ERROR = 2
};
bool RESULT_TYPE_OF_RAISE_DUST_IsValid(int value);
const RESULT_TYPE_OF_RAISE_DUST RESULT_TYPE_OF_RAISE_DUST_MIN = RAISE_DUST_MESSAGE_RESULT_IS_OK;
const RESULT_TYPE_OF_RAISE_DUST RESULT_TYPE_OF_RAISE_DUST_MAX = RAISE_DUST_MESSAGE_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_RAISE_DUST_ARRAYSIZE = RESULT_TYPE_OF_RAISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_RAISE_DUST_descriptor();
inline const ::std::string& RESULT_TYPE_OF_RAISE_DUST_Name(RESULT_TYPE_OF_RAISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_RAISE_DUST_descriptor(), value);
}
inline bool RESULT_TYPE_OF_RAISE_DUST_Parse(
    const ::std::string& name, RESULT_TYPE_OF_RAISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_RAISE_DUST>(
    RESULT_TYPE_OF_RAISE_DUST_descriptor(), name, value);
}
enum THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST {
  RAISE_DUST_ALARM_THRESHOLD_OF_HIGH_LIMIT = 1,
  RAISE_DUST_ALARM_THRESHOLD_OF_LOWER_LIMIT = 2
};
bool THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_IsValid(int value);
const THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_MIN = RAISE_DUST_ALARM_THRESHOLD_OF_HIGH_LIMIT;
const THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_MAX = RAISE_DUST_ALARM_THRESHOLD_OF_LOWER_LIMIT;
const int THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_ARRAYSIZE = THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor();
inline const ::std::string& THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_Name(THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor(), value);
}
inline bool THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_Parse(
    const ::std::string& name, THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST>(
    THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor(), name, value);
}
enum ALARM_TYPE_OF_ARISE_DUST {
  RAISE_DUST_ALARM_TYPE_FOR_NOISE = 1,
  RAISE_DUST_ALARM_TYPE_FOR_PM_2_5 = 2,
  RAISE_DUST_ALARM_TYPE_FOR_PM_10 = 3,
  RAISE_DUST_ALARM_TYPE_FOR_TSP = 4,
  RAISE_DUST_ALARM_TYPE_FOR_WIND_SPEED = 5,
  RAISE_DUST_ALARM_TYPE_FOR_WIND_DIRECTION = 6,
  RAISE_DUST_ALARM_TYPE_FOR_TEMPERATURE = 7,
  RAISE_DUST_ALARM_TYPE_FOR_HUMIDITY = 8,
  RAISE_DUST_ALARM_TYPE_FOR_PRESSURE = 9,
  RAISE_DUST_ALARM_TYPE_FOR_VOLTAGE = 10
};
bool ALARM_TYPE_OF_ARISE_DUST_IsValid(int value);
const ALARM_TYPE_OF_ARISE_DUST ALARM_TYPE_OF_ARISE_DUST_MIN = RAISE_DUST_ALARM_TYPE_FOR_NOISE;
const ALARM_TYPE_OF_ARISE_DUST ALARM_TYPE_OF_ARISE_DUST_MAX = RAISE_DUST_ALARM_TYPE_FOR_VOLTAGE;
const int ALARM_TYPE_OF_ARISE_DUST_ARRAYSIZE = ALARM_TYPE_OF_ARISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* ALARM_TYPE_OF_ARISE_DUST_descriptor();
inline const ::std::string& ALARM_TYPE_OF_ARISE_DUST_Name(ALARM_TYPE_OF_ARISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    ALARM_TYPE_OF_ARISE_DUST_descriptor(), value);
}
inline bool ALARM_TYPE_OF_ARISE_DUST_Parse(
    const ::std::string& name, ALARM_TYPE_OF_ARISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ALARM_TYPE_OF_ARISE_DUST>(
    ALARM_TYPE_OF_ARISE_DUST_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST {
  RAISE_DUST_PLAN_GET_ALL = 1
};
bool REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_IsValid(int value);
const REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_MIN = RAISE_DUST_PLAN_GET_ALL;
const REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_MAX = RAISE_DUST_PLAN_GET_ALL;
const int REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_ARRAYSIZE = REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_Name(REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST>(
    REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor(), name, value);
}
enum RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST {
  RAISE_DUST_PLAN_IS_OK = 1,
  RAISE_DUST_PLAN_IS_ERROR = 2
};
bool RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_IsValid(int value);
const RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_MIN = RAISE_DUST_PLAN_IS_OK;
const RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_MAX = RAISE_DUST_PLAN_IS_ERROR;
const int RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_ARRAYSIZE = RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor();
inline const ::std::string& RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_Name(RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor(), value);
}
inline bool RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_Parse(
    const ::std::string& name, RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST>(
    RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor(), name, value);
}
// ===================================================================

class RaisuDustData : public ::google::protobuf::Message {
 public:
  RaisuDustData();
  virtual ~RaisuDustData();

  RaisuDustData(const RaisuDustData& from);

  inline RaisuDustData& operator=(const RaisuDustData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustData& default_instance();

  void Swap(RaisuDustData* other);

  // implements Message ----------------------------------------------

  RaisuDustData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustData& from);
  void MergeFrom(const RaisuDustData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string id = 2 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string postion = 3 [default = ""];
  inline bool has_postion() const;
  inline void clear_postion();
  static const int kPostionFieldNumber = 3;
  inline const ::std::string& postion() const;
  inline void set_postion(const ::std::string& value);
  inline void set_postion(const char* value);
  inline void set_postion(const char* value, size_t size);
  inline ::std::string* mutable_postion();
  inline ::std::string* release_postion();
  inline void set_allocated_postion(::std::string* postion);

  // optional float noise = 4 [default = 0];
  inline bool has_noise() const;
  inline void clear_noise();
  static const int kNoiseFieldNumber = 4;
  inline float noise() const;
  inline void set_noise(float value);

  // optional float pm10 = 5 [default = 0];
  inline bool has_pm10() const;
  inline void clear_pm10();
  static const int kPm10FieldNumber = 5;
  inline float pm10() const;
  inline void set_pm10(float value);

  // optional float windSpeed = 6 [default = 0];
  inline bool has_windspeed() const;
  inline void clear_windspeed();
  static const int kWindSpeedFieldNumber = 6;
  inline float windspeed() const;
  inline void set_windspeed(float value);

  // optional float windDirection = 7 [default = 0];
  inline bool has_winddirection() const;
  inline void clear_winddirection();
  static const int kWindDirectionFieldNumber = 7;
  inline float winddirection() const;
  inline void set_winddirection(float value);

  // optional float tmperature = 8 [default = 0];
  inline bool has_tmperature() const;
  inline void clear_tmperature();
  static const int kTmperatureFieldNumber = 8;
  inline float tmperature() const;
  inline void set_tmperature(float value);

  // optional float humidity = 9 [default = 0];
  inline bool has_humidity() const;
  inline void clear_humidity();
  static const int kHumidityFieldNumber = 9;
  inline float humidity() const;
  inline void set_humidity(float value);

  // optional float pressure = 10 [default = 0];
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 10;
  inline float pressure() const;
  inline void set_pressure(float value);

  // optional float voltage = 11 [default = 0];
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 11;
  inline float voltage() const;
  inline void set_voltage(float value);

  // optional float pm2_5 = 12 [default = 0];
  inline bool has_pm2_5() const;
  inline void clear_pm2_5();
  static const int kPm25FieldNumber = 12;
  inline float pm2_5() const;
  inline void set_pm2_5(float value);

  // optional float longitude = 13 [default = 0];
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 13;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latituede = 14 [default = 0];
  inline bool has_latituede() const;
  inline void clear_latituede();
  static const int kLatituedeFieldNumber = 14;
  inline float latituede() const;
  inline void set_latituede(float value);

  // optional float temperatureOnboard = 15 [default = 0];
  inline bool has_temperatureonboard() const;
  inline void clear_temperatureonboard();
  static const int kTemperatureOnboardFieldNumber = 15;
  inline float temperatureonboard() const;
  inline void set_temperatureonboard(float value);

  // optional float humidityOnboard = 16 [default = 0];
  inline bool has_humidityonboard() const;
  inline void clear_humidityonboard();
  static const int kHumidityOnboardFieldNumber = 16;
  inline float humidityonboard() const;
  inline void set_humidityonboard(float value);

  // optional float tsp = 17 [default = 0];
  inline bool has_tsp() const;
  inline void clear_tsp();
  static const int kTspFieldNumber = 17;
  inline float tsp() const;
  inline void set_tsp(float value);

  // optional int64 time = 18 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 18;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustData)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_postion();
  inline void clear_has_postion();
  inline void set_has_noise();
  inline void clear_has_noise();
  inline void set_has_pm10();
  inline void clear_has_pm10();
  inline void set_has_windspeed();
  inline void clear_has_windspeed();
  inline void set_has_winddirection();
  inline void clear_has_winddirection();
  inline void set_has_tmperature();
  inline void clear_has_tmperature();
  inline void set_has_humidity();
  inline void clear_has_humidity();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_pm2_5();
  inline void clear_has_pm2_5();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latituede();
  inline void clear_has_latituede();
  inline void set_has_temperatureonboard();
  inline void clear_has_temperatureonboard();
  inline void set_has_humidityonboard();
  inline void clear_has_humidityonboard();
  inline void set_has_tsp();
  inline void clear_has_tsp();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  ::std::string* id_;
  ::std::string* postion_;
  float noise_;
  float pm10_;
  float windspeed_;
  float winddirection_;
  float tmperature_;
  float humidity_;
  float pressure_;
  float voltage_;
  float pm2_5_;
  float longitude_;
  float latituede_;
  float temperatureonboard_;
  float humidityonboard_;
  float tsp_;
  ::google::protobuf::int64 time_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustData* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustMassage : public ::google::protobuf::Message {
 public:
  RaisuDustMassage();
  virtual ~RaisuDustMassage();

  RaisuDustMassage(const RaisuDustMassage& from);

  inline RaisuDustMassage& operator=(const RaisuDustMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustMassage& default_instance();

  void Swap(RaisuDustMassage* other);

  // implements Message ----------------------------------------------

  RaisuDustMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustMassage& from);
  void MergeFrom(const RaisuDustMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const char* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // optional .com.arges.file.proto.RaisuDustData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::com::arges::file::proto::RaisuDustData& data() const;
  inline ::com::arges::file::proto::RaisuDustData* mutable_data();
  inline ::com::arges::file::proto::RaisuDustData* release_data();
  inline void set_allocated_data(::com::arges::file::proto::RaisuDustData* data);

  // optional .com.arges.file.proto.DeviceInfo devInfo = 5;
  inline bool has_devinfo() const;
  inline void clear_devinfo();
  static const int kDevInfoFieldNumber = 5;
  inline const ::com::arges::file::proto::DeviceInfo& devinfo() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devinfo();
  inline ::com::arges::file::proto::DeviceInfo* release_devinfo();
  inline void set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_devinfo();
  inline void clear_has_devinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::com::arges::file::proto::RaisuDustData* data_;
  ::com::arges::file::proto::DeviceInfo* devinfo_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustMassage* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustAlarmMessage : public ::google::protobuf::Message {
 public:
  RaisuDustAlarmMessage();
  virtual ~RaisuDustAlarmMessage();

  RaisuDustAlarmMessage(const RaisuDustAlarmMessage& from);

  inline RaisuDustAlarmMessage& operator=(const RaisuDustAlarmMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustAlarmMessage& default_instance();

  void Swap(RaisuDustAlarmMessage* other);

  // implements Message ----------------------------------------------

  RaisuDustAlarmMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustAlarmMessage& from);
  void MergeFrom(const RaisuDustAlarmMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 alarmCap = 1 [default = -1];
  inline bool has_alarmcap() const;
  inline void clear_alarmcap();
  static const int kAlarmCapFieldNumber = 1;
  inline ::google::protobuf::int32 alarmcap() const;
  inline void set_alarmcap(::google::protobuf::int32 value);

  // optional float alarmNum = 2 [default = -1];
  inline bool has_alarmnum() const;
  inline void clear_alarmnum();
  static const int kAlarmNumFieldNumber = 2;
  inline float alarmnum() const;
  inline void set_alarmnum(float value);

  // optional int32 alarmType = 3 [default = -1];
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  inline ::google::protobuf::int32 alarmtype() const;
  inline void set_alarmtype(::google::protobuf::int32 value);

  // optional string code = 4 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional int64 time = 5 [default = -1];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string sn = 6 [default = ""];
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 6;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // optional float standardNum = 7 [default = -1];
  inline bool has_standardnum() const;
  inline void clear_standardnum();
  static const int kStandardNumFieldNumber = 7;
  inline float standardnum() const;
  inline void set_standardnum(float value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustAlarmMessage)
 private:
  inline void set_has_alarmcap();
  inline void clear_has_alarmcap();
  inline void set_has_alarmnum();
  inline void clear_has_alarmnum();
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_standardnum();
  inline void clear_has_standardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 alarmcap_;
  float alarmnum_;
  ::std::string* code_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 alarmtype_;
  float standardnum_;
  ::std::string* sn_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustAlarmMessage* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustPlanData : public ::google::protobuf::Message {
 public:
  RaisuDustPlanData();
  virtual ~RaisuDustPlanData();

  RaisuDustPlanData(const RaisuDustPlanData& from);

  inline RaisuDustPlanData& operator=(const RaisuDustPlanData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustPlanData& default_instance();

  void Swap(RaisuDustPlanData* other);

  // implements Message ----------------------------------------------

  RaisuDustPlanData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustPlanData& from);
  void MergeFrom(const RaisuDustPlanData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string code = 2 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string sn = 3 [default = ""];
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 3;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // optional float humidityHigh = 4 [default = 100000];
  inline bool has_humidityhigh() const;
  inline void clear_humidityhigh();
  static const int kHumidityHighFieldNumber = 4;
  inline float humidityhigh() const;
  inline void set_humidityhigh(float value);

  // optional float humidityLower = 5 [default = 100000];
  inline bool has_humiditylower() const;
  inline void clear_humiditylower();
  static const int kHumidityLowerFieldNumber = 5;
  inline float humiditylower() const;
  inline void set_humiditylower(float value);

  // optional float noiseHigh = 6 [default = 100000];
  inline bool has_noisehigh() const;
  inline void clear_noisehigh();
  static const int kNoiseHighFieldNumber = 6;
  inline float noisehigh() const;
  inline void set_noisehigh(float value);

  // optional float noiseLower = 7 [default = 100000];
  inline bool has_noiselower() const;
  inline void clear_noiselower();
  static const int kNoiseLowerFieldNumber = 7;
  inline float noiselower() const;
  inline void set_noiselower(float value);

  // optional float pm10High = 8 [default = 100000];
  inline bool has_pm10high() const;
  inline void clear_pm10high();
  static const int kPm10HighFieldNumber = 8;
  inline float pm10high() const;
  inline void set_pm10high(float value);

  // optional float pm10Lower = 9 [default = 100000];
  inline bool has_pm10lower() const;
  inline void clear_pm10lower();
  static const int kPm10LowerFieldNumber = 9;
  inline float pm10lower() const;
  inline void set_pm10lower(float value);

  // optional float pm2_5_high = 10 [default = 100000];
  inline bool has_pm2_5_high() const;
  inline void clear_pm2_5_high();
  static const int kPm25HighFieldNumber = 10;
  inline float pm2_5_high() const;
  inline void set_pm2_5_high(float value);

  // optional float pm2_5_lower = 11 [default = 100000];
  inline bool has_pm2_5_lower() const;
  inline void clear_pm2_5_lower();
  static const int kPm25LowerFieldNumber = 11;
  inline float pm2_5_lower() const;
  inline void set_pm2_5_lower(float value);

  // optional float pressureHigh = 12 [default = 100000];
  inline bool has_pressurehigh() const;
  inline void clear_pressurehigh();
  static const int kPressureHighFieldNumber = 12;
  inline float pressurehigh() const;
  inline void set_pressurehigh(float value);

  // optional float pressureLower = 13 [default = 100000];
  inline bool has_pressurelower() const;
  inline void clear_pressurelower();
  static const int kPressureLowerFieldNumber = 13;
  inline float pressurelower() const;
  inline void set_pressurelower(float value);

  // optional float tmperatureHigh = 14 [default = 100000];
  inline bool has_tmperaturehigh() const;
  inline void clear_tmperaturehigh();
  static const int kTmperatureHighFieldNumber = 14;
  inline float tmperaturehigh() const;
  inline void set_tmperaturehigh(float value);

  // optional float tmperatureLower = 15 [default = 100000];
  inline bool has_tmperaturelower() const;
  inline void clear_tmperaturelower();
  static const int kTmperatureLowerFieldNumber = 15;
  inline float tmperaturelower() const;
  inline void set_tmperaturelower(float value);

  // optional float tspHigh = 16 [default = 100000];
  inline bool has_tsphigh() const;
  inline void clear_tsphigh();
  static const int kTspHighFieldNumber = 16;
  inline float tsphigh() const;
  inline void set_tsphigh(float value);

  // optional float tspLower = 17 [default = 100000];
  inline bool has_tsplower() const;
  inline void clear_tsplower();
  static const int kTspLowerFieldNumber = 17;
  inline float tsplower() const;
  inline void set_tsplower(float value);

  // optional float voltageHigh = 18 [default = 100000];
  inline bool has_voltagehigh() const;
  inline void clear_voltagehigh();
  static const int kVoltageHighFieldNumber = 18;
  inline float voltagehigh() const;
  inline void set_voltagehigh(float value);

  // optional float voltageLower = 19 [default = 100000];
  inline bool has_voltagelower() const;
  inline void clear_voltagelower();
  static const int kVoltageLowerFieldNumber = 19;
  inline float voltagelower() const;
  inline void set_voltagelower(float value);

  // optional float windDirectionHigh = 20 [default = 100000];
  inline bool has_winddirectionhigh() const;
  inline void clear_winddirectionhigh();
  static const int kWindDirectionHighFieldNumber = 20;
  inline float winddirectionhigh() const;
  inline void set_winddirectionhigh(float value);

  // optional float windDirectionLower = 21 [default = 100000];
  inline bool has_winddirectionlower() const;
  inline void clear_winddirectionlower();
  static const int kWindDirectionLowerFieldNumber = 21;
  inline float winddirectionlower() const;
  inline void set_winddirectionlower(float value);

  // optional float windSpeedHigh = 22 [default = 100000];
  inline bool has_windspeedhigh() const;
  inline void clear_windspeedhigh();
  static const int kWindSpeedHighFieldNumber = 22;
  inline float windspeedhigh() const;
  inline void set_windspeedhigh(float value);

  // optional float windSpeedLower = 23 [default = 100000];
  inline bool has_windspeedlower() const;
  inline void clear_windspeedlower();
  static const int kWindSpeedLowerFieldNumber = 23;
  inline float windspeedlower() const;
  inline void set_windspeedlower(float value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustPlanData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_humidityhigh();
  inline void clear_has_humidityhigh();
  inline void set_has_humiditylower();
  inline void clear_has_humiditylower();
  inline void set_has_noisehigh();
  inline void clear_has_noisehigh();
  inline void set_has_noiselower();
  inline void clear_has_noiselower();
  inline void set_has_pm10high();
  inline void clear_has_pm10high();
  inline void set_has_pm10lower();
  inline void clear_has_pm10lower();
  inline void set_has_pm2_5_high();
  inline void clear_has_pm2_5_high();
  inline void set_has_pm2_5_lower();
  inline void clear_has_pm2_5_lower();
  inline void set_has_pressurehigh();
  inline void clear_has_pressurehigh();
  inline void set_has_pressurelower();
  inline void clear_has_pressurelower();
  inline void set_has_tmperaturehigh();
  inline void clear_has_tmperaturehigh();
  inline void set_has_tmperaturelower();
  inline void clear_has_tmperaturelower();
  inline void set_has_tsphigh();
  inline void clear_has_tsphigh();
  inline void set_has_tsplower();
  inline void clear_has_tsplower();
  inline void set_has_voltagehigh();
  inline void clear_has_voltagehigh();
  inline void set_has_voltagelower();
  inline void clear_has_voltagelower();
  inline void set_has_winddirectionhigh();
  inline void clear_has_winddirectionhigh();
  inline void set_has_winddirectionlower();
  inline void clear_has_winddirectionlower();
  inline void set_has_windspeedhigh();
  inline void clear_has_windspeedhigh();
  inline void set_has_windspeedlower();
  inline void clear_has_windspeedlower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* code_;
  ::std::string* sn_;
  float humidityhigh_;
  float humiditylower_;
  float noisehigh_;
  float noiselower_;
  float pm10high_;
  float pm10lower_;
  float pm2_5_high_;
  float pm2_5_lower_;
  float pressurehigh_;
  float pressurelower_;
  float tmperaturehigh_;
  float tmperaturelower_;
  float tsphigh_;
  float tsplower_;
  float voltagehigh_;
  float voltagelower_;
  float winddirectionhigh_;
  float winddirectionlower_;
  float windspeedhigh_;
  float windspeedlower_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustPlanData* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustAlarmPlanMessage : public ::google::protobuf::Message {
 public:
  RaisuDustAlarmPlanMessage();
  virtual ~RaisuDustAlarmPlanMessage();

  RaisuDustAlarmPlanMessage(const RaisuDustAlarmPlanMessage& from);

  inline RaisuDustAlarmPlanMessage& operator=(const RaisuDustAlarmPlanMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustAlarmPlanMessage& default_instance();

  void Swap(RaisuDustAlarmPlanMessage* other);

  // implements Message ----------------------------------------------

  RaisuDustAlarmPlanMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustAlarmPlanMessage& from);
  void MergeFrom(const RaisuDustAlarmPlanMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 4;
  inline const ::com::arges::file::proto::RaisuDustPlanData& datas(int index) const;
  inline ::com::arges::file::proto::RaisuDustPlanData* mutable_datas(int index);
  inline ::com::arges::file::proto::RaisuDustPlanData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RaisuDustPlanData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RaisuDustPlanData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustAlarmPlanMessage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RaisuDustPlanData > datas_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustAlarmPlanMessage* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustNoiseData : public ::google::protobuf::Message {
 public:
  RaisuDustNoiseData();
  virtual ~RaisuDustNoiseData();

  RaisuDustNoiseData(const RaisuDustNoiseData& from);

  inline RaisuDustNoiseData& operator=(const RaisuDustNoiseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustNoiseData& default_instance();

  void Swap(RaisuDustNoiseData* other);

  // implements Message ----------------------------------------------

  RaisuDustNoiseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustNoiseData& from);
  void MergeFrom(const RaisuDustNoiseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string id = 2 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional float longitude = 3 [default = 0];
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 4 [default = 0];
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional string date = 5 [default = ""];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 5;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // optional string headerFile = 6 [default = ""];
  inline bool has_headerfile() const;
  inline void clear_headerfile();
  static const int kHeaderFileFieldNumber = 6;
  inline const ::std::string& headerfile() const;
  inline void set_headerfile(const ::std::string& value);
  inline void set_headerfile(const char* value);
  inline void set_headerfile(const char* value, size_t size);
  inline ::std::string* mutable_headerfile();
  inline ::std::string* release_headerfile();
  inline void set_allocated_headerfile(::std::string* headerfile);

  // optional string filePath = 7 [default = ""];
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 7;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // optional float threshold = 8 [default = 0];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 8;
  inline float threshold() const;
  inline void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustNoiseData)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_headerfile();
  inline void clear_has_headerfile();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  ::std::string* id_;
  float longitude_;
  float latitude_;
  ::std::string* date_;
  ::std::string* headerfile_;
  ::std::string* filepath_;
  float threshold_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustNoiseData* default_instance_;
};
// -------------------------------------------------------------------

class RaisuDustNoiseThreshold : public ::google::protobuf::Message {
 public:
  RaisuDustNoiseThreshold();
  virtual ~RaisuDustNoiseThreshold();

  RaisuDustNoiseThreshold(const RaisuDustNoiseThreshold& from);

  inline RaisuDustNoiseThreshold& operator=(const RaisuDustNoiseThreshold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaisuDustNoiseThreshold& default_instance();

  void Swap(RaisuDustNoiseThreshold* other);

  // implements Message ----------------------------------------------

  RaisuDustNoiseThreshold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaisuDustNoiseThreshold& from);
  void MergeFrom(const RaisuDustNoiseThreshold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RaisuDustNoiseThreshold)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  float value_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static RaisuDustNoiseThreshold* default_instance_;
};
// -------------------------------------------------------------------

class GetRaisuDustNoiseThreshold : public ::google::protobuf::Message {
 public:
  GetRaisuDustNoiseThreshold();
  virtual ~GetRaisuDustNoiseThreshold();

  GetRaisuDustNoiseThreshold(const GetRaisuDustNoiseThreshold& from);

  inline GetRaisuDustNoiseThreshold& operator=(const GetRaisuDustNoiseThreshold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRaisuDustNoiseThreshold& default_instance();

  void Swap(GetRaisuDustNoiseThreshold* other);

  // implements Message ----------------------------------------------

  GetRaisuDustNoiseThreshold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRaisuDustNoiseThreshold& from);
  void MergeFrom(const GetRaisuDustNoiseThreshold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string id = 2 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.GetRaisuDustNoiseThreshold)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_AssignDesc_RaiseDustDataBean_2eproto();
  friend void protobuf_ShutdownFile_RaiseDustDataBean_2eproto();

  void InitAsDefaultInstance();
  static GetRaisuDustNoiseThreshold* default_instance_;
};
// ===================================================================


// ===================================================================

// RaisuDustData

// optional string deviceCode = 1 [default = ""];
inline bool RaisuDustData::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustData::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustData::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustData::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& RaisuDustData::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.deviceCode)
  return *devicecode_;
}
inline void RaisuDustData::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.deviceCode)
}
inline void RaisuDustData::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustData.deviceCode)
}
inline void RaisuDustData::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustData.deviceCode)
}
inline ::std::string* RaisuDustData::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustData.deviceCode)
  return devicecode_;
}
inline ::std::string* RaisuDustData::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustData::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustData.deviceCode)
}

// optional string id = 2 [default = ""];
inline bool RaisuDustData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustData::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RaisuDustData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.id)
  return *id_;
}
inline void RaisuDustData::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.id)
}
inline void RaisuDustData::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustData.id)
}
inline void RaisuDustData::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustData.id)
}
inline ::std::string* RaisuDustData::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustData.id)
  return id_;
}
inline ::std::string* RaisuDustData::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustData::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustData.id)
}

// optional string postion = 3 [default = ""];
inline bool RaisuDustData::has_postion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustData::set_has_postion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustData::clear_has_postion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustData::clear_postion() {
  if (postion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postion_->clear();
  }
  clear_has_postion();
}
inline const ::std::string& RaisuDustData::postion() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.postion)
  return *postion_;
}
inline void RaisuDustData::set_postion(const ::std::string& value) {
  set_has_postion();
  if (postion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postion_ = new ::std::string;
  }
  postion_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.postion)
}
inline void RaisuDustData::set_postion(const char* value) {
  set_has_postion();
  if (postion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postion_ = new ::std::string;
  }
  postion_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustData.postion)
}
inline void RaisuDustData::set_postion(const char* value, size_t size) {
  set_has_postion();
  if (postion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postion_ = new ::std::string;
  }
  postion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustData.postion)
}
inline ::std::string* RaisuDustData::mutable_postion() {
  set_has_postion();
  if (postion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustData.postion)
  return postion_;
}
inline ::std::string* RaisuDustData::release_postion() {
  clear_has_postion();
  if (postion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = postion_;
    postion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustData::set_allocated_postion(::std::string* postion) {
  if (postion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postion_;
  }
  if (postion) {
    set_has_postion();
    postion_ = postion;
  } else {
    clear_has_postion();
    postion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustData.postion)
}

// optional float noise = 4 [default = 0];
inline bool RaisuDustData::has_noise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaisuDustData::set_has_noise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaisuDustData::clear_has_noise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaisuDustData::clear_noise() {
  noise_ = 0;
  clear_has_noise();
}
inline float RaisuDustData::noise() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.noise)
  return noise_;
}
inline void RaisuDustData::set_noise(float value) {
  set_has_noise();
  noise_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.noise)
}

// optional float pm10 = 5 [default = 0];
inline bool RaisuDustData::has_pm10() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaisuDustData::set_has_pm10() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaisuDustData::clear_has_pm10() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaisuDustData::clear_pm10() {
  pm10_ = 0;
  clear_has_pm10();
}
inline float RaisuDustData::pm10() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.pm10)
  return pm10_;
}
inline void RaisuDustData::set_pm10(float value) {
  set_has_pm10();
  pm10_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.pm10)
}

// optional float windSpeed = 6 [default = 0];
inline bool RaisuDustData::has_windspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaisuDustData::set_has_windspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaisuDustData::clear_has_windspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaisuDustData::clear_windspeed() {
  windspeed_ = 0;
  clear_has_windspeed();
}
inline float RaisuDustData::windspeed() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.windSpeed)
  return windspeed_;
}
inline void RaisuDustData::set_windspeed(float value) {
  set_has_windspeed();
  windspeed_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.windSpeed)
}

// optional float windDirection = 7 [default = 0];
inline bool RaisuDustData::has_winddirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RaisuDustData::set_has_winddirection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RaisuDustData::clear_has_winddirection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RaisuDustData::clear_winddirection() {
  winddirection_ = 0;
  clear_has_winddirection();
}
inline float RaisuDustData::winddirection() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.windDirection)
  return winddirection_;
}
inline void RaisuDustData::set_winddirection(float value) {
  set_has_winddirection();
  winddirection_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.windDirection)
}

// optional float tmperature = 8 [default = 0];
inline bool RaisuDustData::has_tmperature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RaisuDustData::set_has_tmperature() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RaisuDustData::clear_has_tmperature() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RaisuDustData::clear_tmperature() {
  tmperature_ = 0;
  clear_has_tmperature();
}
inline float RaisuDustData::tmperature() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.tmperature)
  return tmperature_;
}
inline void RaisuDustData::set_tmperature(float value) {
  set_has_tmperature();
  tmperature_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.tmperature)
}

// optional float humidity = 9 [default = 0];
inline bool RaisuDustData::has_humidity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RaisuDustData::set_has_humidity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RaisuDustData::clear_has_humidity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RaisuDustData::clear_humidity() {
  humidity_ = 0;
  clear_has_humidity();
}
inline float RaisuDustData::humidity() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.humidity)
  return humidity_;
}
inline void RaisuDustData::set_humidity(float value) {
  set_has_humidity();
  humidity_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.humidity)
}

// optional float pressure = 10 [default = 0];
inline bool RaisuDustData::has_pressure() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RaisuDustData::set_has_pressure() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RaisuDustData::clear_has_pressure() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RaisuDustData::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline float RaisuDustData::pressure() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.pressure)
  return pressure_;
}
inline void RaisuDustData::set_pressure(float value) {
  set_has_pressure();
  pressure_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.pressure)
}

// optional float voltage = 11 [default = 0];
inline bool RaisuDustData::has_voltage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RaisuDustData::set_has_voltage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RaisuDustData::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RaisuDustData::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline float RaisuDustData::voltage() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.voltage)
  return voltage_;
}
inline void RaisuDustData::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.voltage)
}

// optional float pm2_5 = 12 [default = 0];
inline bool RaisuDustData::has_pm2_5() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RaisuDustData::set_has_pm2_5() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RaisuDustData::clear_has_pm2_5() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RaisuDustData::clear_pm2_5() {
  pm2_5_ = 0;
  clear_has_pm2_5();
}
inline float RaisuDustData::pm2_5() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.pm2_5)
  return pm2_5_;
}
inline void RaisuDustData::set_pm2_5(float value) {
  set_has_pm2_5();
  pm2_5_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.pm2_5)
}

// optional float longitude = 13 [default = 0];
inline bool RaisuDustData::has_longitude() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RaisuDustData::set_has_longitude() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RaisuDustData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RaisuDustData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float RaisuDustData::longitude() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.longitude)
  return longitude_;
}
inline void RaisuDustData::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.longitude)
}

// optional float latituede = 14 [default = 0];
inline bool RaisuDustData::has_latituede() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RaisuDustData::set_has_latituede() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RaisuDustData::clear_has_latituede() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RaisuDustData::clear_latituede() {
  latituede_ = 0;
  clear_has_latituede();
}
inline float RaisuDustData::latituede() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.latituede)
  return latituede_;
}
inline void RaisuDustData::set_latituede(float value) {
  set_has_latituede();
  latituede_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.latituede)
}

// optional float temperatureOnboard = 15 [default = 0];
inline bool RaisuDustData::has_temperatureonboard() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RaisuDustData::set_has_temperatureonboard() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RaisuDustData::clear_has_temperatureonboard() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RaisuDustData::clear_temperatureonboard() {
  temperatureonboard_ = 0;
  clear_has_temperatureonboard();
}
inline float RaisuDustData::temperatureonboard() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.temperatureOnboard)
  return temperatureonboard_;
}
inline void RaisuDustData::set_temperatureonboard(float value) {
  set_has_temperatureonboard();
  temperatureonboard_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.temperatureOnboard)
}

// optional float humidityOnboard = 16 [default = 0];
inline bool RaisuDustData::has_humidityonboard() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RaisuDustData::set_has_humidityonboard() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RaisuDustData::clear_has_humidityonboard() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RaisuDustData::clear_humidityonboard() {
  humidityonboard_ = 0;
  clear_has_humidityonboard();
}
inline float RaisuDustData::humidityonboard() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.humidityOnboard)
  return humidityonboard_;
}
inline void RaisuDustData::set_humidityonboard(float value) {
  set_has_humidityonboard();
  humidityonboard_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.humidityOnboard)
}

// optional float tsp = 17 [default = 0];
inline bool RaisuDustData::has_tsp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RaisuDustData::set_has_tsp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RaisuDustData::clear_has_tsp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RaisuDustData::clear_tsp() {
  tsp_ = 0;
  clear_has_tsp();
}
inline float RaisuDustData::tsp() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.tsp)
  return tsp_;
}
inline void RaisuDustData::set_tsp(float value) {
  set_has_tsp();
  tsp_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.tsp)
}

// optional int64 time = 18 [default = 0];
inline bool RaisuDustData::has_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RaisuDustData::set_has_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RaisuDustData::clear_has_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RaisuDustData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RaisuDustData::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustData.time)
  return time_;
}
inline void RaisuDustData::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustData.time)
}

// -------------------------------------------------------------------

// RaisuDustMassage

// optional int32 requestType = 1 [default = -1];
inline bool RaisuDustMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 RaisuDustMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustMassage.requestType)
  return requesttype_;
}
inline void RaisuDustMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool RaisuDustMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RaisuDustMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustMassage.result)
  return result_;
}
inline void RaisuDustMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustMassage.result)
}

// optional string resultDescribe = 3 [default = ""];
inline bool RaisuDustMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& RaisuDustMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustMassage.resultDescribe)
  return *resultdescribe_;
}
inline void RaisuDustMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustMassage.resultDescribe)
}
inline void RaisuDustMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustMassage.resultDescribe)
}
inline void RaisuDustMassage::set_resultdescribe(const char* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustMassage.resultDescribe)
}
inline ::std::string* RaisuDustMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* RaisuDustMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustMassage.resultDescribe)
}

// optional .com.arges.file.proto.RaisuDustData data = 4;
inline bool RaisuDustMassage::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaisuDustMassage::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaisuDustMassage::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaisuDustMassage::clear_data() {
  if (data_ != NULL) data_->::com::arges::file::proto::RaisuDustData::Clear();
  clear_has_data();
}
inline const ::com::arges::file::proto::RaisuDustData& RaisuDustMassage::data() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustMassage.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::com::arges::file::proto::RaisuDustData* RaisuDustMassage::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::com::arges::file::proto::RaisuDustData;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustMassage.data)
  return data_;
}
inline ::com::arges::file::proto::RaisuDustData* RaisuDustMassage::release_data() {
  clear_has_data();
  ::com::arges::file::proto::RaisuDustData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void RaisuDustMassage::set_allocated_data(::com::arges::file::proto::RaisuDustData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustMassage.data)
}

// optional .com.arges.file.proto.DeviceInfo devInfo = 5;
inline bool RaisuDustMassage::has_devinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaisuDustMassage::set_has_devinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaisuDustMassage::clear_has_devinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaisuDustMassage::clear_devinfo() {
  if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devinfo();
}
inline const ::com::arges::file::proto::DeviceInfo& RaisuDustMassage::devinfo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustMassage.devInfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* RaisuDustMassage::mutable_devinfo() {
  set_has_devinfo();
  if (devinfo_ == NULL) devinfo_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustMassage.devInfo)
  return devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* RaisuDustMassage::release_devinfo() {
  clear_has_devinfo();
  ::com::arges::file::proto::DeviceInfo* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
inline void RaisuDustMassage::set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    set_has_devinfo();
  } else {
    clear_has_devinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustMassage.devInfo)
}

// -------------------------------------------------------------------

// RaisuDustAlarmMessage

// optional int32 alarmCap = 1 [default = -1];
inline bool RaisuDustAlarmMessage::has_alarmcap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_alarmcap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustAlarmMessage::clear_has_alarmcap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustAlarmMessage::clear_alarmcap() {
  alarmcap_ = -1;
  clear_has_alarmcap();
}
inline ::google::protobuf::int32 RaisuDustAlarmMessage::alarmcap() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.alarmCap)
  return alarmcap_;
}
inline void RaisuDustAlarmMessage::set_alarmcap(::google::protobuf::int32 value) {
  set_has_alarmcap();
  alarmcap_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.alarmCap)
}

// optional float alarmNum = 2 [default = -1];
inline bool RaisuDustAlarmMessage::has_alarmnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_alarmnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustAlarmMessage::clear_has_alarmnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustAlarmMessage::clear_alarmnum() {
  alarmnum_ = -1;
  clear_has_alarmnum();
}
inline float RaisuDustAlarmMessage::alarmnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.alarmNum)
  return alarmnum_;
}
inline void RaisuDustAlarmMessage::set_alarmnum(float value) {
  set_has_alarmnum();
  alarmnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.alarmNum)
}

// optional int32 alarmType = 3 [default = -1];
inline bool RaisuDustAlarmMessage::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustAlarmMessage::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustAlarmMessage::clear_alarmtype() {
  alarmtype_ = -1;
  clear_has_alarmtype();
}
inline ::google::protobuf::int32 RaisuDustAlarmMessage::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.alarmType)
  return alarmtype_;
}
inline void RaisuDustAlarmMessage::set_alarmtype(::google::protobuf::int32 value) {
  set_has_alarmtype();
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.alarmType)
}

// optional string code = 4 [default = ""];
inline bool RaisuDustAlarmMessage::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaisuDustAlarmMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaisuDustAlarmMessage::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& RaisuDustAlarmMessage::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.code)
  return *code_;
}
inline void RaisuDustAlarmMessage::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.code)
}
inline void RaisuDustAlarmMessage::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustAlarmMessage.code)
}
inline void RaisuDustAlarmMessage::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustAlarmMessage.code)
}
inline ::std::string* RaisuDustAlarmMessage::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustAlarmMessage.code)
  return code_;
}
inline ::std::string* RaisuDustAlarmMessage::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustAlarmMessage::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustAlarmMessage.code)
}

// optional int64 time = 5 [default = -1];
inline bool RaisuDustAlarmMessage::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaisuDustAlarmMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaisuDustAlarmMessage::clear_time() {
  time_ = GOOGLE_LONGLONG(-1);
  clear_has_time();
}
inline ::google::protobuf::int64 RaisuDustAlarmMessage::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.time)
  return time_;
}
inline void RaisuDustAlarmMessage::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.time)
}

// optional string sn = 6 [default = ""];
inline bool RaisuDustAlarmMessage::has_sn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_sn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaisuDustAlarmMessage::clear_has_sn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaisuDustAlarmMessage::clear_sn() {
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& RaisuDustAlarmMessage::sn() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.sn)
  return *sn_;
}
inline void RaisuDustAlarmMessage::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.sn)
}
inline void RaisuDustAlarmMessage::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustAlarmMessage.sn)
}
inline void RaisuDustAlarmMessage::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustAlarmMessage.sn)
}
inline ::std::string* RaisuDustAlarmMessage::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustAlarmMessage.sn)
  return sn_;
}
inline ::std::string* RaisuDustAlarmMessage::release_sn() {
  clear_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustAlarmMessage::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustAlarmMessage.sn)
}

// optional float standardNum = 7 [default = -1];
inline bool RaisuDustAlarmMessage::has_standardnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RaisuDustAlarmMessage::set_has_standardnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RaisuDustAlarmMessage::clear_has_standardnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RaisuDustAlarmMessage::clear_standardnum() {
  standardnum_ = -1;
  clear_has_standardnum();
}
inline float RaisuDustAlarmMessage::standardnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmMessage.standardNum)
  return standardnum_;
}
inline void RaisuDustAlarmMessage::set_standardnum(float value) {
  set_has_standardnum();
  standardnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmMessage.standardNum)
}

// -------------------------------------------------------------------

// RaisuDustPlanData

// optional int64 id = 1 [default = -1];
inline bool RaisuDustPlanData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustPlanData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustPlanData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustPlanData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 RaisuDustPlanData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.id)
  return id_;
}
inline void RaisuDustPlanData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.id)
}

// optional string code = 2 [default = ""];
inline bool RaisuDustPlanData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustPlanData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustPlanData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustPlanData::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& RaisuDustPlanData::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.code)
  return *code_;
}
inline void RaisuDustPlanData::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.code)
}
inline void RaisuDustPlanData::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustPlanData.code)
}
inline void RaisuDustPlanData::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustPlanData.code)
}
inline ::std::string* RaisuDustPlanData::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustPlanData.code)
  return code_;
}
inline ::std::string* RaisuDustPlanData::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustPlanData::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustPlanData.code)
}

// optional string sn = 3 [default = ""];
inline bool RaisuDustPlanData::has_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustPlanData::set_has_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustPlanData::clear_has_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustPlanData::clear_sn() {
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& RaisuDustPlanData::sn() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.sn)
  return *sn_;
}
inline void RaisuDustPlanData::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.sn)
}
inline void RaisuDustPlanData::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustPlanData.sn)
}
inline void RaisuDustPlanData::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustPlanData.sn)
}
inline ::std::string* RaisuDustPlanData::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustPlanData.sn)
  return sn_;
}
inline ::std::string* RaisuDustPlanData::release_sn() {
  clear_has_sn();
  if (sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustPlanData::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustPlanData.sn)
}

// optional float humidityHigh = 4 [default = 100000];
inline bool RaisuDustPlanData::has_humidityhigh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaisuDustPlanData::set_has_humidityhigh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaisuDustPlanData::clear_has_humidityhigh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaisuDustPlanData::clear_humidityhigh() {
  humidityhigh_ = 100000;
  clear_has_humidityhigh();
}
inline float RaisuDustPlanData::humidityhigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.humidityHigh)
  return humidityhigh_;
}
inline void RaisuDustPlanData::set_humidityhigh(float value) {
  set_has_humidityhigh();
  humidityhigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.humidityHigh)
}

// optional float humidityLower = 5 [default = 100000];
inline bool RaisuDustPlanData::has_humiditylower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaisuDustPlanData::set_has_humiditylower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaisuDustPlanData::clear_has_humiditylower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaisuDustPlanData::clear_humiditylower() {
  humiditylower_ = 100000;
  clear_has_humiditylower();
}
inline float RaisuDustPlanData::humiditylower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.humidityLower)
  return humiditylower_;
}
inline void RaisuDustPlanData::set_humiditylower(float value) {
  set_has_humiditylower();
  humiditylower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.humidityLower)
}

// optional float noiseHigh = 6 [default = 100000];
inline bool RaisuDustPlanData::has_noisehigh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaisuDustPlanData::set_has_noisehigh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaisuDustPlanData::clear_has_noisehigh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaisuDustPlanData::clear_noisehigh() {
  noisehigh_ = 100000;
  clear_has_noisehigh();
}
inline float RaisuDustPlanData::noisehigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.noiseHigh)
  return noisehigh_;
}
inline void RaisuDustPlanData::set_noisehigh(float value) {
  set_has_noisehigh();
  noisehigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.noiseHigh)
}

// optional float noiseLower = 7 [default = 100000];
inline bool RaisuDustPlanData::has_noiselower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RaisuDustPlanData::set_has_noiselower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RaisuDustPlanData::clear_has_noiselower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RaisuDustPlanData::clear_noiselower() {
  noiselower_ = 100000;
  clear_has_noiselower();
}
inline float RaisuDustPlanData::noiselower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.noiseLower)
  return noiselower_;
}
inline void RaisuDustPlanData::set_noiselower(float value) {
  set_has_noiselower();
  noiselower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.noiseLower)
}

// optional float pm10High = 8 [default = 100000];
inline bool RaisuDustPlanData::has_pm10high() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RaisuDustPlanData::set_has_pm10high() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RaisuDustPlanData::clear_has_pm10high() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RaisuDustPlanData::clear_pm10high() {
  pm10high_ = 100000;
  clear_has_pm10high();
}
inline float RaisuDustPlanData::pm10high() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pm10High)
  return pm10high_;
}
inline void RaisuDustPlanData::set_pm10high(float value) {
  set_has_pm10high();
  pm10high_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pm10High)
}

// optional float pm10Lower = 9 [default = 100000];
inline bool RaisuDustPlanData::has_pm10lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RaisuDustPlanData::set_has_pm10lower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RaisuDustPlanData::clear_has_pm10lower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RaisuDustPlanData::clear_pm10lower() {
  pm10lower_ = 100000;
  clear_has_pm10lower();
}
inline float RaisuDustPlanData::pm10lower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pm10Lower)
  return pm10lower_;
}
inline void RaisuDustPlanData::set_pm10lower(float value) {
  set_has_pm10lower();
  pm10lower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pm10Lower)
}

// optional float pm2_5_high = 10 [default = 100000];
inline bool RaisuDustPlanData::has_pm2_5_high() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RaisuDustPlanData::set_has_pm2_5_high() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RaisuDustPlanData::clear_has_pm2_5_high() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RaisuDustPlanData::clear_pm2_5_high() {
  pm2_5_high_ = 100000;
  clear_has_pm2_5_high();
}
inline float RaisuDustPlanData::pm2_5_high() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pm2_5_high)
  return pm2_5_high_;
}
inline void RaisuDustPlanData::set_pm2_5_high(float value) {
  set_has_pm2_5_high();
  pm2_5_high_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pm2_5_high)
}

// optional float pm2_5_lower = 11 [default = 100000];
inline bool RaisuDustPlanData::has_pm2_5_lower() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RaisuDustPlanData::set_has_pm2_5_lower() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RaisuDustPlanData::clear_has_pm2_5_lower() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RaisuDustPlanData::clear_pm2_5_lower() {
  pm2_5_lower_ = 100000;
  clear_has_pm2_5_lower();
}
inline float RaisuDustPlanData::pm2_5_lower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pm2_5_lower)
  return pm2_5_lower_;
}
inline void RaisuDustPlanData::set_pm2_5_lower(float value) {
  set_has_pm2_5_lower();
  pm2_5_lower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pm2_5_lower)
}

// optional float pressureHigh = 12 [default = 100000];
inline bool RaisuDustPlanData::has_pressurehigh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RaisuDustPlanData::set_has_pressurehigh() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RaisuDustPlanData::clear_has_pressurehigh() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RaisuDustPlanData::clear_pressurehigh() {
  pressurehigh_ = 100000;
  clear_has_pressurehigh();
}
inline float RaisuDustPlanData::pressurehigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pressureHigh)
  return pressurehigh_;
}
inline void RaisuDustPlanData::set_pressurehigh(float value) {
  set_has_pressurehigh();
  pressurehigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pressureHigh)
}

// optional float pressureLower = 13 [default = 100000];
inline bool RaisuDustPlanData::has_pressurelower() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RaisuDustPlanData::set_has_pressurelower() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RaisuDustPlanData::clear_has_pressurelower() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RaisuDustPlanData::clear_pressurelower() {
  pressurelower_ = 100000;
  clear_has_pressurelower();
}
inline float RaisuDustPlanData::pressurelower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.pressureLower)
  return pressurelower_;
}
inline void RaisuDustPlanData::set_pressurelower(float value) {
  set_has_pressurelower();
  pressurelower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.pressureLower)
}

// optional float tmperatureHigh = 14 [default = 100000];
inline bool RaisuDustPlanData::has_tmperaturehigh() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RaisuDustPlanData::set_has_tmperaturehigh() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RaisuDustPlanData::clear_has_tmperaturehigh() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RaisuDustPlanData::clear_tmperaturehigh() {
  tmperaturehigh_ = 100000;
  clear_has_tmperaturehigh();
}
inline float RaisuDustPlanData::tmperaturehigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.tmperatureHigh)
  return tmperaturehigh_;
}
inline void RaisuDustPlanData::set_tmperaturehigh(float value) {
  set_has_tmperaturehigh();
  tmperaturehigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.tmperatureHigh)
}

// optional float tmperatureLower = 15 [default = 100000];
inline bool RaisuDustPlanData::has_tmperaturelower() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RaisuDustPlanData::set_has_tmperaturelower() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RaisuDustPlanData::clear_has_tmperaturelower() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RaisuDustPlanData::clear_tmperaturelower() {
  tmperaturelower_ = 100000;
  clear_has_tmperaturelower();
}
inline float RaisuDustPlanData::tmperaturelower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.tmperatureLower)
  return tmperaturelower_;
}
inline void RaisuDustPlanData::set_tmperaturelower(float value) {
  set_has_tmperaturelower();
  tmperaturelower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.tmperatureLower)
}

// optional float tspHigh = 16 [default = 100000];
inline bool RaisuDustPlanData::has_tsphigh() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RaisuDustPlanData::set_has_tsphigh() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RaisuDustPlanData::clear_has_tsphigh() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RaisuDustPlanData::clear_tsphigh() {
  tsphigh_ = 100000;
  clear_has_tsphigh();
}
inline float RaisuDustPlanData::tsphigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.tspHigh)
  return tsphigh_;
}
inline void RaisuDustPlanData::set_tsphigh(float value) {
  set_has_tsphigh();
  tsphigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.tspHigh)
}

// optional float tspLower = 17 [default = 100000];
inline bool RaisuDustPlanData::has_tsplower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RaisuDustPlanData::set_has_tsplower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RaisuDustPlanData::clear_has_tsplower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RaisuDustPlanData::clear_tsplower() {
  tsplower_ = 100000;
  clear_has_tsplower();
}
inline float RaisuDustPlanData::tsplower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.tspLower)
  return tsplower_;
}
inline void RaisuDustPlanData::set_tsplower(float value) {
  set_has_tsplower();
  tsplower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.tspLower)
}

// optional float voltageHigh = 18 [default = 100000];
inline bool RaisuDustPlanData::has_voltagehigh() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RaisuDustPlanData::set_has_voltagehigh() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RaisuDustPlanData::clear_has_voltagehigh() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RaisuDustPlanData::clear_voltagehigh() {
  voltagehigh_ = 100000;
  clear_has_voltagehigh();
}
inline float RaisuDustPlanData::voltagehigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.voltageHigh)
  return voltagehigh_;
}
inline void RaisuDustPlanData::set_voltagehigh(float value) {
  set_has_voltagehigh();
  voltagehigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.voltageHigh)
}

// optional float voltageLower = 19 [default = 100000];
inline bool RaisuDustPlanData::has_voltagelower() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RaisuDustPlanData::set_has_voltagelower() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RaisuDustPlanData::clear_has_voltagelower() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RaisuDustPlanData::clear_voltagelower() {
  voltagelower_ = 100000;
  clear_has_voltagelower();
}
inline float RaisuDustPlanData::voltagelower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.voltageLower)
  return voltagelower_;
}
inline void RaisuDustPlanData::set_voltagelower(float value) {
  set_has_voltagelower();
  voltagelower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.voltageLower)
}

// optional float windDirectionHigh = 20 [default = 100000];
inline bool RaisuDustPlanData::has_winddirectionhigh() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RaisuDustPlanData::set_has_winddirectionhigh() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RaisuDustPlanData::clear_has_winddirectionhigh() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RaisuDustPlanData::clear_winddirectionhigh() {
  winddirectionhigh_ = 100000;
  clear_has_winddirectionhigh();
}
inline float RaisuDustPlanData::winddirectionhigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.windDirectionHigh)
  return winddirectionhigh_;
}
inline void RaisuDustPlanData::set_winddirectionhigh(float value) {
  set_has_winddirectionhigh();
  winddirectionhigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.windDirectionHigh)
}

// optional float windDirectionLower = 21 [default = 100000];
inline bool RaisuDustPlanData::has_winddirectionlower() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RaisuDustPlanData::set_has_winddirectionlower() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RaisuDustPlanData::clear_has_winddirectionlower() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RaisuDustPlanData::clear_winddirectionlower() {
  winddirectionlower_ = 100000;
  clear_has_winddirectionlower();
}
inline float RaisuDustPlanData::winddirectionlower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.windDirectionLower)
  return winddirectionlower_;
}
inline void RaisuDustPlanData::set_winddirectionlower(float value) {
  set_has_winddirectionlower();
  winddirectionlower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.windDirectionLower)
}

// optional float windSpeedHigh = 22 [default = 100000];
inline bool RaisuDustPlanData::has_windspeedhigh() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RaisuDustPlanData::set_has_windspeedhigh() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RaisuDustPlanData::clear_has_windspeedhigh() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RaisuDustPlanData::clear_windspeedhigh() {
  windspeedhigh_ = 100000;
  clear_has_windspeedhigh();
}
inline float RaisuDustPlanData::windspeedhigh() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.windSpeedHigh)
  return windspeedhigh_;
}
inline void RaisuDustPlanData::set_windspeedhigh(float value) {
  set_has_windspeedhigh();
  windspeedhigh_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.windSpeedHigh)
}

// optional float windSpeedLower = 23 [default = 100000];
inline bool RaisuDustPlanData::has_windspeedlower() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RaisuDustPlanData::set_has_windspeedlower() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RaisuDustPlanData::clear_has_windspeedlower() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RaisuDustPlanData::clear_windspeedlower() {
  windspeedlower_ = 100000;
  clear_has_windspeedlower();
}
inline float RaisuDustPlanData::windspeedlower() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustPlanData.windSpeedLower)
  return windspeedlower_;
}
inline void RaisuDustPlanData::set_windspeedlower(float value) {
  set_has_windspeedlower();
  windspeedlower_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustPlanData.windSpeedLower)
}

// -------------------------------------------------------------------

// RaisuDustAlarmPlanMessage

// optional int32 requestType = 1 [default = -1];
inline bool RaisuDustAlarmPlanMessage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustAlarmPlanMessage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustAlarmPlanMessage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustAlarmPlanMessage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 RaisuDustAlarmPlanMessage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmPlanMessage.requestType)
  return requesttype_;
}
inline void RaisuDustAlarmPlanMessage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmPlanMessage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool RaisuDustAlarmPlanMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustAlarmPlanMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustAlarmPlanMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustAlarmPlanMessage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RaisuDustAlarmPlanMessage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmPlanMessage.result)
  return result_;
}
inline void RaisuDustAlarmPlanMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmPlanMessage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool RaisuDustAlarmPlanMessage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustAlarmPlanMessage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustAlarmPlanMessage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustAlarmPlanMessage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& RaisuDustAlarmPlanMessage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
  return *resultdescribe_;
}
inline void RaisuDustAlarmPlanMessage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
}
inline void RaisuDustAlarmPlanMessage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
}
inline void RaisuDustAlarmPlanMessage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
}
inline ::std::string* RaisuDustAlarmPlanMessage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* RaisuDustAlarmPlanMessage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustAlarmPlanMessage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustAlarmPlanMessage.resultDescribe)
}

// repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
inline int RaisuDustAlarmPlanMessage::datas_size() const {
  return datas_.size();
}
inline void RaisuDustAlarmPlanMessage::clear_datas() {
  datas_.Clear();
}
inline const ::com::arges::file::proto::RaisuDustPlanData& RaisuDustAlarmPlanMessage::datas(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustAlarmPlanMessage.datas)
  return datas_.Get(index);
}
inline ::com::arges::file::proto::RaisuDustPlanData* RaisuDustAlarmPlanMessage::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustAlarmPlanMessage.datas)
  return datas_.Mutable(index);
}
inline ::com::arges::file::proto::RaisuDustPlanData* RaisuDustAlarmPlanMessage::add_datas() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RaisuDustAlarmPlanMessage.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RaisuDustPlanData >&
RaisuDustAlarmPlanMessage::datas() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RaisuDustAlarmPlanMessage.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RaisuDustPlanData >*
RaisuDustAlarmPlanMessage::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RaisuDustAlarmPlanMessage.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// RaisuDustNoiseData

// optional string deviceCode = 1 [default = ""];
inline bool RaisuDustNoiseData::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustNoiseData::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustNoiseData::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustNoiseData::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& RaisuDustNoiseData::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
  return *devicecode_;
}
inline void RaisuDustNoiseData::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
}
inline void RaisuDustNoiseData::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
}
inline void RaisuDustNoiseData::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
}
inline ::std::string* RaisuDustNoiseData::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
  return devicecode_;
}
inline ::std::string* RaisuDustNoiseData::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseData::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseData.deviceCode)
}

// optional string id = 2 [default = ""];
inline bool RaisuDustNoiseData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustNoiseData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustNoiseData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustNoiseData::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RaisuDustNoiseData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.id)
  return *id_;
}
inline void RaisuDustNoiseData::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.id)
}
inline void RaisuDustNoiseData::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseData.id)
}
inline void RaisuDustNoiseData::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseData.id)
}
inline ::std::string* RaisuDustNoiseData::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseData.id)
  return id_;
}
inline ::std::string* RaisuDustNoiseData::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseData::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseData.id)
}

// optional float longitude = 3 [default = 0];
inline bool RaisuDustNoiseData::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaisuDustNoiseData::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaisuDustNoiseData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaisuDustNoiseData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float RaisuDustNoiseData::longitude() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.longitude)
  return longitude_;
}
inline void RaisuDustNoiseData::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.longitude)
}

// optional float latitude = 4 [default = 0];
inline bool RaisuDustNoiseData::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaisuDustNoiseData::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaisuDustNoiseData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaisuDustNoiseData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float RaisuDustNoiseData::latitude() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.latitude)
  return latitude_;
}
inline void RaisuDustNoiseData::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.latitude)
}

// optional string date = 5 [default = ""];
inline bool RaisuDustNoiseData::has_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaisuDustNoiseData::set_has_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaisuDustNoiseData::clear_has_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaisuDustNoiseData::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& RaisuDustNoiseData::date() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.date)
  return *date_;
}
inline void RaisuDustNoiseData::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.date)
}
inline void RaisuDustNoiseData::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseData.date)
}
inline void RaisuDustNoiseData::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseData.date)
}
inline ::std::string* RaisuDustNoiseData::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseData.date)
  return date_;
}
inline ::std::string* RaisuDustNoiseData::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseData::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseData.date)
}

// optional string headerFile = 6 [default = ""];
inline bool RaisuDustNoiseData::has_headerfile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaisuDustNoiseData::set_has_headerfile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaisuDustNoiseData::clear_has_headerfile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaisuDustNoiseData::clear_headerfile() {
  if (headerfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headerfile_->clear();
  }
  clear_has_headerfile();
}
inline const ::std::string& RaisuDustNoiseData::headerfile() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.headerFile)
  return *headerfile_;
}
inline void RaisuDustNoiseData::set_headerfile(const ::std::string& value) {
  set_has_headerfile();
  if (headerfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headerfile_ = new ::std::string;
  }
  headerfile_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.headerFile)
}
inline void RaisuDustNoiseData::set_headerfile(const char* value) {
  set_has_headerfile();
  if (headerfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headerfile_ = new ::std::string;
  }
  headerfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseData.headerFile)
}
inline void RaisuDustNoiseData::set_headerfile(const char* value, size_t size) {
  set_has_headerfile();
  if (headerfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headerfile_ = new ::std::string;
  }
  headerfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseData.headerFile)
}
inline ::std::string* RaisuDustNoiseData::mutable_headerfile() {
  set_has_headerfile();
  if (headerfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headerfile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseData.headerFile)
  return headerfile_;
}
inline ::std::string* RaisuDustNoiseData::release_headerfile() {
  clear_has_headerfile();
  if (headerfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = headerfile_;
    headerfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseData::set_allocated_headerfile(::std::string* headerfile) {
  if (headerfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headerfile_;
  }
  if (headerfile) {
    set_has_headerfile();
    headerfile_ = headerfile;
  } else {
    clear_has_headerfile();
    headerfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseData.headerFile)
}

// optional string filePath = 7 [default = ""];
inline bool RaisuDustNoiseData::has_filepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RaisuDustNoiseData::set_has_filepath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RaisuDustNoiseData::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RaisuDustNoiseData::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& RaisuDustNoiseData::filepath() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.filePath)
  return *filepath_;
}
inline void RaisuDustNoiseData::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.filePath)
}
inline void RaisuDustNoiseData::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseData.filePath)
}
inline void RaisuDustNoiseData::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseData.filePath)
}
inline ::std::string* RaisuDustNoiseData::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseData.filePath)
  return filepath_;
}
inline ::std::string* RaisuDustNoiseData::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseData::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseData.filePath)
}

// optional float threshold = 8 [default = 0];
inline bool RaisuDustNoiseData::has_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RaisuDustNoiseData::set_has_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RaisuDustNoiseData::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RaisuDustNoiseData::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float RaisuDustNoiseData::threshold() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseData.threshold)
  return threshold_;
}
inline void RaisuDustNoiseData::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseData.threshold)
}

// -------------------------------------------------------------------

// RaisuDustNoiseThreshold

// optional string deviceCode = 1 [default = ""];
inline bool RaisuDustNoiseThreshold::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaisuDustNoiseThreshold::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaisuDustNoiseThreshold::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaisuDustNoiseThreshold::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& RaisuDustNoiseThreshold::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
  return *devicecode_;
}
inline void RaisuDustNoiseThreshold::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
}
inline void RaisuDustNoiseThreshold::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
}
inline void RaisuDustNoiseThreshold::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
}
inline ::std::string* RaisuDustNoiseThreshold::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
  return devicecode_;
}
inline ::std::string* RaisuDustNoiseThreshold::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaisuDustNoiseThreshold::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RaisuDustNoiseThreshold.deviceCode)
}

// optional float value = 2 [default = 0];
inline bool RaisuDustNoiseThreshold::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaisuDustNoiseThreshold::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaisuDustNoiseThreshold::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaisuDustNoiseThreshold::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float RaisuDustNoiseThreshold::value() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RaisuDustNoiseThreshold.value)
  return value_;
}
inline void RaisuDustNoiseThreshold::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RaisuDustNoiseThreshold.value)
}

// -------------------------------------------------------------------

// GetRaisuDustNoiseThreshold

// optional string deviceCode = 1 [default = ""];
inline bool GetRaisuDustNoiseThreshold::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRaisuDustNoiseThreshold::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRaisuDustNoiseThreshold::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRaisuDustNoiseThreshold::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& GetRaisuDustNoiseThreshold::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
  return *devicecode_;
}
inline void GetRaisuDustNoiseThreshold::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
}
inline void GetRaisuDustNoiseThreshold::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
}
inline void GetRaisuDustNoiseThreshold::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
}
inline ::std::string* GetRaisuDustNoiseThreshold::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
  return devicecode_;
}
inline ::std::string* GetRaisuDustNoiseThreshold::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRaisuDustNoiseThreshold::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GetRaisuDustNoiseThreshold.deviceCode)
}

// optional string id = 2 [default = ""];
inline bool GetRaisuDustNoiseThreshold::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRaisuDustNoiseThreshold::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRaisuDustNoiseThreshold::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRaisuDustNoiseThreshold::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetRaisuDustNoiseThreshold::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
  return *id_;
}
inline void GetRaisuDustNoiseThreshold::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
}
inline void GetRaisuDustNoiseThreshold::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
}
inline void GetRaisuDustNoiseThreshold::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
}
inline ::std::string* GetRaisuDustNoiseThreshold::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
  return id_;
}
inline ::std::string* GetRaisuDustNoiseThreshold::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRaisuDustNoiseThreshold::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GetRaisuDustNoiseThreshold.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_RAISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_RAISE_DUST>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_RAISE_DUST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_RAISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_RAISE_DUST>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_RAISE_DUST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST>() {
  return ::com::arges::file::proto::THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::ALARM_TYPE_OF_ARISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::ALARM_TYPE_OF_ARISE_DUST>() {
  return ::com::arges::file::proto::ALARM_TYPE_OF_ARISE_DUST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RaiseDustDataBean_2eproto__INCLUDED
