// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DevInfoListBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DevInfoListBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncodeChnnelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncodeChnnelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmInChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmInChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeviceOpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeviceOpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeviceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeviceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeviceStatus_ChannelStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeviceStatus_ChannelStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEncodeChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEncodeChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspEncodeChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspEncodeChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmChannelMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmChannelMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDeviceInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ONLIEN_STAT_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_TYPE_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CATEGORY_TYPE_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DO_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_CONTROL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_CHANNEL_INFO_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_CHANNEL_FOR_ALARM_DEV_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DevInfoListBean_2eproto() {
  protobuf_AddDesc_DevInfoListBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DevInfoListBean.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceInfo_descriptor_ = file->message_type(0);
  static const int DeviceInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, userpsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, proxyport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicethird_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, streammode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, channelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, combinestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, regid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, mountmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, servicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, updevicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, proxyip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, cascadedevcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, isonlie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, cascadedevdomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devdomain_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  EncodeChnnelInfo_descriptor_ = file->message_type(1);
  static const int EncodeChnnelInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, channelseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, unitseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, cameratype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, camerafunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, gps_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, gps_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, multicastip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, multicastport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, ipcip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, icondirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, regioncode_),
  };
  EncodeChnnelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncodeChnnelInfo_descriptor_,
      EncodeChnnelInfo::default_instance_,
      EncodeChnnelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeChnnelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncodeChnnelInfo));
  AlarmInChannelInfo_descriptor_ = file->message_type(2);
  static const int AlarmInChannelInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, unitseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, channelseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, alarmgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, gps_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, gps_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, regioncode_),
  };
  AlarmInChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmInChannelInfo_descriptor_,
      AlarmInChannelInfo::default_instance_,
      AlarmInChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmInChannelInfo));
  ReqDeviceOpr_descriptor_ = file->message_type(3);
  static const int ReqDeviceOpr_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, mounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, updevicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, dotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, stepwith_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, stephight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, cascadedevdomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, reqesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, proxyip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, proxyport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, resultdescirbe_),
  };
  ReqDeviceOpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeviceOpr_descriptor_,
      ReqDeviceOpr::default_instance_,
      ReqDeviceOpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceOpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeviceOpr));
  ReportDeviceStatus_descriptor_ = file->message_type(4);
  static const int ReportDeviceStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, cascadedevdomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, devip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, devport_),
  };
  ReportDeviceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeviceStatus_descriptor_,
      ReportDeviceStatus::default_instance_,
      ReportDeviceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeviceStatus));
  ReportDeviceStatus_ChannelStat_descriptor_ = ReportDeviceStatus_descriptor_->nested_type(0);
  static const int ReportDeviceStatus_ChannelStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus_ChannelStat, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus_ChannelStat, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus_ChannelStat, stat_),
  };
  ReportDeviceStatus_ChannelStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeviceStatus_ChannelStat_descriptor_,
      ReportDeviceStatus_ChannelStat::default_instance_,
      ReportDeviceStatus_ChannelStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus_ChannelStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceStatus_ChannelStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeviceStatus_ChannelStat));
  ReqEncodeChannelInfo_descriptor_ = file->message_type(5);
  static const int ReqEncodeChannelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEncodeChannelInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEncodeChannelInfo, regioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEncodeChannelInfo, type_),
  };
  ReqEncodeChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEncodeChannelInfo_descriptor_,
      ReqEncodeChannelInfo::default_instance_,
      ReqEncodeChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEncodeChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEncodeChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEncodeChannelInfo));
  RspEncodeChannelInfo_descriptor_ = file->message_type(6);
  static const int RspEncodeChannelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, resultdescirbe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, infos_),
  };
  RspEncodeChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspEncodeChannelInfo_descriptor_,
      RspEncodeChannelInfo::default_instance_,
      RspEncodeChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEncodeChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspEncodeChannelInfo));
  AlarmChannelMassage_descriptor_ = file->message_type(7);
  static const int AlarmChannelMassage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, regioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, resultdescirbe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, channels_),
  };
  AlarmChannelMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmChannelMassage_descriptor_,
      AlarmChannelMassage::default_instance_,
      AlarmChannelMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmChannelMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmChannelMassage));
  DeviceInfoList_descriptor_ = file->message_type(8);
  static const int DeviceInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, deviceinfo_),
  };
  DeviceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfoList_descriptor_,
      DeviceInfoList::default_instance_,
      DeviceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfoList));
  ReqDeviceInfo_descriptor_ = file->message_type(9);
  static const int ReqDeviceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, regioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, channelcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, servicecode_),
  };
  ReqDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeviceInfo_descriptor_,
      ReqDeviceInfo::default_instance_,
      ReqDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeviceInfo));
  RspDeviceInfo_descriptor_ = file->message_type(10);
  static const int RspDeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, devs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, resultdescirbe_),
  };
  RspDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDeviceInfo_descriptor_,
      RspDeviceInfo::default_instance_,
      RspDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDeviceInfo));
  ONLIEN_STAT_OF_DEVICE_descriptor_ = file->enum_type(0);
  LOGIN_TYPE_OF_DEVICE_descriptor_ = file->enum_type(1);
  CATEGORY_TYPE_OF_DEVICE_descriptor_ = file->enum_type(2);
  MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor_ = file->enum_type(3);
  OPRATION_TYPE_OF_DEVICE_DO_descriptor_ = file->enum_type(4);
  REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor_ = file->enum_type(5);
  RESULT_TYPE_OF_DEVICE_CONTROL_descriptor_ = file->enum_type(6);
  STAT_TYPE_OF_DEVICE_descriptor_ = file->enum_type(7);
  OPRATION_TYPE_OF_CHANNEL_INFO_descriptor_ = file->enum_type(8);
  REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor_ = file->enum_type(9);
  RESULT_TYPE_OF_CHANNEL_FOR_ALARM_DEV_descriptor_ = file->enum_type(10);
  OPRATION_TYPE_OF_DEVICE_descriptor_ = file->enum_type(11);
  RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DevInfoListBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncodeChnnelInfo_descriptor_, &EncodeChnnelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmInChannelInfo_descriptor_, &AlarmInChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeviceOpr_descriptor_, &ReqDeviceOpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeviceStatus_descriptor_, &ReportDeviceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeviceStatus_ChannelStat_descriptor_, &ReportDeviceStatus_ChannelStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEncodeChannelInfo_descriptor_, &ReqEncodeChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspEncodeChannelInfo_descriptor_, &RspEncodeChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmChannelMassage_descriptor_, &AlarmChannelMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfoList_descriptor_, &DeviceInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeviceInfo_descriptor_, &ReqDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDeviceInfo_descriptor_, &RspDeviceInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DevInfoListBean_2eproto() {
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete EncodeChnnelInfo::default_instance_;
  delete EncodeChnnelInfo_reflection_;
  delete AlarmInChannelInfo::default_instance_;
  delete AlarmInChannelInfo_reflection_;
  delete ReqDeviceOpr::default_instance_;
  delete ReqDeviceOpr_reflection_;
  delete ReportDeviceStatus::default_instance_;
  delete ReportDeviceStatus_reflection_;
  delete ReportDeviceStatus_ChannelStat::default_instance_;
  delete ReportDeviceStatus_ChannelStat_reflection_;
  delete ReqEncodeChannelInfo::default_instance_;
  delete ReqEncodeChannelInfo_reflection_;
  delete RspEncodeChannelInfo::default_instance_;
  delete RspEncodeChannelInfo_reflection_;
  delete AlarmChannelMassage::default_instance_;
  delete AlarmChannelMassage_reflection_;
  delete DeviceInfoList::default_instance_;
  delete DeviceInfoList_reflection_;
  delete ReqDeviceInfo::default_instance_;
  delete ReqDeviceInfo_reflection_;
  delete RspDeviceInfo::default_instance_;
  delete RspDeviceInfo_reflection_;
}

void protobuf_AddDesc_DevInfoListBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025DevInfoListBean.proto\022\024com.arges.file."
    "proto\"\251\005\n\nDeviceInfo\022\017\n\005keyId\030\001 \001(\t:\000\022\017\n"
    "\005devId\030\002 \001(\t:\000\022\022\n\010provider\030\003 \001(\t:\000\022\017\n\005mo"
    "del\030\004 \001(\t:\000\022\017\n\005devIp\030\005 \001(\t:\000\022\023\n\007devPort\030"
    "\006 \001(\005:\002-1\022\022\n\010userName\030\007 \001(\t:\000\022\021\n\007userPsw"
    "\030\010 \001(\t:\000\022\026\n\nstreamType\030\t \001(\005:\002-1\022\023\n\007devT"
    "ype\030\n \001(\005:\002-1\022\024\n\tproxyPort\030\013 \001(\005:\0010\022\024\n\nr"
    "egisterId\030\014 \001(\t:\000\022\025\n\013deviceThird\030\r \001(\t:\000"
    "\022\026\n\nstreamMode\030\016 \001(\005:\002-1\022\026\n\nchannelNum\030\017"
    " \001(\005:\002-1\022\025\n\tloginType\030\020 \001(\005:\002-1\022\031\n\rcombi"
    "neStatus\030\021 \001(\005:\002-1\022\016\n\004name\030\022 \001(\t:\000\022\017\n\005re"
    "gId\030\023 \001(\t:\000\022\022\n\010describe\030\024 \001(\t:\000\022\025\n\tmount"
    "Mode\030\025 \001(\005:\002-1\022\025\n\013serviceCode\030\026 \001(\t:\000\022\026\n"
    "\014upDeviceCode\030\027 \001(\t:\000\022\027\n\013devCategory\030\030 \001"
    "(\005:\002-1\022\021\n\007proxyIp\030\031 \001(\t:\000\022\032\n\020proxyServic"
    "eCode\030\032 \001(\t:\000\022\022\n\010deviceSn\030\033 \001(\t:\000\022\030\n\016cas"
    "cadeDevCode\030\035 \001(\t:\000\022\023\n\007isOnlie\030\036 \001(\005:\002-1"
    "\022\032\n\020cascadeDevDomain\030\037 \001(\t:\000\022\023\n\tdevDomai"
    "n\030  \001(\t:\000\"\274\003\n\020EncodeChnnelInfo\022\016\n\002id\030\001 \001"
    "(\003:\002-1\022\023\n\tchannelId\030\002 \001(\t:\000\022\016\n\004name\030\003 \001("
    "\t:\000\022\022\n\010describe\030\004 \001(\t:\000\022\021\n\007devCode\030\005 \001(\t"
    ":\000\022\026\n\nchannelSeq\030\006 \001(\005:\002-1\022\023\n\007unitSeq\030\007 "
    "\001(\005:\002-1\022\016\n\004type\030\010 \001(\t:\000\022\024\n\ncameraType\030\t "
    "\001(\t:\000\022\030\n\016cameraFunction\030\n \001(\t:\000\022\017\n\005gps_x"
    "\030\013 \001(\t:\000\022\017\n\005gps_y\030\014 \001(\t:\000\022\021\n\005mapId\030\r \001(\003"
    ":\002-1\022\024\n\010domainId\030\016 \001(\003:\002-1\022\016\n\004memo\030\017 \001(\t"
    ":\000\022\020\n\004stat\030\020 \001(\005:\002-1\022\025\n\013multicastIp\030\021 \001("
    "\t:\000\022\031\n\rmulticastPort\030\022 \001(\005:\002-1\022\017\n\005ipcIp\030"
    "\023 \001(\t:\000\022\031\n\riconDirection\030\024 \001(\005:\002-1\022\024\n\nre"
    "gionCode\030\025 \001(\t:\000\"\252\002\n\022AlarmInChannelInfo\022"
    "\016\n\002id\030\001 \001(\003:\002-1\022\021\n\007devCode\030\002 \001(\t:\000\022\023\n\007un"
    "itSeq\030\003 \001(\005:\002-1\022\026\n\nchannelSeq\030\004 \001(\005:\002-1\022"
    "\025\n\013channelName\030\005 \001(\t:\000\022\023\n\talarmType\030\006 \001("
    "\t:\000\022\024\n\nalarmGrade\030\007 \001(\t:\000\022\017\n\005gps_x\030\010 \001(\t"
    ":\000\022\017\n\005gps_y\030\t \001(\t:\000\022\021\n\005mapId\030\n \001(\003:\002-1\022\024"
    "\n\010domainId\030\013 \001(\003:\002-1\022\016\n\004memo\030\014 \001(\t:\000\022\021\n\005"
    "state\030\r \001(\005:\002-1\022\024\n\nregionCode\030\016 \001(\t:\000\"\367\002"
    "\n\014ReqDeviceOpr\022\021\n\007devCode\030\001 \001(\t:\000\022\023\n\tcha"
    "nnelId\030\002 \001(\t:\000\022\023\n\007devType\030\003 \001(\005:\002-1\022\025\n\tm"
    "ountType\030\004 \001(\005:\002-1\022\023\n\tserviceId\030\005 \001(\t:\000\022"
    "\026\n\014upDeviceCode\030\006 \001(\t:\000\022\022\n\006doType\030\007 \001(\005:"
    "\002-1\022\024\n\010stepWith\030\010 \001(\003:\002-1\022\025\n\tstepHight\030\t"
    " \001(\003:\002-1\022\032\n\020cascadeDevDomain\030\n \001(\t:\000\022\026\n\n"
    "reqestType\030\013 \001(\005:\002-1\022\021\n\007proxyIp\030\014 \001(\t:\000\022"
    "\024\n\tproxyPort\030\r \001(\005:\0010\022\032\n\020proxyServiceCod"
    "e\030\016 \001(\t:\000\022\022\n\006result\030\017 \001(\005:\002-1\022\030\n\016resultD"
    "escirbe\030\020 \001(\t:\000\"\201\002\n\022ReportDeviceStatus\022\016"
    "\n\004code\030\001 \001(\t:\000\022\020\n\004stat\030\002 \001(\005:\002-1\022F\n\010chan"
    "nels\030\003 \003(\01324.com.arges.file.proto.Report"
    "DeviceStatus.ChannelStat\022\032\n\020cascadeDevDo"
    "main\030\004 \001(\t:\000\022\017\n\005devIp\030\005 \001(\t:\000\022\022\n\007devPort"
    "\030\006 \001(\005:\0010\032@\n\013ChannelStat\022\016\n\004code\030\001 \001(\t:\000"
    "\022\017\n\003seq\030\002 \001(\005:\002-1\022\020\n\004stat\030\003 \001(\005:\002-1\"K\n\024R"
    "eqEncodeChannelInfo\022\021\n\tchannelId\030\001 \003(\t\022\022"
    "\n\nregionCode\030\002 \003(\t\022\014\n\004type\030\003 \001(\005\"\212\001\n\024Rsp"
    "EncodeChannelInfo\022\023\n\013requestType\030\001 \001(\005\022\016"
    "\n\006result\030\002 \001(\005\022\026\n\016resultDescirbe\030\003 \001(\014\0225"
    "\n\005infos\030\004 \003(\0132&.com.arges.file.proto.Enc"
    "odeChnnelInfo\"\242\001\n\023AlarmChannelMassage\022\023\n"
    "\013requestType\030\001 \001(\005\022\022\n\nregionCode\030\002 \003(\t\022\016"
    "\n\006result\030\003 \001(\005\022\026\n\016resultDescirbe\030\004 \001(\014\022:"
    "\n\010channels\030\005 \003(\0132(.com.arges.file.proto."
    "AlarmInChannelInfo\"F\n\016DeviceInfoList\0224\n\n"
    "deviceinfo\030\001 \003(\0132 .com.arges.file.proto."
    "DeviceInfo\"q\n\rReqDeviceInfo\022\020\n\004type\030\001 \001("
    "\005:\002-1\022\020\n\010deviceId\030\002 \003(\t\022\022\n\nregionCode\030\003 "
    "\003(\t\022\023\n\013channelCode\030\004 \001(\t\022\023\n\013serviceCode\030"
    "\005 \001(\t\"\202\001\n\rRspDeviceInfo\022\023\n\013requestType\030\001"
    " \001(\005\022.\n\004devs\030\002 \003(\0132 .com.arges.file.prot"
    "o.DeviceInfo\022\022\n\006result\030\003 \001(\005:\002-1\022\030\n\016resu"
    "ltDescirbe\030\004 \001(\014:\000*m\n\025ONLIEN_STAT_OF_DEV"
    "ICE\022\025\n\021DEVICE_IS_ON_LINE\020\001\022\026\n\022DEVICE_IS_"
    "OFF_LINE\020\002\022%\n!DEVICE_IS_WAIT_DISTRIBUTE_"
    "FOR_DMS\020\003*\317\001\n\024LOGIN_TYPE_OF_DEVICE\022(\n$LO"
    "GIN_TYPE_OF_DAHUA_PRIVATE_PROTOCOL\020\001\022/\n+"
    "LOGIN_TYPE_OF_INITIATIVE_REGISTER_FOR_DA"
    "HUA\020\006\022(\n$LOGIN_TYPE_OF_ARGES_PRIVATE_PRO"
    "TOCAL\020\007\022\027\n\023LOGIN_TYPE_OF_ONVIF\020\t\022\031\n\025LOGI"
    "N_TYPE_OF_GB28181\020\n*\250\001\n\027CATEGORY_TYPE_OF"
    "_DEVICE\022\'\n#CATEGORY_TYPE_OF_INTELLIGENT_"
    "DEVICE\020\022\022\037\n\033CATEGORY_TYPE_OF_ALARM_HOST\020"
    "\003\022 \n\034CATEGORY_TYPE_OF_RING_DEVICE\020\t\022!\n\035C"
    "ATEGORY_TYPE_OF_ROLLING_MILL\020\016*B\n MODEL_"
    "TYPE_OF_INTELLIGENT_DEVICE\022\036\n\032INTELLIGEN"
    "T_DEVICE_OF_BBOX\020\001*\360\001\n\032OPRATION_TYPE_OF_"
    "DEVICE_DO\022\r\n\tPTZ_WAVER\020\001\022\016\n\nPTZ_ROTATE\020\002"
    "\022\r\n\tPTZ_FOCAL\020\003\022\020\n\014PTZ_APERTURE\020\004\022\014\n\010PTZ"
    "_STOP\020\005\022\014\n\010PTZ_LEFT\020\006\022\013\n\007PTZ_TOP\020\007\022\r\n\tPT"
    "Z_RIGHT\020\010\022\016\n\nPTZ_BOTTOM\020\t\022\017\n\013PTZ_TOPLEFT"
    "\020\n\022\020\n\014PTZ_TOPRIGHT\020\013\022\022\n\016PTZ_BOTTOMLEFT\020\014"
    "\022\023\n\017PTZ_BOTTOMRIGHT\020\r*\204\001\n\036REQUEST_TYPE_O"
    "F_DEVICE_CONTROL\022\032\n\026DEVICE_CONTROL_REQUE"
    "ST\020\001\022\"\n\036DEVICE_CONTROL_GET_DEVICE_INFO\020\002"
    "\022\"\n\036DEVICE_CONTROL_RSP_DEVICE_INFO\020\003*\217\001\n"
    "\035RESULT_TYPE_OF_DEVICE_CONTROL\022\030\n\024DEVICE"
    "_CONTROL_IS_OK\020\001\022*\n&DEVICE_CONTROL_GET_D"
    "EVICE_INFO_IS_TRUE\020\002\022(\n$DEVICE_CONTROL_G"
    "ET_DEVICE_INFO_ERROR\020\003*B\n\023STAT_TYPE_OF_D"
    "EVICE\022\024\n\020DEVICE_IS_ONLINE\020\001\022\025\n\021DEVICE_IS"
    "_OFFLINE\020\002*\200\001\n\035OPRATION_TYPE_OF_CHANNEL_"
    "INFO\022\032\n\026ENCODE_CHANNEL_GET_ALL\020\001\022!\n\035ENCO"
    "DE_CHANNEL_GET_GEGION_ALL\020\002\022 \n\034ENCODE_CH"
    "ANNEL_GET_BY_REGION\020\003*M\n\035REQUEST_TYPE_OF"
    "_ALARM_CHANNEL\022,\n(ALARM_CHANNEL_REQUEST_"
    "GET_BY_REGION_CODE\020\001*i\n$RESULT_TYPE_OF_C"
    "HANNEL_FOR_ALARM_DEV\022\036\n\032ALARM_CHANNEL_RE"
    "SULT_IS_OK\020\001\022!\n\035ALARM_CHANNEL_RESULT_IS_"
    "ERROR\020\002*\252\002\n\027OPRATION_TYPE_OF_DEVICE\022\027\n\023D"
    "EVICE_INFO_GET_ALL\020\001\022!\n\035DEVICE_INFO_GET_"
    "BY_REGION_ALL\020\002\022\035\n\031DEVICE_INFO_GET_BY_RE"
    "GION\020\003\022\032\n\026DEVICE_INFO_GET_BY_IDS\020\004\022\016\n\nDE"
    "VICE_ADD\020\005\022\026\n\022DEVICE_INFO_MODIFY\020\006\022\021\n\rDE"
    "VICE_DELETE\020\007\022#\n\037DEVICE_INFO_GET_BY_CHAN"
    "NEL_CODE\020\010\022\034\n\030DEVICE_INFO_GET_BY_CODES\020\t"
    "\022\032\n\026DEVICE_UPDATE_DMS_INFO\020\n*]\n\"RESULT_T"
    "YPE_OF_DEVICE_INFO_REQUEST\022\031\n\025DEVICE_RES"
    "PONSE_IS_OK\020\001\022\034\n\030DEVICE_RESPONSE_IS_ERRO"
    "R\020\002", 4683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DevInfoListBean.proto", &protobuf_RegisterTypes);
  DeviceInfo::default_instance_ = new DeviceInfo();
  EncodeChnnelInfo::default_instance_ = new EncodeChnnelInfo();
  AlarmInChannelInfo::default_instance_ = new AlarmInChannelInfo();
  ReqDeviceOpr::default_instance_ = new ReqDeviceOpr();
  ReportDeviceStatus::default_instance_ = new ReportDeviceStatus();
  ReportDeviceStatus_ChannelStat::default_instance_ = new ReportDeviceStatus_ChannelStat();
  ReqEncodeChannelInfo::default_instance_ = new ReqEncodeChannelInfo();
  RspEncodeChannelInfo::default_instance_ = new RspEncodeChannelInfo();
  AlarmChannelMassage::default_instance_ = new AlarmChannelMassage();
  DeviceInfoList::default_instance_ = new DeviceInfoList();
  ReqDeviceInfo::default_instance_ = new ReqDeviceInfo();
  RspDeviceInfo::default_instance_ = new RspDeviceInfo();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  EncodeChnnelInfo::default_instance_->InitAsDefaultInstance();
  AlarmInChannelInfo::default_instance_->InitAsDefaultInstance();
  ReqDeviceOpr::default_instance_->InitAsDefaultInstance();
  ReportDeviceStatus::default_instance_->InitAsDefaultInstance();
  ReportDeviceStatus_ChannelStat::default_instance_->InitAsDefaultInstance();
  ReqEncodeChannelInfo::default_instance_->InitAsDefaultInstance();
  RspEncodeChannelInfo::default_instance_->InitAsDefaultInstance();
  AlarmChannelMassage::default_instance_->InitAsDefaultInstance();
  DeviceInfoList::default_instance_->InitAsDefaultInstance();
  ReqDeviceInfo::default_instance_->InitAsDefaultInstance();
  RspDeviceInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DevInfoListBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DevInfoListBean_2eproto {
  StaticDescriptorInitializer_DevInfoListBean_2eproto() {
    protobuf_AddDesc_DevInfoListBean_2eproto();
  }
} static_descriptor_initializer_DevInfoListBean_2eproto_;
const ::google::protobuf::EnumDescriptor* ONLIEN_STAT_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ONLIEN_STAT_OF_DEVICE_descriptor_;
}
bool ONLIEN_STAT_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGIN_TYPE_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_TYPE_OF_DEVICE_descriptor_;
}
bool LOGIN_TYPE_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
    case 6:
    case 7:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CATEGORY_TYPE_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CATEGORY_TYPE_OF_DEVICE_descriptor_;
}
bool CATEGORY_TYPE_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 3:
    case 9:
    case 14:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor_;
}
bool MODEL_TYPE_OF_INTELLIGENT_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DO_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPRATION_TYPE_OF_DEVICE_DO_descriptor_;
}
bool OPRATION_TYPE_OF_DEVICE_DO_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor_;
}
bool REQUEST_TYPE_OF_DEVICE_CONTROL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_CONTROL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_DEVICE_CONTROL_descriptor_;
}
bool RESULT_TYPE_OF_DEVICE_CONTROL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STAT_TYPE_OF_DEVICE_descriptor_;
}
bool STAT_TYPE_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_CHANNEL_INFO_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPRATION_TYPE_OF_CHANNEL_INFO_descriptor_;
}
bool OPRATION_TYPE_OF_CHANNEL_INFO_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor_;
}
bool REQUEST_TYPE_OF_ALARM_CHANNEL_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_CHANNEL_FOR_ALARM_DEV_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_CHANNEL_FOR_ALARM_DEV_descriptor_;
}
bool RESULT_TYPE_OF_CHANNEL_FOR_ALARM_DEV_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPRATION_TYPE_OF_DEVICE_descriptor_;
}
bool OPRATION_TYPE_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor_;
}
bool RESULT_TYPE_OF_DEVICE_INFO_REQUEST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kKeyIdFieldNumber;
const int DeviceInfo::kDevIdFieldNumber;
const int DeviceInfo::kProviderFieldNumber;
const int DeviceInfo::kModelFieldNumber;
const int DeviceInfo::kDevIpFieldNumber;
const int DeviceInfo::kDevPortFieldNumber;
const int DeviceInfo::kUserNameFieldNumber;
const int DeviceInfo::kUserPswFieldNumber;
const int DeviceInfo::kStreamTypeFieldNumber;
const int DeviceInfo::kDevTypeFieldNumber;
const int DeviceInfo::kProxyPortFieldNumber;
const int DeviceInfo::kRegisterIdFieldNumber;
const int DeviceInfo::kDeviceThirdFieldNumber;
const int DeviceInfo::kStreamModeFieldNumber;
const int DeviceInfo::kChannelNumFieldNumber;
const int DeviceInfo::kLoginTypeFieldNumber;
const int DeviceInfo::kCombineStatusFieldNumber;
const int DeviceInfo::kNameFieldNumber;
const int DeviceInfo::kRegIdFieldNumber;
const int DeviceInfo::kDescribeFieldNumber;
const int DeviceInfo::kMountModeFieldNumber;
const int DeviceInfo::kServiceCodeFieldNumber;
const int DeviceInfo::kUpDeviceCodeFieldNumber;
const int DeviceInfo::kDevCategoryFieldNumber;
const int DeviceInfo::kProxyIpFieldNumber;
const int DeviceInfo::kProxyServiceCodeFieldNumber;
const int DeviceInfo::kDeviceSnFieldNumber;
const int DeviceInfo::kCascadeDevCodeFieldNumber;
const int DeviceInfo::kIsOnlieFieldNumber;
const int DeviceInfo::kCascadeDevDomainFieldNumber;
const int DeviceInfo::kDevDomainFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devport_ = -1;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamtype_ = -1;
  devtype_ = -1;
  proxyport_ = 0;
  registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicethird_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streammode_ = -1;
  channelnum_ = -1;
  logintype_ = -1;
  combinestatus_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mountmode_ = -1;
  servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcategory_ = -1;
  proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicesn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cascadedevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isonlie_ = -1;
  cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (keyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyid_;
  }
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provider_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devip_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (userpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userpsw_;
  }
  if (registerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registerid_;
  }
  if (devicethird_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicethird_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (regid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regid_;
  }
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicecode_;
  }
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevicecode_;
  }
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyip_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (devicesn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicesn_;
  }
  if (cascadedevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevcode_;
  }
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (devdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devdomain_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_keyid()) {
      if (keyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyid_->clear();
      }
    }
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        provider_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_devip()) {
      if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devip_->clear();
      }
    }
    devport_ = -1;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_userpsw()) {
      if (userpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userpsw_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    streamtype_ = -1;
    devtype_ = -1;
    proxyport_ = 0;
    if (has_registerid()) {
      if (registerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        registerid_->clear();
      }
    }
    if (has_devicethird()) {
      if (devicethird_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicethird_->clear();
      }
    }
    streammode_ = -1;
    channelnum_ = -1;
    logintype_ = -1;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    combinestatus_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_regid()) {
      if (regid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regid_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
    mountmode_ = -1;
    if (has_servicecode()) {
      if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicecode_->clear();
      }
    }
    if (has_updevicecode()) {
      if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updevicecode_->clear();
      }
    }
    devcategory_ = -1;
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    if (has_proxyip()) {
      if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyip_->clear();
      }
    }
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    if (has_devicesn()) {
      if (devicesn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicesn_->clear();
      }
    }
    if (has_cascadedevcode()) {
      if (cascadedevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cascadedevcode_->clear();
      }
    }
    isonlie_ = -1;
    if (has_cascadedevdomain()) {
      if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cascadedevdomain_->clear();
      }
    }
    if (has_devdomain()) {
      if (devdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devdomain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyid().data(), this->keyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devId;
        break;
      }

      // optional string devId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_provider;
        break;
      }

      // optional string provider = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // optional string model = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devIp;
        break;
      }

      // optional string devIp = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_devIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devip().data(), this->devip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_devPort;
        break;
      }

      // optional int32 devPort = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_devPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devport_)));
          set_has_devport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_userName;
        break;
      }

      // optional string userName = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userPsw;
        break;
      }

      // optional string userPsw = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_userPsw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpsw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpsw().data(), this->userpsw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userpsw");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_streamType;
        break;
      }

      // optional int32 streamType = 9 [default = -1];
      case 9: {
        if (tag == 72) {
         parse_streamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_devType;
        break;
      }

      // optional int32 devType = 10 [default = -1];
      case 10: {
        if (tag == 80) {
         parse_devType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devtype_)));
          set_has_devtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_proxyPort;
        break;
      }

      // optional int32 proxyPort = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_proxyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyport_)));
          set_has_proxyport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_registerId;
        break;
      }

      // optional string registerId = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_registerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_deviceThird;
        break;
      }

      // optional string deviceThird = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_deviceThird:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicethird()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicethird().data(), this->devicethird().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicethird");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_streamMode;
        break;
      }

      // optional int32 streamMode = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_streamMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streammode_)));
          set_has_streammode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_channelNum;
        break;
      }

      // optional int32 channelNum = 15 [default = -1];
      case 15: {
        if (tag == 120) {
         parse_channelNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelnum_)));
          set_has_channelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_loginType;
        break;
      }

      // optional int32 loginType = 16 [default = -1];
      case 16: {
        if (tag == 128) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_combineStatus;
        break;
      }

      // optional int32 combineStatus = 17 [default = -1];
      case 17: {
        if (tag == 136) {
         parse_combineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinestatus_)));
          set_has_combinestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_name;
        break;
      }

      // optional string name = 18 [default = ""];
      case 18: {
        if (tag == 146) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_regId;
        break;
      }

      // optional string regId = 19 [default = ""];
      case 19: {
        if (tag == 154) {
         parse_regId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regid().data(), this->regid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_describe;
        break;
      }

      // optional string describe = 20 [default = ""];
      case 20: {
        if (tag == 162) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mountMode;
        break;
      }

      // optional int32 mountMode = 21 [default = -1];
      case 21: {
        if (tag == 168) {
         parse_mountMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mountmode_)));
          set_has_mountmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_serviceCode;
        break;
      }

      // optional string serviceCode = 22 [default = ""];
      case 22: {
        if (tag == 178) {
         parse_serviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicecode().data(), this->servicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_upDeviceCode;
        break;
      }

      // optional string upDeviceCode = 23 [default = ""];
      case 23: {
        if (tag == 186) {
         parse_upDeviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updevicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updevicecode().data(), this->updevicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "updevicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_devCategory;
        break;
      }

      // optional int32 devCategory = 24 [default = -1];
      case 24: {
        if (tag == 192) {
         parse_devCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devcategory_)));
          set_has_devcategory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_proxyIp;
        break;
      }

      // optional string proxyIp = 25 [default = ""];
      case 25: {
        if (tag == 202) {
         parse_proxyIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyip().data(), this->proxyip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 26 [default = ""];
      case 26: {
        if (tag == 210) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_deviceSn;
        break;
      }

      // optional string deviceSn = 27 [default = ""];
      case 27: {
        if (tag == 218) {
         parse_deviceSn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicesn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicesn().data(), this->devicesn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicesn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_cascadeDevCode;
        break;
      }

      // optional string cascadeDevCode = 29 [default = ""];
      case 29: {
        if (tag == 234) {
         parse_cascadeDevCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cascadedevcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cascadedevcode().data(), this->cascadedevcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cascadedevcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_isOnlie;
        break;
      }

      // optional int32 isOnlie = 30 [default = -1];
      case 30: {
        if (tag == 240) {
         parse_isOnlie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonlie_)));
          set_has_isonlie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_cascadeDevDomain;
        break;
      }

      // optional string cascadeDevDomain = 31 [default = ""];
      case 31: {
        if (tag == 250) {
         parse_cascadeDevDomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cascadedevdomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cascadedevdomain().data(), this->cascadedevdomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cascadedevdomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_devDomain;
        break;
      }

      // optional string devDomain = 32 [default = ""];
      case 32: {
        if (tag == 258) {
         parse_devDomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devdomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devdomain().data(), this->devdomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devdomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DeviceInfo)
  // optional string keyId = 1 [default = ""];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyid().data(), this->keyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyid(), output);
  }

  // optional string devId = 2 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devid(), output);
  }

  // optional string provider = 3 [default = ""];
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->provider(), output);
  }

  // optional string model = 4 [default = ""];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string devIp = 5 [default = ""];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devip(), output);
  }

  // optional int32 devPort = 6 [default = -1];
  if (has_devport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->devport(), output);
  }

  // optional string userName = 7 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional string userPsw = 8 [default = ""];
  if (has_userpsw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpsw().data(), this->userpsw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpsw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->userpsw(), output);
  }

  // optional int32 streamType = 9 [default = -1];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->streamtype(), output);
  }

  // optional int32 devType = 10 [default = -1];
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->devtype(), output);
  }

  // optional int32 proxyPort = 11 [default = 0];
  if (has_proxyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->proxyport(), output);
  }

  // optional string registerId = 12 [default = ""];
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->registerid(), output);
  }

  // optional string deviceThird = 13 [default = ""];
  if (has_devicethird()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicethird().data(), this->devicethird().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicethird");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->devicethird(), output);
  }

  // optional int32 streamMode = 14 [default = -1];
  if (has_streammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->streammode(), output);
  }

  // optional int32 channelNum = 15 [default = -1];
  if (has_channelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->channelnum(), output);
  }

  // optional int32 loginType = 16 [default = -1];
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->logintype(), output);
  }

  // optional int32 combineStatus = 17 [default = -1];
  if (has_combinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->combinestatus(), output);
  }

  // optional string name = 18 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->name(), output);
  }

  // optional string regId = 19 [default = ""];
  if (has_regid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regid().data(), this->regid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->regid(), output);
  }

  // optional string describe = 20 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->describe(), output);
  }

  // optional int32 mountMode = 21 [default = -1];
  if (has_mountmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->mountmode(), output);
  }

  // optional string serviceCode = 22 [default = ""];
  if (has_servicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicecode().data(), this->servicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->servicecode(), output);
  }

  // optional string upDeviceCode = 23 [default = ""];
  if (has_updevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevicecode().data(), this->updevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->updevicecode(), output);
  }

  // optional int32 devCategory = 24 [default = -1];
  if (has_devcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->devcategory(), output);
  }

  // optional string proxyIp = 25 [default = ""];
  if (has_proxyip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyip().data(), this->proxyip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->proxyip(), output);
  }

  // optional string proxyServiceCode = 26 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->proxyservicecode(), output);
  }

  // optional string deviceSn = 27 [default = ""];
  if (has_devicesn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicesn().data(), this->devicesn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicesn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->devicesn(), output);
  }

  // optional string cascadeDevCode = 29 [default = ""];
  if (has_cascadedevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevcode().data(), this->cascadedevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->cascadedevcode(), output);
  }

  // optional int32 isOnlie = 30 [default = -1];
  if (has_isonlie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isonlie(), output);
  }

  // optional string cascadeDevDomain = 31 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->cascadedevdomain(), output);
  }

  // optional string devDomain = 32 [default = ""];
  if (has_devdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devdomain().data(), this->devdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devdomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->devdomain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DeviceInfo)
  // optional string keyId = 1 [default = ""];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyid().data(), this->keyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyid(), target);
  }

  // optional string devId = 2 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devid(), target);
  }

  // optional string provider = 3 [default = ""];
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provider(), target);
  }

  // optional string model = 4 [default = ""];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string devIp = 5 [default = ""];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devip(), target);
  }

  // optional int32 devPort = 6 [default = -1];
  if (has_devport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->devport(), target);
  }

  // optional string userName = 7 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->username(), target);
  }

  // optional string userPsw = 8 [default = ""];
  if (has_userpsw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpsw().data(), this->userpsw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpsw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->userpsw(), target);
  }

  // optional int32 streamType = 9 [default = -1];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->streamtype(), target);
  }

  // optional int32 devType = 10 [default = -1];
  if (has_devtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->devtype(), target);
  }

  // optional int32 proxyPort = 11 [default = 0];
  if (has_proxyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->proxyport(), target);
  }

  // optional string registerId = 12 [default = ""];
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->registerid(), target);
  }

  // optional string deviceThird = 13 [default = ""];
  if (has_devicethird()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicethird().data(), this->devicethird().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicethird");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->devicethird(), target);
  }

  // optional int32 streamMode = 14 [default = -1];
  if (has_streammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->streammode(), target);
  }

  // optional int32 channelNum = 15 [default = -1];
  if (has_channelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->channelnum(), target);
  }

  // optional int32 loginType = 16 [default = -1];
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->logintype(), target);
  }

  // optional int32 combineStatus = 17 [default = -1];
  if (has_combinestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->combinestatus(), target);
  }

  // optional string name = 18 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->name(), target);
  }

  // optional string regId = 19 [default = ""];
  if (has_regid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regid().data(), this->regid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->regid(), target);
  }

  // optional string describe = 20 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->describe(), target);
  }

  // optional int32 mountMode = 21 [default = -1];
  if (has_mountmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->mountmode(), target);
  }

  // optional string serviceCode = 22 [default = ""];
  if (has_servicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicecode().data(), this->servicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->servicecode(), target);
  }

  // optional string upDeviceCode = 23 [default = ""];
  if (has_updevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevicecode().data(), this->updevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->updevicecode(), target);
  }

  // optional int32 devCategory = 24 [default = -1];
  if (has_devcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->devcategory(), target);
  }

  // optional string proxyIp = 25 [default = ""];
  if (has_proxyip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyip().data(), this->proxyip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->proxyip(), target);
  }

  // optional string proxyServiceCode = 26 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->proxyservicecode(), target);
  }

  // optional string deviceSn = 27 [default = ""];
  if (has_devicesn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicesn().data(), this->devicesn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicesn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->devicesn(), target);
  }

  // optional string cascadeDevCode = 29 [default = ""];
  if (has_cascadedevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevcode().data(), this->cascadedevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->cascadedevcode(), target);
  }

  // optional int32 isOnlie = 30 [default = -1];
  if (has_isonlie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isonlie(), target);
  }

  // optional string cascadeDevDomain = 31 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->cascadedevdomain(), target);
  }

  // optional string devDomain = 32 [default = ""];
  if (has_devdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devdomain().data(), this->devdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devdomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->devdomain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DeviceInfo)
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string keyId = 1 [default = ""];
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyid());
    }

    // optional string devId = 2 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string provider = 3 [default = ""];
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional string model = 4 [default = ""];
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string devIp = 5 [default = ""];
    if (has_devip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devip());
    }

    // optional int32 devPort = 6 [default = -1];
    if (has_devport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devport());
    }

    // optional string userName = 7 [default = ""];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string userPsw = 8 [default = ""];
    if (has_userpsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpsw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 streamType = 9 [default = -1];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // optional int32 devType = 10 [default = -1];
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devtype());
    }

    // optional int32 proxyPort = 11 [default = 0];
    if (has_proxyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyport());
    }

    // optional string registerId = 12 [default = ""];
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // optional string deviceThird = 13 [default = ""];
    if (has_devicethird()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicethird());
    }

    // optional int32 streamMode = 14 [default = -1];
    if (has_streammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streammode());
    }

    // optional int32 channelNum = 15 [default = -1];
    if (has_channelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelnum());
    }

    // optional int32 loginType = 16 [default = -1];
    if (has_logintype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 combineStatus = 17 [default = -1];
    if (has_combinestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinestatus());
    }

    // optional string name = 18 [default = ""];
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string regId = 19 [default = ""];
    if (has_regid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regid());
    }

    // optional string describe = 20 [default = ""];
    if (has_describe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional int32 mountMode = 21 [default = -1];
    if (has_mountmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mountmode());
    }

    // optional string serviceCode = 22 [default = ""];
    if (has_servicecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicecode());
    }

    // optional string upDeviceCode = 23 [default = ""];
    if (has_updevicecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updevicecode());
    }

    // optional int32 devCategory = 24 [default = -1];
    if (has_devcategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devcategory());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string proxyIp = 25 [default = ""];
    if (has_proxyip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyip());
    }

    // optional string proxyServiceCode = 26 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional string deviceSn = 27 [default = ""];
    if (has_devicesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicesn());
    }

    // optional string cascadeDevCode = 29 [default = ""];
    if (has_cascadedevcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cascadedevcode());
    }

    // optional int32 isOnlie = 30 [default = -1];
    if (has_isonlie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonlie());
    }

    // optional string cascadeDevDomain = 31 [default = ""];
    if (has_cascadedevdomain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cascadedevdomain());
    }

    // optional string devDomain = 32 [default = ""];
    if (has_devdomain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devdomain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_devip()) {
      set_devip(from.devip());
    }
    if (from.has_devport()) {
      set_devport(from.devport());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpsw()) {
      set_userpsw(from.userpsw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_proxyport()) {
      set_proxyport(from.proxyport());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_devicethird()) {
      set_devicethird(from.devicethird());
    }
    if (from.has_streammode()) {
      set_streammode(from.streammode());
    }
    if (from.has_channelnum()) {
      set_channelnum(from.channelnum());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_combinestatus()) {
      set_combinestatus(from.combinestatus());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_regid()) {
      set_regid(from.regid());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_mountmode()) {
      set_mountmode(from.mountmode());
    }
    if (from.has_servicecode()) {
      set_servicecode(from.servicecode());
    }
    if (from.has_updevicecode()) {
      set_updevicecode(from.updevicecode());
    }
    if (from.has_devcategory()) {
      set_devcategory(from.devcategory());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_proxyip()) {
      set_proxyip(from.proxyip());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_devicesn()) {
      set_devicesn(from.devicesn());
    }
    if (from.has_cascadedevcode()) {
      set_cascadedevcode(from.cascadedevcode());
    }
    if (from.has_isonlie()) {
      set_isonlie(from.isonlie());
    }
    if (from.has_cascadedevdomain()) {
      set_cascadedevdomain(from.cascadedevdomain());
    }
    if (from.has_devdomain()) {
      set_devdomain(from.devdomain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(devid_, other->devid_);
    std::swap(provider_, other->provider_);
    std::swap(model_, other->model_);
    std::swap(devip_, other->devip_);
    std::swap(devport_, other->devport_);
    std::swap(username_, other->username_);
    std::swap(userpsw_, other->userpsw_);
    std::swap(streamtype_, other->streamtype_);
    std::swap(devtype_, other->devtype_);
    std::swap(proxyport_, other->proxyport_);
    std::swap(registerid_, other->registerid_);
    std::swap(devicethird_, other->devicethird_);
    std::swap(streammode_, other->streammode_);
    std::swap(channelnum_, other->channelnum_);
    std::swap(logintype_, other->logintype_);
    std::swap(combinestatus_, other->combinestatus_);
    std::swap(name_, other->name_);
    std::swap(regid_, other->regid_);
    std::swap(describe_, other->describe_);
    std::swap(mountmode_, other->mountmode_);
    std::swap(servicecode_, other->servicecode_);
    std::swap(updevicecode_, other->updevicecode_);
    std::swap(devcategory_, other->devcategory_);
    std::swap(proxyip_, other->proxyip_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(devicesn_, other->devicesn_);
    std::swap(cascadedevcode_, other->cascadedevcode_);
    std::swap(isonlie_, other->isonlie_);
    std::swap(cascadedevdomain_, other->cascadedevdomain_);
    std::swap(devdomain_, other->devdomain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncodeChnnelInfo::kIdFieldNumber;
const int EncodeChnnelInfo::kChannelIdFieldNumber;
const int EncodeChnnelInfo::kNameFieldNumber;
const int EncodeChnnelInfo::kDescribeFieldNumber;
const int EncodeChnnelInfo::kDevCodeFieldNumber;
const int EncodeChnnelInfo::kChannelSeqFieldNumber;
const int EncodeChnnelInfo::kUnitSeqFieldNumber;
const int EncodeChnnelInfo::kTypeFieldNumber;
const int EncodeChnnelInfo::kCameraTypeFieldNumber;
const int EncodeChnnelInfo::kCameraFunctionFieldNumber;
const int EncodeChnnelInfo::kGpsXFieldNumber;
const int EncodeChnnelInfo::kGpsYFieldNumber;
const int EncodeChnnelInfo::kMapIdFieldNumber;
const int EncodeChnnelInfo::kDomainIdFieldNumber;
const int EncodeChnnelInfo::kMemoFieldNumber;
const int EncodeChnnelInfo::kStatFieldNumber;
const int EncodeChnnelInfo::kMulticastIpFieldNumber;
const int EncodeChnnelInfo::kMulticastPortFieldNumber;
const int EncodeChnnelInfo::kIpcIpFieldNumber;
const int EncodeChnnelInfo::kIconDirectionFieldNumber;
const int EncodeChnnelInfo::kRegionCodeFieldNumber;
#endif  // !_MSC_VER

EncodeChnnelInfo::EncodeChnnelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.EncodeChnnelInfo)
}

void EncodeChnnelInfo::InitAsDefaultInstance() {
}

EncodeChnnelInfo::EncodeChnnelInfo(const EncodeChnnelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.EncodeChnnelInfo)
}

void EncodeChnnelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelseq_ = -1;
  unitseq_ = -1;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cameratype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerafunction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapid_ = GOOGLE_LONGLONG(-1);
  domainid_ = GOOGLE_LONGLONG(-1);
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stat_ = -1;
  multicastip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastport_ = -1;
  ipcip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icondirection_ = -1;
  regioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncodeChnnelInfo::~EncodeChnnelInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.EncodeChnnelInfo)
  SharedDtor();
}

void EncodeChnnelInfo::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (cameratype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cameratype_;
  }
  if (camerafunction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camerafunction_;
  }
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_x_;
  }
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_y_;
  }
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (multicastip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete multicastip_;
  }
  if (ipcip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipcip_;
  }
  if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regioncode_;
  }
  if (this != default_instance_) {
  }
}

void EncodeChnnelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncodeChnnelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncodeChnnelInfo_descriptor_;
}

const EncodeChnnelInfo& EncodeChnnelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

EncodeChnnelInfo* EncodeChnnelInfo::default_instance_ = NULL;

EncodeChnnelInfo* EncodeChnnelInfo::New() const {
  return new EncodeChnnelInfo;
}

void EncodeChnnelInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = GOOGLE_LONGLONG(-1);
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    channelseq_ = -1;
    unitseq_ = -1;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_cameratype()) {
      if (cameratype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cameratype_->clear();
      }
    }
    if (has_camerafunction()) {
      if (camerafunction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camerafunction_->clear();
      }
    }
    if (has_gps_x()) {
      if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gps_x_->clear();
      }
    }
    if (has_gps_y()) {
      if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gps_y_->clear();
      }
    }
    mapid_ = GOOGLE_LONGLONG(-1);
    domainid_ = GOOGLE_LONGLONG(-1);
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memo_->clear();
      }
    }
    stat_ = -1;
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_multicastip()) {
      if (multicastip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        multicastip_->clear();
      }
    }
    multicastport_ = -1;
    if (has_ipcip()) {
      if (ipcip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipcip_->clear();
      }
    }
    icondirection_ = -1;
    if (has_regioncode()) {
      if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regioncode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncodeChnnelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.EncodeChnnelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_describe;
        break;
      }

      // optional string describe = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devCode;
        break;
      }

      // optional string devCode = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_devCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelSeq;
        break;
      }

      // optional int32 channelSeq = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_channelSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelseq_)));
          set_has_channelseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unitSeq;
        break;
      }

      // optional int32 unitSeq = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_unitSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitseq_)));
          set_has_unitseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_type;
        break;
      }

      // optional string type = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cameraType;
        break;
      }

      // optional string cameraType = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_cameraType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameratype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cameratype().data(), this->cameratype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cameratype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cameraFunction;
        break;
      }

      // optional string cameraFunction = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_cameraFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camerafunction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camerafunction().data(), this->camerafunction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camerafunction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gps_x;
        break;
      }

      // optional string gps_x = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_gps_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gps_x().data(), this->gps_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_x");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gps_y;
        break;
      }

      // optional string gps_y = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_gps_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gps_y().data(), this->gps_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_y");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mapId;
        break;
      }

      // optional int64 mapId = 13 [default = -1];
      case 13: {
        if (tag == 104) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_domainId;
        break;
      }

      // optional int64 domainId = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_domainId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &domainid_)));
          set_has_domainid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_memo;
        break;
      }

      // optional string memo = 15 [default = ""];
      case 15: {
        if (tag == 122) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "memo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_stat;
        break;
      }

      // optional int32 stat = 16 [default = -1];
      case 16: {
        if (tag == 128) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_multicastIp;
        break;
      }

      // optional string multicastIp = 17 [default = ""];
      case 17: {
        if (tag == 138) {
         parse_multicastIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multicastip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multicastip().data(), this->multicastip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "multicastip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_multicastPort;
        break;
      }

      // optional int32 multicastPort = 18 [default = -1];
      case 18: {
        if (tag == 144) {
         parse_multicastPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multicastport_)));
          set_has_multicastport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ipcIp;
        break;
      }

      // optional string ipcIp = 19 [default = ""];
      case 19: {
        if (tag == 154) {
         parse_ipcIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipcip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipcip().data(), this->ipcip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipcip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_iconDirection;
        break;
      }

      // optional int32 iconDirection = 20 [default = -1];
      case 20: {
        if (tag == 160) {
         parse_iconDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icondirection_)));
          set_has_icondirection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_regionCode;
        break;
      }

      // optional string regionCode = 21 [default = ""];
      case 21: {
        if (tag == 170) {
         parse_regionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regioncode().data(), this->regioncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.EncodeChnnelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.EncodeChnnelInfo)
  return false;
#undef DO_
}

void EncodeChnnelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.EncodeChnnelInfo)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string describe = 4 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->describe(), output);
  }

  // optional string devCode = 5 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devcode(), output);
  }

  // optional int32 channelSeq = 6 [default = -1];
  if (has_channelseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channelseq(), output);
  }

  // optional int32 unitSeq = 7 [default = -1];
  if (has_unitseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unitseq(), output);
  }

  // optional string type = 8 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->type(), output);
  }

  // optional string cameraType = 9 [default = ""];
  if (has_cameratype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameratype().data(), this->cameratype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameratype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cameratype(), output);
  }

  // optional string cameraFunction = 10 [default = ""];
  if (has_camerafunction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camerafunction().data(), this->camerafunction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camerafunction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->camerafunction(), output);
  }

  // optional string gps_x = 11 [default = ""];
  if (has_gps_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_x().data(), this->gps_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_x");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gps_x(), output);
  }

  // optional string gps_y = 12 [default = ""];
  if (has_gps_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_y().data(), this->gps_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->gps_y(), output);
  }

  // optional int64 mapId = 13 [default = -1];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->mapid(), output);
  }

  // optional int64 domainId = 14 [default = -1];
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->domainid(), output);
  }

  // optional string memo = 15 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->memo(), output);
  }

  // optional int32 stat = 16 [default = -1];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->stat(), output);
  }

  // optional string multicastIp = 17 [default = ""];
  if (has_multicastip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multicastip().data(), this->multicastip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "multicastip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->multicastip(), output);
  }

  // optional int32 multicastPort = 18 [default = -1];
  if (has_multicastport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->multicastport(), output);
  }

  // optional string ipcIp = 19 [default = ""];
  if (has_ipcip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipcip().data(), this->ipcip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipcip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->ipcip(), output);
  }

  // optional int32 iconDirection = 20 [default = -1];
  if (has_icondirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->icondirection(), output);
  }

  // optional string regionCode = 21 [default = ""];
  if (has_regioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode().data(), this->regioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->regioncode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.EncodeChnnelInfo)
}

::google::protobuf::uint8* EncodeChnnelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.EncodeChnnelInfo)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string describe = 4 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->describe(), target);
  }

  // optional string devCode = 5 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devcode(), target);
  }

  // optional int32 channelSeq = 6 [default = -1];
  if (has_channelseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->channelseq(), target);
  }

  // optional int32 unitSeq = 7 [default = -1];
  if (has_unitseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unitseq(), target);
  }

  // optional string type = 8 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->type(), target);
  }

  // optional string cameraType = 9 [default = ""];
  if (has_cameratype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameratype().data(), this->cameratype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameratype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cameratype(), target);
  }

  // optional string cameraFunction = 10 [default = ""];
  if (has_camerafunction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camerafunction().data(), this->camerafunction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camerafunction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->camerafunction(), target);
  }

  // optional string gps_x = 11 [default = ""];
  if (has_gps_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_x().data(), this->gps_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_x");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gps_x(), target);
  }

  // optional string gps_y = 12 [default = ""];
  if (has_gps_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_y().data(), this->gps_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gps_y(), target);
  }

  // optional int64 mapId = 13 [default = -1];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->mapid(), target);
  }

  // optional int64 domainId = 14 [default = -1];
  if (has_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->domainid(), target);
  }

  // optional string memo = 15 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->memo(), target);
  }

  // optional int32 stat = 16 [default = -1];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->stat(), target);
  }

  // optional string multicastIp = 17 [default = ""];
  if (has_multicastip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multicastip().data(), this->multicastip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "multicastip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->multicastip(), target);
  }

  // optional int32 multicastPort = 18 [default = -1];
  if (has_multicastport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->multicastport(), target);
  }

  // optional string ipcIp = 19 [default = ""];
  if (has_ipcip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipcip().data(), this->ipcip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipcip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->ipcip(), target);
  }

  // optional int32 iconDirection = 20 [default = -1];
  if (has_icondirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->icondirection(), target);
  }

  // optional string regionCode = 21 [default = ""];
  if (has_regioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode().data(), this->regioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->regioncode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.EncodeChnnelInfo)
  return target;
}

int EncodeChnnelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string describe = 4 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional string devCode = 5 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional int32 channelSeq = 6 [default = -1];
    if (has_channelseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelseq());
    }

    // optional int32 unitSeq = 7 [default = -1];
    if (has_unitseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitseq());
    }

    // optional string type = 8 [default = ""];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cameraType = 9 [default = ""];
    if (has_cameratype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameratype());
    }

    // optional string cameraFunction = 10 [default = ""];
    if (has_camerafunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camerafunction());
    }

    // optional string gps_x = 11 [default = ""];
    if (has_gps_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps_x());
    }

    // optional string gps_y = 12 [default = ""];
    if (has_gps_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps_y());
    }

    // optional int64 mapId = 13 [default = -1];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 domainId = 14 [default = -1];
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->domainid());
    }

    // optional string memo = 15 [default = ""];
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional int32 stat = 16 [default = -1];
    if (has_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string multicastIp = 17 [default = ""];
    if (has_multicastip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multicastip());
    }

    // optional int32 multicastPort = 18 [default = -1];
    if (has_multicastport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multicastport());
    }

    // optional string ipcIp = 19 [default = ""];
    if (has_ipcip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipcip());
    }

    // optional int32 iconDirection = 20 [default = -1];
    if (has_icondirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icondirection());
    }

    // optional string regionCode = 21 [default = ""];
    if (has_regioncode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regioncode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncodeChnnelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncodeChnnelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncodeChnnelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncodeChnnelInfo::MergeFrom(const EncodeChnnelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_channelseq()) {
      set_channelseq(from.channelseq());
    }
    if (from.has_unitseq()) {
      set_unitseq(from.unitseq());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cameratype()) {
      set_cameratype(from.cameratype());
    }
    if (from.has_camerafunction()) {
      set_camerafunction(from.camerafunction());
    }
    if (from.has_gps_x()) {
      set_gps_x(from.gps_x());
    }
    if (from.has_gps_y()) {
      set_gps_y(from.gps_y());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_multicastip()) {
      set_multicastip(from.multicastip());
    }
    if (from.has_multicastport()) {
      set_multicastport(from.multicastport());
    }
    if (from.has_ipcip()) {
      set_ipcip(from.ipcip());
    }
    if (from.has_icondirection()) {
      set_icondirection(from.icondirection());
    }
    if (from.has_regioncode()) {
      set_regioncode(from.regioncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncodeChnnelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodeChnnelInfo::CopyFrom(const EncodeChnnelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodeChnnelInfo::IsInitialized() const {

  return true;
}

void EncodeChnnelInfo::Swap(EncodeChnnelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(channelid_, other->channelid_);
    std::swap(name_, other->name_);
    std::swap(describe_, other->describe_);
    std::swap(devcode_, other->devcode_);
    std::swap(channelseq_, other->channelseq_);
    std::swap(unitseq_, other->unitseq_);
    std::swap(type_, other->type_);
    std::swap(cameratype_, other->cameratype_);
    std::swap(camerafunction_, other->camerafunction_);
    std::swap(gps_x_, other->gps_x_);
    std::swap(gps_y_, other->gps_y_);
    std::swap(mapid_, other->mapid_);
    std::swap(domainid_, other->domainid_);
    std::swap(memo_, other->memo_);
    std::swap(stat_, other->stat_);
    std::swap(multicastip_, other->multicastip_);
    std::swap(multicastport_, other->multicastport_);
    std::swap(ipcip_, other->ipcip_);
    std::swap(icondirection_, other->icondirection_);
    std::swap(regioncode_, other->regioncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncodeChnnelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncodeChnnelInfo_descriptor_;
  metadata.reflection = EncodeChnnelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmInChannelInfo::kIdFieldNumber;
const int AlarmInChannelInfo::kDevCodeFieldNumber;
const int AlarmInChannelInfo::kUnitSeqFieldNumber;
const int AlarmInChannelInfo::kChannelSeqFieldNumber;
const int AlarmInChannelInfo::kChannelNameFieldNumber;
const int AlarmInChannelInfo::kAlarmTypeFieldNumber;
const int AlarmInChannelInfo::kAlarmGradeFieldNumber;
const int AlarmInChannelInfo::kGpsXFieldNumber;
const int AlarmInChannelInfo::kGpsYFieldNumber;
const int AlarmInChannelInfo::kMapIdFieldNumber;
const int AlarmInChannelInfo::kDomainIdFieldNumber;
const int AlarmInChannelInfo::kMemoFieldNumber;
const int AlarmInChannelInfo::kStateFieldNumber;
const int AlarmInChannelInfo::kRegionCodeFieldNumber;
#endif  // !_MSC_VER

AlarmInChannelInfo::AlarmInChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmInChannelInfo)
}

void AlarmInChannelInfo::InitAsDefaultInstance() {
}

AlarmInChannelInfo::AlarmInChannelInfo(const AlarmInChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmInChannelInfo)
}

void AlarmInChannelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitseq_ = -1;
  channelseq_ = -1;
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alarmtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alarmgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapid_ = GOOGLE_LONGLONG(-1);
  domainid_ = GOOGLE_LONGLONG(-1);
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = -1;
  regioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmInChannelInfo::~AlarmInChannelInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmInChannelInfo)
  SharedDtor();
}

void AlarmInChannelInfo::SharedDtor() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (alarmtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmtype_;
  }
  if (alarmgrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmgrade_;
  }
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_x_;
  }
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_y_;
  }
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regioncode_;
  }
  if (this != default_instance_) {
  }
}

void AlarmInChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmInChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmInChannelInfo_descriptor_;
}

const AlarmInChannelInfo& AlarmInChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

AlarmInChannelInfo* AlarmInChannelInfo::default_instance_ = NULL;

AlarmInChannelInfo* AlarmInChannelInfo::New() const {
  return new AlarmInChannelInfo;
}

void AlarmInChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = GOOGLE_LONGLONG(-1);
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    unitseq_ = -1;
    channelseq_ = -1;
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelname_->clear();
      }
    }
    if (has_alarmtype()) {
      if (alarmtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarmtype_->clear();
      }
    }
    if (has_alarmgrade()) {
      if (alarmgrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarmgrade_->clear();
      }
    }
    if (has_gps_x()) {
      if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gps_x_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_gps_y()) {
      if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gps_y_->clear();
      }
    }
    mapid_ = GOOGLE_LONGLONG(-1);
    domainid_ = GOOGLE_LONGLONG(-1);
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memo_->clear();
      }
    }
    state_ = -1;
    if (has_regioncode()) {
      if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regioncode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmInChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmInChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devCode;
        break;
      }

      // optional string devCode = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_devCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unitSeq;
        break;
      }

      // optional int32 unitSeq = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_unitSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitseq_)));
          set_has_unitseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelSeq;
        break;
      }

      // optional int32 channelSeq = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_channelSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelseq_)));
          set_has_channelseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channelName;
        break;
      }

      // optional string channelName = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_channelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alarmType;
        break;
      }

      // optional string alarmType = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_alarmType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alarmtype().data(), this->alarmtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alarmtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_alarmGrade;
        break;
      }

      // optional string alarmGrade = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_alarmGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmgrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alarmgrade().data(), this->alarmgrade().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alarmgrade");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gps_x;
        break;
      }

      // optional string gps_x = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_gps_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gps_x().data(), this->gps_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_x");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gps_y;
        break;
      }

      // optional string gps_y = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_gps_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gps_y().data(), this->gps_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_y");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mapId;
        break;
      }

      // optional int64 mapId = 10 [default = -1];
      case 10: {
        if (tag == 80) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_domainId;
        break;
      }

      // optional int64 domainId = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_domainId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &domainid_)));
          set_has_domainid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_memo;
        break;
      }

      // optional string memo = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "memo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // optional int32 state = 13 [default = -1];
      case 13: {
        if (tag == 104) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_regionCode;
        break;
      }

      // optional string regionCode = 14 [default = ""];
      case 14: {
        if (tag == 114) {
         parse_regionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regioncode().data(), this->regioncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmInChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmInChannelInfo)
  return false;
#undef DO_
}

void AlarmInChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmInChannelInfo)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string devCode = 2 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devcode(), output);
  }

  // optional int32 unitSeq = 3 [default = -1];
  if (has_unitseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unitseq(), output);
  }

  // optional int32 channelSeq = 4 [default = -1];
  if (has_channelseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channelseq(), output);
  }

  // optional string channelName = 5 [default = ""];
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->channelname(), output);
  }

  // optional string alarmType = 6 [default = ""];
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmtype().data(), this->alarmtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->alarmtype(), output);
  }

  // optional string alarmGrade = 7 [default = ""];
  if (has_alarmgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmgrade().data(), this->alarmgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmgrade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->alarmgrade(), output);
  }

  // optional string gps_x = 8 [default = ""];
  if (has_gps_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_x().data(), this->gps_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_x");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gps_x(), output);
  }

  // optional string gps_y = 9 [default = ""];
  if (has_gps_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_y().data(), this->gps_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gps_y(), output);
  }

  // optional int64 mapId = 10 [default = -1];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mapid(), output);
  }

  // optional int64 domainId = 11 [default = -1];
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->domainid(), output);
  }

  // optional string memo = 12 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->memo(), output);
  }

  // optional int32 state = 13 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->state(), output);
  }

  // optional string regionCode = 14 [default = ""];
  if (has_regioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode().data(), this->regioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->regioncode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmInChannelInfo)
}

::google::protobuf::uint8* AlarmInChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmInChannelInfo)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string devCode = 2 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devcode(), target);
  }

  // optional int32 unitSeq = 3 [default = -1];
  if (has_unitseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unitseq(), target);
  }

  // optional int32 channelSeq = 4 [default = -1];
  if (has_channelseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channelseq(), target);
  }

  // optional string channelName = 5 [default = ""];
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channelname(), target);
  }

  // optional string alarmType = 6 [default = ""];
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmtype().data(), this->alarmtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alarmtype(), target);
  }

  // optional string alarmGrade = 7 [default = ""];
  if (has_alarmgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmgrade().data(), this->alarmgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmgrade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->alarmgrade(), target);
  }

  // optional string gps_x = 8 [default = ""];
  if (has_gps_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_x().data(), this->gps_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_x");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gps_x(), target);
  }

  // optional string gps_y = 9 [default = ""];
  if (has_gps_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps_y().data(), this->gps_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gps_y(), target);
  }

  // optional int64 mapId = 10 [default = -1];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->mapid(), target);
  }

  // optional int64 domainId = 11 [default = -1];
  if (has_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->domainid(), target);
  }

  // optional string memo = 12 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->memo(), target);
  }

  // optional int32 state = 13 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->state(), target);
  }

  // optional string regionCode = 14 [default = ""];
  if (has_regioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode().data(), this->regioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->regioncode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmInChannelInfo)
  return target;
}

int AlarmInChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string devCode = 2 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional int32 unitSeq = 3 [default = -1];
    if (has_unitseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitseq());
    }

    // optional int32 channelSeq = 4 [default = -1];
    if (has_channelseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelseq());
    }

    // optional string channelName = 5 [default = ""];
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

    // optional string alarmType = 6 [default = ""];
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmtype());
    }

    // optional string alarmGrade = 7 [default = ""];
    if (has_alarmgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmgrade());
    }

    // optional string gps_x = 8 [default = ""];
    if (has_gps_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps_x());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string gps_y = 9 [default = ""];
    if (has_gps_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps_y());
    }

    // optional int64 mapId = 10 [default = -1];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 domainId = 11 [default = -1];
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->domainid());
    }

    // optional string memo = 12 [default = ""];
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional int32 state = 13 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string regionCode = 14 [default = ""];
    if (has_regioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regioncode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmInChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmInChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmInChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmInChannelInfo::MergeFrom(const AlarmInChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_unitseq()) {
      set_unitseq(from.unitseq());
    }
    if (from.has_channelseq()) {
      set_channelseq(from.channelseq());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_alarmgrade()) {
      set_alarmgrade(from.alarmgrade());
    }
    if (from.has_gps_x()) {
      set_gps_x(from.gps_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gps_y()) {
      set_gps_y(from.gps_y());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_regioncode()) {
      set_regioncode(from.regioncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmInChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmInChannelInfo::CopyFrom(const AlarmInChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmInChannelInfo::IsInitialized() const {

  return true;
}

void AlarmInChannelInfo::Swap(AlarmInChannelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(devcode_, other->devcode_);
    std::swap(unitseq_, other->unitseq_);
    std::swap(channelseq_, other->channelseq_);
    std::swap(channelname_, other->channelname_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(alarmgrade_, other->alarmgrade_);
    std::swap(gps_x_, other->gps_x_);
    std::swap(gps_y_, other->gps_y_);
    std::swap(mapid_, other->mapid_);
    std::swap(domainid_, other->domainid_);
    std::swap(memo_, other->memo_);
    std::swap(state_, other->state_);
    std::swap(regioncode_, other->regioncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmInChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmInChannelInfo_descriptor_;
  metadata.reflection = AlarmInChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeviceOpr::kDevCodeFieldNumber;
const int ReqDeviceOpr::kChannelIdFieldNumber;
const int ReqDeviceOpr::kDevTypeFieldNumber;
const int ReqDeviceOpr::kMountTypeFieldNumber;
const int ReqDeviceOpr::kServiceIdFieldNumber;
const int ReqDeviceOpr::kUpDeviceCodeFieldNumber;
const int ReqDeviceOpr::kDoTypeFieldNumber;
const int ReqDeviceOpr::kStepWithFieldNumber;
const int ReqDeviceOpr::kStepHightFieldNumber;
const int ReqDeviceOpr::kCascadeDevDomainFieldNumber;
const int ReqDeviceOpr::kReqestTypeFieldNumber;
const int ReqDeviceOpr::kProxyIpFieldNumber;
const int ReqDeviceOpr::kProxyPortFieldNumber;
const int ReqDeviceOpr::kProxyServiceCodeFieldNumber;
const int ReqDeviceOpr::kResultFieldNumber;
const int ReqDeviceOpr::kResultDescirbeFieldNumber;
#endif  // !_MSC_VER

ReqDeviceOpr::ReqDeviceOpr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDeviceOpr)
}

void ReqDeviceOpr::InitAsDefaultInstance() {
}

ReqDeviceOpr::ReqDeviceOpr(const ReqDeviceOpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDeviceOpr)
}

void ReqDeviceOpr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devtype_ = -1;
  mounttype_ = -1;
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dotype_ = -1;
  stepwith_ = GOOGLE_LONGLONG(-1);
  stephight_ = GOOGLE_LONGLONG(-1);
  cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reqesttype_ = -1;
  proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyport_ = 0;
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = -1;
  resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeviceOpr::~ReqDeviceOpr() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDeviceOpr)
  SharedDtor();
}

void ReqDeviceOpr::SharedDtor() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevicecode_;
  }
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyip_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (this != default_instance_) {
  }
}

void ReqDeviceOpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeviceOpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeviceOpr_descriptor_;
}

const ReqDeviceOpr& ReqDeviceOpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqDeviceOpr* ReqDeviceOpr::default_instance_ = NULL;

ReqDeviceOpr* ReqDeviceOpr::New() const {
  return new ReqDeviceOpr;
}

void ReqDeviceOpr::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    devtype_ = -1;
    mounttype_ = -1;
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    if (has_updevicecode()) {
      if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updevicecode_->clear();
      }
    }
    dotype_ = -1;
    stepwith_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[8 / 32] & 65280) {
    stephight_ = GOOGLE_LONGLONG(-1);
    if (has_cascadedevdomain()) {
      if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cascadedevdomain_->clear();
      }
    }
    reqesttype_ = -1;
    if (has_proxyip()) {
      if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyip_->clear();
      }
    }
    proxyport_ = 0;
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    result_ = -1;
    if (has_resultdescirbe()) {
      if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescirbe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeviceOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDeviceOpr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_devType;
        break;
      }

      // optional int32 devType = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_devType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devtype_)));
          set_has_devtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mountType;
        break;
      }

      // optional int32 mountType = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_mountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mounttype_)));
          set_has_mounttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serviceId;
        break;
      }

      // optional string serviceId = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_serviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_upDeviceCode;
        break;
      }

      // optional string upDeviceCode = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_upDeviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updevicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updevicecode().data(), this->updevicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "updevicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_doType;
        break;
      }

      // optional int32 doType = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_doType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dotype_)));
          set_has_dotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stepWith;
        break;
      }

      // optional int64 stepWith = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_stepWith:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stepwith_)));
          set_has_stepwith();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_stepHight;
        break;
      }

      // optional int64 stepHight = 9 [default = -1];
      case 9: {
        if (tag == 72) {
         parse_stepHight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stephight_)));
          set_has_stephight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cascadeDevDomain;
        break;
      }

      // optional string cascadeDevDomain = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_cascadeDevDomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cascadedevdomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cascadedevdomain().data(), this->cascadedevdomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cascadedevdomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reqestType;
        break;
      }

      // optional int32 reqestType = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_reqestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqesttype_)));
          set_has_reqesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_proxyIp;
        break;
      }

      // optional string proxyIp = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_proxyIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyip().data(), this->proxyip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_proxyPort;
        break;
      }

      // optional int32 proxyPort = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_proxyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyport_)));
          set_has_proxyport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 14 [default = ""];
      case 14: {
        if (tag == 114) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_result;
        break;
      }

      // optional int32 result = 15 [default = -1];
      case 15: {
        if (tag == 120) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_resultDescirbe;
        break;
      }

      // optional string resultDescirbe = 16 [default = ""];
      case 16: {
        if (tag == 130) {
         parse_resultDescirbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultdescirbe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultdescirbe().data(), this->resultdescirbe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultdescirbe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDeviceOpr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDeviceOpr)
  return false;
#undef DO_
}

void ReqDeviceOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDeviceOpr)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devcode(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional int32 devType = 3 [default = -1];
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->devtype(), output);
  }

  // optional int32 mountType = 4 [default = -1];
  if (has_mounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mounttype(), output);
  }

  // optional string serviceId = 5 [default = ""];
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serviceid(), output);
  }

  // optional string upDeviceCode = 6 [default = ""];
  if (has_updevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevicecode().data(), this->updevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->updevicecode(), output);
  }

  // optional int32 doType = 7 [default = -1];
  if (has_dotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dotype(), output);
  }

  // optional int64 stepWith = 8 [default = -1];
  if (has_stepwith()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->stepwith(), output);
  }

  // optional int64 stepHight = 9 [default = -1];
  if (has_stephight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->stephight(), output);
  }

  // optional string cascadeDevDomain = 10 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cascadedevdomain(), output);
  }

  // optional int32 reqestType = 11 [default = -1];
  if (has_reqesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reqesttype(), output);
  }

  // optional string proxyIp = 12 [default = ""];
  if (has_proxyip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyip().data(), this->proxyip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->proxyip(), output);
  }

  // optional int32 proxyPort = 13 [default = 0];
  if (has_proxyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->proxyport(), output);
  }

  // optional string proxyServiceCode = 14 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->proxyservicecode(), output);
  }

  // optional int32 result = 15 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->result(), output);
  }

  // optional string resultDescirbe = 16 [default = ""];
  if (has_resultdescirbe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescirbe().data(), this->resultdescirbe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescirbe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->resultdescirbe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDeviceOpr)
}

::google::protobuf::uint8* ReqDeviceOpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDeviceOpr)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devcode(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional int32 devType = 3 [default = -1];
  if (has_devtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->devtype(), target);
  }

  // optional int32 mountType = 4 [default = -1];
  if (has_mounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mounttype(), target);
  }

  // optional string serviceId = 5 [default = ""];
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serviceid(), target);
  }

  // optional string upDeviceCode = 6 [default = ""];
  if (has_updevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevicecode().data(), this->updevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->updevicecode(), target);
  }

  // optional int32 doType = 7 [default = -1];
  if (has_dotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dotype(), target);
  }

  // optional int64 stepWith = 8 [default = -1];
  if (has_stepwith()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->stepwith(), target);
  }

  // optional int64 stepHight = 9 [default = -1];
  if (has_stephight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->stephight(), target);
  }

  // optional string cascadeDevDomain = 10 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cascadedevdomain(), target);
  }

  // optional int32 reqestType = 11 [default = -1];
  if (has_reqesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reqesttype(), target);
  }

  // optional string proxyIp = 12 [default = ""];
  if (has_proxyip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyip().data(), this->proxyip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->proxyip(), target);
  }

  // optional int32 proxyPort = 13 [default = 0];
  if (has_proxyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->proxyport(), target);
  }

  // optional string proxyServiceCode = 14 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->proxyservicecode(), target);
  }

  // optional int32 result = 15 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->result(), target);
  }

  // optional string resultDescirbe = 16 [default = ""];
  if (has_resultdescirbe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescirbe().data(), this->resultdescirbe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescirbe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->resultdescirbe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDeviceOpr)
  return target;
}

int ReqDeviceOpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devCode = 1 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional int32 devType = 3 [default = -1];
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devtype());
    }

    // optional int32 mountType = 4 [default = -1];
    if (has_mounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mounttype());
    }

    // optional string serviceId = 5 [default = ""];
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // optional string upDeviceCode = 6 [default = ""];
    if (has_updevicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updevicecode());
    }

    // optional int32 doType = 7 [default = -1];
    if (has_dotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotype());
    }

    // optional int64 stepWith = 8 [default = -1];
    if (has_stepwith()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stepwith());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 stepHight = 9 [default = -1];
    if (has_stephight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stephight());
    }

    // optional string cascadeDevDomain = 10 [default = ""];
    if (has_cascadedevdomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cascadedevdomain());
    }

    // optional int32 reqestType = 11 [default = -1];
    if (has_reqesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqesttype());
    }

    // optional string proxyIp = 12 [default = ""];
    if (has_proxyip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyip());
    }

    // optional int32 proxyPort = 13 [default = 0];
    if (has_proxyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyport());
    }

    // optional string proxyServiceCode = 14 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional int32 result = 15 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string resultDescirbe = 16 [default = ""];
    if (has_resultdescirbe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultdescirbe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeviceOpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeviceOpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeviceOpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeviceOpr::MergeFrom(const ReqDeviceOpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_mounttype()) {
      set_mounttype(from.mounttype());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_updevicecode()) {
      set_updevicecode(from.updevicecode());
    }
    if (from.has_dotype()) {
      set_dotype(from.dotype());
    }
    if (from.has_stepwith()) {
      set_stepwith(from.stepwith());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stephight()) {
      set_stephight(from.stephight());
    }
    if (from.has_cascadedevdomain()) {
      set_cascadedevdomain(from.cascadedevdomain());
    }
    if (from.has_reqesttype()) {
      set_reqesttype(from.reqesttype());
    }
    if (from.has_proxyip()) {
      set_proxyip(from.proxyip());
    }
    if (from.has_proxyport()) {
      set_proxyport(from.proxyport());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescirbe()) {
      set_resultdescirbe(from.resultdescirbe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeviceOpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeviceOpr::CopyFrom(const ReqDeviceOpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeviceOpr::IsInitialized() const {

  return true;
}

void ReqDeviceOpr::Swap(ReqDeviceOpr* other) {
  if (other != this) {
    std::swap(devcode_, other->devcode_);
    std::swap(channelid_, other->channelid_);
    std::swap(devtype_, other->devtype_);
    std::swap(mounttype_, other->mounttype_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(updevicecode_, other->updevicecode_);
    std::swap(dotype_, other->dotype_);
    std::swap(stepwith_, other->stepwith_);
    std::swap(stephight_, other->stephight_);
    std::swap(cascadedevdomain_, other->cascadedevdomain_);
    std::swap(reqesttype_, other->reqesttype_);
    std::swap(proxyip_, other->proxyip_);
    std::swap(proxyport_, other->proxyport_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(result_, other->result_);
    std::swap(resultdescirbe_, other->resultdescirbe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeviceOpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeviceOpr_descriptor_;
  metadata.reflection = ReqDeviceOpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDeviceStatus_ChannelStat::kCodeFieldNumber;
const int ReportDeviceStatus_ChannelStat::kSeqFieldNumber;
const int ReportDeviceStatus_ChannelStat::kStatFieldNumber;
#endif  // !_MSC_VER

ReportDeviceStatus_ChannelStat::ReportDeviceStatus_ChannelStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
}

void ReportDeviceStatus_ChannelStat::InitAsDefaultInstance() {
}

ReportDeviceStatus_ChannelStat::ReportDeviceStatus_ChannelStat(const ReportDeviceStatus_ChannelStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
}

void ReportDeviceStatus_ChannelStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = -1;
  stat_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeviceStatus_ChannelStat::~ReportDeviceStatus_ChannelStat() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  SharedDtor();
}

void ReportDeviceStatus_ChannelStat::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void ReportDeviceStatus_ChannelStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeviceStatus_ChannelStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeviceStatus_ChannelStat_descriptor_;
}

const ReportDeviceStatus_ChannelStat& ReportDeviceStatus_ChannelStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReportDeviceStatus_ChannelStat* ReportDeviceStatus_ChannelStat::default_instance_ = NULL;

ReportDeviceStatus_ChannelStat* ReportDeviceStatus_ChannelStat::New() const {
  return new ReportDeviceStatus_ChannelStat;
}

void ReportDeviceStatus_ChannelStat::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    seq_ = -1;
    stat_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeviceStatus_ChannelStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional int32 seq = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stat;
        break;
      }

      // optional int32 stat = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  return false;
#undef DO_
}

void ReportDeviceStatus_ChannelStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional int32 seq = 2 [default = -1];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  // optional int32 stat = 3 [default = -1];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
}

::google::protobuf::uint8* ReportDeviceStatus_ChannelStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional int32 seq = 2 [default = -1];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  // optional int32 stat = 3 [default = -1];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
  return target;
}

int ReportDeviceStatus_ChannelStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 seq = 2 [default = -1];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // optional int32 stat = 3 [default = -1];
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeviceStatus_ChannelStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeviceStatus_ChannelStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeviceStatus_ChannelStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeviceStatus_ChannelStat::MergeFrom(const ReportDeviceStatus_ChannelStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeviceStatus_ChannelStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeviceStatus_ChannelStat::CopyFrom(const ReportDeviceStatus_ChannelStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeviceStatus_ChannelStat::IsInitialized() const {

  return true;
}

void ReportDeviceStatus_ChannelStat::Swap(ReportDeviceStatus_ChannelStat* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(seq_, other->seq_);
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeviceStatus_ChannelStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeviceStatus_ChannelStat_descriptor_;
  metadata.reflection = ReportDeviceStatus_ChannelStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReportDeviceStatus::kCodeFieldNumber;
const int ReportDeviceStatus::kStatFieldNumber;
const int ReportDeviceStatus::kChannelsFieldNumber;
const int ReportDeviceStatus::kCascadeDevDomainFieldNumber;
const int ReportDeviceStatus::kDevIpFieldNumber;
const int ReportDeviceStatus::kDevPortFieldNumber;
#endif  // !_MSC_VER

ReportDeviceStatus::ReportDeviceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReportDeviceStatus)
}

void ReportDeviceStatus::InitAsDefaultInstance() {
}

ReportDeviceStatus::ReportDeviceStatus(const ReportDeviceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReportDeviceStatus)
}

void ReportDeviceStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stat_ = -1;
  cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeviceStatus::~ReportDeviceStatus() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReportDeviceStatus)
  SharedDtor();
}

void ReportDeviceStatus::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devip_;
  }
  if (this != default_instance_) {
  }
}

void ReportDeviceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeviceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeviceStatus_descriptor_;
}

const ReportDeviceStatus& ReportDeviceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReportDeviceStatus* ReportDeviceStatus::default_instance_ = NULL;

ReportDeviceStatus* ReportDeviceStatus::New() const {
  return new ReportDeviceStatus;
}

void ReportDeviceStatus::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    stat_ = -1;
    if (has_cascadedevdomain()) {
      if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cascadedevdomain_->clear();
      }
    }
    if (has_devip()) {
      if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devip_->clear();
      }
    }
    devport_ = 0;
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeviceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReportDeviceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat;
        break;
      }

      // optional int32 stat = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }

      // repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
      case 3: {
        if (tag == 26) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        if (input->ExpectTag(34)) goto parse_cascadeDevDomain;
        break;
      }

      // optional string cascadeDevDomain = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_cascadeDevDomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cascadedevdomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cascadedevdomain().data(), this->cascadedevdomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cascadedevdomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devIp;
        break;
      }

      // optional string devIp = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_devIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devip().data(), this->devip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_devPort;
        break;
      }

      // optional int32 devPort = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_devPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devport_)));
          set_has_devport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReportDeviceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReportDeviceStatus)
  return false;
#undef DO_
}

void ReportDeviceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReportDeviceStatus)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional int32 stat = 2 [default = -1];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stat(), output);
  }

  // repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(i), output);
  }

  // optional string cascadeDevDomain = 4 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cascadedevdomain(), output);
  }

  // optional string devIp = 5 [default = ""];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devip(), output);
  }

  // optional int32 devPort = 6 [default = 0];
  if (has_devport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->devport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReportDeviceStatus)
}

::google::protobuf::uint8* ReportDeviceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReportDeviceStatus)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional int32 stat = 2 [default = -1];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stat(), target);
  }

  // repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channels(i), target);
  }

  // optional string cascadeDevDomain = 4 [default = ""];
  if (has_cascadedevdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cascadedevdomain().data(), this->cascadedevdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cascadedevdomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cascadedevdomain(), target);
  }

  // optional string devIp = 5 [default = ""];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devip(), target);
  }

  // optional int32 devPort = 6 [default = 0];
  if (has_devport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->devport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReportDeviceStatus)
  return target;
}

int ReportDeviceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 stat = 2 [default = -1];
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

    // optional string cascadeDevDomain = 4 [default = ""];
    if (has_cascadedevdomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cascadedevdomain());
    }

    // optional string devIp = 5 [default = ""];
    if (has_devip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devip());
    }

    // optional int32 devPort = 6 [default = 0];
    if (has_devport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devport());
    }

  }
  // repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeviceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeviceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeviceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeviceStatus::MergeFrom(const ReportDeviceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_cascadedevdomain()) {
      set_cascadedevdomain(from.cascadedevdomain());
    }
    if (from.has_devip()) {
      set_devip(from.devip());
    }
    if (from.has_devport()) {
      set_devport(from.devport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeviceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeviceStatus::CopyFrom(const ReportDeviceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeviceStatus::IsInitialized() const {

  return true;
}

void ReportDeviceStatus::Swap(ReportDeviceStatus* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(stat_, other->stat_);
    channels_.Swap(&other->channels_);
    std::swap(cascadedevdomain_, other->cascadedevdomain_);
    std::swap(devip_, other->devip_);
    std::swap(devport_, other->devport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeviceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeviceStatus_descriptor_;
  metadata.reflection = ReportDeviceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEncodeChannelInfo::kChannelIdFieldNumber;
const int ReqEncodeChannelInfo::kRegionCodeFieldNumber;
const int ReqEncodeChannelInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqEncodeChannelInfo::ReqEncodeChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqEncodeChannelInfo)
}

void ReqEncodeChannelInfo::InitAsDefaultInstance() {
}

ReqEncodeChannelInfo::ReqEncodeChannelInfo(const ReqEncodeChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqEncodeChannelInfo)
}

void ReqEncodeChannelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEncodeChannelInfo::~ReqEncodeChannelInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqEncodeChannelInfo)
  SharedDtor();
}

void ReqEncodeChannelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEncodeChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEncodeChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEncodeChannelInfo_descriptor_;
}

const ReqEncodeChannelInfo& ReqEncodeChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqEncodeChannelInfo* ReqEncodeChannelInfo::default_instance_ = NULL;

ReqEncodeChannelInfo* ReqEncodeChannelInfo::New() const {
  return new ReqEncodeChannelInfo;
}

void ReqEncodeChannelInfo::Clear() {
  type_ = 0;
  channelid_.Clear();
  regioncode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEncodeChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqEncodeChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channelId = 1;
      case 1: {
        if (tag == 10) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid(this->channelid_size() - 1).data(),
            this->channelid(this->channelid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channelId;
        if (input->ExpectTag(18)) goto parse_regionCode;
        break;
      }

      // repeated string regionCode = 2;
      case 2: {
        if (tag == 18) {
         parse_regionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regioncode(this->regioncode_size() - 1).data(),
            this->regioncode(this->regioncode_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_regionCode;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqEncodeChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqEncodeChannelInfo)
  return false;
#undef DO_
}

void ReqEncodeChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqEncodeChannelInfo)
  // repeated string channelId = 1;
  for (int i = 0; i < this->channelid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channelid(i).data(), this->channelid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelid(i), output);
  }

  // repeated string regionCode = 2;
  for (int i = 0; i < this->regioncode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->regioncode(i).data(), this->regioncode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "regioncode");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->regioncode(i), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqEncodeChannelInfo)
}

::google::protobuf::uint8* ReqEncodeChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqEncodeChannelInfo)
  // repeated string channelId = 1;
  for (int i = 0; i < this->channelid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid(i).data(), this->channelid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channelid(i), target);
  }

  // repeated string regionCode = 2;
  for (int i = 0; i < this->regioncode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode(i).data(), this->regioncode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->regioncode(i), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqEncodeChannelInfo)
  return target;
}

int ReqEncodeChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string channelId = 1;
  total_size += 1 * this->channelid_size();
  for (int i = 0; i < this->channelid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channelid(i));
  }

  // repeated string regionCode = 2;
  total_size += 1 * this->regioncode_size();
  for (int i = 0; i < this->regioncode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regioncode(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEncodeChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEncodeChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEncodeChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEncodeChannelInfo::MergeFrom(const ReqEncodeChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  channelid_.MergeFrom(from.channelid_);
  regioncode_.MergeFrom(from.regioncode_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEncodeChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEncodeChannelInfo::CopyFrom(const ReqEncodeChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEncodeChannelInfo::IsInitialized() const {

  return true;
}

void ReqEncodeChannelInfo::Swap(ReqEncodeChannelInfo* other) {
  if (other != this) {
    channelid_.Swap(&other->channelid_);
    regioncode_.Swap(&other->regioncode_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEncodeChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEncodeChannelInfo_descriptor_;
  metadata.reflection = ReqEncodeChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspEncodeChannelInfo::kRequestTypeFieldNumber;
const int RspEncodeChannelInfo::kResultFieldNumber;
const int RspEncodeChannelInfo::kResultDescirbeFieldNumber;
const int RspEncodeChannelInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

RspEncodeChannelInfo::RspEncodeChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspEncodeChannelInfo)
}

void RspEncodeChannelInfo::InitAsDefaultInstance() {
}

RspEncodeChannelInfo::RspEncodeChannelInfo(const RspEncodeChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspEncodeChannelInfo)
}

void RspEncodeChannelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = 0;
  result_ = 0;
  resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspEncodeChannelInfo::~RspEncodeChannelInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspEncodeChannelInfo)
  SharedDtor();
}

void RspEncodeChannelInfo::SharedDtor() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (this != default_instance_) {
  }
}

void RspEncodeChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspEncodeChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspEncodeChannelInfo_descriptor_;
}

const RspEncodeChannelInfo& RspEncodeChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

RspEncodeChannelInfo* RspEncodeChannelInfo::default_instance_ = NULL;

RspEncodeChannelInfo* RspEncodeChannelInfo::New() const {
  return new RspEncodeChannelInfo;
}

void RspEncodeChannelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspEncodeChannelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requesttype_, result_);
    if (has_resultdescirbe()) {
      if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescirbe_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspEncodeChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspEncodeChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescirbe;
        break;
      }

      // optional bytes resultDescirbe = 3;
      case 3: {
        if (tag == 26) {
         parse_resultDescirbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescirbe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
      case 4: {
        if (tag == 34) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspEncodeChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspEncodeChannelInfo)
  return false;
#undef DO_
}

void RspEncodeChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspEncodeChannelInfo)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescirbe = 3;
  if (has_resultdescirbe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescirbe(), output);
  }

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspEncodeChannelInfo)
}

::google::protobuf::uint8* RspEncodeChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspEncodeChannelInfo)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescirbe = 3;
  if (has_resultdescirbe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescirbe(), target);
  }

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspEncodeChannelInfo)
  return target;
}

int RspEncodeChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescirbe = 3;
    if (has_resultdescirbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescirbe());
    }

  }
  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspEncodeChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspEncodeChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspEncodeChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspEncodeChannelInfo::MergeFrom(const RspEncodeChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescirbe()) {
      set_resultdescirbe(from.resultdescirbe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspEncodeChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspEncodeChannelInfo::CopyFrom(const RspEncodeChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspEncodeChannelInfo::IsInitialized() const {

  return true;
}

void RspEncodeChannelInfo::Swap(RspEncodeChannelInfo* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescirbe_, other->resultdescirbe_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspEncodeChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspEncodeChannelInfo_descriptor_;
  metadata.reflection = RspEncodeChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmChannelMassage::kRequestTypeFieldNumber;
const int AlarmChannelMassage::kRegionCodeFieldNumber;
const int AlarmChannelMassage::kResultFieldNumber;
const int AlarmChannelMassage::kResultDescirbeFieldNumber;
const int AlarmChannelMassage::kChannelsFieldNumber;
#endif  // !_MSC_VER

AlarmChannelMassage::AlarmChannelMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmChannelMassage)
}

void AlarmChannelMassage::InitAsDefaultInstance() {
}

AlarmChannelMassage::AlarmChannelMassage(const AlarmChannelMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmChannelMassage)
}

void AlarmChannelMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = 0;
  result_ = 0;
  resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmChannelMassage::~AlarmChannelMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmChannelMassage)
  SharedDtor();
}

void AlarmChannelMassage::SharedDtor() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (this != default_instance_) {
  }
}

void AlarmChannelMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmChannelMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmChannelMassage_descriptor_;
}

const AlarmChannelMassage& AlarmChannelMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

AlarmChannelMassage* AlarmChannelMassage::default_instance_ = NULL;

AlarmChannelMassage* AlarmChannelMassage::New() const {
  return new AlarmChannelMassage;
}

void AlarmChannelMassage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AlarmChannelMassage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(requesttype_, result_);
    if (has_resultdescirbe()) {
      if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescirbe_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  regioncode_.Clear();
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmChannelMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmChannelMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_regionCode;
        break;
      }

      // repeated string regionCode = 2;
      case 2: {
        if (tag == 18) {
         parse_regionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regioncode(this->regioncode_size() - 1).data(),
            this->regioncode(this->regioncode_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_regionCode;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resultDescirbe;
        break;
      }

      // optional bytes resultDescirbe = 4;
      case 4: {
        if (tag == 34) {
         parse_resultDescirbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescirbe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channels;
        break;
      }

      // repeated .com.arges.file.proto.AlarmInChannelInfo channels = 5;
      case 5: {
        if (tag == 42) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmChannelMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmChannelMassage)
  return false;
#undef DO_
}

void AlarmChannelMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmChannelMassage)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // repeated string regionCode = 2;
  for (int i = 0; i < this->regioncode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->regioncode(i).data(), this->regioncode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "regioncode");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->regioncode(i), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional bytes resultDescirbe = 4;
  if (has_resultdescirbe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->resultdescirbe(), output);
  }

  // repeated .com.arges.file.proto.AlarmInChannelInfo channels = 5;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmChannelMassage)
}

::google::protobuf::uint8* AlarmChannelMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmChannelMassage)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // repeated string regionCode = 2;
  for (int i = 0; i < this->regioncode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode(i).data(), this->regioncode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->regioncode(i), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional bytes resultDescirbe = 4;
  if (has_resultdescirbe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->resultdescirbe(), target);
  }

  // repeated .com.arges.file.proto.AlarmInChannelInfo channels = 5;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmChannelMassage)
  return target;
}

int AlarmChannelMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescirbe = 4;
    if (has_resultdescirbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescirbe());
    }

  }
  // repeated string regionCode = 2;
  total_size += 1 * this->regioncode_size();
  for (int i = 0; i < this->regioncode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regioncode(i));
  }

  // repeated .com.arges.file.proto.AlarmInChannelInfo channels = 5;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmChannelMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmChannelMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmChannelMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmChannelMassage::MergeFrom(const AlarmChannelMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  regioncode_.MergeFrom(from.regioncode_);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescirbe()) {
      set_resultdescirbe(from.resultdescirbe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmChannelMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmChannelMassage::CopyFrom(const AlarmChannelMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmChannelMassage::IsInitialized() const {

  return true;
}

void AlarmChannelMassage::Swap(AlarmChannelMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    regioncode_.Swap(&other->regioncode_);
    std::swap(result_, other->result_);
    std::swap(resultdescirbe_, other->resultdescirbe_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmChannelMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmChannelMassage_descriptor_;
  metadata.reflection = AlarmChannelMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfoList::kDeviceinfoFieldNumber;
#endif  // !_MSC_VER

DeviceInfoList::DeviceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DeviceInfoList)
}

void DeviceInfoList::InitAsDefaultInstance() {
}

DeviceInfoList::DeviceInfoList(const DeviceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DeviceInfoList)
}

void DeviceInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoList::~DeviceInfoList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DeviceInfoList)
  SharedDtor();
}

void DeviceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoList_descriptor_;
}

const DeviceInfoList& DeviceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

DeviceInfoList* DeviceInfoList::default_instance_ = NULL;

DeviceInfoList* DeviceInfoList::New() const {
  return new DeviceInfoList;
}

void DeviceInfoList::Clear() {
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DeviceInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_deviceinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_deviceinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DeviceInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DeviceInfoList)
  return false;
#undef DO_
}

void DeviceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DeviceInfoList)
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DeviceInfoList)
}

::google::protobuf::uint8* DeviceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DeviceInfoList)
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DeviceInfoList)
  return target;
}

int DeviceInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfoList::MergeFrom(const DeviceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoList::CopyFrom(const DeviceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoList::IsInitialized() const {

  return true;
}

void DeviceInfoList::Swap(DeviceInfoList* other) {
  if (other != this) {
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoList_descriptor_;
  metadata.reflection = DeviceInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeviceInfo::kTypeFieldNumber;
const int ReqDeviceInfo::kDeviceIdFieldNumber;
const int ReqDeviceInfo::kRegionCodeFieldNumber;
const int ReqDeviceInfo::kChannelCodeFieldNumber;
const int ReqDeviceInfo::kServiceCodeFieldNumber;
#endif  // !_MSC_VER

ReqDeviceInfo::ReqDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDeviceInfo)
}

void ReqDeviceInfo::InitAsDefaultInstance() {
}

ReqDeviceInfo::ReqDeviceInfo(const ReqDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDeviceInfo)
}

void ReqDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = -1;
  channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeviceInfo::~ReqDeviceInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDeviceInfo)
  SharedDtor();
}

void ReqDeviceInfo::SharedDtor() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicecode_;
  }
  if (this != default_instance_) {
  }
}

void ReqDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeviceInfo_descriptor_;
}

const ReqDeviceInfo& ReqDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqDeviceInfo* ReqDeviceInfo::default_instance_ = NULL;

ReqDeviceInfo* ReqDeviceInfo::New() const {
  return new ReqDeviceInfo;
}

void ReqDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & 25) {
    type_ = -1;
    if (has_channelcode()) {
      if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelcode_->clear();
      }
    }
    if (has_servicecode()) {
      if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicecode_->clear();
      }
    }
  }
  deviceid_.Clear();
  regioncode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceId;
        break;
      }

      // repeated string deviceId = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid(this->deviceid_size() - 1).data(),
            this->deviceid(this->deviceid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceId;
        if (input->ExpectTag(26)) goto parse_regionCode;
        break;
      }

      // repeated string regionCode = 3;
      case 3: {
        if (tag == 26) {
         parse_regionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regioncode(this->regioncode_size() - 1).data(),
            this->regioncode(this->regioncode_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regionCode;
        if (input->ExpectTag(34)) goto parse_channelCode;
        break;
      }

      // optional string channelCode = 4;
      case 4: {
        if (tag == 34) {
         parse_channelCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelcode().data(), this->channelcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serviceCode;
        break;
      }

      // optional string serviceCode = 5;
      case 5: {
        if (tag == 42) {
         parse_serviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicecode().data(), this->servicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDeviceInfo)
  return false;
#undef DO_
}

void ReqDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDeviceInfo)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated string deviceId = 2;
  for (int i = 0; i < this->deviceid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->deviceid(i).data(), this->deviceid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(i), output);
  }

  // repeated string regionCode = 3;
  for (int i = 0; i < this->regioncode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->regioncode(i).data(), this->regioncode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "regioncode");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->regioncode(i), output);
  }

  // optional string channelCode = 4;
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channelcode(), output);
  }

  // optional string serviceCode = 5;
  if (has_servicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicecode().data(), this->servicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->servicecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDeviceInfo)
}

::google::protobuf::uint8* ReqDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDeviceInfo)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated string deviceId = 2;
  for (int i = 0; i < this->deviceid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid(i).data(), this->deviceid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->deviceid(i), target);
  }

  // repeated string regionCode = 3;
  for (int i = 0; i < this->regioncode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regioncode(i).data(), this->regioncode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regioncode");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->regioncode(i), target);
  }

  // optional string channelCode = 4;
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelcode(), target);
  }

  // optional string serviceCode = 5;
  if (has_servicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicecode().data(), this->servicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servicecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDeviceInfo)
  return target;
}

int ReqDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string channelCode = 4;
    if (has_channelcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelcode());
    }

    // optional string serviceCode = 5;
    if (has_servicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicecode());
    }

  }
  // repeated string deviceId = 2;
  total_size += 1 * this->deviceid_size();
  for (int i = 0; i < this->deviceid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deviceid(i));
  }

  // repeated string regionCode = 3;
  total_size += 1 * this->regioncode_size();
  for (int i = 0; i < this->regioncode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regioncode(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeviceInfo::MergeFrom(const ReqDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceid_.MergeFrom(from.deviceid_);
  regioncode_.MergeFrom(from.regioncode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channelcode()) {
      set_channelcode(from.channelcode());
    }
    if (from.has_servicecode()) {
      set_servicecode(from.servicecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeviceInfo::CopyFrom(const ReqDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeviceInfo::IsInitialized() const {

  return true;
}

void ReqDeviceInfo::Swap(ReqDeviceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    deviceid_.Swap(&other->deviceid_);
    regioncode_.Swap(&other->regioncode_);
    std::swap(channelcode_, other->channelcode_);
    std::swap(servicecode_, other->servicecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeviceInfo_descriptor_;
  metadata.reflection = ReqDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspDeviceInfo::kRequestTypeFieldNumber;
const int RspDeviceInfo::kDevsFieldNumber;
const int RspDeviceInfo::kResultFieldNumber;
const int RspDeviceInfo::kResultDescirbeFieldNumber;
#endif  // !_MSC_VER

RspDeviceInfo::RspDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDeviceInfo)
}

void RspDeviceInfo::InitAsDefaultInstance() {
}

RspDeviceInfo::RspDeviceInfo(const RspDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDeviceInfo)
}

void RspDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = 0;
  result_ = -1;
  resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDeviceInfo::~RspDeviceInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDeviceInfo)
  SharedDtor();
}

void RspDeviceInfo::SharedDtor() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (this != default_instance_) {
  }
}

void RspDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDeviceInfo_descriptor_;
}

const RspDeviceInfo& RspDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

RspDeviceInfo* RspDeviceInfo::default_instance_ = NULL;

RspDeviceInfo* RspDeviceInfo::New() const {
  return new RspDeviceInfo;
}

void RspDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    requesttype_ = 0;
    result_ = -1;
    if (has_resultdescirbe()) {
      if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescirbe_->clear();
      }
    }
  }
  devs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devs;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo devs = 2;
      case 2: {
        if (tag == 18) {
         parse_devs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devs;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resultDescirbe;
        break;
      }

      // optional bytes resultDescirbe = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_resultDescirbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescirbe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDeviceInfo)
  return false;
#undef DO_
}

void RspDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDeviceInfo)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo devs = 2;
  for (int i = 0; i < this->devs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devs(i), output);
  }

  // optional int32 result = 3 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional bytes resultDescirbe = 4 [default = ""];
  if (has_resultdescirbe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->resultdescirbe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDeviceInfo)
}

::google::protobuf::uint8* RspDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDeviceInfo)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo devs = 2;
  for (int i = 0; i < this->devs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devs(i), target);
  }

  // optional int32 result = 3 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional bytes resultDescirbe = 4 [default = ""];
  if (has_resultdescirbe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->resultdescirbe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDeviceInfo)
  return target;
}

int RspDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 3 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescirbe = 4 [default = ""];
    if (has_resultdescirbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescirbe());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo devs = 2;
  total_size += 1 * this->devs_size();
  for (int i = 0; i < this->devs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDeviceInfo::MergeFrom(const RspDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devs_.MergeFrom(from.devs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescirbe()) {
      set_resultdescirbe(from.resultdescirbe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDeviceInfo::CopyFrom(const RspDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDeviceInfo::IsInitialized() const {

  return true;
}

void RspDeviceInfo::Swap(RspDeviceInfo* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    devs_.Swap(&other->devs_);
    std::swap(result_, other->result_);
    std::swap(resultdescirbe_, other->resultdescirbe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDeviceInfo_descriptor_;
  metadata.reflection = RspDeviceInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
