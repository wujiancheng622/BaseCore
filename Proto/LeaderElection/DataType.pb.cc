// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::EnumDescriptor* DATA_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataType_2eproto() {
  protobuf_AddDesc_DataType_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataType.proto");
  GOOGLE_CHECK(file != NULL);
  DATA_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataType_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_DataType_2eproto() {
}

void protobuf_AddDesc_DataType_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DataType.proto\022\024com.arges.file.proto*\310"
    "#\n\tDATA_TYPE\022\036\n\030REQ_WRITE_WRISTBAND_DATA"
    "\020\200\200@\022\036\n\030RSP_WRITE_WRISTBAND_DATA\020\201\200@\022 \n\032"
    "REQ_SAVE_CAPTURE_FOR_ALARM\020\220\200@\022 \n\032RSP_SA"
    "VE_CAPTURE_FOR_ALARM\020\221\200@\022%\n\037REQ_WRITE_DA"
    "TE_FOR_CAPTUR_MATCH\020\240\200@\022%\n\037RSP_WRITE_DAT"
    "E_FOR_CAPTUR_MATCH\020\241\200@\022\034\n\026REQ_ADD_SCANNE"
    "R_DEVICE\020\260\200@\022\034\n\026RSP_ADD_SCANNER_DEVICE\020\261"
    "\200@\022\037\n\031REQ_UPDATE_SCANNER_DEVICE\020\300\200@\022\037\n\031R"
    "SP_UPDATE_SCANNER_DEVICE\020\301\200@\022\037\n\031REQ_DELE"
    "TE_SCANNER_DEVICE\020\320\200@\022\037\n\031RSP_DELETE_SCAN"
    "NER_DEVICE\020\321\200@\022\035\n\027REQ_ADD_WRISTAND_DEVIC"
    "E\020\340\200@\022\035\n\027RSP_ADD_WRISTAND_DEVICE\020\341\200@\022 \n\032"
    "REQ_DELETE_WRISTAND_DEVICE\020\360\200@\022 \n\032RSP_DE"
    "LETE_WRISTAND_DEVICE\020\361\200@\022\"\n\034REQ_CLEARALL"
    "_WRISTAND_DEVICE\020\200\201@\022\"\n\034RSP_CLEARALL_WRI"
    "STAND_DEVICE\020\201\201@\022#\n\035RSP_ETS_NSERVER_WRIS"
    "TAND_DATA\020\220\201@\022\031\n\023REQ_GET_CLUSTER_NUM\020\240\201@"
    "\022\031\n\023RSP_GET_CLUSTER_NUM\020\241\201@\022\031\n\023REQ_GET_T"
    "VWALL_PLAN\020\260\201@\022\031\n\023RSP_GET_TVWALL_PLAN\020\261\201"
    "@\022\031\n\023REQ_RUN_TVWALL_PLAN\020\300\201@\022\032\n\024REQ_STOP"
    "_TVWALL_PLAN\020\320\201@\022\035\n\027REQ_RECEIVE_TVWALL_P"
    "LAN\020\340\201@\022\026\n\020REQ_KPS_REGISTER\020\200\240@\022\026\n\020RSP_K"
    "PS_REGISTER\020\201\240@\022\030\n\022REQ_KPS_UNREGISTER\020\220\240"
    "@\022\030\n\022RSP_KPS_UNREGISTER\020\221\240@\022\023\n\rREQ_KPS_L"
    "OGIN\020\240\240@\022\023\n\rRSP_KPS_LOGIN\020\241\240@\022\024\n\016REQ_KPS"
    "_LOGOUT\020\260\240@\022\024\n\016RSP_KPS_LOGOUT\020\261\240@\022\024\n\016REQ"
    "_KPS_TVWALL\020\300\240@\022\024\n\016RSP_KPS_TVWALL\020\301\240@\022\032\n"
    "\024REQ_HM_CollectorData\020\200\300@\022\032\n\024RSP_HM_Coll"
    "ectorData\020\201\300@\022\017\n\tREQ_VIDEO\020\200\340@\022\017\n\tRSP_VI"
    "DEO\020\201\340@\022\030\n\022REQ_VIDEO_PROGRESS\020\220\340@\022\030\n\022RSP"
    "_VIDEO_PROGRESS\020\221\340@\022\023\n\rREQ_LOGIN_PTZ\020\240\340@"
    "\022\023\n\rRSP_LOGIN_PTZ\020\241\340@\022\026\n\020REQ_LOGINOUT_PT"
    "Z\020\260\340@\022\026\n\020RSP_LOGINOUT_PTZ\020\261\340@\022\025\n\017REQ_FAC"
    "E_REGONI\020\200\200A\022\025\n\017RSP_FACE_REGONI\020\201\200A\022\024\n\016R"
    "EQ_FACE_VEDIO\020\220\200A\022\024\n\016RSP_FACE_VEDIO\020\221\200A\022"
    "(\n\"REQ_INSERT_WRISTBAND_TO_REAL_CHART\020\200\240"
    "A\022%\n\037REQ_INSERT_WRISTBAND_TO_HISTORY\020\220\240A"
    "\022\036\n\030REQ_INSERT_ACTION_RECORD\020\240\240A\022-\n\'REQ_"
    "SELECT_RECORD_OF_SIGN_IN_BY_HISTORY\020\260\240A\022"
    "%\n\037REQ_SELECT_RECORD_OF_WRIST_REAL\020\300\240A\022%"
    "\n\037REQ_SELECT_PICTURE_OF_WRISTBAND\020\320\240A\022%\n"
    "\037RSP_SELECT_PICTURE_OF_WRISTBAND\020\321\240A\022!\n\033"
    "REQ_WRITE_RECORD_OF_VSQUARE\020\340\240A\022%\n\037REQ_O"
    "PR_TABLE_FOR_WRIST_HISTORY\020\360\240A\022\036\n\030REQ_IN"
    "SERT_SIGNIN_RECORD\020\200\241A\022%\n\037REQ_SELECT_SER"
    "VERID_BY_DEV_CODE\020\220\241A\022%\n\037RSP_SELECT_SERV"
    "ERID_BY_DEV_CODE\020\221\241A\022+\n%REQ_OPR_DEVICE_O"
    "F_UNDISTRIBUTED_ALARM\020\240\241A\022,\n&REQ_OPR_DEV"
    "ICE_OF_UNDISTRIBUTED_ENCODE\020\260\241A\022\032\n\024REQ_O"
    "PR_SERVER_TABLE\020\300\241A\022 \n\032REQ_SELECT_ALL_SE"
    "RVER_DATA\020\320\241A\022 \n\032RSP_SELECT_ALL_SERVER_D"
    "ATA\020\321\241A\022,\n&REQ_SELECT_ALL_UNDISTRIBUTED_"
    "ALARM_DEV\020\340\241A\022,\n&RSP_SELECT_ALL_UNDISTRI"
    "BUTED_ALARM_DEV\020\341\243A\022-\n\'REQ_SELECT_ALL_UN"
    "DISTRIBUTED_ENCODE_DEV\020\360\241A\022-\n\'RSP_SELECT"
    "_ALL_UNDISTRIBUTED_ENCODE_DEV\020\361\241A\0225\n/REQ"
    "_INSERT_DISTRIBUTED_INTO_UNDISTRIBUTED_A"
    "LARM\020\220\276A\0226\n0REQ_INSERT_DISTRIBUTED_INTO_"
    "UNDISTRIBUTED_ENCODE\020\240\276A\022)\n#REQ_INSERT_S"
    "ERVERID_DEVICE_TO_ALARM\020\260\276A\022*\n$REQ_INSER"
    "T_SERVERID_DEVICE_TO_ENCODE\020\300\276A\022)\n#REQ_D"
    "ELETE_DEVICE_BY_ALARM_SERVERID\020\320\276A\022*\n$RE"
    "Q_DELETE_DEVICE_BY_ENCODE_SERVERID\020\340\276A\022 "
    "\n\032REQ_UPDATE_DEV_FOR_SCANNER\020\200\300A\022 \n\032RSP_"
    "UPDATE_DEV_FOR_SCANNER\020\201\300A\022\033\n\025REQ_DEV_IN"
    "FO_FROM_DIS\020\220\300A\022\035\n\027RSP_ADD_DEV_INFO_TO_B"
    "MS\020\221\300A\022\033\n\025REQ_TMS_INFO_FROM_SIS\020\240\300A\022\033\n\025R"
    "SP_TMS_INFO_FROM_SIS\020\241\300A\022&\n REQ_TMS_URL_"
    "FROM_DIS_BY_DEV_CODE\020\260\300A\022&\n RSP_TMS_URL_"
    "FROM_DIS_BY_DEV_CODE\020\261\300A\022\036\n\030REQ_BMS_DEV_"
    "INFO_FROM_DC\020\200\340A\022\036\n\030RSP_BMS_DEV_INFO_FRO"
    "M_DC\020\201\340A\022\030\n\022REQ_GET_ALARM_PLAN\020\220\340A\022\030\n\022RS"
    "P_GET_ALARM_PLAN\020\221\340A\022\035\n\027REQ_GET_SIGNIN_P"
    "IC_CODE\020\240\340A\022\036\n\030RSP_DEV_INFO_FOR_SIGN_IN\020"
    "\241\340A\022\036\n\030REQ_DMS_DEV_INFO_FROM_DC\020\260\340A\022\036\n\030R"
    "SP_DMS_DEV_INFO_FROM_DC\020\261\340A\022\036\n\030REQ_MYSQL"
    "_SERIVCE_MODIFY\020\300\340A\022\036\n\030RSP_MYSQL_SERIVCE"
    "_MODIFY\020\301\340A\022\"\n\034REQ_DEV_REGISTER_SERVER_I"
    "NFO\020\320\340A\022\"\n\034RSP_DEV_REGISTER_SERVER_INFO\020"
    "\321\340A\022\"\n\034REQ_INSERT_ATTENDANCE_RECORD\020\340\340A\022"
    "\"\n\034RSP_INSERT_ATTENDANCE_RECORD\020\341\340A\022\037\n\031R"
    "EQ_SERVICE_INFO_FROM_SIS\020\200\200B\022\037\n\031RSP_SERV"
    "ICE_INFO_FROM_SIS\020\201\200B\022*\n$PUSH_EXCEPTION_"
    "SERVICE_INFO_FROM_SIS\020\220\200B\022%\n\037SUBSCRIBE_S"
    "ERVICE_INFO_FROM_SIS\020\221\200B\022\031\n\023REQ_REGISTER"
    "_TO_SIS\020\240\200B\022\033\n\025RSP_REGISTER_FROM_SIS\020\241\200B"
    "\022\034\n\026REQ_LOGOUT_FOR_SERVICE\020\260\200B\022\034\n\026RSP_LO"
    "GOUT_FOR_SERVICE\020\261\200B\022\033\n\025PUSH_MS_INFO_FRO"
    "M_SIS\020\302\200B\022!\n\033REQ_ADD_DEVICE_FROM_BSERVER"
    "\020\200\240B\022!\n\033RSP_ADD_DEVICE_FROM_BSERVER\020\201\240B\022"
    "$\n\036REQ_UPDATE_DEVICE_FROM_BSERVER\020\220\240B\022$\n"
    "\036RSP_UPDATE_DEVICE_FROM_BSERVER\020\221\240B\022$\n\036R"
    "EQ_DELETE_DEVICE_FROM_BSERVER\020\240\240B\022$\n\036RSP"
    "_DELETE_DEVICE_FROM_BSERVER\020\241\240B\022\035\n\027REQ_B"
    "MS_TO_LEADER_HEART\020\200\300B\022&\n REQ_LEADER_TO_"
    "FOLLOWER_BROADCAST\020\220\300B\022\031\n\023REQ_REQUESTVOT"
    "E_RPC\020\240\300B\022\031\n\023REQ_RESPONEVOTE_RPC\020\260\300B\022\027\n\021"
    "REQ_ADDDEV_TO_BPX\020\300\300B\022\027\n\021REQ_DELDEV_TO_B"
    "PX\020\320\300B\022\032\n\024REQ_MODIFYDEV_TO_BPX\020\340\300B\022\034\n\026RE"
    "Q_OPERATORDEV_TO_BPX\020\360\300B\022\030\n\022REQ_BMS_ACCE"
    "PT_BPX\020\200\301B\022\034\n\026REQ_BPX_CONNECT_TO_BMS\020\220\301B"
    "\022\030\n\022REQ_BMS_ADD_DEVICE\020\240\301B\022\030\n\022REQ_BMS_DE"
    "L_DEVICE\020\260\301B\022\033\n\025REQ_BMS_UPDATE_DEVICE\020\300\301"
    "B\022!\n\033REQ_BMS_ADD_DEVICE_FROM_DIS\020\320\301B\022$\n\036"
    "REQ_BMS_UPDATE_DEVICE_FROM_DIS\020\340\301B\022$\n\036RE"
    "Q_BPX_ASKFOR_BMS_FROM_LEADER\020\360\301B\022\033\n\025REQ_"
    "LEADER_NOTICE_SIS\020\200\302B\022+\n%REQ_LEADER_NOTI"
    "FY_BMS_GETDEV_FROM_DIS\020\201\302B\022\025\n\017REQ_BMSBPX"
    "HEART\020\202\302B\022\"\n\034REQ_BPX_DEVICE_STATUS_REPOR"
    "T\020\203\302B\022!\n\033REQ_BPX_DEVICE_ALARM_REPORT\020\204\302B"
    "\022\024\n\016REQ_ADD_SERVER\020\205\302B\022\027\n\021REQ_DELETE_SER"
    "VER\020\206\302B\022\030\n\022REQ_CASPROXY_LOGIN\020\200\340B\022\030\n\022RSP"
    "_CASPROXY_LOGIN\020\201\340B\022\031\n\023REQ_CASPROXY_LOGO"
    "UT\020\220\340B\022\031\n\023RSP_CASPROXY_LOGOUT\020\221\340B", 4593);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataType.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataType_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataType_2eproto {
  StaticDescriptorInitializer_DataType_2eproto() {
    protobuf_AddDesc_DataType_2eproto();
  }
} static_descriptor_initializer_DataType_2eproto_;
const ::google::protobuf::EnumDescriptor* DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATA_TYPE_descriptor_;
}
bool DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 1048576:
    case 1048577:
    case 1048592:
    case 1048593:
    case 1048608:
    case 1048609:
    case 1048624:
    case 1048625:
    case 1048640:
    case 1048641:
    case 1048656:
    case 1048657:
    case 1048672:
    case 1048673:
    case 1048688:
    case 1048689:
    case 1048704:
    case 1048705:
    case 1048720:
    case 1048736:
    case 1048737:
    case 1048752:
    case 1048753:
    case 1048768:
    case 1048784:
    case 1048800:
    case 1052672:
    case 1052673:
    case 1052688:
    case 1052689:
    case 1052704:
    case 1052705:
    case 1052720:
    case 1052721:
    case 1052736:
    case 1052737:
    case 1056768:
    case 1056769:
    case 1060864:
    case 1060865:
    case 1060880:
    case 1060881:
    case 1060896:
    case 1060897:
    case 1060912:
    case 1060913:
    case 1064960:
    case 1064961:
    case 1064976:
    case 1064977:
    case 1069056:
    case 1069072:
    case 1069088:
    case 1069104:
    case 1069120:
    case 1069136:
    case 1069137:
    case 1069152:
    case 1069168:
    case 1069184:
    case 1069200:
    case 1069201:
    case 1069216:
    case 1069232:
    case 1069248:
    case 1069264:
    case 1069265:
    case 1069280:
    case 1069296:
    case 1069297:
    case 1069537:
    case 1072912:
    case 1072928:
    case 1072944:
    case 1072960:
    case 1072976:
    case 1072992:
    case 1073152:
    case 1073153:
    case 1073168:
    case 1073169:
    case 1073184:
    case 1073185:
    case 1073200:
    case 1073201:
    case 1077248:
    case 1077249:
    case 1077264:
    case 1077265:
    case 1077280:
    case 1077281:
    case 1077296:
    case 1077297:
    case 1077312:
    case 1077313:
    case 1077328:
    case 1077329:
    case 1077344:
    case 1077345:
    case 1081344:
    case 1081345:
    case 1081360:
    case 1081361:
    case 1081376:
    case 1081377:
    case 1081392:
    case 1081393:
    case 1081410:
    case 1085440:
    case 1085441:
    case 1085456:
    case 1085457:
    case 1085472:
    case 1085473:
    case 1089536:
    case 1089552:
    case 1089568:
    case 1089584:
    case 1089600:
    case 1089616:
    case 1089632:
    case 1089648:
    case 1089664:
    case 1089680:
    case 1089696:
    case 1089712:
    case 1089728:
    case 1089744:
    case 1089760:
    case 1089776:
    case 1089792:
    case 1089793:
    case 1089794:
    case 1089795:
    case 1089796:
    case 1089797:
    case 1089798:
    case 1093632:
    case 1093633:
    case 1093648:
    case 1093649:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
