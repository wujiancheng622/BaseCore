// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSLeaderNoticeBean.proto

#ifndef PROTOBUF_BMSLeaderNoticeBean_2eproto__INCLUDED
#define PROTOBUF_BMSLeaderNoticeBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
void protobuf_AssignDesc_BMSLeaderNoticeBean_2eproto();
void protobuf_ShutdownFile_BMSLeaderNoticeBean_2eproto();

class ReqLeaderInfoNotice;
class RspLeaderInfoNotice;

// ===================================================================

class ReqLeaderInfoNotice : public ::google::protobuf::Message {
 public:
  ReqLeaderInfoNotice();
  virtual ~ReqLeaderInfoNotice();

  ReqLeaderInfoNotice(const ReqLeaderInfoNotice& from);

  inline ReqLeaderInfoNotice& operator=(const ReqLeaderInfoNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaderInfoNotice& default_instance();

  void Swap(ReqLeaderInfoNotice* other);

  // implements Message ----------------------------------------------

  ReqLeaderInfoNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLeaderInfoNotice& from);
  void MergeFrom(const ReqLeaderInfoNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1 [default = "default"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string ip = 2 [default = "default"];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqLeaderInfoNotice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  static ::std::string* _default_ip_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  friend void protobuf_AssignDesc_BMSLeaderNoticeBean_2eproto();
  friend void protobuf_ShutdownFile_BMSLeaderNoticeBean_2eproto();

  void InitAsDefaultInstance();
  static ReqLeaderInfoNotice* default_instance_;
};
// -------------------------------------------------------------------

class RspLeaderInfoNotice : public ::google::protobuf::Message {
 public:
  RspLeaderInfoNotice();
  virtual ~RspLeaderInfoNotice();

  RspLeaderInfoNotice(const RspLeaderInfoNotice& from);

  inline RspLeaderInfoNotice& operator=(const RspLeaderInfoNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspLeaderInfoNotice& default_instance();

  void Swap(RspLeaderInfoNotice* other);

  // implements Message ----------------------------------------------

  RspLeaderInfoNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspLeaderInfoNotice& from);
  void MergeFrom(const RspLeaderInfoNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string id = 2 [default = "default"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspLeaderInfoNotice)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  friend void protobuf_AssignDesc_BMSLeaderNoticeBean_2eproto();
  friend void protobuf_ShutdownFile_BMSLeaderNoticeBean_2eproto();

  void InitAsDefaultInstance();
  static RspLeaderInfoNotice* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqLeaderInfoNotice

// optional string id = 1 [default = "default"];
inline bool ReqLeaderInfoNotice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLeaderInfoNotice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLeaderInfoNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLeaderInfoNotice::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& ReqLeaderInfoNotice::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqLeaderInfoNotice.id)
  return *id_;
}
inline void ReqLeaderInfoNotice::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqLeaderInfoNotice.id)
}
inline void ReqLeaderInfoNotice::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqLeaderInfoNotice.id)
}
inline void ReqLeaderInfoNotice::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqLeaderInfoNotice.id)
}
inline ::std::string* ReqLeaderInfoNotice::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqLeaderInfoNotice.id)
  return id_;
}
inline ::std::string* ReqLeaderInfoNotice::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void ReqLeaderInfoNotice::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqLeaderInfoNotice.id)
}

// optional string ip = 2 [default = "default"];
inline bool ReqLeaderInfoNotice::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLeaderInfoNotice::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLeaderInfoNotice::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLeaderInfoNotice::clear_ip() {
  if (ip_ != _default_ip_) {
    ip_->assign(*_default_ip_);
  }
  clear_has_ip();
}
inline const ::std::string& ReqLeaderInfoNotice::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqLeaderInfoNotice.ip)
  return *ip_;
}
inline void ReqLeaderInfoNotice::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqLeaderInfoNotice.ip)
}
inline void ReqLeaderInfoNotice::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqLeaderInfoNotice.ip)
}
inline void ReqLeaderInfoNotice::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqLeaderInfoNotice.ip)
}
inline ::std::string* ReqLeaderInfoNotice::mutable_ip() {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string(*_default_ip_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqLeaderInfoNotice.ip)
  return ip_;
}
inline ::std::string* ReqLeaderInfoNotice::release_ip() {
  clear_has_ip();
  if (ip_ == _default_ip_) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(_default_ip_);
    return temp;
  }
}
inline void ReqLeaderInfoNotice::set_allocated_ip(::std::string* ip) {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(_default_ip_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqLeaderInfoNotice.ip)
}

// optional int32 port = 3 [default = -1];
inline bool ReqLeaderInfoNotice::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLeaderInfoNotice::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqLeaderInfoNotice::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqLeaderInfoNotice::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 ReqLeaderInfoNotice::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqLeaderInfoNotice.port)
  return port_;
}
inline void ReqLeaderInfoNotice::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqLeaderInfoNotice.port)
}

// -------------------------------------------------------------------

// RspLeaderInfoNotice

// optional int32 result = 1 [default = -1];
inline bool RspLeaderInfoNotice::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspLeaderInfoNotice::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspLeaderInfoNotice::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspLeaderInfoNotice::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspLeaderInfoNotice::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspLeaderInfoNotice.result)
  return result_;
}
inline void RspLeaderInfoNotice::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspLeaderInfoNotice.result)
}

// optional string id = 2 [default = "default"];
inline bool RspLeaderInfoNotice::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspLeaderInfoNotice::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspLeaderInfoNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspLeaderInfoNotice::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& RspLeaderInfoNotice::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspLeaderInfoNotice.id)
  return *id_;
}
inline void RspLeaderInfoNotice::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspLeaderInfoNotice.id)
}
inline void RspLeaderInfoNotice::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspLeaderInfoNotice.id)
}
inline void RspLeaderInfoNotice::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspLeaderInfoNotice.id)
}
inline ::std::string* RspLeaderInfoNotice::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspLeaderInfoNotice.id)
  return id_;
}
inline ::std::string* RspLeaderInfoNotice::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void RspLeaderInfoNotice::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspLeaderInfoNotice.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BMSLeaderNoticeBean_2eproto__INCLUDED
