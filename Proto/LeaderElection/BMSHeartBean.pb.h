// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSHeartBean.proto

#ifndef PROTOBUF_BMSHeartBean_2eproto__INCLUDED
#define PROTOBUF_BMSHeartBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BMSHeartBean_2eproto();
void protobuf_AssignDesc_BMSHeartBean_2eproto();
void protobuf_ShutdownFile_BMSHeartBean_2eproto();

class BPXInfo;
class BMSHeart;

// ===================================================================

class BPXInfo : public ::google::protobuf::Message {
 public:
  BPXInfo();
  virtual ~BPXInfo();

  BPXInfo(const BPXInfo& from);

  inline BPXInfo& operator=(const BPXInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BPXInfo& default_instance();

  void Swap(BPXInfo* other);

  // implements Message ----------------------------------------------

  BPXInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BPXInfo& from);
  void MergeFrom(const BPXInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated string keyid = 2;
  inline int keyid_size() const;
  inline void clear_keyid();
  static const int kKeyidFieldNumber = 2;
  inline const ::std::string& keyid(int index) const;
  inline ::std::string* mutable_keyid(int index);
  inline void set_keyid(int index, const ::std::string& value);
  inline void set_keyid(int index, const char* value);
  inline void set_keyid(int index, const char* value, size_t size);
  inline ::std::string* add_keyid();
  inline void add_keyid(const ::std::string& value);
  inline void add_keyid(const char* value);
  inline void add_keyid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keyid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keyid();

  // optional string ip = 3 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.BPXInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keyid_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_BMSHeartBean_2eproto();
  friend void protobuf_AssignDesc_BMSHeartBean_2eproto();
  friend void protobuf_ShutdownFile_BMSHeartBean_2eproto();

  void InitAsDefaultInstance();
  static BPXInfo* default_instance_;
};
// -------------------------------------------------------------------

class BMSHeart : public ::google::protobuf::Message {
 public:
  BMSHeart();
  virtual ~BMSHeart();

  BMSHeart(const BMSHeart& from);

  inline BMSHeart& operator=(const BMSHeart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BMSHeart& default_instance();

  void Swap(BMSHeart* other);

  // implements Message ----------------------------------------------

  BMSHeart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BMSHeart& from);
  void MergeFrom(const BMSHeart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string term = 1 [default = ""];
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline const ::std::string& term() const;
  inline void set_term(const ::std::string& value);
  inline void set_term(const char* value);
  inline void set_term(const char* value, size_t size);
  inline ::std::string* mutable_term();
  inline ::std::string* release_term();
  inline void set_allocated_term(::std::string* term);

  // optional string identifier = 2 [default = ""];
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // optional string ip = 3 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
  inline int bpxinfo_size() const;
  inline void clear_bpxinfo();
  static const int kBpxinfoFieldNumber = 5;
  inline const ::com::arges::file::proto::BPXInfo& bpxinfo(int index) const;
  inline ::com::arges::file::proto::BPXInfo* mutable_bpxinfo(int index);
  inline ::com::arges::file::proto::BPXInfo* add_bpxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::BPXInfo >&
      bpxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::BPXInfo >*
      mutable_bpxinfo();

  // optional int32 deviceidnums = 6;
  inline bool has_deviceidnums() const;
  inline void clear_deviceidnums();
  static const int kDeviceidnumsFieldNumber = 6;
  inline ::google::protobuf::int32 deviceidnums() const;
  inline void set_deviceidnums(::google::protobuf::int32 value);

  // optional int32 unLoaddeviceidnums = 7;
  inline bool has_unloaddeviceidnums() const;
  inline void clear_unloaddeviceidnums();
  static const int kUnLoaddeviceidnumsFieldNumber = 7;
  inline ::google::protobuf::int32 unloaddeviceidnums() const;
  inline void set_unloaddeviceidnums(::google::protobuf::int32 value);

  // repeated string unLoaddeviceid = 8;
  inline int unloaddeviceid_size() const;
  inline void clear_unloaddeviceid();
  static const int kUnLoaddeviceidFieldNumber = 8;
  inline const ::std::string& unloaddeviceid(int index) const;
  inline ::std::string* mutable_unloaddeviceid(int index);
  inline void set_unloaddeviceid(int index, const ::std::string& value);
  inline void set_unloaddeviceid(int index, const char* value);
  inline void set_unloaddeviceid(int index, const char* value, size_t size);
  inline ::std::string* add_unloaddeviceid();
  inline void add_unloaddeviceid(const ::std::string& value);
  inline void add_unloaddeviceid(const char* value);
  inline void add_unloaddeviceid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unloaddeviceid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unloaddeviceid();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.BMSHeart)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_deviceidnums();
  inline void clear_has_deviceidnums();
  inline void set_has_unloaddeviceidnums();
  inline void clear_has_unloaddeviceidnums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* term_;
  ::std::string* identifier_;
  ::std::string* ip_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::BPXInfo > bpxinfo_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 deviceidnums_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unloaddeviceid_;
  ::google::protobuf::int32 unloaddeviceidnums_;
  friend void  protobuf_AddDesc_BMSHeartBean_2eproto();
  friend void protobuf_AssignDesc_BMSHeartBean_2eproto();
  friend void protobuf_ShutdownFile_BMSHeartBean_2eproto();

  void InitAsDefaultInstance();
  static BMSHeart* default_instance_;
};
// ===================================================================


// ===================================================================

// BPXInfo

// optional string id = 1 [default = ""];
inline bool BPXInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BPXInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BPXInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BPXInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BPXInfo::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BPXInfo.id)
  return *id_;
}
inline void BPXInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BPXInfo.id)
}
inline void BPXInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BPXInfo.id)
}
inline void BPXInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BPXInfo.id)
}
inline ::std::string* BPXInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BPXInfo.id)
  return id_;
}
inline ::std::string* BPXInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BPXInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BPXInfo.id)
}

// repeated string keyid = 2;
inline int BPXInfo::keyid_size() const {
  return keyid_.size();
}
inline void BPXInfo::clear_keyid() {
  keyid_.Clear();
}
inline const ::std::string& BPXInfo::keyid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BPXInfo.keyid)
  return keyid_.Get(index);
}
inline ::std::string* BPXInfo::mutable_keyid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BPXInfo.keyid)
  return keyid_.Mutable(index);
}
inline void BPXInfo::set_keyid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BPXInfo.keyid)
  keyid_.Mutable(index)->assign(value);
}
inline void BPXInfo::set_keyid(int index, const char* value) {
  keyid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BPXInfo.keyid)
}
inline void BPXInfo::set_keyid(int index, const char* value, size_t size) {
  keyid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BPXInfo.keyid)
}
inline ::std::string* BPXInfo::add_keyid() {
  return keyid_.Add();
}
inline void BPXInfo::add_keyid(const ::std::string& value) {
  keyid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.BPXInfo.keyid)
}
inline void BPXInfo::add_keyid(const char* value) {
  keyid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.BPXInfo.keyid)
}
inline void BPXInfo::add_keyid(const char* value, size_t size) {
  keyid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.BPXInfo.keyid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BPXInfo::keyid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.BPXInfo.keyid)
  return keyid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BPXInfo::mutable_keyid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.BPXInfo.keyid)
  return &keyid_;
}

// optional string ip = 3 [default = ""];
inline bool BPXInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BPXInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BPXInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BPXInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BPXInfo::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BPXInfo.ip)
  return *ip_;
}
inline void BPXInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BPXInfo.ip)
}
inline void BPXInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BPXInfo.ip)
}
inline void BPXInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BPXInfo.ip)
}
inline ::std::string* BPXInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BPXInfo.ip)
  return ip_;
}
inline ::std::string* BPXInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BPXInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BPXInfo.ip)
}

// optional int32 port = 4 [default = -1];
inline bool BPXInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BPXInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BPXInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BPXInfo::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 BPXInfo::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BPXInfo.port)
  return port_;
}
inline void BPXInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BPXInfo.port)
}

// -------------------------------------------------------------------

// BMSHeart

// optional string term = 1 [default = ""];
inline bool BMSHeart::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BMSHeart::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BMSHeart::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BMSHeart::clear_term() {
  if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    term_->clear();
  }
  clear_has_term();
}
inline const ::std::string& BMSHeart::term() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.term)
  return *term_;
}
inline void BMSHeart::set_term(const ::std::string& value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    term_ = new ::std::string;
  }
  term_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.term)
}
inline void BMSHeart::set_term(const char* value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    term_ = new ::std::string;
  }
  term_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BMSHeart.term)
}
inline void BMSHeart::set_term(const char* value, size_t size) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    term_ = new ::std::string;
  }
  term_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BMSHeart.term)
}
inline ::std::string* BMSHeart::mutable_term() {
  set_has_term();
  if (term_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    term_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSHeart.term)
  return term_;
}
inline ::std::string* BMSHeart::release_term() {
  clear_has_term();
  if (term_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = term_;
    term_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BMSHeart::set_allocated_term(::std::string* term) {
  if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_;
  }
  if (term) {
    set_has_term();
    term_ = term;
  } else {
    clear_has_term();
    term_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BMSHeart.term)
}

// optional string identifier = 2 [default = ""];
inline bool BMSHeart::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BMSHeart::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BMSHeart::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BMSHeart::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& BMSHeart::identifier() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.identifier)
  return *identifier_;
}
inline void BMSHeart::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.identifier)
}
inline void BMSHeart::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BMSHeart.identifier)
}
inline void BMSHeart::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BMSHeart.identifier)
}
inline ::std::string* BMSHeart::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSHeart.identifier)
  return identifier_;
}
inline ::std::string* BMSHeart::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BMSHeart::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BMSHeart.identifier)
}

// optional string ip = 3 [default = ""];
inline bool BMSHeart::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BMSHeart::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BMSHeart::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BMSHeart::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BMSHeart::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.ip)
  return *ip_;
}
inline void BMSHeart::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.ip)
}
inline void BMSHeart::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BMSHeart.ip)
}
inline void BMSHeart::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BMSHeart.ip)
}
inline ::std::string* BMSHeart::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSHeart.ip)
  return ip_;
}
inline ::std::string* BMSHeart::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BMSHeart::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BMSHeart.ip)
}

// optional int32 port = 4 [default = -1];
inline bool BMSHeart::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BMSHeart::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BMSHeart::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BMSHeart::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 BMSHeart::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.port)
  return port_;
}
inline void BMSHeart::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.port)
}

// repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
inline int BMSHeart::bpxinfo_size() const {
  return bpxinfo_.size();
}
inline void BMSHeart::clear_bpxinfo() {
  bpxinfo_.Clear();
}
inline const ::com::arges::file::proto::BPXInfo& BMSHeart::bpxinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.bpxinfo)
  return bpxinfo_.Get(index);
}
inline ::com::arges::file::proto::BPXInfo* BMSHeart::mutable_bpxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSHeart.bpxinfo)
  return bpxinfo_.Mutable(index);
}
inline ::com::arges::file::proto::BPXInfo* BMSHeart::add_bpxinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.BMSHeart.bpxinfo)
  return bpxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::BPXInfo >&
BMSHeart::bpxinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.BMSHeart.bpxinfo)
  return bpxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::BPXInfo >*
BMSHeart::mutable_bpxinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.BMSHeart.bpxinfo)
  return &bpxinfo_;
}

// optional int32 deviceidnums = 6;
inline bool BMSHeart::has_deviceidnums() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BMSHeart::set_has_deviceidnums() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BMSHeart::clear_has_deviceidnums() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BMSHeart::clear_deviceidnums() {
  deviceidnums_ = 0;
  clear_has_deviceidnums();
}
inline ::google::protobuf::int32 BMSHeart::deviceidnums() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.deviceidnums)
  return deviceidnums_;
}
inline void BMSHeart::set_deviceidnums(::google::protobuf::int32 value) {
  set_has_deviceidnums();
  deviceidnums_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.deviceidnums)
}

// optional int32 unLoaddeviceidnums = 7;
inline bool BMSHeart::has_unloaddeviceidnums() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BMSHeart::set_has_unloaddeviceidnums() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BMSHeart::clear_has_unloaddeviceidnums() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BMSHeart::clear_unloaddeviceidnums() {
  unloaddeviceidnums_ = 0;
  clear_has_unloaddeviceidnums();
}
inline ::google::protobuf::int32 BMSHeart::unloaddeviceidnums() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.unLoaddeviceidnums)
  return unloaddeviceidnums_;
}
inline void BMSHeart::set_unloaddeviceidnums(::google::protobuf::int32 value) {
  set_has_unloaddeviceidnums();
  unloaddeviceidnums_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.unLoaddeviceidnums)
}

// repeated string unLoaddeviceid = 8;
inline int BMSHeart::unloaddeviceid_size() const {
  return unloaddeviceid_.size();
}
inline void BMSHeart::clear_unloaddeviceid() {
  unloaddeviceid_.Clear();
}
inline const ::std::string& BMSHeart::unloaddeviceid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSHeart.unLoaddeviceid)
  return unloaddeviceid_.Get(index);
}
inline ::std::string* BMSHeart::mutable_unloaddeviceid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSHeart.unLoaddeviceid)
  return unloaddeviceid_.Mutable(index);
}
inline void BMSHeart::set_unloaddeviceid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSHeart.unLoaddeviceid)
  unloaddeviceid_.Mutable(index)->assign(value);
}
inline void BMSHeart::set_unloaddeviceid(int index, const char* value) {
  unloaddeviceid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BMSHeart.unLoaddeviceid)
}
inline void BMSHeart::set_unloaddeviceid(int index, const char* value, size_t size) {
  unloaddeviceid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BMSHeart.unLoaddeviceid)
}
inline ::std::string* BMSHeart::add_unloaddeviceid() {
  return unloaddeviceid_.Add();
}
inline void BMSHeart::add_unloaddeviceid(const ::std::string& value) {
  unloaddeviceid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.BMSHeart.unLoaddeviceid)
}
inline void BMSHeart::add_unloaddeviceid(const char* value) {
  unloaddeviceid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.BMSHeart.unLoaddeviceid)
}
inline void BMSHeart::add_unloaddeviceid(const char* value, size_t size) {
  unloaddeviceid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.BMSHeart.unLoaddeviceid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BMSHeart::unloaddeviceid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.BMSHeart.unLoaddeviceid)
  return unloaddeviceid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BMSHeart::mutable_unloaddeviceid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.BMSHeart.unLoaddeviceid)
  return &unloaddeviceid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BMSHeartBean_2eproto__INCLUDED
