// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSLeaderNoticeBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BMSLeaderNoticeBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReqLeaderInfoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaderInfoNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLeaderInfoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLeaderInfoNotice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BMSLeaderNoticeBean_2eproto() {
  protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BMSLeaderNoticeBean.proto");
  GOOGLE_CHECK(file != NULL);
  ReqLeaderInfoNotice_descriptor_ = file->message_type(0);
  static const int ReqLeaderInfoNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaderInfoNotice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaderInfoNotice, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaderInfoNotice, port_),
  };
  ReqLeaderInfoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaderInfoNotice_descriptor_,
      ReqLeaderInfoNotice::default_instance_,
      ReqLeaderInfoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaderInfoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaderInfoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaderInfoNotice));
  RspLeaderInfoNotice_descriptor_ = file->message_type(1);
  static const int RspLeaderInfoNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLeaderInfoNotice, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLeaderInfoNotice, id_),
  };
  RspLeaderInfoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLeaderInfoNotice_descriptor_,
      RspLeaderInfoNotice::default_instance_,
      RspLeaderInfoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLeaderInfoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLeaderInfoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLeaderInfoNotice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BMSLeaderNoticeBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaderInfoNotice_descriptor_, &ReqLeaderInfoNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLeaderInfoNotice_descriptor_, &RspLeaderInfoNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BMSLeaderNoticeBean_2eproto() {
  delete ReqLeaderInfoNotice::default_instance_;
  delete ReqLeaderInfoNotice_reflection_;
  delete ReqLeaderInfoNotice::_default_id_;
  delete ReqLeaderInfoNotice::_default_ip_;
  delete RspLeaderInfoNotice::default_instance_;
  delete RspLeaderInfoNotice_reflection_;
  delete RspLeaderInfoNotice::_default_id_;
}

void protobuf_AddDesc_BMSLeaderNoticeBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031BMSLeaderNoticeBean.proto\022\024com.arges.f"
    "ile.proto\"Q\n\023ReqLeaderInfoNotice\022\023\n\002id\030\001"
    " \001(\t:\007default\022\023\n\002ip\030\002 \001(\t:\007default\022\020\n\004po"
    "rt\030\003 \001(\005:\002-1\">\n\023RspLeaderInfoNotice\022\022\n\006r"
    "esult\030\001 \001(\005:\002-1\022\023\n\002id\030\002 \001(\t:\007default", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BMSLeaderNoticeBean.proto", &protobuf_RegisterTypes);
  ReqLeaderInfoNotice::_default_id_ =
      new ::std::string("default", 7);
  ReqLeaderInfoNotice::_default_ip_ =
      new ::std::string("default", 7);
  ReqLeaderInfoNotice::default_instance_ = new ReqLeaderInfoNotice();
  RspLeaderInfoNotice::_default_id_ =
      new ::std::string("default", 7);
  RspLeaderInfoNotice::default_instance_ = new RspLeaderInfoNotice();
  ReqLeaderInfoNotice::default_instance_->InitAsDefaultInstance();
  RspLeaderInfoNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BMSLeaderNoticeBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BMSLeaderNoticeBean_2eproto {
  StaticDescriptorInitializer_BMSLeaderNoticeBean_2eproto() {
    protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  }
} static_descriptor_initializer_BMSLeaderNoticeBean_2eproto_;

// ===================================================================

::std::string* ReqLeaderInfoNotice::_default_id_ = NULL;
::std::string* ReqLeaderInfoNotice::_default_ip_ = NULL;
#ifndef _MSC_VER
const int ReqLeaderInfoNotice::kIdFieldNumber;
const int ReqLeaderInfoNotice::kIpFieldNumber;
const int ReqLeaderInfoNotice::kPortFieldNumber;
#endif  // !_MSC_VER

ReqLeaderInfoNotice::ReqLeaderInfoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqLeaderInfoNotice)
}

void ReqLeaderInfoNotice::InitAsDefaultInstance() {
}

ReqLeaderInfoNotice::ReqLeaderInfoNotice(const ReqLeaderInfoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqLeaderInfoNotice)
}

void ReqLeaderInfoNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(_default_id_);
  ip_ = const_cast< ::std::string*>(_default_ip_);
  port_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaderInfoNotice::~ReqLeaderInfoNotice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqLeaderInfoNotice)
  SharedDtor();
}

void ReqLeaderInfoNotice::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ReqLeaderInfoNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaderInfoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaderInfoNotice_descriptor_;
}

const ReqLeaderInfoNotice& ReqLeaderInfoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  return *default_instance_;
}

ReqLeaderInfoNotice* ReqLeaderInfoNotice::default_instance_ = NULL;

ReqLeaderInfoNotice* ReqLeaderInfoNotice::New() const {
  return new ReqLeaderInfoNotice;
}

void ReqLeaderInfoNotice::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != _default_id_) {
        id_->assign(*_default_id_);
      }
    }
    if (has_ip()) {
      if (ip_ != _default_ip_) {
        ip_->assign(*_default_ip_);
      }
    }
    port_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaderInfoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqLeaderInfoNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqLeaderInfoNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqLeaderInfoNotice)
  return false;
#undef DO_
}

void ReqLeaderInfoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqLeaderInfoNotice)
  // optional string id = 1 [default = "default"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string ip = 2 [default = "default"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqLeaderInfoNotice)
}

::google::protobuf::uint8* ReqLeaderInfoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqLeaderInfoNotice)
  // optional string id = 1 [default = "default"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string ip = 2 [default = "default"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqLeaderInfoNotice)
  return target;
}

int ReqLeaderInfoNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = "default"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string ip = 2 [default = "default"];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaderInfoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaderInfoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaderInfoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaderInfoNotice::MergeFrom(const ReqLeaderInfoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaderInfoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaderInfoNotice::CopyFrom(const ReqLeaderInfoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaderInfoNotice::IsInitialized() const {

  return true;
}

void ReqLeaderInfoNotice::Swap(ReqLeaderInfoNotice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaderInfoNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaderInfoNotice_descriptor_;
  metadata.reflection = ReqLeaderInfoNotice_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspLeaderInfoNotice::_default_id_ = NULL;
#ifndef _MSC_VER
const int RspLeaderInfoNotice::kResultFieldNumber;
const int RspLeaderInfoNotice::kIdFieldNumber;
#endif  // !_MSC_VER

RspLeaderInfoNotice::RspLeaderInfoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspLeaderInfoNotice)
}

void RspLeaderInfoNotice::InitAsDefaultInstance() {
}

RspLeaderInfoNotice::RspLeaderInfoNotice(const RspLeaderInfoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspLeaderInfoNotice)
}

void RspLeaderInfoNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  id_ = const_cast< ::std::string*>(_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLeaderInfoNotice::~RspLeaderInfoNotice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspLeaderInfoNotice)
  SharedDtor();
}

void RspLeaderInfoNotice::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RspLeaderInfoNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLeaderInfoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLeaderInfoNotice_descriptor_;
}

const RspLeaderInfoNotice& RspLeaderInfoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSLeaderNoticeBean_2eproto();
  return *default_instance_;
}

RspLeaderInfoNotice* RspLeaderInfoNotice::default_instance_ = NULL;

RspLeaderInfoNotice* RspLeaderInfoNotice::New() const {
  return new RspLeaderInfoNotice;
}

void RspLeaderInfoNotice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = -1;
    if (has_id()) {
      if (id_ != _default_id_) {
        id_->assign(*_default_id_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLeaderInfoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspLeaderInfoNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspLeaderInfoNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspLeaderInfoNotice)
  return false;
#undef DO_
}

void RspLeaderInfoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspLeaderInfoNotice)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string id = 2 [default = "default"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspLeaderInfoNotice)
}

::google::protobuf::uint8* RspLeaderInfoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspLeaderInfoNotice)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string id = 2 [default = "default"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspLeaderInfoNotice)
  return target;
}

int RspLeaderInfoNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string id = 2 [default = "default"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLeaderInfoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLeaderInfoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLeaderInfoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLeaderInfoNotice::MergeFrom(const RspLeaderInfoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLeaderInfoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLeaderInfoNotice::CopyFrom(const RspLeaderInfoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLeaderInfoNotice::IsInitialized() const {

  return true;
}

void RspLeaderInfoNotice::Swap(RspLeaderInfoNotice* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLeaderInfoNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLeaderInfoNotice_descriptor_;
  metadata.reflection = RspLeaderInfoNotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
