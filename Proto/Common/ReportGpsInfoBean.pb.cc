// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReportGpsInfoBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReportGpsInfoBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReportGpsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGpsInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ReportGpsInfoBean_2eproto() {
  protobuf_AddDesc_ReportGpsInfoBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ReportGpsInfoBean.proto");
  GOOGLE_CHECK(file != NULL);
  ReportGpsInfo_descriptor_ = file->message_type(0);
  static const int ReportGpsInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, unitseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, channelseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, alarmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, alarm_),
  };
  ReportGpsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGpsInfo_descriptor_,
      ReportGpsInfo::default_instance_,
      ReportGpsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGpsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGpsInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ReportGpsInfoBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGpsInfo_descriptor_, &ReportGpsInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ReportGpsInfoBean_2eproto() {
  delete ReportGpsInfo::default_instance_;
  delete ReportGpsInfo_reflection_;
}

void protobuf_AddDesc_ReportGpsInfoBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ReportGpsInfoBean.proto\022\024com.arges.fil"
    "e.proto\"\303\002\n\rReportGpsInfo\022\021\n\005keyId\030\001 \001(\003"
    ":\002-1\022\021\n\007devCode\030\002 \001(\t:\000\022\024\n\010unitType\030\003 \001("
    "\005:\002-1\022\023\n\007unitSeq\030\004 \001(\005:\002-1\022\026\n\nchannelSeq"
    "\030\005 \001(\005:\002-1\022\024\n\tlongitude\030\006 \001(\002:\0010\022\023\n\010lati"
    "tude\030\007 \001(\002:\0010\022\021\n\006height\030\010 \001(\002:\0010\022\020\n\005angl"
    "e\030\t \001(\002:\0010\022\020\n\005speed\030\n \001(\002:\0010\022\025\n\talarmTim"
    "e\030\013 \001(\003:\002-1\022\021\n\005stars\030\014 \001(\005:\002-1\022\023\n\007antenn"
    "a\030\r \001(\005:\002-1\022\027\n\013orientation\030\016 \001(\005:\002-1\022\017\n\005"
    "alarm\030\017 \001(\t:\000", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReportGpsInfoBean.proto", &protobuf_RegisterTypes);
  ReportGpsInfo::default_instance_ = new ReportGpsInfo();
  ReportGpsInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ReportGpsInfoBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReportGpsInfoBean_2eproto {
  StaticDescriptorInitializer_ReportGpsInfoBean_2eproto() {
    protobuf_AddDesc_ReportGpsInfoBean_2eproto();
  }
} static_descriptor_initializer_ReportGpsInfoBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReportGpsInfo::kKeyIdFieldNumber;
const int ReportGpsInfo::kDevCodeFieldNumber;
const int ReportGpsInfo::kUnitTypeFieldNumber;
const int ReportGpsInfo::kUnitSeqFieldNumber;
const int ReportGpsInfo::kChannelSeqFieldNumber;
const int ReportGpsInfo::kLongitudeFieldNumber;
const int ReportGpsInfo::kLatitudeFieldNumber;
const int ReportGpsInfo::kHeightFieldNumber;
const int ReportGpsInfo::kAngleFieldNumber;
const int ReportGpsInfo::kSpeedFieldNumber;
const int ReportGpsInfo::kAlarmTimeFieldNumber;
const int ReportGpsInfo::kStarsFieldNumber;
const int ReportGpsInfo::kAntennaFieldNumber;
const int ReportGpsInfo::kOrientationFieldNumber;
const int ReportGpsInfo::kAlarmFieldNumber;
#endif  // !_MSC_VER

ReportGpsInfo::ReportGpsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReportGpsInfo)
}

void ReportGpsInfo::InitAsDefaultInstance() {
}

ReportGpsInfo::ReportGpsInfo(const ReportGpsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReportGpsInfo)
}

void ReportGpsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyid_ = GOOGLE_LONGLONG(-1);
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unittype_ = -1;
  unitseq_ = -1;
  channelseq_ = -1;
  longitude_ = 0;
  latitude_ = 0;
  height_ = 0;
  angle_ = 0;
  speed_ = 0;
  alarmtime_ = GOOGLE_LONGLONG(-1);
  stars_ = -1;
  antenna_ = -1;
  orientation_ = -1;
  alarm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGpsInfo::~ReportGpsInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReportGpsInfo)
  SharedDtor();
}

void ReportGpsInfo::SharedDtor() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (alarm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarm_;
  }
  if (this != default_instance_) {
  }
}

void ReportGpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGpsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGpsInfo_descriptor_;
}

const ReportGpsInfo& ReportGpsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReportGpsInfoBean_2eproto();
  return *default_instance_;
}

ReportGpsInfo* ReportGpsInfo::default_instance_ = NULL;

ReportGpsInfo* ReportGpsInfo::New() const {
  return new ReportGpsInfo;
}

void ReportGpsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportGpsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(longitude_, height_);
    keyid_ = GOOGLE_LONGLONG(-1);
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    unittype_ = -1;
    unitseq_ = -1;
    channelseq_ = -1;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(angle_, speed_);
    alarmtime_ = GOOGLE_LONGLONG(-1);
    stars_ = -1;
    antenna_ = -1;
    orientation_ = -1;
    if (has_alarm()) {
      if (alarm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarm_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGpsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReportGpsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 keyId = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keyid_)));
          set_has_keyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devCode;
        break;
      }

      // optional string devCode = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_devCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unitType;
        break;
      }

      // optional int32 unitType = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_unitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unitSeq;
        break;
      }

      // optional int32 unitSeq = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_unitSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitseq_)));
          set_has_unitseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelSeq;
        break;
      }

      // optional int32 channelSeq = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_channelSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelseq_)));
          set_has_channelseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_longitude;
        break;
      }

      // optional float longitude = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_latitude;
        break;
      }

      // optional float latitude = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_height;
        break;
      }

      // optional float height = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_angle;
        break;
      }

      // optional float angle = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_speed;
        break;
      }

      // optional float speed = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_alarmTime;
        break;
      }

      // optional int64 alarmTime = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_alarmTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alarmtime_)));
          set_has_alarmtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stars;
        break;
      }

      // optional int32 stars = 12 [default = -1];
      case 12: {
        if (tag == 96) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_antenna;
        break;
      }

      // optional int32 antenna = 13 [default = -1];
      case 13: {
        if (tag == 104) {
         parse_antenna:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antenna_)));
          set_has_antenna();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_orientation;
        break;
      }

      // optional int32 orientation = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_alarm;
        break;
      }

      // optional string alarm = 15 [default = ""];
      case 15: {
        if (tag == 122) {
         parse_alarm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alarm().data(), this->alarm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alarm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReportGpsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReportGpsInfo)
  return false;
#undef DO_
}

void ReportGpsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReportGpsInfo)
  // optional int64 keyId = 1 [default = -1];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->keyid(), output);
  }

  // optional string devCode = 2 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devcode(), output);
  }

  // optional int32 unitType = 3 [default = -1];
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unittype(), output);
  }

  // optional int32 unitSeq = 4 [default = -1];
  if (has_unitseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unitseq(), output);
  }

  // optional int32 channelSeq = 5 [default = -1];
  if (has_channelseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channelseq(), output);
  }

  // optional float longitude = 6 [default = 0];
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->longitude(), output);
  }

  // optional float latitude = 7 [default = 0];
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->latitude(), output);
  }

  // optional float height = 8 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // optional float angle = 9 [default = 0];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->angle(), output);
  }

  // optional float speed = 10 [default = 0];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->speed(), output);
  }

  // optional int64 alarmTime = 11 [default = -1];
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->alarmtime(), output);
  }

  // optional int32 stars = 12 [default = -1];
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stars(), output);
  }

  // optional int32 antenna = 13 [default = -1];
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->antenna(), output);
  }

  // optional int32 orientation = 14 [default = -1];
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->orientation(), output);
  }

  // optional string alarm = 15 [default = ""];
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarm().data(), this->alarm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->alarm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReportGpsInfo)
}

::google::protobuf::uint8* ReportGpsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReportGpsInfo)
  // optional int64 keyId = 1 [default = -1];
  if (has_keyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->keyid(), target);
  }

  // optional string devCode = 2 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devcode(), target);
  }

  // optional int32 unitType = 3 [default = -1];
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unittype(), target);
  }

  // optional int32 unitSeq = 4 [default = -1];
  if (has_unitseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unitseq(), target);
  }

  // optional int32 channelSeq = 5 [default = -1];
  if (has_channelseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channelseq(), target);
  }

  // optional float longitude = 6 [default = 0];
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->longitude(), target);
  }

  // optional float latitude = 7 [default = 0];
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->latitude(), target);
  }

  // optional float height = 8 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // optional float angle = 9 [default = 0];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->angle(), target);
  }

  // optional float speed = 10 [default = 0];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->speed(), target);
  }

  // optional int64 alarmTime = 11 [default = -1];
  if (has_alarmtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->alarmtime(), target);
  }

  // optional int32 stars = 12 [default = -1];
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stars(), target);
  }

  // optional int32 antenna = 13 [default = -1];
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->antenna(), target);
  }

  // optional int32 orientation = 14 [default = -1];
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->orientation(), target);
  }

  // optional string alarm = 15 [default = ""];
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarm().data(), this->alarm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->alarm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReportGpsInfo)
  return target;
}

int ReportGpsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 keyId = 1 [default = -1];
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keyid());
    }

    // optional string devCode = 2 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional int32 unitType = 3 [default = -1];
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unittype());
    }

    // optional int32 unitSeq = 4 [default = -1];
    if (has_unitseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitseq());
    }

    // optional int32 channelSeq = 5 [default = -1];
    if (has_channelseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelseq());
    }

    // optional float longitude = 6 [default = 0];
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 7 [default = 0];
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float height = 8 [default = 0];
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float angle = 9 [default = 0];
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // optional float speed = 10 [default = 0];
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int64 alarmTime = 11 [default = -1];
    if (has_alarmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alarmtime());
    }

    // optional int32 stars = 12 [default = -1];
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stars());
    }

    // optional int32 antenna = 13 [default = -1];
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antenna());
    }

    // optional int32 orientation = 14 [default = -1];
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }

    // optional string alarm = 15 [default = ""];
    if (has_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGpsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGpsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGpsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGpsInfo::MergeFrom(const ReportGpsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_unitseq()) {
      set_unitseq(from.unitseq());
    }
    if (from.has_channelseq()) {
      set_channelseq(from.channelseq());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_alarmtime()) {
      set_alarmtime(from.alarmtime());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_alarm()) {
      set_alarm(from.alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGpsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGpsInfo::CopyFrom(const ReportGpsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGpsInfo::IsInitialized() const {

  return true;
}

void ReportGpsInfo::Swap(ReportGpsInfo* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(devcode_, other->devcode_);
    std::swap(unittype_, other->unittype_);
    std::swap(unitseq_, other->unitseq_);
    std::swap(channelseq_, other->channelseq_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(height_, other->height_);
    std::swap(angle_, other->angle_);
    std::swap(speed_, other->speed_);
    std::swap(alarmtime_, other->alarmtime_);
    std::swap(stars_, other->stars_);
    std::swap(antenna_, other->antenna_);
    std::swap(orientation_, other->orientation_);
    std::swap(alarm_, other->alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGpsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGpsInfo_descriptor_;
  metadata.reflection = ReportGpsInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
