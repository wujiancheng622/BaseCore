// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataDistributeBean.proto

#ifndef PROTOBUF_DataDistributeBean_2eproto__INCLUDED
#define PROTOBUF_DataDistributeBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataDistributeBean_2eproto();
void protobuf_AssignDesc_DataDistributeBean_2eproto();
void protobuf_ShutdownFile_DataDistributeBean_2eproto();

class AlarmHostOperEvent;
class DataReport;
class DataDistribute;
class IssueBpxData;
class OperateDevice;

enum REPORTDATATYPE {
  DEVICE_STATUS = 0,
  REALTIME_DATA = 1,
  ALARM_DATA = 2,
  QUERY_DATA = 3
};
bool REPORTDATATYPE_IsValid(int value);
const REPORTDATATYPE REPORTDATATYPE_MIN = DEVICE_STATUS;
const REPORTDATATYPE REPORTDATATYPE_MAX = QUERY_DATA;
const int REPORTDATATYPE_ARRAYSIZE = REPORTDATATYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REPORTDATATYPE_descriptor();
inline const ::std::string& REPORTDATATYPE_Name(REPORTDATATYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REPORTDATATYPE_descriptor(), value);
}
inline bool REPORTDATATYPE_Parse(
    const ::std::string& name, REPORTDATATYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REPORTDATATYPE>(
    REPORTDATATYPE_descriptor(), name, value);
}
enum REALTIME_DATA_TYPE {
  GATE_VERIFY_INFO = 0
};
bool REALTIME_DATA_TYPE_IsValid(int value);
const REALTIME_DATA_TYPE REALTIME_DATA_TYPE_MIN = GATE_VERIFY_INFO;
const REALTIME_DATA_TYPE REALTIME_DATA_TYPE_MAX = GATE_VERIFY_INFO;
const int REALTIME_DATA_TYPE_ARRAYSIZE = REALTIME_DATA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REALTIME_DATA_TYPE_descriptor();
inline const ::std::string& REALTIME_DATA_TYPE_Name(REALTIME_DATA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REALTIME_DATA_TYPE_descriptor(), value);
}
inline bool REALTIME_DATA_TYPE_Parse(
    const ::std::string& name, REALTIME_DATA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REALTIME_DATA_TYPE>(
    REALTIME_DATA_TYPE_descriptor(), name, value);
}
enum ALARM_DATA_TYPE {
  COMMON_ALARM_DATA = 1000
};
bool ALARM_DATA_TYPE_IsValid(int value);
const ALARM_DATA_TYPE ALARM_DATA_TYPE_MIN = COMMON_ALARM_DATA;
const ALARM_DATA_TYPE ALARM_DATA_TYPE_MAX = COMMON_ALARM_DATA;
const int ALARM_DATA_TYPE_ARRAYSIZE = ALARM_DATA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ALARM_DATA_TYPE_descriptor();
inline const ::std::string& ALARM_DATA_TYPE_Name(ALARM_DATA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ALARM_DATA_TYPE_descriptor(), value);
}
inline bool ALARM_DATA_TYPE_Parse(
    const ::std::string& name, ALARM_DATA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ALARM_DATA_TYPE>(
    ALARM_DATA_TYPE_descriptor(), name, value);
}
enum QUERY_DATA_TYPE {
  COMMON_QUERY_DATA = 2000
};
bool QUERY_DATA_TYPE_IsValid(int value);
const QUERY_DATA_TYPE QUERY_DATA_TYPE_MIN = COMMON_QUERY_DATA;
const QUERY_DATA_TYPE QUERY_DATA_TYPE_MAX = COMMON_QUERY_DATA;
const int QUERY_DATA_TYPE_ARRAYSIZE = QUERY_DATA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* QUERY_DATA_TYPE_descriptor();
inline const ::std::string& QUERY_DATA_TYPE_Name(QUERY_DATA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    QUERY_DATA_TYPE_descriptor(), value);
}
inline bool QUERY_DATA_TYPE_Parse(
    const ::std::string& name, QUERY_DATA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QUERY_DATA_TYPE>(
    QUERY_DATA_TYPE_descriptor(), name, value);
}
enum DATADISTRIBUTETYPE {
  GATE_BLACKWHITE_DATA = 3000
};
bool DATADISTRIBUTETYPE_IsValid(int value);
const DATADISTRIBUTETYPE DATADISTRIBUTETYPE_MIN = GATE_BLACKWHITE_DATA;
const DATADISTRIBUTETYPE DATADISTRIBUTETYPE_MAX = GATE_BLACKWHITE_DATA;
const int DATADISTRIBUTETYPE_ARRAYSIZE = DATADISTRIBUTETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATADISTRIBUTETYPE_descriptor();
inline const ::std::string& DATADISTRIBUTETYPE_Name(DATADISTRIBUTETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATADISTRIBUTETYPE_descriptor(), value);
}
inline bool DATADISTRIBUTETYPE_Parse(
    const ::std::string& name, DATADISTRIBUTETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATADISTRIBUTETYPE>(
    DATADISTRIBUTETYPE_descriptor(), name, value);
}
enum REQUETS_TYPE_OF_WHITE_LIST {
  WHITE_LIST_REQUEST_ROLLING_MILL_DEV = 1,
  WHITE_LIST_ISSUE = 2
};
bool REQUETS_TYPE_OF_WHITE_LIST_IsValid(int value);
const REQUETS_TYPE_OF_WHITE_LIST REQUETS_TYPE_OF_WHITE_LIST_MIN = WHITE_LIST_REQUEST_ROLLING_MILL_DEV;
const REQUETS_TYPE_OF_WHITE_LIST REQUETS_TYPE_OF_WHITE_LIST_MAX = WHITE_LIST_ISSUE;
const int REQUETS_TYPE_OF_WHITE_LIST_ARRAYSIZE = REQUETS_TYPE_OF_WHITE_LIST_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUETS_TYPE_OF_WHITE_LIST_descriptor();
inline const ::std::string& REQUETS_TYPE_OF_WHITE_LIST_Name(REQUETS_TYPE_OF_WHITE_LIST value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUETS_TYPE_OF_WHITE_LIST_descriptor(), value);
}
inline bool REQUETS_TYPE_OF_WHITE_LIST_Parse(
    const ::std::string& name, REQUETS_TYPE_OF_WHITE_LIST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUETS_TYPE_OF_WHITE_LIST>(
    REQUETS_TYPE_OF_WHITE_LIST_descriptor(), name, value);
}
// ===================================================================

class AlarmHostOperEvent : public ::google::protobuf::Message {
 public:
  AlarmHostOperEvent();
  virtual ~AlarmHostOperEvent();

  AlarmHostOperEvent(const AlarmHostOperEvent& from);

  inline AlarmHostOperEvent& operator=(const AlarmHostOperEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmHostOperEvent& default_instance();

  void Swap(AlarmHostOperEvent* other);

  // implements Message ----------------------------------------------

  AlarmHostOperEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmHostOperEvent& from);
  void MergeFrom(const AlarmHostOperEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // repeated string channel = 2;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional int32 operatortype = 3 [default = -1];
  inline bool has_operatortype() const;
  inline void clear_operatortype();
  static const int kOperatortypeFieldNumber = 3;
  inline ::google::protobuf::int32 operatortype() const;
  inline void set_operatortype(::google::protobuf::int32 value);

  // optional string username = 4 [default = ""];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 4;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmHostOperEvent)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_operatortype();
  inline void clear_has_operatortype();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::std::string* username_;
  ::google::protobuf::int32 operatortype_;
  friend void  protobuf_AddDesc_DataDistributeBean_2eproto();
  friend void protobuf_AssignDesc_DataDistributeBean_2eproto();
  friend void protobuf_ShutdownFile_DataDistributeBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmHostOperEvent* default_instance_;
};
// -------------------------------------------------------------------

class DataReport : public ::google::protobuf::Message {
 public:
  DataReport();
  virtual ~DataReport();

  DataReport(const DataReport& from);

  inline DataReport& operator=(const DataReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataReport& default_instance();

  void Swap(DataReport* other);

  // implements Message ----------------------------------------------

  DataReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataReport& from);
  void MergeFrom(const DataReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 2;
  inline ::com::arges::file::proto::REPORTDATATYPE datatype() const;
  inline void set_datatype(::com::arges::file::proto::REPORTDATATYPE value);

  // optional int32 contentdatatype = 3 [default = -1];
  inline bool has_contentdatatype() const;
  inline void clear_contentdatatype();
  static const int kContentdatatypeFieldNumber = 3;
  inline ::google::protobuf::int32 contentdatatype() const;
  inline void set_contentdatatype(::google::protobuf::int32 value);

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DataReport)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_contentdatatype();
  inline void clear_has_contentdatatype();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  int datatype_;
  ::google::protobuf::int32 contentdatatype_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_DataDistributeBean_2eproto();
  friend void protobuf_AssignDesc_DataDistributeBean_2eproto();
  friend void protobuf_ShutdownFile_DataDistributeBean_2eproto();

  void InitAsDefaultInstance();
  static DataReport* default_instance_;
};
// -------------------------------------------------------------------

class DataDistribute : public ::google::protobuf::Message {
 public:
  DataDistribute();
  virtual ~DataDistribute();

  DataDistribute(const DataDistribute& from);

  inline DataDistribute& operator=(const DataDistribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataDistribute& default_instance();

  void Swap(DataDistribute* other);

  // implements Message ----------------------------------------------

  DataDistribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataDistribute& from);
  void MergeFrom(const DataDistribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 datatype = 1 [default = -1];
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 1;
  inline ::google::protobuf::int32 datatype() const;
  inline void set_datatype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated .com.arges.file.proto.DeviceInfo devs = 5;
  inline int devs_size() const;
  inline void clear_devs();
  static const int kDevsFieldNumber = 5;
  inline const ::com::arges::file::proto::DeviceInfo& devs(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devs(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_devs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      devs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_devs();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DataDistribute)
 private:
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 datatype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > devs_;
  friend void  protobuf_AddDesc_DataDistributeBean_2eproto();
  friend void protobuf_AssignDesc_DataDistributeBean_2eproto();
  friend void protobuf_ShutdownFile_DataDistributeBean_2eproto();

  void InitAsDefaultInstance();
  static DataDistribute* default_instance_;
};
// -------------------------------------------------------------------

class IssueBpxData : public ::google::protobuf::Message {
 public:
  IssueBpxData();
  virtual ~IssueBpxData();

  IssueBpxData(const IssueBpxData& from);

  inline IssueBpxData& operator=(const IssueBpxData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueBpxData& default_instance();

  void Swap(IssueBpxData* other);

  // implements Message ----------------------------------------------

  IssueBpxData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IssueBpxData& from);
  void MergeFrom(const IssueBpxData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 datatype = 1 [default = -1];
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 1;
  inline ::google::protobuf::int32 datatype() const;
  inline void set_datatype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .com.arges.file.proto.DeviceInfo devs = 5;
  inline bool has_devs() const;
  inline void clear_devs();
  static const int kDevsFieldNumber = 5;
  inline const ::com::arges::file::proto::DeviceInfo& devs() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devs();
  inline ::com::arges::file::proto::DeviceInfo* release_devs();
  inline void set_allocated_devs(::com::arges::file::proto::DeviceInfo* devs);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.IssueBpxData)
 private:
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_devs();
  inline void clear_has_devs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 datatype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::std::string* content_;
  ::com::arges::file::proto::DeviceInfo* devs_;
  friend void  protobuf_AddDesc_DataDistributeBean_2eproto();
  friend void protobuf_AssignDesc_DataDistributeBean_2eproto();
  friend void protobuf_ShutdownFile_DataDistributeBean_2eproto();

  void InitAsDefaultInstance();
  static IssueBpxData* default_instance_;
};
// -------------------------------------------------------------------

class OperateDevice : public ::google::protobuf::Message {
 public:
  OperateDevice();
  virtual ~OperateDevice();

  OperateDevice(const OperateDevice& from);

  inline OperateDevice& operator=(const OperateDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateDevice& default_instance();

  void Swap(OperateDevice* other);

  // implements Message ----------------------------------------------

  OperateDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateDevice& from);
  void MergeFrom(const OperateDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operatorType = 1 [default = -1];
  inline bool has_operatortype() const;
  inline void clear_operatortype();
  static const int kOperatorTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatortype() const;
  inline void set_operatortype(::google::protobuf::int32 value);

  // optional .com.arges.file.proto.DeviceInfo devInfo = 2;
  inline bool has_devinfo() const;
  inline void clear_devinfo();
  static const int kDevInfoFieldNumber = 2;
  inline const ::com::arges::file::proto::DeviceInfo& devinfo() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devinfo();
  inline ::com::arges::file::proto::DeviceInfo* release_devinfo();
  inline void set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo);

  // repeated string nodePath = 3;
  inline int nodepath_size() const;
  inline void clear_nodepath();
  static const int kNodePathFieldNumber = 3;
  inline const ::std::string& nodepath(int index) const;
  inline ::std::string* mutable_nodepath(int index);
  inline void set_nodepath(int index, const ::std::string& value);
  inline void set_nodepath(int index, const char* value);
  inline void set_nodepath(int index, const char* value, size_t size);
  inline ::std::string* add_nodepath();
  inline void add_nodepath(const ::std::string& value);
  inline void add_nodepath(const char* value);
  inline void add_nodepath(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nodepath() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nodepath();

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.OperateDevice)
 private:
  inline void set_has_operatortype();
  inline void clear_has_operatortype();
  inline void set_has_devinfo();
  inline void clear_has_devinfo();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::arges::file::proto::DeviceInfo* devinfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nodepath_;
  ::std::string* content_;
  ::google::protobuf::int32 operatortype_;
  friend void  protobuf_AddDesc_DataDistributeBean_2eproto();
  friend void protobuf_AssignDesc_DataDistributeBean_2eproto();
  friend void protobuf_ShutdownFile_DataDistributeBean_2eproto();

  void InitAsDefaultInstance();
  static OperateDevice* default_instance_;
};
// ===================================================================


// ===================================================================

// AlarmHostOperEvent

// optional string devId = 1 [default = ""];
inline bool AlarmHostOperEvent::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmHostOperEvent::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmHostOperEvent::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmHostOperEvent::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& AlarmHostOperEvent::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmHostOperEvent.devId)
  return *devid_;
}
inline void AlarmHostOperEvent::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmHostOperEvent.devId)
}
inline void AlarmHostOperEvent::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmHostOperEvent.devId)
}
inline void AlarmHostOperEvent::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmHostOperEvent.devId)
}
inline ::std::string* AlarmHostOperEvent::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmHostOperEvent.devId)
  return devid_;
}
inline ::std::string* AlarmHostOperEvent::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmHostOperEvent::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmHostOperEvent.devId)
}

// repeated string channel = 2;
inline int AlarmHostOperEvent::channel_size() const {
  return channel_.size();
}
inline void AlarmHostOperEvent::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& AlarmHostOperEvent::channel(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmHostOperEvent.channel)
  return channel_.Get(index);
}
inline ::std::string* AlarmHostOperEvent::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmHostOperEvent.channel)
  return channel_.Mutable(index);
}
inline void AlarmHostOperEvent::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmHostOperEvent.channel)
  channel_.Mutable(index)->assign(value);
}
inline void AlarmHostOperEvent::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmHostOperEvent.channel)
}
inline void AlarmHostOperEvent::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmHostOperEvent.channel)
}
inline ::std::string* AlarmHostOperEvent::add_channel() {
  return channel_.Add();
}
inline void AlarmHostOperEvent::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmHostOperEvent.channel)
}
inline void AlarmHostOperEvent::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.AlarmHostOperEvent.channel)
}
inline void AlarmHostOperEvent::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.AlarmHostOperEvent.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlarmHostOperEvent::channel() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmHostOperEvent.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlarmHostOperEvent::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmHostOperEvent.channel)
  return &channel_;
}

// optional int32 operatortype = 3 [default = -1];
inline bool AlarmHostOperEvent::has_operatortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmHostOperEvent::set_has_operatortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmHostOperEvent::clear_has_operatortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmHostOperEvent::clear_operatortype() {
  operatortype_ = -1;
  clear_has_operatortype();
}
inline ::google::protobuf::int32 AlarmHostOperEvent::operatortype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmHostOperEvent.operatortype)
  return operatortype_;
}
inline void AlarmHostOperEvent::set_operatortype(::google::protobuf::int32 value) {
  set_has_operatortype();
  operatortype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmHostOperEvent.operatortype)
}

// optional string username = 4 [default = ""];
inline bool AlarmHostOperEvent::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmHostOperEvent::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmHostOperEvent::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmHostOperEvent::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AlarmHostOperEvent::username() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmHostOperEvent.username)
  return *username_;
}
inline void AlarmHostOperEvent::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmHostOperEvent.username)
}
inline void AlarmHostOperEvent::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmHostOperEvent.username)
}
inline void AlarmHostOperEvent::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmHostOperEvent.username)
}
inline ::std::string* AlarmHostOperEvent::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmHostOperEvent.username)
  return username_;
}
inline ::std::string* AlarmHostOperEvent::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmHostOperEvent::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmHostOperEvent.username)
}

// -------------------------------------------------------------------

// DataReport

// optional string devId = 1 [default = ""];
inline bool DataReport::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataReport::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataReport::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataReport::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& DataReport::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataReport.devId)
  return *devid_;
}
inline void DataReport::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataReport.devId)
}
inline void DataReport::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DataReport.devId)
}
inline void DataReport::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DataReport.devId)
}
inline ::std::string* DataReport::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DataReport.devId)
  return devid_;
}
inline ::std::string* DataReport::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataReport::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DataReport.devId)
}

// optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
inline bool DataReport::has_datatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataReport::set_has_datatype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataReport::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataReport::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::com::arges::file::proto::REPORTDATATYPE DataReport::datatype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataReport.datatype)
  return static_cast< ::com::arges::file::proto::REPORTDATATYPE >(datatype_);
}
inline void DataReport::set_datatype(::com::arges::file::proto::REPORTDATATYPE value) {
  assert(::com::arges::file::proto::REPORTDATATYPE_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataReport.datatype)
}

// optional int32 contentdatatype = 3 [default = -1];
inline bool DataReport::has_contentdatatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataReport::set_has_contentdatatype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataReport::clear_has_contentdatatype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataReport::clear_contentdatatype() {
  contentdatatype_ = -1;
  clear_has_contentdatatype();
}
inline ::google::protobuf::int32 DataReport::contentdatatype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataReport.contentdatatype)
  return contentdatatype_;
}
inline void DataReport::set_contentdatatype(::google::protobuf::int32 value) {
  set_has_contentdatatype();
  contentdatatype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataReport.contentdatatype)
}

// optional string content = 4 [default = ""];
inline bool DataReport::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataReport::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataReport::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataReport::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataReport::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataReport.content)
  return *content_;
}
inline void DataReport::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataReport.content)
}
inline void DataReport::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DataReport.content)
}
inline void DataReport::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DataReport.content)
}
inline ::std::string* DataReport::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DataReport.content)
  return content_;
}
inline ::std::string* DataReport::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataReport::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DataReport.content)
}

// -------------------------------------------------------------------

// DataDistribute

// optional int32 datatype = 1 [default = -1];
inline bool DataDistribute::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDistribute::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataDistribute::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataDistribute::clear_datatype() {
  datatype_ = -1;
  clear_has_datatype();
}
inline ::google::protobuf::int32 DataDistribute::datatype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataDistribute.datatype)
  return datatype_;
}
inline void DataDistribute::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataDistribute.datatype)
}

// optional int32 result = 2 [default = -1];
inline bool DataDistribute::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDistribute::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataDistribute::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataDistribute::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 DataDistribute::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataDistribute.result)
  return result_;
}
inline void DataDistribute::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataDistribute.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool DataDistribute::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataDistribute::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataDistribute::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataDistribute::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& DataDistribute::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataDistribute.resultDescribe)
  return *resultdescribe_;
}
inline void DataDistribute::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataDistribute.resultDescribe)
}
inline void DataDistribute::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DataDistribute.resultDescribe)
}
inline void DataDistribute::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DataDistribute.resultDescribe)
}
inline ::std::string* DataDistribute::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DataDistribute.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* DataDistribute::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataDistribute::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DataDistribute.resultDescribe)
}

// optional string content = 4 [default = ""];
inline bool DataDistribute::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataDistribute::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataDistribute::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataDistribute::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataDistribute::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataDistribute.content)
  return *content_;
}
inline void DataDistribute::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DataDistribute.content)
}
inline void DataDistribute::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DataDistribute.content)
}
inline void DataDistribute::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DataDistribute.content)
}
inline ::std::string* DataDistribute::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DataDistribute.content)
  return content_;
}
inline ::std::string* DataDistribute::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataDistribute::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DataDistribute.content)
}

// repeated .com.arges.file.proto.DeviceInfo devs = 5;
inline int DataDistribute::devs_size() const {
  return devs_.size();
}
inline void DataDistribute::clear_devs() {
  devs_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& DataDistribute::devs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DataDistribute.devs)
  return devs_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* DataDistribute::mutable_devs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DataDistribute.devs)
  return devs_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* DataDistribute::add_devs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.DataDistribute.devs)
  return devs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
DataDistribute::devs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.DataDistribute.devs)
  return devs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
DataDistribute::mutable_devs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.DataDistribute.devs)
  return &devs_;
}

// -------------------------------------------------------------------

// IssueBpxData

// optional int32 datatype = 1 [default = -1];
inline bool IssueBpxData::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IssueBpxData::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IssueBpxData::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IssueBpxData::clear_datatype() {
  datatype_ = -1;
  clear_has_datatype();
}
inline ::google::protobuf::int32 IssueBpxData::datatype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.IssueBpxData.datatype)
  return datatype_;
}
inline void IssueBpxData::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.IssueBpxData.datatype)
}

// optional int32 result = 2 [default = -1];
inline bool IssueBpxData::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IssueBpxData::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IssueBpxData::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IssueBpxData::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 IssueBpxData::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.IssueBpxData.result)
  return result_;
}
inline void IssueBpxData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.IssueBpxData.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool IssueBpxData::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IssueBpxData::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IssueBpxData::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IssueBpxData::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& IssueBpxData::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.IssueBpxData.resultDescribe)
  return *resultdescribe_;
}
inline void IssueBpxData::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.IssueBpxData.resultDescribe)
}
inline void IssueBpxData::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.IssueBpxData.resultDescribe)
}
inline void IssueBpxData::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.IssueBpxData.resultDescribe)
}
inline ::std::string* IssueBpxData::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.IssueBpxData.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* IssueBpxData::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IssueBpxData::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.IssueBpxData.resultDescribe)
}

// optional string content = 4 [default = ""];
inline bool IssueBpxData::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IssueBpxData::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IssueBpxData::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IssueBpxData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& IssueBpxData::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.IssueBpxData.content)
  return *content_;
}
inline void IssueBpxData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.IssueBpxData.content)
}
inline void IssueBpxData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.IssueBpxData.content)
}
inline void IssueBpxData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.IssueBpxData.content)
}
inline ::std::string* IssueBpxData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.IssueBpxData.content)
  return content_;
}
inline ::std::string* IssueBpxData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IssueBpxData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.IssueBpxData.content)
}

// optional .com.arges.file.proto.DeviceInfo devs = 5;
inline bool IssueBpxData::has_devs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IssueBpxData::set_has_devs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IssueBpxData::clear_has_devs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IssueBpxData::clear_devs() {
  if (devs_ != NULL) devs_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devs();
}
inline const ::com::arges::file::proto::DeviceInfo& IssueBpxData::devs() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.IssueBpxData.devs)
  return devs_ != NULL ? *devs_ : *default_instance_->devs_;
}
inline ::com::arges::file::proto::DeviceInfo* IssueBpxData::mutable_devs() {
  set_has_devs();
  if (devs_ == NULL) devs_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.IssueBpxData.devs)
  return devs_;
}
inline ::com::arges::file::proto::DeviceInfo* IssueBpxData::release_devs() {
  clear_has_devs();
  ::com::arges::file::proto::DeviceInfo* temp = devs_;
  devs_ = NULL;
  return temp;
}
inline void IssueBpxData::set_allocated_devs(::com::arges::file::proto::DeviceInfo* devs) {
  delete devs_;
  devs_ = devs;
  if (devs) {
    set_has_devs();
  } else {
    clear_has_devs();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.IssueBpxData.devs)
}

// -------------------------------------------------------------------

// OperateDevice

// optional int32 operatorType = 1 [default = -1];
inline bool OperateDevice::has_operatortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateDevice::set_has_operatortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateDevice::clear_has_operatortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateDevice::clear_operatortype() {
  operatortype_ = -1;
  clear_has_operatortype();
}
inline ::google::protobuf::int32 OperateDevice::operatortype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.OperateDevice.operatorType)
  return operatortype_;
}
inline void OperateDevice::set_operatortype(::google::protobuf::int32 value) {
  set_has_operatortype();
  operatortype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.OperateDevice.operatorType)
}

// optional .com.arges.file.proto.DeviceInfo devInfo = 2;
inline bool OperateDevice::has_devinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateDevice::set_has_devinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateDevice::clear_has_devinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateDevice::clear_devinfo() {
  if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devinfo();
}
inline const ::com::arges::file::proto::DeviceInfo& OperateDevice::devinfo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.OperateDevice.devInfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* OperateDevice::mutable_devinfo() {
  set_has_devinfo();
  if (devinfo_ == NULL) devinfo_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.OperateDevice.devInfo)
  return devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* OperateDevice::release_devinfo() {
  clear_has_devinfo();
  ::com::arges::file::proto::DeviceInfo* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
inline void OperateDevice::set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    set_has_devinfo();
  } else {
    clear_has_devinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.OperateDevice.devInfo)
}

// repeated string nodePath = 3;
inline int OperateDevice::nodepath_size() const {
  return nodepath_.size();
}
inline void OperateDevice::clear_nodepath() {
  nodepath_.Clear();
}
inline const ::std::string& OperateDevice::nodepath(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.OperateDevice.nodePath)
  return nodepath_.Get(index);
}
inline ::std::string* OperateDevice::mutable_nodepath(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.OperateDevice.nodePath)
  return nodepath_.Mutable(index);
}
inline void OperateDevice::set_nodepath(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.OperateDevice.nodePath)
  nodepath_.Mutable(index)->assign(value);
}
inline void OperateDevice::set_nodepath(int index, const char* value) {
  nodepath_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.OperateDevice.nodePath)
}
inline void OperateDevice::set_nodepath(int index, const char* value, size_t size) {
  nodepath_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.OperateDevice.nodePath)
}
inline ::std::string* OperateDevice::add_nodepath() {
  return nodepath_.Add();
}
inline void OperateDevice::add_nodepath(const ::std::string& value) {
  nodepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.OperateDevice.nodePath)
}
inline void OperateDevice::add_nodepath(const char* value) {
  nodepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.OperateDevice.nodePath)
}
inline void OperateDevice::add_nodepath(const char* value, size_t size) {
  nodepath_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.OperateDevice.nodePath)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperateDevice::nodepath() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.OperateDevice.nodePath)
  return nodepath_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperateDevice::mutable_nodepath() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.OperateDevice.nodePath)
  return &nodepath_;
}

// optional string content = 4 [default = ""];
inline bool OperateDevice::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperateDevice::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperateDevice::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperateDevice::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OperateDevice::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.OperateDevice.content)
  return *content_;
}
inline void OperateDevice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.OperateDevice.content)
}
inline void OperateDevice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.OperateDevice.content)
}
inline void OperateDevice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.OperateDevice.content)
}
inline ::std::string* OperateDevice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.OperateDevice.content)
  return content_;
}
inline ::std::string* OperateDevice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperateDevice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.OperateDevice.content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::REPORTDATATYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REPORTDATATYPE>() {
  return ::com::arges::file::proto::REPORTDATATYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REALTIME_DATA_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REALTIME_DATA_TYPE>() {
  return ::com::arges::file::proto::REALTIME_DATA_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::ALARM_DATA_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::ALARM_DATA_TYPE>() {
  return ::com::arges::file::proto::ALARM_DATA_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::QUERY_DATA_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::QUERY_DATA_TYPE>() {
  return ::com::arges::file::proto::QUERY_DATA_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::DATADISTRIBUTETYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::DATADISTRIBUTETYPE>() {
  return ::com::arges::file::proto::DATADISTRIBUTETYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUETS_TYPE_OF_WHITE_LIST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUETS_TYPE_OF_WHITE_LIST>() {
  return ::com::arges::file::proto::REQUETS_TYPE_OF_WHITE_LIST_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataDistributeBean_2eproto__INCLUDED
