// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BPXAskForBMSAddress.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BPXAskForBMSAddress.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReqBPXAskForBMSAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBPXAskForBMSAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspBPXAskForBMSAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspBPXAskForBMSAddress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BPXAskForBMSAddress_2eproto() {
  protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BPXAskForBMSAddress.proto");
  GOOGLE_CHECK(file != NULL);
  ReqBPXAskForBMSAddress_descriptor_ = file->message_type(0);
  static const int ReqBPXAskForBMSAddress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBPXAskForBMSAddress, bpxid_),
  };
  ReqBPXAskForBMSAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBPXAskForBMSAddress_descriptor_,
      ReqBPXAskForBMSAddress::default_instance_,
      ReqBPXAskForBMSAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBPXAskForBMSAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBPXAskForBMSAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBPXAskForBMSAddress));
  RspBPXAskForBMSAddress_descriptor_ = file->message_type(1);
  static const int RspBPXAskForBMSAddress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspBPXAskForBMSAddress, bmsip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspBPXAskForBMSAddress, bmsport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspBPXAskForBMSAddress, bpxid_),
  };
  RspBPXAskForBMSAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspBPXAskForBMSAddress_descriptor_,
      RspBPXAskForBMSAddress::default_instance_,
      RspBPXAskForBMSAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspBPXAskForBMSAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspBPXAskForBMSAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspBPXAskForBMSAddress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BPXAskForBMSAddress_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBPXAskForBMSAddress_descriptor_, &ReqBPXAskForBMSAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspBPXAskForBMSAddress_descriptor_, &RspBPXAskForBMSAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BPXAskForBMSAddress_2eproto() {
  delete ReqBPXAskForBMSAddress::default_instance_;
  delete ReqBPXAskForBMSAddress_reflection_;
  delete ReqBPXAskForBMSAddress::_default_bpxid_;
  delete RspBPXAskForBMSAddress::default_instance_;
  delete RspBPXAskForBMSAddress_reflection_;
  delete RspBPXAskForBMSAddress::_default_bmsip_;
  delete RspBPXAskForBMSAddress::_default_bpxid_;
}

void protobuf_AddDesc_BPXAskForBMSAddress_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031BPXAskForBMSAddress.proto\022\024com.arges.f"
    "ile.proto\"0\n\026ReqBPXAskForBMSAddress\022\026\n\005b"
    "pxid\030\001 \001(\t:\007default\"]\n\026RspBPXAskForBMSAd"
    "dress\022\026\n\005bmsip\030\001 \002(\t:\007default\022\023\n\007bmsport"
    "\030\002 \002(\005:\002-1\022\026\n\005bpxid\030\003 \001(\t:\007default", 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BPXAskForBMSAddress.proto", &protobuf_RegisterTypes);
  ReqBPXAskForBMSAddress::_default_bpxid_ =
      new ::std::string("default", 7);
  ReqBPXAskForBMSAddress::default_instance_ = new ReqBPXAskForBMSAddress();
  RspBPXAskForBMSAddress::_default_bmsip_ =
      new ::std::string("default", 7);
  RspBPXAskForBMSAddress::_default_bpxid_ =
      new ::std::string("default", 7);
  RspBPXAskForBMSAddress::default_instance_ = new RspBPXAskForBMSAddress();
  ReqBPXAskForBMSAddress::default_instance_->InitAsDefaultInstance();
  RspBPXAskForBMSAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BPXAskForBMSAddress_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BPXAskForBMSAddress_2eproto {
  StaticDescriptorInitializer_BPXAskForBMSAddress_2eproto() {
    protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  }
} static_descriptor_initializer_BPXAskForBMSAddress_2eproto_;

// ===================================================================

::std::string* ReqBPXAskForBMSAddress::_default_bpxid_ = NULL;
#ifndef _MSC_VER
const int ReqBPXAskForBMSAddress::kBpxidFieldNumber;
#endif  // !_MSC_VER

ReqBPXAskForBMSAddress::ReqBPXAskForBMSAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqBPXAskForBMSAddress)
}

void ReqBPXAskForBMSAddress::InitAsDefaultInstance() {
}

ReqBPXAskForBMSAddress::ReqBPXAskForBMSAddress(const ReqBPXAskForBMSAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqBPXAskForBMSAddress)
}

void ReqBPXAskForBMSAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBPXAskForBMSAddress::~ReqBPXAskForBMSAddress() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqBPXAskForBMSAddress)
  SharedDtor();
}

void ReqBPXAskForBMSAddress::SharedDtor() {
  if (bpxid_ != _default_bpxid_) {
    delete bpxid_;
  }
  if (this != default_instance_) {
  }
}

void ReqBPXAskForBMSAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBPXAskForBMSAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBPXAskForBMSAddress_descriptor_;
}

const ReqBPXAskForBMSAddress& ReqBPXAskForBMSAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  return *default_instance_;
}

ReqBPXAskForBMSAddress* ReqBPXAskForBMSAddress::default_instance_ = NULL;

ReqBPXAskForBMSAddress* ReqBPXAskForBMSAddress::New() const {
  return new ReqBPXAskForBMSAddress;
}

void ReqBPXAskForBMSAddress::Clear() {
  if (has_bpxid()) {
    if (bpxid_ != _default_bpxid_) {
      bpxid_->assign(*_default_bpxid_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBPXAskForBMSAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqBPXAskForBMSAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bpxid = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bpxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bpxid().data(), this->bpxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bpxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqBPXAskForBMSAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqBPXAskForBMSAddress)
  return false;
#undef DO_
}

void ReqBPXAskForBMSAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqBPXAskForBMSAddress)
  // optional string bpxid = 1 [default = "default"];
  if (has_bpxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bpxid().data(), this->bpxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bpxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bpxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqBPXAskForBMSAddress)
}

::google::protobuf::uint8* ReqBPXAskForBMSAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqBPXAskForBMSAddress)
  // optional string bpxid = 1 [default = "default"];
  if (has_bpxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bpxid().data(), this->bpxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bpxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bpxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqBPXAskForBMSAddress)
  return target;
}

int ReqBPXAskForBMSAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bpxid = 1 [default = "default"];
    if (has_bpxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bpxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBPXAskForBMSAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBPXAskForBMSAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBPXAskForBMSAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBPXAskForBMSAddress::MergeFrom(const ReqBPXAskForBMSAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bpxid()) {
      set_bpxid(from.bpxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBPXAskForBMSAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBPXAskForBMSAddress::CopyFrom(const ReqBPXAskForBMSAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBPXAskForBMSAddress::IsInitialized() const {

  return true;
}

void ReqBPXAskForBMSAddress::Swap(ReqBPXAskForBMSAddress* other) {
  if (other != this) {
    std::swap(bpxid_, other->bpxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBPXAskForBMSAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBPXAskForBMSAddress_descriptor_;
  metadata.reflection = ReqBPXAskForBMSAddress_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspBPXAskForBMSAddress::_default_bmsip_ = NULL;
::std::string* RspBPXAskForBMSAddress::_default_bpxid_ = NULL;
#ifndef _MSC_VER
const int RspBPXAskForBMSAddress::kBmsipFieldNumber;
const int RspBPXAskForBMSAddress::kBmsportFieldNumber;
const int RspBPXAskForBMSAddress::kBpxidFieldNumber;
#endif  // !_MSC_VER

RspBPXAskForBMSAddress::RspBPXAskForBMSAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspBPXAskForBMSAddress)
}

void RspBPXAskForBMSAddress::InitAsDefaultInstance() {
}

RspBPXAskForBMSAddress::RspBPXAskForBMSAddress(const RspBPXAskForBMSAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspBPXAskForBMSAddress)
}

void RspBPXAskForBMSAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bmsip_ = const_cast< ::std::string*>(_default_bmsip_);
  bmsport_ = -1;
  bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspBPXAskForBMSAddress::~RspBPXAskForBMSAddress() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspBPXAskForBMSAddress)
  SharedDtor();
}

void RspBPXAskForBMSAddress::SharedDtor() {
  if (bmsip_ != _default_bmsip_) {
    delete bmsip_;
  }
  if (bpxid_ != _default_bpxid_) {
    delete bpxid_;
  }
  if (this != default_instance_) {
  }
}

void RspBPXAskForBMSAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspBPXAskForBMSAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspBPXAskForBMSAddress_descriptor_;
}

const RspBPXAskForBMSAddress& RspBPXAskForBMSAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  return *default_instance_;
}

RspBPXAskForBMSAddress* RspBPXAskForBMSAddress::default_instance_ = NULL;

RspBPXAskForBMSAddress* RspBPXAskForBMSAddress::New() const {
  return new RspBPXAskForBMSAddress;
}

void RspBPXAskForBMSAddress::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bmsip()) {
      if (bmsip_ != _default_bmsip_) {
        bmsip_->assign(*_default_bmsip_);
      }
    }
    bmsport_ = -1;
    if (has_bpxid()) {
      if (bpxid_ != _default_bpxid_) {
        bpxid_->assign(*_default_bpxid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspBPXAskForBMSAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspBPXAskForBMSAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bmsip = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bmsip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bmsip().data(), this->bmsip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bmsip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bmsport;
        break;
      }

      // required int32 bmsport = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_bmsport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bmsport_)));
          set_has_bmsport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bpxid;
        break;
      }

      // optional string bpxid = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_bpxid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bpxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bpxid().data(), this->bpxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bpxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspBPXAskForBMSAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspBPXAskForBMSAddress)
  return false;
#undef DO_
}

void RspBPXAskForBMSAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspBPXAskForBMSAddress)
  // required string bmsip = 1 [default = "default"];
  if (has_bmsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bmsip().data(), this->bmsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bmsip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bmsip(), output);
  }

  // required int32 bmsport = 2 [default = -1];
  if (has_bmsport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bmsport(), output);
  }

  // optional string bpxid = 3 [default = "default"];
  if (has_bpxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bpxid().data(), this->bpxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bpxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bpxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspBPXAskForBMSAddress)
}

::google::protobuf::uint8* RspBPXAskForBMSAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspBPXAskForBMSAddress)
  // required string bmsip = 1 [default = "default"];
  if (has_bmsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bmsip().data(), this->bmsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bmsip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bmsip(), target);
  }

  // required int32 bmsport = 2 [default = -1];
  if (has_bmsport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bmsport(), target);
  }

  // optional string bpxid = 3 [default = "default"];
  if (has_bpxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bpxid().data(), this->bpxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bpxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bpxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspBPXAskForBMSAddress)
  return target;
}

int RspBPXAskForBMSAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bmsip = 1 [default = "default"];
    if (has_bmsip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bmsip());
    }

    // required int32 bmsport = 2 [default = -1];
    if (has_bmsport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bmsport());
    }

    // optional string bpxid = 3 [default = "default"];
    if (has_bpxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bpxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspBPXAskForBMSAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspBPXAskForBMSAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspBPXAskForBMSAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspBPXAskForBMSAddress::MergeFrom(const RspBPXAskForBMSAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bmsip()) {
      set_bmsip(from.bmsip());
    }
    if (from.has_bmsport()) {
      set_bmsport(from.bmsport());
    }
    if (from.has_bpxid()) {
      set_bpxid(from.bpxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspBPXAskForBMSAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspBPXAskForBMSAddress::CopyFrom(const RspBPXAskForBMSAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspBPXAskForBMSAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RspBPXAskForBMSAddress::Swap(RspBPXAskForBMSAddress* other) {
  if (other != this) {
    std::swap(bmsip_, other->bmsip_);
    std::swap(bmsport_, other->bmsport_);
    std::swap(bpxid_, other->bpxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspBPXAskForBMSAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspBPXAskForBMSAddress_descriptor_;
  metadata.reflection = RspBPXAskForBMSAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
