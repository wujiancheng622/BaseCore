// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeetingMessageBean.proto

#ifndef PROTOBUF_MeetingMessageBean_2eproto__INCLUDED
#define PROTOBUF_MeetingMessageBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
#include "SignInDataBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MeetingMessageBean_2eproto();
void protobuf_AssignDesc_MeetingMessageBean_2eproto();
void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

class HostMapOrgData;
class MeetingMessage;
class MeetingMessage_WelcomInfo;
class MeetingMessage_vipShowTime;
class MeetingMessage_Notice;
class RspConnectOfMedia;
class MeetingData;
class AllMeetingMessage;
class ReportStatOfMeetingShow;

enum TYPE_OF_SIGN_IN {
  SIGN_IN_TYPE_IS_THE_WHOLE_DAY = 1,
  SIGN_IN_TYPE_IS_SELF_DEFILE = 2,
  SIGN_IN_TYPE_IS_ATTENDANCE = 3
};
bool TYPE_OF_SIGN_IN_IsValid(int value);
const TYPE_OF_SIGN_IN TYPE_OF_SIGN_IN_MIN = SIGN_IN_TYPE_IS_THE_WHOLE_DAY;
const TYPE_OF_SIGN_IN TYPE_OF_SIGN_IN_MAX = SIGN_IN_TYPE_IS_ATTENDANCE;
const int TYPE_OF_SIGN_IN_ARRAYSIZE = TYPE_OF_SIGN_IN_MAX + 1;

const ::google::protobuf::EnumDescriptor* TYPE_OF_SIGN_IN_descriptor();
inline const ::std::string& TYPE_OF_SIGN_IN_Name(TYPE_OF_SIGN_IN value) {
  return ::google::protobuf::internal::NameOfEnum(
    TYPE_OF_SIGN_IN_descriptor(), value);
}
inline bool TYPE_OF_SIGN_IN_Parse(
    const ::std::string& name, TYPE_OF_SIGN_IN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TYPE_OF_SIGN_IN>(
    TYPE_OF_SIGN_IN_descriptor(), name, value);
}
enum SUBTITLE_TYPE_FOR_SHOW {
  SUBTITLE_TYPE_OF_REAL_TIME = 1,
  SUBTITLE_TYPE_OF_HISTORY = 2,
  SUBTITLE_TYPE_OF_VIP = 3
};
bool SUBTITLE_TYPE_FOR_SHOW_IsValid(int value);
const SUBTITLE_TYPE_FOR_SHOW SUBTITLE_TYPE_FOR_SHOW_MIN = SUBTITLE_TYPE_OF_REAL_TIME;
const SUBTITLE_TYPE_FOR_SHOW SUBTITLE_TYPE_FOR_SHOW_MAX = SUBTITLE_TYPE_OF_VIP;
const int SUBTITLE_TYPE_FOR_SHOW_ARRAYSIZE = SUBTITLE_TYPE_FOR_SHOW_MAX + 1;

const ::google::protobuf::EnumDescriptor* SUBTITLE_TYPE_FOR_SHOW_descriptor();
inline const ::std::string& SUBTITLE_TYPE_FOR_SHOW_Name(SUBTITLE_TYPE_FOR_SHOW value) {
  return ::google::protobuf::internal::NameOfEnum(
    SUBTITLE_TYPE_FOR_SHOW_descriptor(), value);
}
inline bool SUBTITLE_TYPE_FOR_SHOW_Parse(
    const ::std::string& name, SUBTITLE_TYPE_FOR_SHOW* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SUBTITLE_TYPE_FOR_SHOW>(
    SUBTITLE_TYPE_FOR_SHOW_descriptor(), name, value);
}
enum CONFIG_TYPE_OF_MEETING_FOR_SYSTEM {
  MEETING_CONFIG_TYPE_FOR_HOT_MAP = 1,
  MEETING_CONFIG_TYPE_FOR_ELECTRONIC_MAP = 2
};
bool CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_IsValid(int value);
const CONFIG_TYPE_OF_MEETING_FOR_SYSTEM CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_MIN = MEETING_CONFIG_TYPE_FOR_HOT_MAP;
const CONFIG_TYPE_OF_MEETING_FOR_SYSTEM CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_MAX = MEETING_CONFIG_TYPE_FOR_ELECTRONIC_MAP;
const int CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_ARRAYSIZE = CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_MAX + 1;

const ::google::protobuf::EnumDescriptor* CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor();
inline const ::std::string& CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_Name(CONFIG_TYPE_OF_MEETING_FOR_SYSTEM value) {
  return ::google::protobuf::internal::NameOfEnum(
    CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor(), value);
}
inline bool CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_Parse(
    const ::std::string& name, CONFIG_TYPE_OF_MEETING_FOR_SYSTEM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CONFIG_TYPE_OF_MEETING_FOR_SYSTEM>(
    CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor(), name, value);
}
enum DO_TYPE_OF_MEETING {
  MEETING_ADD = 1,
  MEETING_UPDATE = 2,
  MEETING_DELETE = 3,
  MEETING_QUERY_BY_ID = 4,
  MEETING_GET_DEV_BY_ID = 5,
  MEETING_GET_ALL = 6,
  MEETING_STOP = 7,
  MEETING_START = 8,
  MEETING_RESTART = 9,
  MEETING_GET_BY_BOX_CODE = 10
};
bool DO_TYPE_OF_MEETING_IsValid(int value);
const DO_TYPE_OF_MEETING DO_TYPE_OF_MEETING_MIN = MEETING_ADD;
const DO_TYPE_OF_MEETING DO_TYPE_OF_MEETING_MAX = MEETING_GET_BY_BOX_CODE;
const int DO_TYPE_OF_MEETING_ARRAYSIZE = DO_TYPE_OF_MEETING_MAX + 1;

const ::google::protobuf::EnumDescriptor* DO_TYPE_OF_MEETING_descriptor();
inline const ::std::string& DO_TYPE_OF_MEETING_Name(DO_TYPE_OF_MEETING value) {
  return ::google::protobuf::internal::NameOfEnum(
    DO_TYPE_OF_MEETING_descriptor(), value);
}
inline bool DO_TYPE_OF_MEETING_Parse(
    const ::std::string& name, DO_TYPE_OF_MEETING* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DO_TYPE_OF_MEETING>(
    DO_TYPE_OF_MEETING_descriptor(), name, value);
}
enum RESULT_TYPE_OF_MEETING {
  MEETING_QUERY_IS_OK = 1,
  MEETING_SET_IS_NULL = 2,
  MEETING_SUBTITLE_SET_IS_NULL = 3,
  MEETING_SYSTEM_CONFIG_SET_IS_NULL = 4,
  MEETING_DEVICE_IS_OK = 5
};
bool RESULT_TYPE_OF_MEETING_IsValid(int value);
const RESULT_TYPE_OF_MEETING RESULT_TYPE_OF_MEETING_MIN = MEETING_QUERY_IS_OK;
const RESULT_TYPE_OF_MEETING RESULT_TYPE_OF_MEETING_MAX = MEETING_DEVICE_IS_OK;
const int RESULT_TYPE_OF_MEETING_ARRAYSIZE = RESULT_TYPE_OF_MEETING_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_MEETING_descriptor();
inline const ::std::string& RESULT_TYPE_OF_MEETING_Name(RESULT_TYPE_OF_MEETING value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_MEETING_descriptor(), value);
}
inline bool RESULT_TYPE_OF_MEETING_Parse(
    const ::std::string& name, RESULT_TYPE_OF_MEETING* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_MEETING>(
    RESULT_TYPE_OF_MEETING_descriptor(), name, value);
}
enum STAT_TYPE_OF_MEETING_SHOW {
  MEETING_SHOW_IS_USING = 1,
  MEETING_SHOW_IS_STOP = 2,
  MEETING_SHOW_IS_CLOSE = 3
};
bool STAT_TYPE_OF_MEETING_SHOW_IsValid(int value);
const STAT_TYPE_OF_MEETING_SHOW STAT_TYPE_OF_MEETING_SHOW_MIN = MEETING_SHOW_IS_USING;
const STAT_TYPE_OF_MEETING_SHOW STAT_TYPE_OF_MEETING_SHOW_MAX = MEETING_SHOW_IS_CLOSE;
const int STAT_TYPE_OF_MEETING_SHOW_ARRAYSIZE = STAT_TYPE_OF_MEETING_SHOW_MAX + 1;

const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_MEETING_SHOW_descriptor();
inline const ::std::string& STAT_TYPE_OF_MEETING_SHOW_Name(STAT_TYPE_OF_MEETING_SHOW value) {
  return ::google::protobuf::internal::NameOfEnum(
    STAT_TYPE_OF_MEETING_SHOW_descriptor(), value);
}
inline bool STAT_TYPE_OF_MEETING_SHOW_Parse(
    const ::std::string& name, STAT_TYPE_OF_MEETING_SHOW* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STAT_TYPE_OF_MEETING_SHOW>(
    STAT_TYPE_OF_MEETING_SHOW_descriptor(), name, value);
}
// ===================================================================

class HostMapOrgData : public ::google::protobuf::Message {
 public:
  HostMapOrgData();
  virtual ~HostMapOrgData();

  HostMapOrgData(const HostMapOrgData& from);

  inline HostMapOrgData& operator=(const HostMapOrgData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostMapOrgData& default_instance();

  void Swap(HostMapOrgData* other);

  // implements Message ----------------------------------------------

  HostMapOrgData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostMapOrgData& from);
  void MergeFrom(const HostMapOrgData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string orgCode = 1 [default = ""];
  inline bool has_orgcode() const;
  inline void clear_orgcode();
  static const int kOrgCodeFieldNumber = 1;
  inline const ::std::string& orgcode() const;
  inline void set_orgcode(const ::std::string& value);
  inline void set_orgcode(const char* value);
  inline void set_orgcode(const char* value, size_t size);
  inline ::std::string* mutable_orgcode();
  inline ::std::string* release_orgcode();
  inline void set_allocated_orgcode(::std::string* orgcode);

  // repeated string loginName = 2;
  inline int loginname_size() const;
  inline void clear_loginname();
  static const int kLoginNameFieldNumber = 2;
  inline const ::std::string& loginname(int index) const;
  inline ::std::string* mutable_loginname(int index);
  inline void set_loginname(int index, const ::std::string& value);
  inline void set_loginname(int index, const char* value);
  inline void set_loginname(int index, const char* value, size_t size);
  inline ::std::string* add_loginname();
  inline void add_loginname(const ::std::string& value);
  inline void add_loginname(const char* value);
  inline void add_loginname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& loginname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loginname();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HostMapOrgData)
 private:
  inline void set_has_orgcode();
  inline void clear_has_orgcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orgcode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loginname_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static HostMapOrgData* default_instance_;
};
// -------------------------------------------------------------------

class MeetingMessage_WelcomInfo : public ::google::protobuf::Message {
 public:
  MeetingMessage_WelcomInfo();
  virtual ~MeetingMessage_WelcomInfo();

  MeetingMessage_WelcomInfo(const MeetingMessage_WelcomInfo& from);

  inline MeetingMessage_WelcomInfo& operator=(const MeetingMessage_WelcomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingMessage_WelcomInfo& default_instance();

  void Swap(MeetingMessage_WelcomInfo* other);

  // implements Message ----------------------------------------------

  MeetingMessage_WelcomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingMessage_WelcomInfo& from);
  void MergeFrom(const MeetingMessage_WelcomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 welcomType = 1 [default = -1];
  inline bool has_welcomtype() const;
  inline void clear_welcomtype();
  static const int kWelcomTypeFieldNumber = 1;
  inline ::google::protobuf::int32 welcomtype() const;
  inline void set_welcomtype(::google::protobuf::int32 value);

  // optional string welcomPre = 2 [default = ""];
  inline bool has_welcompre() const;
  inline void clear_welcompre();
  static const int kWelcomPreFieldNumber = 2;
  inline const ::std::string& welcompre() const;
  inline void set_welcompre(const ::std::string& value);
  inline void set_welcompre(const char* value);
  inline void set_welcompre(const char* value, size_t size);
  inline ::std::string* mutable_welcompre();
  inline ::std::string* release_welcompre();
  inline void set_allocated_welcompre(::std::string* welcompre);

  // optional string welcomPost = 3 [default = ""];
  inline bool has_welcompost() const;
  inline void clear_welcompost();
  static const int kWelcomPostFieldNumber = 3;
  inline const ::std::string& welcompost() const;
  inline void set_welcompost(const ::std::string& value);
  inline void set_welcompost(const char* value);
  inline void set_welcompost(const char* value, size_t size);
  inline ::std::string* mutable_welcompost();
  inline ::std::string* release_welcompost();
  inline void set_allocated_welcompost(::std::string* welcompost);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.MeetingMessage.WelcomInfo)
 private:
  inline void set_has_welcomtype();
  inline void clear_has_welcomtype();
  inline void set_has_welcompre();
  inline void clear_has_welcompre();
  inline void set_has_welcompost();
  inline void clear_has_welcompost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* welcompre_;
  ::std::string* welcompost_;
  ::google::protobuf::int32 welcomtype_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static MeetingMessage_WelcomInfo* default_instance_;
};
// -------------------------------------------------------------------

class MeetingMessage_vipShowTime : public ::google::protobuf::Message {
 public:
  MeetingMessage_vipShowTime();
  virtual ~MeetingMessage_vipShowTime();

  MeetingMessage_vipShowTime(const MeetingMessage_vipShowTime& from);

  inline MeetingMessage_vipShowTime& operator=(const MeetingMessage_vipShowTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingMessage_vipShowTime& default_instance();

  void Swap(MeetingMessage_vipShowTime* other);

  // implements Message ----------------------------------------------

  MeetingMessage_vipShowTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingMessage_vipShowTime& from);
  void MergeFrom(const MeetingMessage_vipShowTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vipLevel = 1 [default = -1];
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 1;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 time = 2 [default = -1];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.MeetingMessage.vipShowTime)
 private:
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 time_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static MeetingMessage_vipShowTime* default_instance_;
};
// -------------------------------------------------------------------

class MeetingMessage_Notice : public ::google::protobuf::Message {
 public:
  MeetingMessage_Notice();
  virtual ~MeetingMessage_Notice();

  MeetingMessage_Notice(const MeetingMessage_Notice& from);

  inline MeetingMessage_Notice& operator=(const MeetingMessage_Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingMessage_Notice& default_instance();

  void Swap(MeetingMessage_Notice* other);

  // implements Message ----------------------------------------------

  MeetingMessage_Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingMessage_Notice& from);
  void MergeFrom(const MeetingMessage_Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string content = 2 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string devId = 3 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 3;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional int64 endDate = 4 [default = 0];
  inline bool has_enddate() const;
  inline void clear_enddate();
  static const int kEndDateFieldNumber = 4;
  inline ::google::protobuf::int64 enddate() const;
  inline void set_enddate(::google::protobuf::int64 value);

  // optional string keyWord = 5 [default = ""];
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeyWordFieldNumber = 5;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // optional int64 startDate = 6 [default = 0];
  inline bool has_startdate() const;
  inline void clear_startdate();
  static const int kStartDateFieldNumber = 6;
  inline ::google::protobuf::int64 startdate() const;
  inline void set_startdate(::google::protobuf::int64 value);

  // optional string type = 7 [default = ""];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string userId = 8 [default = ""];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 8;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string week = 9 [default = ""];
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 9;
  inline const ::std::string& week() const;
  inline void set_week(const ::std::string& value);
  inline void set_week(const char* value);
  inline void set_week(const char* value, size_t size);
  inline ::std::string* mutable_week();
  inline ::std::string* release_week();
  inline void set_allocated_week(::std::string* week);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.MeetingMessage.Notice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_enddate();
  inline void clear_has_enddate();
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_startdate();
  inline void clear_has_startdate();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_week();
  inline void clear_has_week();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* content_;
  ::std::string* devid_;
  ::google::protobuf::int64 enddate_;
  ::std::string* keyword_;
  ::google::protobuf::int64 startdate_;
  ::std::string* type_;
  ::std::string* userid_;
  ::std::string* week_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static MeetingMessage_Notice* default_instance_;
};
// -------------------------------------------------------------------

class MeetingMessage : public ::google::protobuf::Message {
 public:
  MeetingMessage();
  virtual ~MeetingMessage();

  MeetingMessage(const MeetingMessage& from);

  inline MeetingMessage& operator=(const MeetingMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingMessage& default_instance();

  void Swap(MeetingMessage* other);

  // implements Message ----------------------------------------------

  MeetingMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingMessage& from);
  void MergeFrom(const MeetingMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MeetingMessage_WelcomInfo WelcomInfo;
  typedef MeetingMessage_vipShowTime vipShowTime;
  typedef MeetingMessage_Notice Notice;

  // accessors -------------------------------------------------------

  // optional string meetName = 1 [default = ""];
  inline bool has_meetname() const;
  inline void clear_meetname();
  static const int kMeetNameFieldNumber = 1;
  inline const ::std::string& meetname() const;
  inline void set_meetname(const ::std::string& value);
  inline void set_meetname(const char* value);
  inline void set_meetname(const char* value, size_t size);
  inline ::std::string* mutable_meetname();
  inline ::std::string* release_meetname();
  inline void set_allocated_meetname(::std::string* meetname);

  // optional int32 meetType = 2 [default = -1];
  inline bool has_meettype() const;
  inline void clear_meettype();
  static const int kMeetTypeFieldNumber = 2;
  inline ::google::protobuf::int32 meettype() const;
  inline void set_meettype(::google::protobuf::int32 value);

  // optional uint64 startTime = 3 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 endTime = 4 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional string deviceCode = 5 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 5;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string collectDevice = 6 [default = ""];
  inline bool has_collectdevice() const;
  inline void clear_collectdevice();
  static const int kCollectDeviceFieldNumber = 6;
  inline const ::std::string& collectdevice() const;
  inline void set_collectdevice(const ::std::string& value);
  inline void set_collectdevice(const char* value);
  inline void set_collectdevice(const char* value, size_t size);
  inline ::std::string* mutable_collectdevice();
  inline ::std::string* release_collectdevice();
  inline void set_allocated_collectdevice(::std::string* collectdevice);

  // optional string encoderChanner = 7 [default = ""];
  inline bool has_encoderchanner() const;
  inline void clear_encoderchanner();
  static const int kEncoderChannerFieldNumber = 7;
  inline const ::std::string& encoderchanner() const;
  inline void set_encoderchanner(const ::std::string& value);
  inline void set_encoderchanner(const char* value);
  inline void set_encoderchanner(const char* value, size_t size);
  inline ::std::string* mutable_encoderchanner();
  inline ::std::string* release_encoderchanner();
  inline void set_allocated_encoderchanner(::std::string* encoderchanner);

  // optional int32 rssi = 8 [default = 0];
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRssiFieldNumber = 8;
  inline ::google::protobuf::int32 rssi() const;
  inline void set_rssi(::google::protobuf::int32 value);

  // optional string bBoxCode = 9 [default = ""];
  inline bool has_bboxcode() const;
  inline void clear_bboxcode();
  static const int kBBoxCodeFieldNumber = 9;
  inline const ::std::string& bboxcode() const;
  inline void set_bboxcode(const ::std::string& value);
  inline void set_bboxcode(const char* value);
  inline void set_bboxcode(const char* value, size_t size);
  inline ::std::string* mutable_bboxcode();
  inline ::std::string* release_bboxcode();
  inline void set_allocated_bboxcode(::std::string* bboxcode);

  // optional string noticeId = 10 [default = ""];
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIdFieldNumber = 10;
  inline const ::std::string& noticeid() const;
  inline void set_noticeid(const ::std::string& value);
  inline void set_noticeid(const char* value);
  inline void set_noticeid(const char* value, size_t size);
  inline ::std::string* mutable_noticeid();
  inline ::std::string* release_noticeid();
  inline void set_allocated_noticeid(::std::string* noticeid);

  // optional int32 showModule = 11 [default = -1];
  inline bool has_showmodule() const;
  inline void clear_showmodule();
  static const int kShowModuleFieldNumber = 11;
  inline ::google::protobuf::int32 showmodule() const;
  inline void set_showmodule(::google::protobuf::int32 value);

  // optional int32 backgroundId = 12 [default = -1];
  inline bool has_backgroundid() const;
  inline void clear_backgroundid();
  static const int kBackgroundIdFieldNumber = 12;
  inline ::google::protobuf::int32 backgroundid() const;
  inline void set_backgroundid(::google::protobuf::int32 value);

  // optional string ip = 13 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 13;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 14 [default = 0];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 14;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string orgCode = 15 [default = ""];
  inline bool has_orgcode() const;
  inline void clear_orgcode();
  static const int kOrgCodeFieldNumber = 15;
  inline const ::std::string& orgcode() const;
  inline void set_orgcode(const ::std::string& value);
  inline void set_orgcode(const char* value);
  inline void set_orgcode(const char* value, size_t size);
  inline ::std::string* mutable_orgcode();
  inline ::std::string* release_orgcode();
  inline void set_allocated_orgcode(::std::string* orgcode);

  // repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
  inline int welcominfolist_size() const;
  inline void clear_welcominfolist();
  static const int kWelcomInfoListFieldNumber = 16;
  inline const ::com::arges::file::proto::MeetingMessage_WelcomInfo& welcominfolist(int index) const;
  inline ::com::arges::file::proto::MeetingMessage_WelcomInfo* mutable_welcominfolist(int index);
  inline ::com::arges::file::proto::MeetingMessage_WelcomInfo* add_welcominfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_WelcomInfo >&
      welcominfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_WelcomInfo >*
      mutable_welcominfolist();

  // repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
  inline int vipshowtimelist_size() const;
  inline void clear_vipshowtimelist();
  static const int kVipShowTimeListFieldNumber = 17;
  inline const ::com::arges::file::proto::MeetingMessage_vipShowTime& vipshowtimelist(int index) const;
  inline ::com::arges::file::proto::MeetingMessage_vipShowTime* mutable_vipshowtimelist(int index);
  inline ::com::arges::file::proto::MeetingMessage_vipShowTime* add_vipshowtimelist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_vipShowTime >&
      vipshowtimelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_vipShowTime >*
      mutable_vipshowtimelist();

  // optional string meetId = 18 [default = ""];
  inline bool has_meetid() const;
  inline void clear_meetid();
  static const int kMeetIdFieldNumber = 18;
  inline const ::std::string& meetid() const;
  inline void set_meetid(const ::std::string& value);
  inline void set_meetid(const char* value);
  inline void set_meetid(const char* value, size_t size);
  inline ::std::string* mutable_meetid();
  inline ::std::string* release_meetid();
  inline void set_allocated_meetid(::std::string* meetid);

  // repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
  inline int hostorgs_size() const;
  inline void clear_hostorgs();
  static const int kHostOrgsFieldNumber = 19;
  inline const ::com::arges::file::proto::HostMapOrgData& hostorgs(int index) const;
  inline ::com::arges::file::proto::HostMapOrgData* mutable_hostorgs(int index);
  inline ::com::arges::file::proto::HostMapOrgData* add_hostorgs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HostMapOrgData >&
      hostorgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HostMapOrgData >*
      mutable_hostorgs();

  // repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 20;
  inline const ::com::arges::file::proto::MeetingMessage_Notice& notices(int index) const;
  inline ::com::arges::file::proto::MeetingMessage_Notice* mutable_notices(int index);
  inline ::com::arges::file::proto::MeetingMessage_Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_Notice >*
      mutable_notices();

  // optional int32 stat = 21 [default = 0];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 21;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.WristUserName wristUser = 22;
  inline int wristuser_size() const;
  inline void clear_wristuser();
  static const int kWristUserFieldNumber = 22;
  inline const ::com::arges::file::proto::WristUserName& wristuser(int index) const;
  inline ::com::arges::file::proto::WristUserName* mutable_wristuser(int index);
  inline ::com::arges::file::proto::WristUserName* add_wristuser();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
      wristuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
      mutable_wristuser();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.MeetingMessage)
 private:
  inline void set_has_meetname();
  inline void clear_has_meetname();
  inline void set_has_meettype();
  inline void clear_has_meettype();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_collectdevice();
  inline void clear_has_collectdevice();
  inline void set_has_encoderchanner();
  inline void clear_has_encoderchanner();
  inline void set_has_rssi();
  inline void clear_has_rssi();
  inline void set_has_bboxcode();
  inline void clear_has_bboxcode();
  inline void set_has_noticeid();
  inline void clear_has_noticeid();
  inline void set_has_showmodule();
  inline void clear_has_showmodule();
  inline void set_has_backgroundid();
  inline void clear_has_backgroundid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_orgcode();
  inline void clear_has_orgcode();
  inline void set_has_meetid();
  inline void clear_has_meetid();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* meetname_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  ::std::string* devicecode_;
  ::google::protobuf::int32 meettype_;
  ::google::protobuf::int32 rssi_;
  ::std::string* collectdevice_;
  ::std::string* encoderchanner_;
  ::std::string* bboxcode_;
  ::std::string* noticeid_;
  ::google::protobuf::int32 showmodule_;
  ::google::protobuf::int32 backgroundid_;
  ::std::string* ip_;
  ::std::string* orgcode_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_WelcomInfo > welcominfolist_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_vipShowTime > vipshowtimelist_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 stat_;
  ::std::string* meetid_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HostMapOrgData > hostorgs_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_Notice > notices_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName > wristuser_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static MeetingMessage* default_instance_;
};
// -------------------------------------------------------------------

class RspConnectOfMedia : public ::google::protobuf::Message {
 public:
  RspConnectOfMedia();
  virtual ~RspConnectOfMedia();

  RspConnectOfMedia(const RspConnectOfMedia& from);

  inline RspConnectOfMedia& operator=(const RspConnectOfMedia& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConnectOfMedia& default_instance();

  void Swap(RspConnectOfMedia* other);

  // implements Message ----------------------------------------------

  RspConnectOfMedia* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConnectOfMedia& from);
  void MergeFrom(const RspConnectOfMedia& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string token = 2 [default = ""];
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string ip = 3 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4 [default = 0];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspConnectOfMedia)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::std::string* token_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static RspConnectOfMedia* default_instance_;
};
// -------------------------------------------------------------------

class MeetingData : public ::google::protobuf::Message {
 public:
  MeetingData();
  virtual ~MeetingData();

  MeetingData(const MeetingData& from);

  inline MeetingData& operator=(const MeetingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingData& default_instance();

  void Swap(MeetingData* other);

  // implements Message ----------------------------------------------

  MeetingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingData& from);
  void MergeFrom(const MeetingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .com.arges.file.proto.DeviceInfo devInfo = 3;
  inline bool has_devinfo() const;
  inline void clear_devinfo();
  static const int kDevInfoFieldNumber = 3;
  inline const ::com::arges::file::proto::DeviceInfo& devinfo() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devinfo();
  inline ::com::arges::file::proto::DeviceInfo* release_devinfo();
  inline void set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo);

  // repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
  inline int devofsignin_size() const;
  inline void clear_devofsignin();
  static const int kDevOfSignInFieldNumber = 4;
  inline const ::com::arges::file::proto::DeviceInfo& devofsignin(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devofsignin(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_devofsignin();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      devofsignin() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_devofsignin();

  // optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
  inline bool has_meetingmessage() const;
  inline void clear_meetingmessage();
  static const int kMeetingMessageFieldNumber = 5;
  inline const ::com::arges::file::proto::MeetingMessage& meetingmessage() const;
  inline ::com::arges::file::proto::MeetingMessage* mutable_meetingmessage();
  inline ::com::arges::file::proto::MeetingMessage* release_meetingmessage();
  inline void set_allocated_meetingmessage(::com::arges::file::proto::MeetingMessage* meetingmessage);

  // optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
  inline bool has_connofsignin() const;
  inline void clear_connofsignin();
  static const int kConnOfSignInFieldNumber = 6;
  inline const ::com::arges::file::proto::RspConnectOfMedia& connofsignin() const;
  inline ::com::arges::file::proto::RspConnectOfMedia* mutable_connofsignin();
  inline ::com::arges::file::proto::RspConnectOfMedia* release_connofsignin();
  inline void set_allocated_connofsignin(::com::arges::file::proto::RspConnectOfMedia* connofsignin);

  // repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
  inline int connofmedia_size() const;
  inline void clear_connofmedia();
  static const int kConnOfMediaFieldNumber = 7;
  inline const ::com::arges::file::proto::RspConnectOfMedia& connofmedia(int index) const;
  inline ::com::arges::file::proto::RspConnectOfMedia* mutable_connofmedia(int index);
  inline ::com::arges::file::proto::RspConnectOfMedia* add_connofmedia();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RspConnectOfMedia >&
      connofmedia() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RspConnectOfMedia >*
      mutable_connofmedia();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.MeetingData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_devinfo();
  inline void clear_has_devinfo();
  inline void set_has_meetingmessage();
  inline void clear_has_meetingmessage();
  inline void set_has_connofsignin();
  inline void clear_has_connofsignin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  ::com::arges::file::proto::DeviceInfo* devinfo_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > devofsignin_;
  ::com::arges::file::proto::MeetingMessage* meetingmessage_;
  ::com::arges::file::proto::RspConnectOfMedia* connofsignin_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RspConnectOfMedia > connofmedia_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static MeetingData* default_instance_;
};
// -------------------------------------------------------------------

class AllMeetingMessage : public ::google::protobuf::Message {
 public:
  AllMeetingMessage();
  virtual ~AllMeetingMessage();

  AllMeetingMessage(const AllMeetingMessage& from);

  inline AllMeetingMessage& operator=(const AllMeetingMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllMeetingMessage& default_instance();

  void Swap(AllMeetingMessage* other);

  // implements Message ----------------------------------------------

  AllMeetingMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllMeetingMessage& from);
  void MergeFrom(const AllMeetingMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated .com.arges.file.proto.MeetingData meetings = 4;
  inline int meetings_size() const;
  inline void clear_meetings();
  static const int kMeetingsFieldNumber = 4;
  inline const ::com::arges::file::proto::MeetingData& meetings(int index) const;
  inline ::com::arges::file::proto::MeetingData* mutable_meetings(int index);
  inline ::com::arges::file::proto::MeetingData* add_meetings();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingData >&
      meetings() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingData >*
      mutable_meetings();

  // optional string boxCode = 5;
  inline bool has_boxcode() const;
  inline void clear_boxcode();
  static const int kBoxCodeFieldNumber = 5;
  inline const ::std::string& boxcode() const;
  inline void set_boxcode(const ::std::string& value);
  inline void set_boxcode(const char* value);
  inline void set_boxcode(const char* value, size_t size);
  inline ::std::string* mutable_boxcode();
  inline ::std::string* release_boxcode();
  inline void set_allocated_boxcode(::std::string* boxcode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AllMeetingMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_boxcode();
  inline void clear_has_boxcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingData > meetings_;
  ::std::string* boxcode_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static AllMeetingMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReportStatOfMeetingShow : public ::google::protobuf::Message {
 public:
  ReportStatOfMeetingShow();
  virtual ~ReportStatOfMeetingShow();

  ReportStatOfMeetingShow(const ReportStatOfMeetingShow& from);

  inline ReportStatOfMeetingShow& operator=(const ReportStatOfMeetingShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportStatOfMeetingShow& default_instance();

  void Swap(ReportStatOfMeetingShow* other);

  // implements Message ----------------------------------------------

  ReportStatOfMeetingShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportStatOfMeetingShow& from);
  void MergeFrom(const ReportStatOfMeetingShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devCode = 1 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 1;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional string meetingName = 2 [default = ""];
  inline bool has_meetingname() const;
  inline void clear_meetingname();
  static const int kMeetingNameFieldNumber = 2;
  inline const ::std::string& meetingname() const;
  inline void set_meetingname(const ::std::string& value);
  inline void set_meetingname(const char* value);
  inline void set_meetingname(const char* value, size_t size);
  inline ::std::string* mutable_meetingname();
  inline ::std::string* release_meetingname();
  inline void set_allocated_meetingname(::std::string* meetingname);

  // optional int32 stat = 3 [default = -1];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 3;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportStatOfMeetingShow)
 private:
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_meetingname();
  inline void clear_has_meetingname();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devcode_;
  ::std::string* meetingname_;
  ::google::protobuf::int32 stat_;
  friend void  protobuf_AddDesc_MeetingMessageBean_2eproto();
  friend void protobuf_AssignDesc_MeetingMessageBean_2eproto();
  friend void protobuf_ShutdownFile_MeetingMessageBean_2eproto();

  void InitAsDefaultInstance();
  static ReportStatOfMeetingShow* default_instance_;
};
// ===================================================================


// ===================================================================

// HostMapOrgData

// optional string orgCode = 1 [default = ""];
inline bool HostMapOrgData::has_orgcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostMapOrgData::set_has_orgcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostMapOrgData::clear_has_orgcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostMapOrgData::clear_orgcode() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_->clear();
  }
  clear_has_orgcode();
}
inline const ::std::string& HostMapOrgData::orgcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HostMapOrgData.orgCode)
  return *orgcode_;
}
inline void HostMapOrgData::set_orgcode(const ::std::string& value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HostMapOrgData.orgCode)
}
inline void HostMapOrgData::set_orgcode(const char* value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HostMapOrgData.orgCode)
}
inline void HostMapOrgData::set_orgcode(const char* value, size_t size) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HostMapOrgData.orgCode)
}
inline ::std::string* HostMapOrgData::mutable_orgcode() {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HostMapOrgData.orgCode)
  return orgcode_;
}
inline ::std::string* HostMapOrgData::release_orgcode() {
  clear_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgcode_;
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HostMapOrgData::set_allocated_orgcode(::std::string* orgcode) {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (orgcode) {
    set_has_orgcode();
    orgcode_ = orgcode;
  } else {
    clear_has_orgcode();
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HostMapOrgData.orgCode)
}

// repeated string loginName = 2;
inline int HostMapOrgData::loginname_size() const {
  return loginname_.size();
}
inline void HostMapOrgData::clear_loginname() {
  loginname_.Clear();
}
inline const ::std::string& HostMapOrgData::loginname(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HostMapOrgData.loginName)
  return loginname_.Get(index);
}
inline ::std::string* HostMapOrgData::mutable_loginname(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HostMapOrgData.loginName)
  return loginname_.Mutable(index);
}
inline void HostMapOrgData::set_loginname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HostMapOrgData.loginName)
  loginname_.Mutable(index)->assign(value);
}
inline void HostMapOrgData::set_loginname(int index, const char* value) {
  loginname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HostMapOrgData.loginName)
}
inline void HostMapOrgData::set_loginname(int index, const char* value, size_t size) {
  loginname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HostMapOrgData.loginName)
}
inline ::std::string* HostMapOrgData::add_loginname() {
  return loginname_.Add();
}
inline void HostMapOrgData::add_loginname(const ::std::string& value) {
  loginname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.HostMapOrgData.loginName)
}
inline void HostMapOrgData::add_loginname(const char* value) {
  loginname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.HostMapOrgData.loginName)
}
inline void HostMapOrgData::add_loginname(const char* value, size_t size) {
  loginname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.HostMapOrgData.loginName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HostMapOrgData::loginname() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.HostMapOrgData.loginName)
  return loginname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HostMapOrgData::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.HostMapOrgData.loginName)
  return &loginname_;
}

// -------------------------------------------------------------------

// MeetingMessage_WelcomInfo

// optional int32 welcomType = 1 [default = -1];
inline bool MeetingMessage_WelcomInfo::has_welcomtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingMessage_WelcomInfo::set_has_welcomtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingMessage_WelcomInfo::clear_has_welcomtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingMessage_WelcomInfo::clear_welcomtype() {
  welcomtype_ = -1;
  clear_has_welcomtype();
}
inline ::google::protobuf::int32 MeetingMessage_WelcomInfo::welcomtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomType)
  return welcomtype_;
}
inline void MeetingMessage_WelcomInfo::set_welcomtype(::google::protobuf::int32 value) {
  set_has_welcomtype();
  welcomtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomType)
}

// optional string welcomPre = 2 [default = ""];
inline bool MeetingMessage_WelcomInfo::has_welcompre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingMessage_WelcomInfo::set_has_welcompre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingMessage_WelcomInfo::clear_has_welcompre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingMessage_WelcomInfo::clear_welcompre() {
  if (welcompre_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompre_->clear();
  }
  clear_has_welcompre();
}
inline const ::std::string& MeetingMessage_WelcomInfo::welcompre() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
  return *welcompre_;
}
inline void MeetingMessage_WelcomInfo::set_welcompre(const ::std::string& value) {
  set_has_welcompre();
  if (welcompre_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompre_ = new ::std::string;
  }
  welcompre_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
}
inline void MeetingMessage_WelcomInfo::set_welcompre(const char* value) {
  set_has_welcompre();
  if (welcompre_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompre_ = new ::std::string;
  }
  welcompre_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
}
inline void MeetingMessage_WelcomInfo::set_welcompre(const char* value, size_t size) {
  set_has_welcompre();
  if (welcompre_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompre_ = new ::std::string;
  }
  welcompre_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
}
inline ::std::string* MeetingMessage_WelcomInfo::mutable_welcompre() {
  set_has_welcompre();
  if (welcompre_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompre_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
  return welcompre_;
}
inline ::std::string* MeetingMessage_WelcomInfo::release_welcompre() {
  clear_has_welcompre();
  if (welcompre_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = welcompre_;
    welcompre_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_WelcomInfo::set_allocated_welcompre(::std::string* welcompre) {
  if (welcompre_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcompre_;
  }
  if (welcompre) {
    set_has_welcompre();
    welcompre_ = welcompre;
  } else {
    clear_has_welcompre();
    welcompre_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPre)
}

// optional string welcomPost = 3 [default = ""];
inline bool MeetingMessage_WelcomInfo::has_welcompost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeetingMessage_WelcomInfo::set_has_welcompost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeetingMessage_WelcomInfo::clear_has_welcompost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeetingMessage_WelcomInfo::clear_welcompost() {
  if (welcompost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompost_->clear();
  }
  clear_has_welcompost();
}
inline const ::std::string& MeetingMessage_WelcomInfo::welcompost() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
  return *welcompost_;
}
inline void MeetingMessage_WelcomInfo::set_welcompost(const ::std::string& value) {
  set_has_welcompost();
  if (welcompost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompost_ = new ::std::string;
  }
  welcompost_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
}
inline void MeetingMessage_WelcomInfo::set_welcompost(const char* value) {
  set_has_welcompost();
  if (welcompost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompost_ = new ::std::string;
  }
  welcompost_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
}
inline void MeetingMessage_WelcomInfo::set_welcompost(const char* value, size_t size) {
  set_has_welcompost();
  if (welcompost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompost_ = new ::std::string;
  }
  welcompost_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
}
inline ::std::string* MeetingMessage_WelcomInfo::mutable_welcompost() {
  set_has_welcompost();
  if (welcompost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcompost_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
  return welcompost_;
}
inline ::std::string* MeetingMessage_WelcomInfo::release_welcompost() {
  clear_has_welcompost();
  if (welcompost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = welcompost_;
    welcompost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_WelcomInfo::set_allocated_welcompost(::std::string* welcompost) {
  if (welcompost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcompost_;
  }
  if (welcompost) {
    set_has_welcompost();
    welcompost_ = welcompost;
  } else {
    clear_has_welcompost();
    welcompost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.WelcomInfo.welcomPost)
}

// -------------------------------------------------------------------

// MeetingMessage_vipShowTime

// optional int32 vipLevel = 1 [default = -1];
inline bool MeetingMessage_vipShowTime::has_viplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingMessage_vipShowTime::set_has_viplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingMessage_vipShowTime::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingMessage_vipShowTime::clear_viplevel() {
  viplevel_ = -1;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 MeetingMessage_vipShowTime::viplevel() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.vipShowTime.vipLevel)
  return viplevel_;
}
inline void MeetingMessage_vipShowTime::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.vipShowTime.vipLevel)
}

// optional int32 time = 2 [default = -1];
inline bool MeetingMessage_vipShowTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingMessage_vipShowTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingMessage_vipShowTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingMessage_vipShowTime::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 MeetingMessage_vipShowTime::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.vipShowTime.time)
  return time_;
}
inline void MeetingMessage_vipShowTime::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.vipShowTime.time)
}

// -------------------------------------------------------------------

// MeetingMessage_Notice

// optional int64 id = 1 [default = -1];
inline bool MeetingMessage_Notice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingMessage_Notice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingMessage_Notice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingMessage_Notice::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 MeetingMessage_Notice::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.id)
  return id_;
}
inline void MeetingMessage_Notice::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.id)
}

// optional string content = 2 [default = ""];
inline bool MeetingMessage_Notice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingMessage_Notice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingMessage_Notice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingMessage_Notice::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MeetingMessage_Notice::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.content)
  return *content_;
}
inline void MeetingMessage_Notice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.content)
}
inline void MeetingMessage_Notice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.content)
}
inline void MeetingMessage_Notice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.content)
}
inline ::std::string* MeetingMessage_Notice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.content)
  return content_;
}
inline ::std::string* MeetingMessage_Notice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.content)
}

// optional string devId = 3 [default = ""];
inline bool MeetingMessage_Notice::has_devid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeetingMessage_Notice::set_has_devid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeetingMessage_Notice::clear_has_devid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeetingMessage_Notice::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& MeetingMessage_Notice::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.devId)
  return *devid_;
}
inline void MeetingMessage_Notice::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.devId)
}
inline void MeetingMessage_Notice::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.devId)
}
inline void MeetingMessage_Notice::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.devId)
}
inline ::std::string* MeetingMessage_Notice::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.devId)
  return devid_;
}
inline ::std::string* MeetingMessage_Notice::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.devId)
}

// optional int64 endDate = 4 [default = 0];
inline bool MeetingMessage_Notice::has_enddate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeetingMessage_Notice::set_has_enddate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeetingMessage_Notice::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeetingMessage_Notice::clear_enddate() {
  enddate_ = GOOGLE_LONGLONG(0);
  clear_has_enddate();
}
inline ::google::protobuf::int64 MeetingMessage_Notice::enddate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.endDate)
  return enddate_;
}
inline void MeetingMessage_Notice::set_enddate(::google::protobuf::int64 value) {
  set_has_enddate();
  enddate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.endDate)
}

// optional string keyWord = 5 [default = ""];
inline bool MeetingMessage_Notice::has_keyword() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeetingMessage_Notice::set_has_keyword() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeetingMessage_Notice::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeetingMessage_Notice::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& MeetingMessage_Notice::keyword() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.keyWord)
  return *keyword_;
}
inline void MeetingMessage_Notice::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.keyWord)
}
inline void MeetingMessage_Notice::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.keyWord)
}
inline void MeetingMessage_Notice::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.keyWord)
}
inline ::std::string* MeetingMessage_Notice::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.keyWord)
  return keyword_;
}
inline ::std::string* MeetingMessage_Notice::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.keyWord)
}

// optional int64 startDate = 6 [default = 0];
inline bool MeetingMessage_Notice::has_startdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeetingMessage_Notice::set_has_startdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MeetingMessage_Notice::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MeetingMessage_Notice::clear_startdate() {
  startdate_ = GOOGLE_LONGLONG(0);
  clear_has_startdate();
}
inline ::google::protobuf::int64 MeetingMessage_Notice::startdate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.startDate)
  return startdate_;
}
inline void MeetingMessage_Notice::set_startdate(::google::protobuf::int64 value) {
  set_has_startdate();
  startdate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.startDate)
}

// optional string type = 7 [default = ""];
inline bool MeetingMessage_Notice::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MeetingMessage_Notice::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MeetingMessage_Notice::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MeetingMessage_Notice::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MeetingMessage_Notice::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.type)
  return *type_;
}
inline void MeetingMessage_Notice::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.type)
}
inline void MeetingMessage_Notice::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.type)
}
inline void MeetingMessage_Notice::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.type)
}
inline ::std::string* MeetingMessage_Notice::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.type)
  return type_;
}
inline ::std::string* MeetingMessage_Notice::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.type)
}

// optional string userId = 8 [default = ""];
inline bool MeetingMessage_Notice::has_userid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MeetingMessage_Notice::set_has_userid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MeetingMessage_Notice::clear_has_userid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MeetingMessage_Notice::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& MeetingMessage_Notice::userid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.userId)
  return *userid_;
}
inline void MeetingMessage_Notice::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.userId)
}
inline void MeetingMessage_Notice::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.userId)
}
inline void MeetingMessage_Notice::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.userId)
}
inline ::std::string* MeetingMessage_Notice::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.userId)
  return userid_;
}
inline ::std::string* MeetingMessage_Notice::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.userId)
}

// optional string week = 9 [default = ""];
inline bool MeetingMessage_Notice::has_week() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MeetingMessage_Notice::set_has_week() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MeetingMessage_Notice::clear_has_week() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MeetingMessage_Notice::clear_week() {
  if (week_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    week_->clear();
  }
  clear_has_week();
}
inline const ::std::string& MeetingMessage_Notice::week() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.Notice.week)
  return *week_;
}
inline void MeetingMessage_Notice::set_week(const ::std::string& value) {
  set_has_week();
  if (week_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    week_ = new ::std::string;
  }
  week_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.Notice.week)
}
inline void MeetingMessage_Notice::set_week(const char* value) {
  set_has_week();
  if (week_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    week_ = new ::std::string;
  }
  week_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.Notice.week)
}
inline void MeetingMessage_Notice::set_week(const char* value, size_t size) {
  set_has_week();
  if (week_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    week_ = new ::std::string;
  }
  week_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.Notice.week)
}
inline ::std::string* MeetingMessage_Notice::mutable_week() {
  set_has_week();
  if (week_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    week_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.Notice.week)
  return week_;
}
inline ::std::string* MeetingMessage_Notice::release_week() {
  clear_has_week();
  if (week_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = week_;
    week_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage_Notice::set_allocated_week(::std::string* week) {
  if (week_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete week_;
  }
  if (week) {
    set_has_week();
    week_ = week;
  } else {
    clear_has_week();
    week_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.Notice.week)
}

// -------------------------------------------------------------------

// MeetingMessage

// optional string meetName = 1 [default = ""];
inline bool MeetingMessage::has_meetname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingMessage::set_has_meetname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingMessage::clear_has_meetname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingMessage::clear_meetname() {
  if (meetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetname_->clear();
  }
  clear_has_meetname();
}
inline const ::std::string& MeetingMessage::meetname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.meetName)
  return *meetname_;
}
inline void MeetingMessage::set_meetname(const ::std::string& value) {
  set_has_meetname();
  if (meetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetname_ = new ::std::string;
  }
  meetname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.meetName)
}
inline void MeetingMessage::set_meetname(const char* value) {
  set_has_meetname();
  if (meetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetname_ = new ::std::string;
  }
  meetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.meetName)
}
inline void MeetingMessage::set_meetname(const char* value, size_t size) {
  set_has_meetname();
  if (meetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetname_ = new ::std::string;
  }
  meetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.meetName)
}
inline ::std::string* MeetingMessage::mutable_meetname() {
  set_has_meetname();
  if (meetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.meetName)
  return meetname_;
}
inline ::std::string* MeetingMessage::release_meetname() {
  clear_has_meetname();
  if (meetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = meetname_;
    meetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_meetname(::std::string* meetname) {
  if (meetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetname_;
  }
  if (meetname) {
    set_has_meetname();
    meetname_ = meetname;
  } else {
    clear_has_meetname();
    meetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.meetName)
}

// optional int32 meetType = 2 [default = -1];
inline bool MeetingMessage::has_meettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingMessage::set_has_meettype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingMessage::clear_has_meettype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingMessage::clear_meettype() {
  meettype_ = -1;
  clear_has_meettype();
}
inline ::google::protobuf::int32 MeetingMessage::meettype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.meetType)
  return meettype_;
}
inline void MeetingMessage::set_meettype(::google::protobuf::int32 value) {
  set_has_meettype();
  meettype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.meetType)
}

// optional uint64 startTime = 3 [default = 0];
inline bool MeetingMessage::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeetingMessage::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeetingMessage::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeetingMessage::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 MeetingMessage::starttime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.startTime)
  return starttime_;
}
inline void MeetingMessage::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.startTime)
}

// optional uint64 endTime = 4 [default = 0];
inline bool MeetingMessage::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeetingMessage::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeetingMessage::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeetingMessage::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 MeetingMessage::endtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.endTime)
  return endtime_;
}
inline void MeetingMessage::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.endTime)
}

// optional string deviceCode = 5 [default = ""];
inline bool MeetingMessage::has_devicecode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeetingMessage::set_has_devicecode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeetingMessage::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeetingMessage::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& MeetingMessage::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.deviceCode)
  return *devicecode_;
}
inline void MeetingMessage::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.deviceCode)
}
inline void MeetingMessage::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.deviceCode)
}
inline void MeetingMessage::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.deviceCode)
}
inline ::std::string* MeetingMessage::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.deviceCode)
  return devicecode_;
}
inline ::std::string* MeetingMessage::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.deviceCode)
}

// optional string collectDevice = 6 [default = ""];
inline bool MeetingMessage::has_collectdevice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeetingMessage::set_has_collectdevice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MeetingMessage::clear_has_collectdevice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MeetingMessage::clear_collectdevice() {
  if (collectdevice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collectdevice_->clear();
  }
  clear_has_collectdevice();
}
inline const ::std::string& MeetingMessage::collectdevice() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.collectDevice)
  return *collectdevice_;
}
inline void MeetingMessage::set_collectdevice(const ::std::string& value) {
  set_has_collectdevice();
  if (collectdevice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collectdevice_ = new ::std::string;
  }
  collectdevice_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.collectDevice)
}
inline void MeetingMessage::set_collectdevice(const char* value) {
  set_has_collectdevice();
  if (collectdevice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collectdevice_ = new ::std::string;
  }
  collectdevice_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.collectDevice)
}
inline void MeetingMessage::set_collectdevice(const char* value, size_t size) {
  set_has_collectdevice();
  if (collectdevice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collectdevice_ = new ::std::string;
  }
  collectdevice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.collectDevice)
}
inline ::std::string* MeetingMessage::mutable_collectdevice() {
  set_has_collectdevice();
  if (collectdevice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collectdevice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.collectDevice)
  return collectdevice_;
}
inline ::std::string* MeetingMessage::release_collectdevice() {
  clear_has_collectdevice();
  if (collectdevice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = collectdevice_;
    collectdevice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_collectdevice(::std::string* collectdevice) {
  if (collectdevice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collectdevice_;
  }
  if (collectdevice) {
    set_has_collectdevice();
    collectdevice_ = collectdevice;
  } else {
    clear_has_collectdevice();
    collectdevice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.collectDevice)
}

// optional string encoderChanner = 7 [default = ""];
inline bool MeetingMessage::has_encoderchanner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MeetingMessage::set_has_encoderchanner() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MeetingMessage::clear_has_encoderchanner() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MeetingMessage::clear_encoderchanner() {
  if (encoderchanner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoderchanner_->clear();
  }
  clear_has_encoderchanner();
}
inline const ::std::string& MeetingMessage::encoderchanner() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.encoderChanner)
  return *encoderchanner_;
}
inline void MeetingMessage::set_encoderchanner(const ::std::string& value) {
  set_has_encoderchanner();
  if (encoderchanner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoderchanner_ = new ::std::string;
  }
  encoderchanner_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.encoderChanner)
}
inline void MeetingMessage::set_encoderchanner(const char* value) {
  set_has_encoderchanner();
  if (encoderchanner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoderchanner_ = new ::std::string;
  }
  encoderchanner_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.encoderChanner)
}
inline void MeetingMessage::set_encoderchanner(const char* value, size_t size) {
  set_has_encoderchanner();
  if (encoderchanner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoderchanner_ = new ::std::string;
  }
  encoderchanner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.encoderChanner)
}
inline ::std::string* MeetingMessage::mutable_encoderchanner() {
  set_has_encoderchanner();
  if (encoderchanner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoderchanner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.encoderChanner)
  return encoderchanner_;
}
inline ::std::string* MeetingMessage::release_encoderchanner() {
  clear_has_encoderchanner();
  if (encoderchanner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encoderchanner_;
    encoderchanner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_encoderchanner(::std::string* encoderchanner) {
  if (encoderchanner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoderchanner_;
  }
  if (encoderchanner) {
    set_has_encoderchanner();
    encoderchanner_ = encoderchanner;
  } else {
    clear_has_encoderchanner();
    encoderchanner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.encoderChanner)
}

// optional int32 rssi = 8 [default = 0];
inline bool MeetingMessage::has_rssi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MeetingMessage::set_has_rssi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MeetingMessage::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MeetingMessage::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline ::google::protobuf::int32 MeetingMessage::rssi() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.rssi)
  return rssi_;
}
inline void MeetingMessage::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.rssi)
}

// optional string bBoxCode = 9 [default = ""];
inline bool MeetingMessage::has_bboxcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MeetingMessage::set_has_bboxcode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MeetingMessage::clear_has_bboxcode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MeetingMessage::clear_bboxcode() {
  if (bboxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bboxcode_->clear();
  }
  clear_has_bboxcode();
}
inline const ::std::string& MeetingMessage::bboxcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.bBoxCode)
  return *bboxcode_;
}
inline void MeetingMessage::set_bboxcode(const ::std::string& value) {
  set_has_bboxcode();
  if (bboxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bboxcode_ = new ::std::string;
  }
  bboxcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.bBoxCode)
}
inline void MeetingMessage::set_bboxcode(const char* value) {
  set_has_bboxcode();
  if (bboxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bboxcode_ = new ::std::string;
  }
  bboxcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.bBoxCode)
}
inline void MeetingMessage::set_bboxcode(const char* value, size_t size) {
  set_has_bboxcode();
  if (bboxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bboxcode_ = new ::std::string;
  }
  bboxcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.bBoxCode)
}
inline ::std::string* MeetingMessage::mutable_bboxcode() {
  set_has_bboxcode();
  if (bboxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bboxcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.bBoxCode)
  return bboxcode_;
}
inline ::std::string* MeetingMessage::release_bboxcode() {
  clear_has_bboxcode();
  if (bboxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bboxcode_;
    bboxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_bboxcode(::std::string* bboxcode) {
  if (bboxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bboxcode_;
  }
  if (bboxcode) {
    set_has_bboxcode();
    bboxcode_ = bboxcode;
  } else {
    clear_has_bboxcode();
    bboxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.bBoxCode)
}

// optional string noticeId = 10 [default = ""];
inline bool MeetingMessage::has_noticeid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MeetingMessage::set_has_noticeid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MeetingMessage::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MeetingMessage::clear_noticeid() {
  if (noticeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticeid_->clear();
  }
  clear_has_noticeid();
}
inline const ::std::string& MeetingMessage::noticeid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.noticeId)
  return *noticeid_;
}
inline void MeetingMessage::set_noticeid(const ::std::string& value) {
  set_has_noticeid();
  if (noticeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticeid_ = new ::std::string;
  }
  noticeid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.noticeId)
}
inline void MeetingMessage::set_noticeid(const char* value) {
  set_has_noticeid();
  if (noticeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticeid_ = new ::std::string;
  }
  noticeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.noticeId)
}
inline void MeetingMessage::set_noticeid(const char* value, size_t size) {
  set_has_noticeid();
  if (noticeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticeid_ = new ::std::string;
  }
  noticeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.noticeId)
}
inline ::std::string* MeetingMessage::mutable_noticeid() {
  set_has_noticeid();
  if (noticeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.noticeId)
  return noticeid_;
}
inline ::std::string* MeetingMessage::release_noticeid() {
  clear_has_noticeid();
  if (noticeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = noticeid_;
    noticeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_noticeid(::std::string* noticeid) {
  if (noticeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticeid_;
  }
  if (noticeid) {
    set_has_noticeid();
    noticeid_ = noticeid;
  } else {
    clear_has_noticeid();
    noticeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.noticeId)
}

// optional int32 showModule = 11 [default = -1];
inline bool MeetingMessage::has_showmodule() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MeetingMessage::set_has_showmodule() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MeetingMessage::clear_has_showmodule() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MeetingMessage::clear_showmodule() {
  showmodule_ = -1;
  clear_has_showmodule();
}
inline ::google::protobuf::int32 MeetingMessage::showmodule() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.showModule)
  return showmodule_;
}
inline void MeetingMessage::set_showmodule(::google::protobuf::int32 value) {
  set_has_showmodule();
  showmodule_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.showModule)
}

// optional int32 backgroundId = 12 [default = -1];
inline bool MeetingMessage::has_backgroundid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MeetingMessage::set_has_backgroundid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MeetingMessage::clear_has_backgroundid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MeetingMessage::clear_backgroundid() {
  backgroundid_ = -1;
  clear_has_backgroundid();
}
inline ::google::protobuf::int32 MeetingMessage::backgroundid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.backgroundId)
  return backgroundid_;
}
inline void MeetingMessage::set_backgroundid(::google::protobuf::int32 value) {
  set_has_backgroundid();
  backgroundid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.backgroundId)
}

// optional string ip = 13 [default = ""];
inline bool MeetingMessage::has_ip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MeetingMessage::set_has_ip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MeetingMessage::clear_has_ip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MeetingMessage::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MeetingMessage::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.ip)
  return *ip_;
}
inline void MeetingMessage::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.ip)
}
inline void MeetingMessage::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.ip)
}
inline void MeetingMessage::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.ip)
}
inline ::std::string* MeetingMessage::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.ip)
  return ip_;
}
inline ::std::string* MeetingMessage::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.ip)
}

// optional int32 port = 14 [default = 0];
inline bool MeetingMessage::has_port() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MeetingMessage::set_has_port() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MeetingMessage::clear_has_port() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MeetingMessage::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MeetingMessage::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.port)
  return port_;
}
inline void MeetingMessage::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.port)
}

// optional string orgCode = 15 [default = ""];
inline bool MeetingMessage::has_orgcode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MeetingMessage::set_has_orgcode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MeetingMessage::clear_has_orgcode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MeetingMessage::clear_orgcode() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_->clear();
  }
  clear_has_orgcode();
}
inline const ::std::string& MeetingMessage::orgcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.orgCode)
  return *orgcode_;
}
inline void MeetingMessage::set_orgcode(const ::std::string& value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.orgCode)
}
inline void MeetingMessage::set_orgcode(const char* value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.orgCode)
}
inline void MeetingMessage::set_orgcode(const char* value, size_t size) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.orgCode)
}
inline ::std::string* MeetingMessage::mutable_orgcode() {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.orgCode)
  return orgcode_;
}
inline ::std::string* MeetingMessage::release_orgcode() {
  clear_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgcode_;
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_orgcode(::std::string* orgcode) {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (orgcode) {
    set_has_orgcode();
    orgcode_ = orgcode;
  } else {
    clear_has_orgcode();
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.orgCode)
}

// repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
inline int MeetingMessage::welcominfolist_size() const {
  return welcominfolist_.size();
}
inline void MeetingMessage::clear_welcominfolist() {
  welcominfolist_.Clear();
}
inline const ::com::arges::file::proto::MeetingMessage_WelcomInfo& MeetingMessage::welcominfolist(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.welcomInfoList)
  return welcominfolist_.Get(index);
}
inline ::com::arges::file::proto::MeetingMessage_WelcomInfo* MeetingMessage::mutable_welcominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.welcomInfoList)
  return welcominfolist_.Mutable(index);
}
inline ::com::arges::file::proto::MeetingMessage_WelcomInfo* MeetingMessage::add_welcominfolist() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingMessage.welcomInfoList)
  return welcominfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_WelcomInfo >&
MeetingMessage::welcominfolist() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingMessage.welcomInfoList)
  return welcominfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_WelcomInfo >*
MeetingMessage::mutable_welcominfolist() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingMessage.welcomInfoList)
  return &welcominfolist_;
}

// repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
inline int MeetingMessage::vipshowtimelist_size() const {
  return vipshowtimelist_.size();
}
inline void MeetingMessage::clear_vipshowtimelist() {
  vipshowtimelist_.Clear();
}
inline const ::com::arges::file::proto::MeetingMessage_vipShowTime& MeetingMessage::vipshowtimelist(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.vipShowTimeList)
  return vipshowtimelist_.Get(index);
}
inline ::com::arges::file::proto::MeetingMessage_vipShowTime* MeetingMessage::mutable_vipshowtimelist(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.vipShowTimeList)
  return vipshowtimelist_.Mutable(index);
}
inline ::com::arges::file::proto::MeetingMessage_vipShowTime* MeetingMessage::add_vipshowtimelist() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingMessage.vipShowTimeList)
  return vipshowtimelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_vipShowTime >&
MeetingMessage::vipshowtimelist() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingMessage.vipShowTimeList)
  return vipshowtimelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_vipShowTime >*
MeetingMessage::mutable_vipshowtimelist() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingMessage.vipShowTimeList)
  return &vipshowtimelist_;
}

// optional string meetId = 18 [default = ""];
inline bool MeetingMessage::has_meetid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MeetingMessage::set_has_meetid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MeetingMessage::clear_has_meetid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MeetingMessage::clear_meetid() {
  if (meetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetid_->clear();
  }
  clear_has_meetid();
}
inline const ::std::string& MeetingMessage::meetid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.meetId)
  return *meetid_;
}
inline void MeetingMessage::set_meetid(const ::std::string& value) {
  set_has_meetid();
  if (meetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetid_ = new ::std::string;
  }
  meetid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.meetId)
}
inline void MeetingMessage::set_meetid(const char* value) {
  set_has_meetid();
  if (meetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetid_ = new ::std::string;
  }
  meetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.MeetingMessage.meetId)
}
inline void MeetingMessage::set_meetid(const char* value, size_t size) {
  set_has_meetid();
  if (meetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetid_ = new ::std::string;
  }
  meetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.MeetingMessage.meetId)
}
inline ::std::string* MeetingMessage::mutable_meetid() {
  set_has_meetid();
  if (meetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.meetId)
  return meetid_;
}
inline ::std::string* MeetingMessage::release_meetid() {
  clear_has_meetid();
  if (meetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = meetid_;
    meetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MeetingMessage::set_allocated_meetid(::std::string* meetid) {
  if (meetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetid_;
  }
  if (meetid) {
    set_has_meetid();
    meetid_ = meetid;
  } else {
    clear_has_meetid();
    meetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingMessage.meetId)
}

// repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
inline int MeetingMessage::hostorgs_size() const {
  return hostorgs_.size();
}
inline void MeetingMessage::clear_hostorgs() {
  hostorgs_.Clear();
}
inline const ::com::arges::file::proto::HostMapOrgData& MeetingMessage::hostorgs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.hostOrgs)
  return hostorgs_.Get(index);
}
inline ::com::arges::file::proto::HostMapOrgData* MeetingMessage::mutable_hostorgs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.hostOrgs)
  return hostorgs_.Mutable(index);
}
inline ::com::arges::file::proto::HostMapOrgData* MeetingMessage::add_hostorgs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingMessage.hostOrgs)
  return hostorgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HostMapOrgData >&
MeetingMessage::hostorgs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingMessage.hostOrgs)
  return hostorgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HostMapOrgData >*
MeetingMessage::mutable_hostorgs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingMessage.hostOrgs)
  return &hostorgs_;
}

// repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
inline int MeetingMessage::notices_size() const {
  return notices_.size();
}
inline void MeetingMessage::clear_notices() {
  notices_.Clear();
}
inline const ::com::arges::file::proto::MeetingMessage_Notice& MeetingMessage::notices(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.notices)
  return notices_.Get(index);
}
inline ::com::arges::file::proto::MeetingMessage_Notice* MeetingMessage::mutable_notices(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.notices)
  return notices_.Mutable(index);
}
inline ::com::arges::file::proto::MeetingMessage_Notice* MeetingMessage::add_notices() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingMessage.notices)
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_Notice >&
MeetingMessage::notices() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingMessage.notices)
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingMessage_Notice >*
MeetingMessage::mutable_notices() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingMessage.notices)
  return &notices_;
}

// optional int32 stat = 21 [default = 0];
inline bool MeetingMessage::has_stat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MeetingMessage::set_has_stat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MeetingMessage::clear_has_stat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MeetingMessage::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 MeetingMessage::stat() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.stat)
  return stat_;
}
inline void MeetingMessage::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingMessage.stat)
}

// repeated .com.arges.file.proto.WristUserName wristUser = 22;
inline int MeetingMessage::wristuser_size() const {
  return wristuser_.size();
}
inline void MeetingMessage::clear_wristuser() {
  wristuser_.Clear();
}
inline const ::com::arges::file::proto::WristUserName& MeetingMessage::wristuser(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingMessage.wristUser)
  return wristuser_.Get(index);
}
inline ::com::arges::file::proto::WristUserName* MeetingMessage::mutable_wristuser(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingMessage.wristUser)
  return wristuser_.Mutable(index);
}
inline ::com::arges::file::proto::WristUserName* MeetingMessage::add_wristuser() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingMessage.wristUser)
  return wristuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
MeetingMessage::wristuser() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingMessage.wristUser)
  return wristuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
MeetingMessage::mutable_wristuser() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingMessage.wristUser)
  return &wristuser_;
}

// -------------------------------------------------------------------

// RspConnectOfMedia

// optional string code = 1 [default = ""];
inline bool RspConnectOfMedia::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConnectOfMedia::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConnectOfMedia::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConnectOfMedia::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& RspConnectOfMedia::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspConnectOfMedia.code)
  return *code_;
}
inline void RspConnectOfMedia::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspConnectOfMedia.code)
}
inline void RspConnectOfMedia::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspConnectOfMedia.code)
}
inline void RspConnectOfMedia::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspConnectOfMedia.code)
}
inline ::std::string* RspConnectOfMedia::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspConnectOfMedia.code)
  return code_;
}
inline ::std::string* RspConnectOfMedia::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConnectOfMedia::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspConnectOfMedia.code)
}

// optional string token = 2 [default = ""];
inline bool RspConnectOfMedia::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConnectOfMedia::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConnectOfMedia::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConnectOfMedia::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspConnectOfMedia::token() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspConnectOfMedia.token)
  return *token_;
}
inline void RspConnectOfMedia::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspConnectOfMedia.token)
}
inline void RspConnectOfMedia::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspConnectOfMedia.token)
}
inline void RspConnectOfMedia::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspConnectOfMedia.token)
}
inline ::std::string* RspConnectOfMedia::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspConnectOfMedia.token)
  return token_;
}
inline ::std::string* RspConnectOfMedia::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConnectOfMedia::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspConnectOfMedia.token)
}

// optional string ip = 3 [default = ""];
inline bool RspConnectOfMedia::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConnectOfMedia::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConnectOfMedia::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConnectOfMedia::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspConnectOfMedia::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspConnectOfMedia.ip)
  return *ip_;
}
inline void RspConnectOfMedia::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspConnectOfMedia.ip)
}
inline void RspConnectOfMedia::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspConnectOfMedia.ip)
}
inline void RspConnectOfMedia::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspConnectOfMedia.ip)
}
inline ::std::string* RspConnectOfMedia::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspConnectOfMedia.ip)
  return ip_;
}
inline ::std::string* RspConnectOfMedia::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConnectOfMedia::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspConnectOfMedia.ip)
}

// optional int32 port = 4 [default = 0];
inline bool RspConnectOfMedia::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConnectOfMedia::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConnectOfMedia::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConnectOfMedia::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 RspConnectOfMedia::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspConnectOfMedia.port)
  return port_;
}
inline void RspConnectOfMedia::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspConnectOfMedia.port)
}

// -------------------------------------------------------------------

// MeetingData

// optional int32 type = 1 [default = -1];
inline bool MeetingData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingData::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 MeetingData::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.type)
  return type_;
}
inline void MeetingData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingData.type)
}

// optional int32 result = 2;
inline bool MeetingData::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingData::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingData::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingData::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MeetingData::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.result)
  return result_;
}
inline void MeetingData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.MeetingData.result)
}

// optional .com.arges.file.proto.DeviceInfo devInfo = 3;
inline bool MeetingData::has_devinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeetingData::set_has_devinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeetingData::clear_has_devinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeetingData::clear_devinfo() {
  if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devinfo();
}
inline const ::com::arges::file::proto::DeviceInfo& MeetingData::devinfo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.devInfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* MeetingData::mutable_devinfo() {
  set_has_devinfo();
  if (devinfo_ == NULL) devinfo_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingData.devInfo)
  return devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* MeetingData::release_devinfo() {
  clear_has_devinfo();
  ::com::arges::file::proto::DeviceInfo* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
inline void MeetingData::set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    set_has_devinfo();
  } else {
    clear_has_devinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingData.devInfo)
}

// repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
inline int MeetingData::devofsignin_size() const {
  return devofsignin_.size();
}
inline void MeetingData::clear_devofsignin() {
  devofsignin_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& MeetingData::devofsignin(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.devOfSignIn)
  return devofsignin_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* MeetingData::mutable_devofsignin(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingData.devOfSignIn)
  return devofsignin_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* MeetingData::add_devofsignin() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingData.devOfSignIn)
  return devofsignin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
MeetingData::devofsignin() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingData.devOfSignIn)
  return devofsignin_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
MeetingData::mutable_devofsignin() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingData.devOfSignIn)
  return &devofsignin_;
}

// optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
inline bool MeetingData::has_meetingmessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeetingData::set_has_meetingmessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeetingData::clear_has_meetingmessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeetingData::clear_meetingmessage() {
  if (meetingmessage_ != NULL) meetingmessage_->::com::arges::file::proto::MeetingMessage::Clear();
  clear_has_meetingmessage();
}
inline const ::com::arges::file::proto::MeetingMessage& MeetingData::meetingmessage() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.meetingMessage)
  return meetingmessage_ != NULL ? *meetingmessage_ : *default_instance_->meetingmessage_;
}
inline ::com::arges::file::proto::MeetingMessage* MeetingData::mutable_meetingmessage() {
  set_has_meetingmessage();
  if (meetingmessage_ == NULL) meetingmessage_ = new ::com::arges::file::proto::MeetingMessage;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingData.meetingMessage)
  return meetingmessage_;
}
inline ::com::arges::file::proto::MeetingMessage* MeetingData::release_meetingmessage() {
  clear_has_meetingmessage();
  ::com::arges::file::proto::MeetingMessage* temp = meetingmessage_;
  meetingmessage_ = NULL;
  return temp;
}
inline void MeetingData::set_allocated_meetingmessage(::com::arges::file::proto::MeetingMessage* meetingmessage) {
  delete meetingmessage_;
  meetingmessage_ = meetingmessage;
  if (meetingmessage) {
    set_has_meetingmessage();
  } else {
    clear_has_meetingmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingData.meetingMessage)
}

// optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
inline bool MeetingData::has_connofsignin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeetingData::set_has_connofsignin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MeetingData::clear_has_connofsignin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MeetingData::clear_connofsignin() {
  if (connofsignin_ != NULL) connofsignin_->::com::arges::file::proto::RspConnectOfMedia::Clear();
  clear_has_connofsignin();
}
inline const ::com::arges::file::proto::RspConnectOfMedia& MeetingData::connofsignin() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.connOfSignIn)
  return connofsignin_ != NULL ? *connofsignin_ : *default_instance_->connofsignin_;
}
inline ::com::arges::file::proto::RspConnectOfMedia* MeetingData::mutable_connofsignin() {
  set_has_connofsignin();
  if (connofsignin_ == NULL) connofsignin_ = new ::com::arges::file::proto::RspConnectOfMedia;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingData.connOfSignIn)
  return connofsignin_;
}
inline ::com::arges::file::proto::RspConnectOfMedia* MeetingData::release_connofsignin() {
  clear_has_connofsignin();
  ::com::arges::file::proto::RspConnectOfMedia* temp = connofsignin_;
  connofsignin_ = NULL;
  return temp;
}
inline void MeetingData::set_allocated_connofsignin(::com::arges::file::proto::RspConnectOfMedia* connofsignin) {
  delete connofsignin_;
  connofsignin_ = connofsignin;
  if (connofsignin) {
    set_has_connofsignin();
  } else {
    clear_has_connofsignin();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.MeetingData.connOfSignIn)
}

// repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
inline int MeetingData::connofmedia_size() const {
  return connofmedia_.size();
}
inline void MeetingData::clear_connofmedia() {
  connofmedia_.Clear();
}
inline const ::com::arges::file::proto::RspConnectOfMedia& MeetingData::connofmedia(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.MeetingData.connOfMedia)
  return connofmedia_.Get(index);
}
inline ::com::arges::file::proto::RspConnectOfMedia* MeetingData::mutable_connofmedia(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.MeetingData.connOfMedia)
  return connofmedia_.Mutable(index);
}
inline ::com::arges::file::proto::RspConnectOfMedia* MeetingData::add_connofmedia() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.MeetingData.connOfMedia)
  return connofmedia_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RspConnectOfMedia >&
MeetingData::connofmedia() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.MeetingData.connOfMedia)
  return connofmedia_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RspConnectOfMedia >*
MeetingData::mutable_connofmedia() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.MeetingData.connOfMedia)
  return &connofmedia_;
}

// -------------------------------------------------------------------

// AllMeetingMessage

// optional int32 type = 1 [default = -1];
inline bool AllMeetingMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllMeetingMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllMeetingMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllMeetingMessage::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 AllMeetingMessage::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AllMeetingMessage.type)
  return type_;
}
inline void AllMeetingMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AllMeetingMessage.type)
}

// optional int32 result = 2 [default = -1];
inline bool AllMeetingMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllMeetingMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllMeetingMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllMeetingMessage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AllMeetingMessage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AllMeetingMessage.result)
  return result_;
}
inline void AllMeetingMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AllMeetingMessage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool AllMeetingMessage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllMeetingMessage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllMeetingMessage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllMeetingMessage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& AllMeetingMessage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AllMeetingMessage.resultDescribe)
  return *resultdescribe_;
}
inline void AllMeetingMessage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AllMeetingMessage.resultDescribe)
}
inline void AllMeetingMessage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AllMeetingMessage.resultDescribe)
}
inline void AllMeetingMessage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AllMeetingMessage.resultDescribe)
}
inline ::std::string* AllMeetingMessage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AllMeetingMessage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* AllMeetingMessage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllMeetingMessage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AllMeetingMessage.resultDescribe)
}

// repeated .com.arges.file.proto.MeetingData meetings = 4;
inline int AllMeetingMessage::meetings_size() const {
  return meetings_.size();
}
inline void AllMeetingMessage::clear_meetings() {
  meetings_.Clear();
}
inline const ::com::arges::file::proto::MeetingData& AllMeetingMessage::meetings(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AllMeetingMessage.meetings)
  return meetings_.Get(index);
}
inline ::com::arges::file::proto::MeetingData* AllMeetingMessage::mutable_meetings(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AllMeetingMessage.meetings)
  return meetings_.Mutable(index);
}
inline ::com::arges::file::proto::MeetingData* AllMeetingMessage::add_meetings() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AllMeetingMessage.meetings)
  return meetings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingData >&
AllMeetingMessage::meetings() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AllMeetingMessage.meetings)
  return meetings_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::MeetingData >*
AllMeetingMessage::mutable_meetings() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AllMeetingMessage.meetings)
  return &meetings_;
}

// optional string boxCode = 5;
inline bool AllMeetingMessage::has_boxcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllMeetingMessage::set_has_boxcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllMeetingMessage::clear_has_boxcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllMeetingMessage::clear_boxcode() {
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_->clear();
  }
  clear_has_boxcode();
}
inline const ::std::string& AllMeetingMessage::boxcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AllMeetingMessage.boxCode)
  return *boxcode_;
}
inline void AllMeetingMessage::set_boxcode(const ::std::string& value) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AllMeetingMessage.boxCode)
}
inline void AllMeetingMessage::set_boxcode(const char* value) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AllMeetingMessage.boxCode)
}
inline void AllMeetingMessage::set_boxcode(const char* value, size_t size) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AllMeetingMessage.boxCode)
}
inline ::std::string* AllMeetingMessage::mutable_boxcode() {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AllMeetingMessage.boxCode)
  return boxcode_;
}
inline ::std::string* AllMeetingMessage::release_boxcode() {
  clear_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxcode_;
    boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllMeetingMessage::set_allocated_boxcode(::std::string* boxcode) {
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxcode_;
  }
  if (boxcode) {
    set_has_boxcode();
    boxcode_ = boxcode;
  } else {
    clear_has_boxcode();
    boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AllMeetingMessage.boxCode)
}

// -------------------------------------------------------------------

// ReportStatOfMeetingShow

// optional string devCode = 1 [default = ""];
inline bool ReportStatOfMeetingShow::has_devcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportStatOfMeetingShow::set_has_devcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportStatOfMeetingShow::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportStatOfMeetingShow::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& ReportStatOfMeetingShow::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
  return *devcode_;
}
inline void ReportStatOfMeetingShow::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
}
inline void ReportStatOfMeetingShow::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
}
inline void ReportStatOfMeetingShow::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
}
inline ::std::string* ReportStatOfMeetingShow::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
  return devcode_;
}
inline ::std::string* ReportStatOfMeetingShow::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportStatOfMeetingShow::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportStatOfMeetingShow.devCode)
}

// optional string meetingName = 2 [default = ""];
inline bool ReportStatOfMeetingShow::has_meetingname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportStatOfMeetingShow::set_has_meetingname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportStatOfMeetingShow::clear_has_meetingname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportStatOfMeetingShow::clear_meetingname() {
  if (meetingname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetingname_->clear();
  }
  clear_has_meetingname();
}
inline const ::std::string& ReportStatOfMeetingShow::meetingname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
  return *meetingname_;
}
inline void ReportStatOfMeetingShow::set_meetingname(const ::std::string& value) {
  set_has_meetingname();
  if (meetingname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetingname_ = new ::std::string;
  }
  meetingname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
}
inline void ReportStatOfMeetingShow::set_meetingname(const char* value) {
  set_has_meetingname();
  if (meetingname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetingname_ = new ::std::string;
  }
  meetingname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
}
inline void ReportStatOfMeetingShow::set_meetingname(const char* value, size_t size) {
  set_has_meetingname();
  if (meetingname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetingname_ = new ::std::string;
  }
  meetingname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
}
inline ::std::string* ReportStatOfMeetingShow::mutable_meetingname() {
  set_has_meetingname();
  if (meetingname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meetingname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
  return meetingname_;
}
inline ::std::string* ReportStatOfMeetingShow::release_meetingname() {
  clear_has_meetingname();
  if (meetingname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = meetingname_;
    meetingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportStatOfMeetingShow::set_allocated_meetingname(::std::string* meetingname) {
  if (meetingname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetingname_;
  }
  if (meetingname) {
    set_has_meetingname();
    meetingname_ = meetingname;
  } else {
    clear_has_meetingname();
    meetingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportStatOfMeetingShow.meetingName)
}

// optional int32 stat = 3 [default = -1];
inline bool ReportStatOfMeetingShow::has_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportStatOfMeetingShow::set_has_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportStatOfMeetingShow::clear_has_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportStatOfMeetingShow::clear_stat() {
  stat_ = -1;
  clear_has_stat();
}
inline ::google::protobuf::int32 ReportStatOfMeetingShow::stat() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportStatOfMeetingShow.stat)
  return stat_;
}
inline void ReportStatOfMeetingShow::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportStatOfMeetingShow.stat)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::TYPE_OF_SIGN_IN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::TYPE_OF_SIGN_IN>() {
  return ::com::arges::file::proto::TYPE_OF_SIGN_IN_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::SUBTITLE_TYPE_FOR_SHOW> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::SUBTITLE_TYPE_FOR_SHOW>() {
  return ::com::arges::file::proto::SUBTITLE_TYPE_FOR_SHOW_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::CONFIG_TYPE_OF_MEETING_FOR_SYSTEM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::CONFIG_TYPE_OF_MEETING_FOR_SYSTEM>() {
  return ::com::arges::file::proto::CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::DO_TYPE_OF_MEETING> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::DO_TYPE_OF_MEETING>() {
  return ::com::arges::file::proto::DO_TYPE_OF_MEETING_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_MEETING> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_MEETING>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_MEETING_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::STAT_TYPE_OF_MEETING_SHOW> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::STAT_TYPE_OF_MEETING_SHOW>() {
  return ::com::arges::file::proto::STAT_TYPE_OF_MEETING_SHOW_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MeetingMessageBean_2eproto__INCLUDED
