// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkDevAndServiceBean.proto

#ifndef PROTOBUF_LinkDevAndServiceBean_2eproto__INCLUDED
#define PROTOBUF_LinkDevAndServiceBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto();
void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto();

class ReqDeviceInfoListForDistribution;
class RspDeviceInfoListForDistribution;
class ReqAffiliactionOfDevice;
class RspAffiliactionOfDevice;

enum OPRATION_TYPE_OF_DEVICE_DESTRIBUTION {
  DEVICE_DESTRIBUTION_FOR_INITIACTIVE_REGISTER = 1,
  DEVICE_REDESTRIBUTE_FOR_SERVICE_EXCEPTION = 2,
  DEVICE_DESTRIBUTION_FOR_PLATFROM_INITIACTIVE = 3,
  DEVICE_DESTRIBUTION_FOR_MODIFY = 4,
  DEVICE_DESTRIBUTION_FOR_DELETE = 5
};
bool OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_IsValid(int value);
const OPRATION_TYPE_OF_DEVICE_DESTRIBUTION OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_MIN = DEVICE_DESTRIBUTION_FOR_INITIACTIVE_REGISTER;
const OPRATION_TYPE_OF_DEVICE_DESTRIBUTION OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_MAX = DEVICE_DESTRIBUTION_FOR_DELETE;
const int OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_ARRAYSIZE = OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor();
inline const ::std::string& OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_Name(OPRATION_TYPE_OF_DEVICE_DESTRIBUTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor(), value);
}
inline bool OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_Parse(
    const ::std::string& name, OPRATION_TYPE_OF_DEVICE_DESTRIBUTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPRATION_TYPE_OF_DEVICE_DESTRIBUTION>(
    OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor(), name, value);
}
enum DISTRIBUTE_RESULT_TYPE_OF_DEV {
  DISTRIBUTE_DEVICE_RESULT_IS_OK = 1,
  DISTRIBUTE_DEVICE_RESULT_IS_ERROR = 2,
  DISTRIBUTE_DEVICE_RESULT_IS_NULL = 3
};
bool DISTRIBUTE_RESULT_TYPE_OF_DEV_IsValid(int value);
const DISTRIBUTE_RESULT_TYPE_OF_DEV DISTRIBUTE_RESULT_TYPE_OF_DEV_MIN = DISTRIBUTE_DEVICE_RESULT_IS_OK;
const DISTRIBUTE_RESULT_TYPE_OF_DEV DISTRIBUTE_RESULT_TYPE_OF_DEV_MAX = DISTRIBUTE_DEVICE_RESULT_IS_NULL;
const int DISTRIBUTE_RESULT_TYPE_OF_DEV_ARRAYSIZE = DISTRIBUTE_RESULT_TYPE_OF_DEV_MAX + 1;

const ::google::protobuf::EnumDescriptor* DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor();
inline const ::std::string& DISTRIBUTE_RESULT_TYPE_OF_DEV_Name(DISTRIBUTE_RESULT_TYPE_OF_DEV value) {
  return ::google::protobuf::internal::NameOfEnum(
    DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor(), value);
}
inline bool DISTRIBUTE_RESULT_TYPE_OF_DEV_Parse(
    const ::std::string& name, DISTRIBUTE_RESULT_TYPE_OF_DEV* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DISTRIBUTE_RESULT_TYPE_OF_DEV>(
    DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor(), name, value);
}
// ===================================================================

class ReqDeviceInfoListForDistribution : public ::google::protobuf::Message {
 public:
  ReqDeviceInfoListForDistribution();
  virtual ~ReqDeviceInfoListForDistribution();

  ReqDeviceInfoListForDistribution(const ReqDeviceInfoListForDistribution& from);

  inline ReqDeviceInfoListForDistribution& operator=(const ReqDeviceInfoListForDistribution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDeviceInfoListForDistribution& default_instance();

  void Swap(ReqDeviceInfoListForDistribution* other);

  // implements Message ----------------------------------------------

  ReqDeviceInfoListForDistribution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDeviceInfoListForDistribution& from);
  void MergeFrom(const ReqDeviceInfoListForDistribution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serverId = 1 [default = ""];
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional int32 type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 order = 3 [default = -1];
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int32 msType = 4 [default = -1];
  inline bool has_mstype() const;
  inline void clear_mstype();
  static const int kMsTypeFieldNumber = 4;
  inline ::google::protobuf::int32 mstype() const;
  inline void set_mstype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDeviceInfoListForDistribution)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_mstype();
  inline void clear_has_mstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 mstype_;
  friend void  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDeviceInfoListForDistribution* default_instance_;
};
// -------------------------------------------------------------------

class RspDeviceInfoListForDistribution : public ::google::protobuf::Message {
 public:
  RspDeviceInfoListForDistribution();
  virtual ~RspDeviceInfoListForDistribution();

  RspDeviceInfoListForDistribution(const RspDeviceInfoListForDistribution& from);

  inline RspDeviceInfoListForDistribution& operator=(const RspDeviceInfoListForDistribution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDeviceInfoListForDistribution& default_instance();

  void Swap(RspDeviceInfoListForDistribution* other);

  // implements Message ----------------------------------------------

  RspDeviceInfoListForDistribution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDeviceInfoListForDistribution& from);
  void MergeFrom(const RspDeviceInfoListForDistribution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.DeviceInfo devs = 1;
  inline int devs_size() const;
  inline void clear_devs();
  static const int kDevsFieldNumber = 1;
  inline const ::com::arges::file::proto::DeviceInfo& devs(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devs(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_devs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      devs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_devs();

  // optional int32 doType = 2 [default = -1];
  inline bool has_dotype() const;
  inline void clear_dotype();
  static const int kDoTypeFieldNumber = 2;
  inline ::google::protobuf::int32 dotype() const;
  inline void set_dotype(::google::protobuf::int32 value);

  // optional int32 result = 3 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 4 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 4;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDeviceInfoListForDistribution)
 private:
  inline void set_has_dotype();
  inline void clear_has_dotype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > devs_;
  ::google::protobuf::int32 dotype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  friend void  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto();

  void InitAsDefaultInstance();
  static RspDeviceInfoListForDistribution* default_instance_;
};
// -------------------------------------------------------------------

class ReqAffiliactionOfDevice : public ::google::protobuf::Message {
 public:
  ReqAffiliactionOfDevice();
  virtual ~ReqAffiliactionOfDevice();

  ReqAffiliactionOfDevice(const ReqAffiliactionOfDevice& from);

  inline ReqAffiliactionOfDevice& operator=(const ReqAffiliactionOfDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAffiliactionOfDevice& default_instance();

  void Swap(ReqAffiliactionOfDevice* other);

  // implements Message ----------------------------------------------

  ReqAffiliactionOfDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAffiliactionOfDevice& from);
  void MergeFrom(const ReqAffiliactionOfDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqAffiliactionOfDevice)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  friend void  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto();

  void InitAsDefaultInstance();
  static ReqAffiliactionOfDevice* default_instance_;
};
// -------------------------------------------------------------------

class RspAffiliactionOfDevice : public ::google::protobuf::Message {
 public:
  RspAffiliactionOfDevice();
  virtual ~RspAffiliactionOfDevice();

  RspAffiliactionOfDevice(const RspAffiliactionOfDevice& from);

  inline RspAffiliactionOfDevice& operator=(const RspAffiliactionOfDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspAffiliactionOfDevice& default_instance();

  void Swap(RspAffiliactionOfDevice* other);

  // implements Message ----------------------------------------------

  RspAffiliactionOfDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspAffiliactionOfDevice& from);
  void MergeFrom(const RspAffiliactionOfDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devCode = 1 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 1;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional int32 mountType = 2 [default = -1];
  inline bool has_mounttype() const;
  inline void clear_mounttype();
  static const int kMountTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mounttype() const;
  inline void set_mounttype(::google::protobuf::int32 value);

  // optional string serviceId = 3 [default = ""];
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIdFieldNumber = 3;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // optional string upDevCode = 4 [default = ""];
  inline bool has_updevcode() const;
  inline void clear_updevcode();
  static const int kUpDevCodeFieldNumber = 4;
  inline const ::std::string& updevcode() const;
  inline void set_updevcode(const ::std::string& value);
  inline void set_updevcode(const char* value);
  inline void set_updevcode(const char* value, size_t size);
  inline ::std::string* mutable_updevcode();
  inline ::std::string* release_updevcode();
  inline void set_allocated_updevcode(::std::string* updevcode);

  // optional string devId = 5 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 5;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string proxyServiceIp = 6 [default = ""];
  inline bool has_proxyserviceip() const;
  inline void clear_proxyserviceip();
  static const int kProxyServiceIpFieldNumber = 6;
  inline const ::std::string& proxyserviceip() const;
  inline void set_proxyserviceip(const ::std::string& value);
  inline void set_proxyserviceip(const char* value);
  inline void set_proxyserviceip(const char* value, size_t size);
  inline ::std::string* mutable_proxyserviceip();
  inline ::std::string* release_proxyserviceip();
  inline void set_allocated_proxyserviceip(::std::string* proxyserviceip);

  // optional int32 proxyServicePort = 7 [default = -1];
  inline bool has_proxyserviceport() const;
  inline void clear_proxyserviceport();
  static const int kProxyServicePortFieldNumber = 7;
  inline ::google::protobuf::int32 proxyserviceport() const;
  inline void set_proxyserviceport(::google::protobuf::int32 value);

  // optional string proxyServiceCode = 8 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 8;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspAffiliactionOfDevice)
 private:
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_mounttype();
  inline void clear_has_mounttype();
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_updevcode();
  inline void clear_has_updevcode();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_proxyserviceip();
  inline void clear_has_proxyserviceip();
  inline void set_has_proxyserviceport();
  inline void clear_has_proxyserviceport();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devcode_;
  ::std::string* serviceid_;
  ::std::string* updevcode_;
  ::google::protobuf::int32 mounttype_;
  ::google::protobuf::int32 proxyserviceport_;
  ::std::string* devid_;
  ::std::string* proxyserviceip_;
  ::std::string* proxyservicecode_;
  friend void  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto();
  friend void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto();

  void InitAsDefaultInstance();
  static RspAffiliactionOfDevice* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqDeviceInfoListForDistribution

// optional string serverId = 1 [default = ""];
inline bool ReqDeviceInfoListForDistribution::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDeviceInfoListForDistribution::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDeviceInfoListForDistribution::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDeviceInfoListForDistribution::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& ReqDeviceInfoListForDistribution::serverid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
  return *serverid_;
}
inline void ReqDeviceInfoListForDistribution::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
}
inline void ReqDeviceInfoListForDistribution::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
}
inline void ReqDeviceInfoListForDistribution::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
}
inline ::std::string* ReqDeviceInfoListForDistribution::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
  return serverid_;
}
inline ::std::string* ReqDeviceInfoListForDistribution::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceInfoListForDistribution::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceInfoListForDistribution.serverId)
}

// optional int32 type = 2 [default = -1];
inline bool ReqDeviceInfoListForDistribution::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDeviceInfoListForDistribution::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDeviceInfoListForDistribution::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDeviceInfoListForDistribution::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqDeviceInfoListForDistribution::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfoListForDistribution.type)
  return type_;
}
inline void ReqDeviceInfoListForDistribution::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfoListForDistribution.type)
}

// optional int32 order = 3 [default = -1];
inline bool ReqDeviceInfoListForDistribution::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqDeviceInfoListForDistribution::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqDeviceInfoListForDistribution::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqDeviceInfoListForDistribution::clear_order() {
  order_ = -1;
  clear_has_order();
}
inline ::google::protobuf::int32 ReqDeviceInfoListForDistribution::order() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfoListForDistribution.order)
  return order_;
}
inline void ReqDeviceInfoListForDistribution::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfoListForDistribution.order)
}

// optional int32 msType = 4 [default = -1];
inline bool ReqDeviceInfoListForDistribution::has_mstype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqDeviceInfoListForDistribution::set_has_mstype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqDeviceInfoListForDistribution::clear_has_mstype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqDeviceInfoListForDistribution::clear_mstype() {
  mstype_ = -1;
  clear_has_mstype();
}
inline ::google::protobuf::int32 ReqDeviceInfoListForDistribution::mstype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfoListForDistribution.msType)
  return mstype_;
}
inline void ReqDeviceInfoListForDistribution::set_mstype(::google::protobuf::int32 value) {
  set_has_mstype();
  mstype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfoListForDistribution.msType)
}

// -------------------------------------------------------------------

// RspDeviceInfoListForDistribution

// repeated .com.arges.file.proto.DeviceInfo devs = 1;
inline int RspDeviceInfoListForDistribution::devs_size() const {
  return devs_.size();
}
inline void RspDeviceInfoListForDistribution::clear_devs() {
  devs_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDeviceInfoListForDistribution::devs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfoListForDistribution.devs)
  return devs_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceInfoListForDistribution::mutable_devs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDeviceInfoListForDistribution.devs)
  return devs_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceInfoListForDistribution::add_devs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDeviceInfoListForDistribution.devs)
  return devs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDeviceInfoListForDistribution::devs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDeviceInfoListForDistribution.devs)
  return devs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDeviceInfoListForDistribution::mutable_devs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDeviceInfoListForDistribution.devs)
  return &devs_;
}

// optional int32 doType = 2 [default = -1];
inline bool RspDeviceInfoListForDistribution::has_dotype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspDeviceInfoListForDistribution::set_has_dotype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspDeviceInfoListForDistribution::clear_has_dotype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspDeviceInfoListForDistribution::clear_dotype() {
  dotype_ = -1;
  clear_has_dotype();
}
inline ::google::protobuf::int32 RspDeviceInfoListForDistribution::dotype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfoListForDistribution.doType)
  return dotype_;
}
inline void RspDeviceInfoListForDistribution::set_dotype(::google::protobuf::int32 value) {
  set_has_dotype();
  dotype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfoListForDistribution.doType)
}

// optional int32 result = 3 [default = -1];
inline bool RspDeviceInfoListForDistribution::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspDeviceInfoListForDistribution::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspDeviceInfoListForDistribution::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspDeviceInfoListForDistribution::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspDeviceInfoListForDistribution::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfoListForDistribution.result)
  return result_;
}
inline void RspDeviceInfoListForDistribution::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfoListForDistribution.result)
}

// optional bytes resultDescribe = 4 [default = ""];
inline bool RspDeviceInfoListForDistribution::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspDeviceInfoListForDistribution::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspDeviceInfoListForDistribution::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspDeviceInfoListForDistribution::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& RspDeviceInfoListForDistribution::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
  return *resultdescribe_;
}
inline void RspDeviceInfoListForDistribution::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
}
inline void RspDeviceInfoListForDistribution::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
}
inline void RspDeviceInfoListForDistribution::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
}
inline ::std::string* RspDeviceInfoListForDistribution::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* RspDeviceInfoListForDistribution::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspDeviceInfoListForDistribution::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDeviceInfoListForDistribution.resultDescribe)
}

// -------------------------------------------------------------------

// ReqAffiliactionOfDevice

// optional string devId = 1 [default = ""];
inline bool ReqAffiliactionOfDevice::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAffiliactionOfDevice::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAffiliactionOfDevice::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAffiliactionOfDevice::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqAffiliactionOfDevice::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
  return *devid_;
}
inline void ReqAffiliactionOfDevice::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
}
inline void ReqAffiliactionOfDevice::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
}
inline void ReqAffiliactionOfDevice::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
}
inline ::std::string* ReqAffiliactionOfDevice::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
  return devid_;
}
inline ::std::string* ReqAffiliactionOfDevice::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqAffiliactionOfDevice::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqAffiliactionOfDevice.devId)
}

// -------------------------------------------------------------------

// RspAffiliactionOfDevice

// optional string devCode = 1 [default = ""];
inline bool RspAffiliactionOfDevice::has_devcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_devcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspAffiliactionOfDevice::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspAffiliactionOfDevice::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& RspAffiliactionOfDevice::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
  return *devcode_;
}
inline void RspAffiliactionOfDevice::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
}
inline void RspAffiliactionOfDevice::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
}
inline void RspAffiliactionOfDevice::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
  return devcode_;
}
inline ::std::string* RspAffiliactionOfDevice::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.devCode)
}

// optional int32 mountType = 2 [default = -1];
inline bool RspAffiliactionOfDevice::has_mounttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_mounttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspAffiliactionOfDevice::clear_has_mounttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspAffiliactionOfDevice::clear_mounttype() {
  mounttype_ = -1;
  clear_has_mounttype();
}
inline ::google::protobuf::int32 RspAffiliactionOfDevice::mounttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.mountType)
  return mounttype_;
}
inline void RspAffiliactionOfDevice::set_mounttype(::google::protobuf::int32 value) {
  set_has_mounttype();
  mounttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.mountType)
}

// optional string serviceId = 3 [default = ""];
inline bool RspAffiliactionOfDevice::has_serviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_serviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspAffiliactionOfDevice::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspAffiliactionOfDevice::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& RspAffiliactionOfDevice::serviceid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
  return *serviceid_;
}
inline void RspAffiliactionOfDevice::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
}
inline void RspAffiliactionOfDevice::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
}
inline void RspAffiliactionOfDevice::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
  return serviceid_;
}
inline ::std::string* RspAffiliactionOfDevice::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.serviceId)
}

// optional string upDevCode = 4 [default = ""];
inline bool RspAffiliactionOfDevice::has_updevcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_updevcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspAffiliactionOfDevice::clear_has_updevcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspAffiliactionOfDevice::clear_updevcode() {
  if (updevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevcode_->clear();
  }
  clear_has_updevcode();
}
inline const ::std::string& RspAffiliactionOfDevice::updevcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
  return *updevcode_;
}
inline void RspAffiliactionOfDevice::set_updevcode(const ::std::string& value) {
  set_has_updevcode();
  if (updevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevcode_ = new ::std::string;
  }
  updevcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
}
inline void RspAffiliactionOfDevice::set_updevcode(const char* value) {
  set_has_updevcode();
  if (updevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevcode_ = new ::std::string;
  }
  updevcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
}
inline void RspAffiliactionOfDevice::set_updevcode(const char* value, size_t size) {
  set_has_updevcode();
  if (updevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevcode_ = new ::std::string;
  }
  updevcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_updevcode() {
  set_has_updevcode();
  if (updevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
  return updevcode_;
}
inline ::std::string* RspAffiliactionOfDevice::release_updevcode() {
  clear_has_updevcode();
  if (updevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updevcode_;
    updevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_updevcode(::std::string* updevcode) {
  if (updevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevcode_;
  }
  if (updevcode) {
    set_has_updevcode();
    updevcode_ = updevcode;
  } else {
    clear_has_updevcode();
    updevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.upDevCode)
}

// optional string devId = 5 [default = ""];
inline bool RspAffiliactionOfDevice::has_devid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_devid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspAffiliactionOfDevice::clear_has_devid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspAffiliactionOfDevice::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& RspAffiliactionOfDevice::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.devId)
  return *devid_;
}
inline void RspAffiliactionOfDevice::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.devId)
}
inline void RspAffiliactionOfDevice::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.devId)
}
inline void RspAffiliactionOfDevice::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.devId)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.devId)
  return devid_;
}
inline ::std::string* RspAffiliactionOfDevice::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.devId)
}

// optional string proxyServiceIp = 6 [default = ""];
inline bool RspAffiliactionOfDevice::has_proxyserviceip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_proxyserviceip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspAffiliactionOfDevice::clear_has_proxyserviceip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspAffiliactionOfDevice::clear_proxyserviceip() {
  if (proxyserviceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyserviceip_->clear();
  }
  clear_has_proxyserviceip();
}
inline const ::std::string& RspAffiliactionOfDevice::proxyserviceip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
  return *proxyserviceip_;
}
inline void RspAffiliactionOfDevice::set_proxyserviceip(const ::std::string& value) {
  set_has_proxyserviceip();
  if (proxyserviceip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyserviceip_ = new ::std::string;
  }
  proxyserviceip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
}
inline void RspAffiliactionOfDevice::set_proxyserviceip(const char* value) {
  set_has_proxyserviceip();
  if (proxyserviceip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyserviceip_ = new ::std::string;
  }
  proxyserviceip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
}
inline void RspAffiliactionOfDevice::set_proxyserviceip(const char* value, size_t size) {
  set_has_proxyserviceip();
  if (proxyserviceip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyserviceip_ = new ::std::string;
  }
  proxyserviceip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_proxyserviceip() {
  set_has_proxyserviceip();
  if (proxyserviceip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyserviceip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
  return proxyserviceip_;
}
inline ::std::string* RspAffiliactionOfDevice::release_proxyserviceip() {
  clear_has_proxyserviceip();
  if (proxyserviceip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyserviceip_;
    proxyserviceip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_proxyserviceip(::std::string* proxyserviceip) {
  if (proxyserviceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyserviceip_;
  }
  if (proxyserviceip) {
    set_has_proxyserviceip();
    proxyserviceip_ = proxyserviceip;
  } else {
    clear_has_proxyserviceip();
    proxyserviceip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceIp)
}

// optional int32 proxyServicePort = 7 [default = -1];
inline bool RspAffiliactionOfDevice::has_proxyserviceport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_proxyserviceport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspAffiliactionOfDevice::clear_has_proxyserviceport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspAffiliactionOfDevice::clear_proxyserviceport() {
  proxyserviceport_ = -1;
  clear_has_proxyserviceport();
}
inline ::google::protobuf::int32 RspAffiliactionOfDevice::proxyserviceport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.proxyServicePort)
  return proxyserviceport_;
}
inline void RspAffiliactionOfDevice::set_proxyserviceport(::google::protobuf::int32 value) {
  set_has_proxyserviceport();
  proxyserviceport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.proxyServicePort)
}

// optional string proxyServiceCode = 8 [default = ""];
inline bool RspAffiliactionOfDevice::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspAffiliactionOfDevice::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspAffiliactionOfDevice::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspAffiliactionOfDevice::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& RspAffiliactionOfDevice::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
  return *proxyservicecode_;
}
inline void RspAffiliactionOfDevice::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
}
inline void RspAffiliactionOfDevice::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
}
inline void RspAffiliactionOfDevice::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
}
inline ::std::string* RspAffiliactionOfDevice::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* RspAffiliactionOfDevice::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspAffiliactionOfDevice::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspAffiliactionOfDevice.proxyServiceCode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DESTRIBUTION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DESTRIBUTION>() {
  return ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::DISTRIBUTE_RESULT_TYPE_OF_DEV> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::DISTRIBUTE_RESULT_TYPE_OF_DEV>() {
  return ::com::arges::file::proto::DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LinkDevAndServiceBean_2eproto__INCLUDED
