// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaiseDustDataBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RaiseDustDataBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RaisuDustData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustAlarmMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustAlarmMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustAlarmMessage_RaisuDustAlarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustPlanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustPlanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustAlarmPlanMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustAlarmPlanMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustNoiseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustNoiseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaisuDustNoiseThreshold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaisuDustNoiseThreshold_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_RAISE_DUST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_RAISE_DUST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ALARM_TYPE_OF_ARISE_DUST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RaiseDustDataBean_2eproto() {
  protobuf_AddDesc_RaiseDustDataBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RaiseDustDataBean.proto");
  GOOGLE_CHECK(file != NULL);
  RaisuDustData_descriptor_ = file->message_type(0);
  static const int RaisuDustData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, pm10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, windspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, winddirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, tmperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, pm2_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, latituede_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, temperatureonboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, humidityonboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, tsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, time_),
  };
  RaisuDustData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustData_descriptor_,
      RaisuDustData::default_instance_,
      RaisuDustData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustData));
  RaisuDustMassage_descriptor_ = file->message_type(1);
  static const int RaisuDustMassage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, devinfo_),
  };
  RaisuDustMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustMassage_descriptor_,
      RaisuDustMassage::default_instance_,
      RaisuDustMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustMassage));
  RaisuDustAlarmMessage_descriptor_ = file->message_type(2);
  static const int RaisuDustAlarmMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, raisealarms_),
  };
  RaisuDustAlarmMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustAlarmMessage_descriptor_,
      RaisuDustAlarmMessage::default_instance_,
      RaisuDustAlarmMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustAlarmMessage));
  RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_ = RaisuDustAlarmMessage_descriptor_->nested_type(0);
  static const int RaisuDustAlarmMessage_RaisuDustAlarm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, alarmcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, alarmnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, standardnum_),
  };
  RaisuDustAlarmMessage_RaisuDustAlarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_,
      RaisuDustAlarmMessage_RaisuDustAlarm::default_instance_,
      RaisuDustAlarmMessage_RaisuDustAlarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmMessage_RaisuDustAlarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustAlarmMessage_RaisuDustAlarm));
  RaisuDustPlanData_descriptor_ = file->message_type(3);
  static const int RaisuDustPlanData_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, humidityhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, humiditylower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, noisehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, noiselower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pm10high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pm10lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pm2_5_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pm2_5_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pressurehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, pressurelower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, tmperaturehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, tmperaturelower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, tsphigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, tsplower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, voltagehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, voltagelower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, winddirectionhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, winddirectionlower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, windspeedhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, windspeedlower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, keeptime_),
  };
  RaisuDustPlanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustPlanData_descriptor_,
      RaisuDustPlanData::default_instance_,
      RaisuDustPlanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustPlanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustPlanData));
  RaisuDustAlarmPlanMessage_descriptor_ = file->message_type(4);
  static const int RaisuDustAlarmPlanMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, boxcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, devcode_),
  };
  RaisuDustAlarmPlanMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustAlarmPlanMessage_descriptor_,
      RaisuDustAlarmPlanMessage::default_instance_,
      RaisuDustAlarmPlanMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustAlarmPlanMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustAlarmPlanMessage));
  RaisuDustNoiseData_descriptor_ = file->message_type(5);
  static const int RaisuDustNoiseData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, headerfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, threshold_),
  };
  RaisuDustNoiseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustNoiseData_descriptor_,
      RaisuDustNoiseData::default_instance_,
      RaisuDustNoiseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustNoiseData));
  RaisuDustNoiseThreshold_descriptor_ = file->message_type(6);
  static const int RaisuDustNoiseThreshold_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseThreshold, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseThreshold, value_),
  };
  RaisuDustNoiseThreshold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaisuDustNoiseThreshold_descriptor_,
      RaisuDustNoiseThreshold::default_instance_,
      RaisuDustNoiseThreshold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseThreshold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaisuDustNoiseThreshold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaisuDustNoiseThreshold));
  REQUEST_TYPE_OF_RAISE_DUST_descriptor_ = file->enum_type(0);
  RESULT_TYPE_OF_RAISE_DUST_descriptor_ = file->enum_type(1);
  THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor_ = file->enum_type(2);
  ALARM_TYPE_OF_ARISE_DUST_descriptor_ = file->enum_type(3);
  REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_ = file->enum_type(4);
  RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RaiseDustDataBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustData_descriptor_, &RaisuDustData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustMassage_descriptor_, &RaisuDustMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustAlarmMessage_descriptor_, &RaisuDustAlarmMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_, &RaisuDustAlarmMessage_RaisuDustAlarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustPlanData_descriptor_, &RaisuDustPlanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustAlarmPlanMessage_descriptor_, &RaisuDustAlarmPlanMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustNoiseData_descriptor_, &RaisuDustNoiseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaisuDustNoiseThreshold_descriptor_, &RaisuDustNoiseThreshold::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RaiseDustDataBean_2eproto() {
  delete RaisuDustData::default_instance_;
  delete RaisuDustData_reflection_;
  delete RaisuDustMassage::default_instance_;
  delete RaisuDustMassage_reflection_;
  delete RaisuDustAlarmMessage::default_instance_;
  delete RaisuDustAlarmMessage_reflection_;
  delete RaisuDustAlarmMessage_RaisuDustAlarm::default_instance_;
  delete RaisuDustAlarmMessage_RaisuDustAlarm_reflection_;
  delete RaisuDustPlanData::default_instance_;
  delete RaisuDustPlanData_reflection_;
  delete RaisuDustAlarmPlanMessage::default_instance_;
  delete RaisuDustAlarmPlanMessage_reflection_;
  delete RaisuDustNoiseData::default_instance_;
  delete RaisuDustNoiseData_reflection_;
  delete RaisuDustNoiseThreshold::default_instance_;
  delete RaisuDustNoiseThreshold_reflection_;
}

void protobuf_AddDesc_RaiseDustDataBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027RaiseDustDataBean.proto\022\024com.arges.fil"
    "e.proto\032\025DevInfoListBean.proto\"\210\003\n\rRaisu"
    "DustData\022\024\n\ndeviceCode\030\001 \001(\t:\000\022\014\n\002id\030\002 \001"
    "(\t:\000\022\021\n\007postion\030\003 \001(\t:\000\022\020\n\005noise\030\004 \001(\002:\001"
    "0\022\017\n\004pm10\030\005 \001(\002:\0010\022\024\n\twindSpeed\030\006 \001(\002:\0010"
    "\022\030\n\rwindDirection\030\007 \001(\002:\0010\022\025\n\ntmperature"
    "\030\010 \001(\002:\0010\022\023\n\010humidity\030\t \001(\002:\0010\022\023\n\010pressu"
    "re\030\n \001(\002:\0010\022\022\n\007voltage\030\013 \001(\002:\0010\022\020\n\005pm2_5"
    "\030\014 \001(\002:\0010\022\024\n\tlongitude\030\r \001(\002:\0010\022\024\n\tlatit"
    "uede\030\016 \001(\002:\0010\022\035\n\022temperatureOnboard\030\017 \001("
    "\002:\0010\022\032\n\017humidityOnboard\030\020 \001(\002:\0010\022\016\n\003tsp\030"
    "\021 \001(\002:\0010\022\017\n\004time\030\022 \001(\003:\0010\"\277\001\n\020RaisuDustM"
    "assage\022\027\n\013requestType\030\001 \001(\005:\002-1\022\022\n\006resul"
    "t\030\002 \001(\005:\002-1\022\030\n\016resultDescribe\030\003 \001(\t:\000\0221\n"
    "\004data\030\004 \001(\0132#.com.arges.file.proto.Raisu"
    "DustData\0221\n\007devInfo\030\005 \001(\0132 .com.arges.fi"
    "le.proto.DeviceInfo\"\206\002\n\025RaisuDustAlarmMe"
    "ssage\022\014\n\002sn\030\001 \001(\t:\000\022\020\n\004time\030\002 \001(\003:\002-1\022\016\n"
    "\004code\030\003 \001(\t:\000\022O\n\013raiseAlarms\030\004 \003(\0132:.com"
    ".arges.file.proto.RaisuDustAlarmMessage."
    "RaisuDustAlarm\032l\n\016RaisuDustAlarm\022\024\n\010alar"
    "mCap\030\001 \001(\005:\002-1\022\024\n\010alarmNum\030\002 \001(\002:\002-1\022\025\n\t"
    "alarmType\030\003 \001(\005:\002-1\022\027\n\013standardNum\030\004 \001(\002"
    ":\002-1\"\335\005\n\021RaisuDustPlanData\022\016\n\002id\030\001 \001(\003:\002"
    "-1\022\016\n\004code\030\002 \001(\t:\000\022\014\n\002sn\030\003 \001(\t:\000\022\034\n\014humi"
    "dityHigh\030\004 \001(\002:\006100000\022\035\n\rhumidityLower\030"
    "\005 \001(\002:\006100000\022\031\n\tnoiseHigh\030\006 \001(\002:\006100000"
    "\022\032\n\nnoiseLower\030\007 \001(\002:\006100000\022\030\n\010pm10High"
    "\030\010 \001(\002:\006100000\022\031\n\tpm10Lower\030\t \001(\002:\00610000"
    "0\022\032\n\npm2_5_high\030\n \001(\002:\006100000\022\033\n\013pm2_5_l"
    "ower\030\013 \001(\002:\006100000\022\034\n\014pressureHigh\030\014 \001(\002"
    ":\006100000\022\035\n\rpressureLower\030\r \001(\002:\006100000\022"
    "\036\n\016tmperatureHigh\030\016 \001(\002:\006100000\022\037\n\017tmper"
    "atureLower\030\017 \001(\002:\006100000\022\027\n\007tspHigh\030\020 \001("
    "\002:\006100000\022\030\n\010tspLower\030\021 \001(\002:\006100000\022\033\n\013v"
    "oltageHigh\030\022 \001(\002:\006100000\022\034\n\014voltageLower"
    "\030\023 \001(\002:\006100000\022!\n\021windDirectionHigh\030\024 \001("
    "\002:\006100000\022\"\n\022windDirectionLower\030\025 \001(\002:\0061"
    "00000\022\035\n\rwindSpeedHigh\030\026 \001(\002:\006100000\022\036\n\016"
    "windSpeedLower\030\027 \001(\002:\006100000\0221\n\007devInfo\030"
    "\030 \001(\0132 .com.arges.file.proto.DeviceInfo\022"
    "\023\n\010keepTime\030\031 \001(\005:\0010\"\274\001\n\031RaisuDustAlarmP"
    "lanMessage\022\027\n\013requestType\030\001 \001(\005:\002-1\022\022\n\006r"
    "esult\030\002 \001(\005:\002-1\022\030\n\016resultDescribe\030\003 \001(\014:"
    "\000\0226\n\005datas\030\004 \003(\0132\'.com.arges.file.proto."
    "RaisuDustPlanData\022\017\n\007boxCode\030\005 \001(\t\022\017\n\007de"
    "vCode\030\006 \001(\t\"\263\001\n\022RaisuDustNoiseData\022\024\n\nde"
    "viceCode\030\001 \001(\t:\000\022\014\n\002id\030\002 \001(\t:\000\022\024\n\tlongit"
    "ude\030\003 \001(\002:\0010\022\023\n\010latitude\030\004 \001(\002:\0010\022\016\n\004dat"
    "e\030\005 \001(\t:\000\022\024\n\nheaderFile\030\006 \001(\t:\000\022\022\n\010fileP"
    "ath\030\007 \001(\t:\000\022\024\n\tthreshold\030\010 \001(\002:\0010\"A\n\027Rai"
    "suDustNoiseThreshold\022\024\n\ndeviceCode\030\001 \001(\t"
    ":\000\022\020\n\005value\030\002 \001(\002:\0010*i\n\032REQUEST_TYPE_OF_"
    "RAISE_DUST\022\'\n#RAISE_DUST_REQUEST_GET_SRC"
    "_DEV_INFO\020\001\022\"\n\036RAISE_DUST_REQUEST_ACTION"
    "_LINK\020\002*h\n\031RESULT_TYPE_OF_RAISE_DUST\022#\n\037"
    "RAISE_DUST_MESSAGE_RESULT_IS_OK\020\001\022&\n\"RAI"
    "SE_DUST_MESSAGE_RESULT_IS_ERROR\020\002*\205\001\n&TH"
    "RESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST\022,\n("
    "RAISE_DUST_ALARM_THRESHOLD_OF_HIGH_LIMIT"
    "\020\001\022-\n)RAISE_DUST_ALARM_THRESHOLD_OF_LOWE"
    "R_LIMIT\020\002*\247\003\n\030ALARM_TYPE_OF_ARISE_DUST\022#"
    "\n\037RAISE_DUST_ALARM_TYPE_FOR_NOISE\020\001\022$\n R"
    "AISE_DUST_ALARM_TYPE_FOR_PM_2_5\020\002\022#\n\037RAI"
    "SE_DUST_ALARM_TYPE_FOR_PM_10\020\003\022!\n\035RAISE_"
    "DUST_ALARM_TYPE_FOR_TSP\020\004\022(\n$RAISE_DUST_"
    "ALARM_TYPE_FOR_WIND_SPEED\020\005\022,\n(RAISE_DUS"
    "T_ALARM_TYPE_FOR_WIND_DIRECTION\020\006\022)\n%RAI"
    "SE_DUST_ALARM_TYPE_FOR_TEMPERATURE\020\007\022&\n\""
    "RAISE_DUST_ALARM_TYPE_FOR_HUMIDITY\020\010\022&\n\""
    "RAISE_DUST_ALARM_TYPE_FOR_PRESSURE\020\t\022%\n!"
    "RAISE_DUST_ALARM_TYPE_FOR_VOLTAGE\020\n*\370\001\n#"
    "REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST\022\033\n\027R"
    "AISE_DUST_PLAN_GET_ALL\020\001\022\033\n\027RAISE_DUST_P"
    "LAN_GET_DEV\020\002\022\"\n\036RAISE_DUST_PLAN_GET_BY_"
    "DEVCODE\020\003\022\"\n\036RAISE_DUST_PLAN_GET_BY_BOXC"
    "ODE\020\004\022\027\n\023RAISE_DUST_PLAN_ADD\020\005\022\032\n\026RAISE_"
    "DUST_PLAN_UPDATE\020\006\022\032\n\026RAISE_DUAT_PLAN_DE"
    "LETE\020\007*]\n\"RESULT_TYPE_OF_PLAN_FOR_RAISE_"
    "DUST\022\031\n\025RAISE_DUST_PLAN_IS_OK\020\001\022\034\n\030RAISE"
    "_DUST_PLAN_IS_ERROR\020\002", 3221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RaiseDustDataBean.proto", &protobuf_RegisterTypes);
  RaisuDustData::default_instance_ = new RaisuDustData();
  RaisuDustMassage::default_instance_ = new RaisuDustMassage();
  RaisuDustAlarmMessage::default_instance_ = new RaisuDustAlarmMessage();
  RaisuDustAlarmMessage_RaisuDustAlarm::default_instance_ = new RaisuDustAlarmMessage_RaisuDustAlarm();
  RaisuDustPlanData::default_instance_ = new RaisuDustPlanData();
  RaisuDustAlarmPlanMessage::default_instance_ = new RaisuDustAlarmPlanMessage();
  RaisuDustNoiseData::default_instance_ = new RaisuDustNoiseData();
  RaisuDustNoiseThreshold::default_instance_ = new RaisuDustNoiseThreshold();
  RaisuDustData::default_instance_->InitAsDefaultInstance();
  RaisuDustMassage::default_instance_->InitAsDefaultInstance();
  RaisuDustAlarmMessage::default_instance_->InitAsDefaultInstance();
  RaisuDustAlarmMessage_RaisuDustAlarm::default_instance_->InitAsDefaultInstance();
  RaisuDustPlanData::default_instance_->InitAsDefaultInstance();
  RaisuDustAlarmPlanMessage::default_instance_->InitAsDefaultInstance();
  RaisuDustNoiseData::default_instance_->InitAsDefaultInstance();
  RaisuDustNoiseThreshold::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RaiseDustDataBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RaiseDustDataBean_2eproto {
  StaticDescriptorInitializer_RaiseDustDataBean_2eproto() {
    protobuf_AddDesc_RaiseDustDataBean_2eproto();
  }
} static_descriptor_initializer_RaiseDustDataBean_2eproto_;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_RAISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_RAISE_DUST_descriptor_;
}
bool REQUEST_TYPE_OF_RAISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_RAISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_RAISE_DUST_descriptor_;
}
bool RESULT_TYPE_OF_RAISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_descriptor_;
}
bool THRESHOLD_TYPE_OF_ALARM_FOR_RAISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ALARM_TYPE_OF_ARISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALARM_TYPE_OF_ARISE_DUST_descriptor_;
}
bool ALARM_TYPE_OF_ARISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_;
}
bool REQUEST_TYPE_OF_PLAN_FOR_RAISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_descriptor_;
}
bool RESULT_TYPE_OF_PLAN_FOR_RAISE_DUST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustData::kDeviceCodeFieldNumber;
const int RaisuDustData::kIdFieldNumber;
const int RaisuDustData::kPostionFieldNumber;
const int RaisuDustData::kNoiseFieldNumber;
const int RaisuDustData::kPm10FieldNumber;
const int RaisuDustData::kWindSpeedFieldNumber;
const int RaisuDustData::kWindDirectionFieldNumber;
const int RaisuDustData::kTmperatureFieldNumber;
const int RaisuDustData::kHumidityFieldNumber;
const int RaisuDustData::kPressureFieldNumber;
const int RaisuDustData::kVoltageFieldNumber;
const int RaisuDustData::kPm25FieldNumber;
const int RaisuDustData::kLongitudeFieldNumber;
const int RaisuDustData::kLatituedeFieldNumber;
const int RaisuDustData::kTemperatureOnboardFieldNumber;
const int RaisuDustData::kHumidityOnboardFieldNumber;
const int RaisuDustData::kTspFieldNumber;
const int RaisuDustData::kTimeFieldNumber;
#endif  // !_MSC_VER

RaisuDustData::RaisuDustData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustData)
}

void RaisuDustData::InitAsDefaultInstance() {
}

RaisuDustData::RaisuDustData(const RaisuDustData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustData)
}

void RaisuDustData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noise_ = 0;
  pm10_ = 0;
  windspeed_ = 0;
  winddirection_ = 0;
  tmperature_ = 0;
  humidity_ = 0;
  pressure_ = 0;
  voltage_ = 0;
  pm2_5_ = 0;
  longitude_ = 0;
  latituede_ = 0;
  temperatureonboard_ = 0;
  humidityonboard_ = 0;
  tsp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustData::~RaisuDustData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustData)
  SharedDtor();
}

void RaisuDustData::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (postion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postion_;
  }
  if (this != default_instance_) {
  }
}

void RaisuDustData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustData_descriptor_;
}

const RaisuDustData& RaisuDustData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustData* RaisuDustData::default_instance_ = NULL;

RaisuDustData* RaisuDustData::New() const {
  return new RaisuDustData;
}

void RaisuDustData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaisuDustData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(noise_, tmperature_);
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_postion()) {
      if (postion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        postion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(humidity_, humidityonboard_);
  }
  ZR_(tsp_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_postion;
        break;
      }

      // optional string postion = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_postion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postion().data(), this->postion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "postion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_noise;
        break;
      }

      // optional float noise = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
          set_has_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pm10;
        break;
      }

      // optional float pm10 = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_pm10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm10_)));
          set_has_pm10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_windSpeed;
        break;
      }

      // optional float windSpeed = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_windSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windspeed_)));
          set_has_windspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_windDirection;
        break;
      }

      // optional float windDirection = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_windDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winddirection_)));
          set_has_winddirection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_tmperature;
        break;
      }

      // optional float tmperature = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_tmperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tmperature_)));
          set_has_tmperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_humidity;
        break;
      }

      // optional float humidity = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidity_)));
          set_has_humidity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pressure;
        break;
      }

      // optional float pressure = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_voltage;
        break;
      }

      // optional float voltage = 11 [default = 0];
      case 11: {
        if (tag == 93) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_pm2_5;
        break;
      }

      // optional float pm2_5 = 12 [default = 0];
      case 12: {
        if (tag == 101) {
         parse_pm2_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2_5_)));
          set_has_pm2_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_longitude;
        break;
      }

      // optional float longitude = 13 [default = 0];
      case 13: {
        if (tag == 109) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_latituede;
        break;
      }

      // optional float latituede = 14 [default = 0];
      case 14: {
        if (tag == 117) {
         parse_latituede:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latituede_)));
          set_has_latituede();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_temperatureOnboard;
        break;
      }

      // optional float temperatureOnboard = 15 [default = 0];
      case 15: {
        if (tag == 125) {
         parse_temperatureOnboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperatureonboard_)));
          set_has_temperatureonboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_humidityOnboard;
        break;
      }

      // optional float humidityOnboard = 16 [default = 0];
      case 16: {
        if (tag == 133) {
         parse_humidityOnboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidityonboard_)));
          set_has_humidityonboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_tsp;
        break;
      }

      // optional float tsp = 17 [default = 0];
      case 17: {
        if (tag == 141) {
         parse_tsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsp_)));
          set_has_tsp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_time;
        break;
      }

      // optional int64 time = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustData)
  return false;
#undef DO_
}

void RaisuDustData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustData)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional string id = 2 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string postion = 3 [default = ""];
  if (has_postion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postion().data(), this->postion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->postion(), output);
  }

  // optional float noise = 4 [default = 0];
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->noise(), output);
  }

  // optional float pm10 = 5 [default = 0];
  if (has_pm10()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pm10(), output);
  }

  // optional float windSpeed = 6 [default = 0];
  if (has_windspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->windspeed(), output);
  }

  // optional float windDirection = 7 [default = 0];
  if (has_winddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->winddirection(), output);
  }

  // optional float tmperature = 8 [default = 0];
  if (has_tmperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tmperature(), output);
  }

  // optional float humidity = 9 [default = 0];
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->humidity(), output);
  }

  // optional float pressure = 10 [default = 0];
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pressure(), output);
  }

  // optional float voltage = 11 [default = 0];
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->voltage(), output);
  }

  // optional float pm2_5 = 12 [default = 0];
  if (has_pm2_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pm2_5(), output);
  }

  // optional float longitude = 13 [default = 0];
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->longitude(), output);
  }

  // optional float latituede = 14 [default = 0];
  if (has_latituede()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->latituede(), output);
  }

  // optional float temperatureOnboard = 15 [default = 0];
  if (has_temperatureonboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->temperatureonboard(), output);
  }

  // optional float humidityOnboard = 16 [default = 0];
  if (has_humidityonboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->humidityonboard(), output);
  }

  // optional float tsp = 17 [default = 0];
  if (has_tsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tsp(), output);
  }

  // optional int64 time = 18 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustData)
}

::google::protobuf::uint8* RaisuDustData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustData)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional string id = 2 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string postion = 3 [default = ""];
  if (has_postion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postion().data(), this->postion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->postion(), target);
  }

  // optional float noise = 4 [default = 0];
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->noise(), target);
  }

  // optional float pm10 = 5 [default = 0];
  if (has_pm10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pm10(), target);
  }

  // optional float windSpeed = 6 [default = 0];
  if (has_windspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->windspeed(), target);
  }

  // optional float windDirection = 7 [default = 0];
  if (has_winddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->winddirection(), target);
  }

  // optional float tmperature = 8 [default = 0];
  if (has_tmperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tmperature(), target);
  }

  // optional float humidity = 9 [default = 0];
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->humidity(), target);
  }

  // optional float pressure = 10 [default = 0];
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pressure(), target);
  }

  // optional float voltage = 11 [default = 0];
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->voltage(), target);
  }

  // optional float pm2_5 = 12 [default = 0];
  if (has_pm2_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pm2_5(), target);
  }

  // optional float longitude = 13 [default = 0];
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->longitude(), target);
  }

  // optional float latituede = 14 [default = 0];
  if (has_latituede()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->latituede(), target);
  }

  // optional float temperatureOnboard = 15 [default = 0];
  if (has_temperatureonboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->temperatureonboard(), target);
  }

  // optional float humidityOnboard = 16 [default = 0];
  if (has_humidityonboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->humidityonboard(), target);
  }

  // optional float tsp = 17 [default = 0];
  if (has_tsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tsp(), target);
  }

  // optional int64 time = 18 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustData)
  return target;
}

int RaisuDustData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceCode = 1 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional string id = 2 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string postion = 3 [default = ""];
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postion());
    }

    // optional float noise = 4 [default = 0];
    if (has_noise()) {
      total_size += 1 + 4;
    }

    // optional float pm10 = 5 [default = 0];
    if (has_pm10()) {
      total_size += 1 + 4;
    }

    // optional float windSpeed = 6 [default = 0];
    if (has_windspeed()) {
      total_size += 1 + 4;
    }

    // optional float windDirection = 7 [default = 0];
    if (has_winddirection()) {
      total_size += 1 + 4;
    }

    // optional float tmperature = 8 [default = 0];
    if (has_tmperature()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float humidity = 9 [default = 0];
    if (has_humidity()) {
      total_size += 1 + 4;
    }

    // optional float pressure = 10 [default = 0];
    if (has_pressure()) {
      total_size += 1 + 4;
    }

    // optional float voltage = 11 [default = 0];
    if (has_voltage()) {
      total_size += 1 + 4;
    }

    // optional float pm2_5 = 12 [default = 0];
    if (has_pm2_5()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 13 [default = 0];
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latituede = 14 [default = 0];
    if (has_latituede()) {
      total_size += 1 + 4;
    }

    // optional float temperatureOnboard = 15 [default = 0];
    if (has_temperatureonboard()) {
      total_size += 1 + 4;
    }

    // optional float humidityOnboard = 16 [default = 0];
    if (has_humidityonboard()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float tsp = 17 [default = 0];
    if (has_tsp()) {
      total_size += 2 + 4;
    }

    // optional int64 time = 18 [default = 0];
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustData::MergeFrom(const RaisuDustData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_noise()) {
      set_noise(from.noise());
    }
    if (from.has_pm10()) {
      set_pm10(from.pm10());
    }
    if (from.has_windspeed()) {
      set_windspeed(from.windspeed());
    }
    if (from.has_winddirection()) {
      set_winddirection(from.winddirection());
    }
    if (from.has_tmperature()) {
      set_tmperature(from.tmperature());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_humidity()) {
      set_humidity(from.humidity());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_pm2_5()) {
      set_pm2_5(from.pm2_5());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latituede()) {
      set_latituede(from.latituede());
    }
    if (from.has_temperatureonboard()) {
      set_temperatureonboard(from.temperatureonboard());
    }
    if (from.has_humidityonboard()) {
      set_humidityonboard(from.humidityonboard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tsp()) {
      set_tsp(from.tsp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustData::CopyFrom(const RaisuDustData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustData::IsInitialized() const {

  return true;
}

void RaisuDustData::Swap(RaisuDustData* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(id_, other->id_);
    std::swap(postion_, other->postion_);
    std::swap(noise_, other->noise_);
    std::swap(pm10_, other->pm10_);
    std::swap(windspeed_, other->windspeed_);
    std::swap(winddirection_, other->winddirection_);
    std::swap(tmperature_, other->tmperature_);
    std::swap(humidity_, other->humidity_);
    std::swap(pressure_, other->pressure_);
    std::swap(voltage_, other->voltage_);
    std::swap(pm2_5_, other->pm2_5_);
    std::swap(longitude_, other->longitude_);
    std::swap(latituede_, other->latituede_);
    std::swap(temperatureonboard_, other->temperatureonboard_);
    std::swap(humidityonboard_, other->humidityonboard_);
    std::swap(tsp_, other->tsp_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustData_descriptor_;
  metadata.reflection = RaisuDustData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustMassage::kRequestTypeFieldNumber;
const int RaisuDustMassage::kResultFieldNumber;
const int RaisuDustMassage::kResultDescribeFieldNumber;
const int RaisuDustMassage::kDataFieldNumber;
const int RaisuDustMassage::kDevInfoFieldNumber;
#endif  // !_MSC_VER

RaisuDustMassage::RaisuDustMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustMassage)
}

void RaisuDustMassage::InitAsDefaultInstance() {
  data_ = const_cast< ::com::arges::file::proto::RaisuDustData*>(&::com::arges::file::proto::RaisuDustData::default_instance());
  devinfo_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

RaisuDustMassage::RaisuDustMassage(const RaisuDustMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustMassage)
}

void RaisuDustMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  devinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustMassage::~RaisuDustMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustMassage)
  SharedDtor();
}

void RaisuDustMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
    delete data_;
    delete devinfo_;
  }
}

void RaisuDustMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustMassage_descriptor_;
}

const RaisuDustMassage& RaisuDustMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustMassage* RaisuDustMassage::default_instance_ = NULL;

RaisuDustMassage* RaisuDustMassage::New() const {
  return new RaisuDustMassage;
}

void RaisuDustMassage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::com::arges::file::proto::RaisuDustData::Clear();
    }
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional string resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultdescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultdescribe().data(), this->resultdescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultdescribe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .com.arges.file.proto.RaisuDustData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devInfo;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustMassage)
  return false;
#undef DO_
}

void RaisuDustMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescribe().data(), this->resultdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescribe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // optional .com.arges.file.proto.RaisuDustData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 5;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->devinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustMassage)
}

::google::protobuf::uint8* RaisuDustMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescribe().data(), this->resultdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescribe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resultdescribe(), target);
  }

  // optional .com.arges.file.proto.RaisuDustData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 5;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->devinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustMassage)
  return target;
}

int RaisuDustMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultdescribe());
    }

    // optional .com.arges.file.proto.RaisuDustData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .com.arges.file.proto.DeviceInfo devInfo = 5;
    if (has_devinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustMassage::MergeFrom(const RaisuDustMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_data()) {
      mutable_data()->::com::arges::file::proto::RaisuDustData::MergeFrom(from.data());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustMassage::CopyFrom(const RaisuDustMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustMassage::IsInitialized() const {

  return true;
}

void RaisuDustMassage::Swap(RaisuDustMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(data_, other->data_);
    std::swap(devinfo_, other->devinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustMassage_descriptor_;
  metadata.reflection = RaisuDustMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustAlarmMessage_RaisuDustAlarm::kAlarmCapFieldNumber;
const int RaisuDustAlarmMessage_RaisuDustAlarm::kAlarmNumFieldNumber;
const int RaisuDustAlarmMessage_RaisuDustAlarm::kAlarmTypeFieldNumber;
const int RaisuDustAlarmMessage_RaisuDustAlarm::kStandardNumFieldNumber;
#endif  // !_MSC_VER

RaisuDustAlarmMessage_RaisuDustAlarm::RaisuDustAlarmMessage_RaisuDustAlarm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
}

void RaisuDustAlarmMessage_RaisuDustAlarm::InitAsDefaultInstance() {
}

RaisuDustAlarmMessage_RaisuDustAlarm::RaisuDustAlarmMessage_RaisuDustAlarm(const RaisuDustAlarmMessage_RaisuDustAlarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
}

void RaisuDustAlarmMessage_RaisuDustAlarm::SharedCtor() {
  _cached_size_ = 0;
  alarmcap_ = -1;
  alarmnum_ = -1;
  alarmtype_ = -1;
  standardnum_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustAlarmMessage_RaisuDustAlarm::~RaisuDustAlarmMessage_RaisuDustAlarm() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  SharedDtor();
}

void RaisuDustAlarmMessage_RaisuDustAlarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaisuDustAlarmMessage_RaisuDustAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustAlarmMessage_RaisuDustAlarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_;
}

const RaisuDustAlarmMessage_RaisuDustAlarm& RaisuDustAlarmMessage_RaisuDustAlarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustAlarmMessage_RaisuDustAlarm* RaisuDustAlarmMessage_RaisuDustAlarm::default_instance_ = NULL;

RaisuDustAlarmMessage_RaisuDustAlarm* RaisuDustAlarmMessage_RaisuDustAlarm::New() const {
  return new RaisuDustAlarmMessage_RaisuDustAlarm;
}

void RaisuDustAlarmMessage_RaisuDustAlarm::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    alarmcap_ = -1;
    alarmnum_ = -1;
    alarmtype_ = -1;
    standardnum_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustAlarmMessage_RaisuDustAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 alarmCap = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmcap_)));
          set_has_alarmcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alarmNum;
        break;
      }

      // optional float alarmNum = 2 [default = -1];
      case 2: {
        if (tag == 21) {
         parse_alarmNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmnum_)));
          set_has_alarmnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarmType;
        break;
      }

      // optional int32 alarmType = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_alarmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_standardNum;
        break;
      }

      // optional float standardNum = 4 [default = -1];
      case 4: {
        if (tag == 37) {
         parse_standardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &standardnum_)));
          set_has_standardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  return false;
#undef DO_
}

void RaisuDustAlarmMessage_RaisuDustAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  // optional int32 alarmCap = 1 [default = -1];
  if (has_alarmcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alarmcap(), output);
  }

  // optional float alarmNum = 2 [default = -1];
  if (has_alarmnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alarmnum(), output);
  }

  // optional int32 alarmType = 3 [default = -1];
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alarmtype(), output);
  }

  // optional float standardNum = 4 [default = -1];
  if (has_standardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->standardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
}

::google::protobuf::uint8* RaisuDustAlarmMessage_RaisuDustAlarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  // optional int32 alarmCap = 1 [default = -1];
  if (has_alarmcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alarmcap(), target);
  }

  // optional float alarmNum = 2 [default = -1];
  if (has_alarmnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alarmnum(), target);
  }

  // optional int32 alarmType = 3 [default = -1];
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alarmtype(), target);
  }

  // optional float standardNum = 4 [default = -1];
  if (has_standardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->standardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm)
  return target;
}

int RaisuDustAlarmMessage_RaisuDustAlarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 alarmCap = 1 [default = -1];
    if (has_alarmcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmcap());
    }

    // optional float alarmNum = 2 [default = -1];
    if (has_alarmnum()) {
      total_size += 1 + 4;
    }

    // optional int32 alarmType = 3 [default = -1];
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmtype());
    }

    // optional float standardNum = 4 [default = -1];
    if (has_standardnum()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustAlarmMessage_RaisuDustAlarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustAlarmMessage_RaisuDustAlarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustAlarmMessage_RaisuDustAlarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustAlarmMessage_RaisuDustAlarm::MergeFrom(const RaisuDustAlarmMessage_RaisuDustAlarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmcap()) {
      set_alarmcap(from.alarmcap());
    }
    if (from.has_alarmnum()) {
      set_alarmnum(from.alarmnum());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_standardnum()) {
      set_standardnum(from.standardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustAlarmMessage_RaisuDustAlarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustAlarmMessage_RaisuDustAlarm::CopyFrom(const RaisuDustAlarmMessage_RaisuDustAlarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustAlarmMessage_RaisuDustAlarm::IsInitialized() const {

  return true;
}

void RaisuDustAlarmMessage_RaisuDustAlarm::Swap(RaisuDustAlarmMessage_RaisuDustAlarm* other) {
  if (other != this) {
    std::swap(alarmcap_, other->alarmcap_);
    std::swap(alarmnum_, other->alarmnum_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(standardnum_, other->standardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustAlarmMessage_RaisuDustAlarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustAlarmMessage_RaisuDustAlarm_descriptor_;
  metadata.reflection = RaisuDustAlarmMessage_RaisuDustAlarm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RaisuDustAlarmMessage::kSnFieldNumber;
const int RaisuDustAlarmMessage::kTimeFieldNumber;
const int RaisuDustAlarmMessage::kCodeFieldNumber;
const int RaisuDustAlarmMessage::kRaiseAlarmsFieldNumber;
#endif  // !_MSC_VER

RaisuDustAlarmMessage::RaisuDustAlarmMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustAlarmMessage)
}

void RaisuDustAlarmMessage::InitAsDefaultInstance() {
}

RaisuDustAlarmMessage::RaisuDustAlarmMessage(const RaisuDustAlarmMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustAlarmMessage)
}

void RaisuDustAlarmMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(-1);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustAlarmMessage::~RaisuDustAlarmMessage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustAlarmMessage)
  SharedDtor();
}

void RaisuDustAlarmMessage::SharedDtor() {
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void RaisuDustAlarmMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustAlarmMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustAlarmMessage_descriptor_;
}

const RaisuDustAlarmMessage& RaisuDustAlarmMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustAlarmMessage* RaisuDustAlarmMessage::default_instance_ = NULL;

RaisuDustAlarmMessage* RaisuDustAlarmMessage::New() const {
  return new RaisuDustAlarmMessage;
}

void RaisuDustAlarmMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(-1);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  raisealarms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustAlarmMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustAlarmMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sn = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_raiseAlarms;
        break;
      }

      // repeated .com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm raiseAlarms = 4;
      case 4: {
        if (tag == 34) {
         parse_raiseAlarms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raisealarms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_raiseAlarms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustAlarmMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustAlarmMessage)
  return false;
#undef DO_
}

void RaisuDustAlarmMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustAlarmMessage)
  // optional string sn = 1 [default = ""];
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // optional int64 time = 2 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional string code = 3 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // repeated .com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm raiseAlarms = 4;
  for (int i = 0; i < this->raisealarms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->raisealarms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustAlarmMessage)
}

::google::protobuf::uint8* RaisuDustAlarmMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustAlarmMessage)
  // optional string sn = 1 [default = ""];
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // optional int64 time = 2 [default = -1];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional string code = 3 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // repeated .com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm raiseAlarms = 4;
  for (int i = 0; i < this->raisealarms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->raisealarms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustAlarmMessage)
  return target;
}

int RaisuDustAlarmMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sn = 1 [default = ""];
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // optional int64 time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string code = 3 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  // repeated .com.arges.file.proto.RaisuDustAlarmMessage.RaisuDustAlarm raiseAlarms = 4;
  total_size += 1 * this->raisealarms_size();
  for (int i = 0; i < this->raisealarms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raisealarms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustAlarmMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustAlarmMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustAlarmMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustAlarmMessage::MergeFrom(const RaisuDustAlarmMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  raisealarms_.MergeFrom(from.raisealarms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustAlarmMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustAlarmMessage::CopyFrom(const RaisuDustAlarmMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustAlarmMessage::IsInitialized() const {

  return true;
}

void RaisuDustAlarmMessage::Swap(RaisuDustAlarmMessage* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(time_, other->time_);
    std::swap(code_, other->code_);
    raisealarms_.Swap(&other->raisealarms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustAlarmMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustAlarmMessage_descriptor_;
  metadata.reflection = RaisuDustAlarmMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustPlanData::kIdFieldNumber;
const int RaisuDustPlanData::kCodeFieldNumber;
const int RaisuDustPlanData::kSnFieldNumber;
const int RaisuDustPlanData::kHumidityHighFieldNumber;
const int RaisuDustPlanData::kHumidityLowerFieldNumber;
const int RaisuDustPlanData::kNoiseHighFieldNumber;
const int RaisuDustPlanData::kNoiseLowerFieldNumber;
const int RaisuDustPlanData::kPm10HighFieldNumber;
const int RaisuDustPlanData::kPm10LowerFieldNumber;
const int RaisuDustPlanData::kPm25HighFieldNumber;
const int RaisuDustPlanData::kPm25LowerFieldNumber;
const int RaisuDustPlanData::kPressureHighFieldNumber;
const int RaisuDustPlanData::kPressureLowerFieldNumber;
const int RaisuDustPlanData::kTmperatureHighFieldNumber;
const int RaisuDustPlanData::kTmperatureLowerFieldNumber;
const int RaisuDustPlanData::kTspHighFieldNumber;
const int RaisuDustPlanData::kTspLowerFieldNumber;
const int RaisuDustPlanData::kVoltageHighFieldNumber;
const int RaisuDustPlanData::kVoltageLowerFieldNumber;
const int RaisuDustPlanData::kWindDirectionHighFieldNumber;
const int RaisuDustPlanData::kWindDirectionLowerFieldNumber;
const int RaisuDustPlanData::kWindSpeedHighFieldNumber;
const int RaisuDustPlanData::kWindSpeedLowerFieldNumber;
const int RaisuDustPlanData::kDevInfoFieldNumber;
const int RaisuDustPlanData::kKeepTimeFieldNumber;
#endif  // !_MSC_VER

RaisuDustPlanData::RaisuDustPlanData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustPlanData)
}

void RaisuDustPlanData::InitAsDefaultInstance() {
  devinfo_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

RaisuDustPlanData::RaisuDustPlanData(const RaisuDustPlanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustPlanData)
}

void RaisuDustPlanData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidityhigh_ = 100000;
  humiditylower_ = 100000;
  noisehigh_ = 100000;
  noiselower_ = 100000;
  pm10high_ = 100000;
  pm10lower_ = 100000;
  pm2_5_high_ = 100000;
  pm2_5_lower_ = 100000;
  pressurehigh_ = 100000;
  pressurelower_ = 100000;
  tmperaturehigh_ = 100000;
  tmperaturelower_ = 100000;
  tsphigh_ = 100000;
  tsplower_ = 100000;
  voltagehigh_ = 100000;
  voltagelower_ = 100000;
  winddirectionhigh_ = 100000;
  winddirectionlower_ = 100000;
  windspeedhigh_ = 100000;
  windspeedlower_ = 100000;
  devinfo_ = NULL;
  keeptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustPlanData::~RaisuDustPlanData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustPlanData)
  SharedDtor();
}

void RaisuDustPlanData::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
    delete devinfo_;
  }
}

void RaisuDustPlanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustPlanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustPlanData_descriptor_;
}

const RaisuDustPlanData& RaisuDustPlanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustPlanData* RaisuDustPlanData::default_instance_ = NULL;

RaisuDustPlanData* RaisuDustPlanData::New() const {
  return new RaisuDustPlanData;
}

void RaisuDustPlanData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = GOOGLE_LONGLONG(-1);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
    humidityhigh_ = 100000;
    humiditylower_ = 100000;
    noisehigh_ = 100000;
    noiselower_ = 100000;
    pm10high_ = 100000;
  }
  if (_has_bits_[8 / 32] & 65280) {
    pm10lower_ = 100000;
    pm2_5_high_ = 100000;
    pm2_5_lower_ = 100000;
    pressurehigh_ = 100000;
    pressurelower_ = 100000;
    tmperaturehigh_ = 100000;
    tmperaturelower_ = 100000;
    tsphigh_ = 100000;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    tsplower_ = 100000;
    voltagehigh_ = 100000;
    voltagelower_ = 100000;
    winddirectionhigh_ = 100000;
    winddirectionlower_ = 100000;
    windspeedhigh_ = 100000;
    windspeedlower_ = 100000;
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  keeptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustPlanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustPlanData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sn;
        break;
      }

      // optional string sn = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_humidityHigh;
        break;
      }

      // optional float humidityHigh = 4 [default = 100000];
      case 4: {
        if (tag == 37) {
         parse_humidityHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidityhigh_)));
          set_has_humidityhigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_humidityLower;
        break;
      }

      // optional float humidityLower = 5 [default = 100000];
      case 5: {
        if (tag == 45) {
         parse_humidityLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humiditylower_)));
          set_has_humiditylower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_noiseHigh;
        break;
      }

      // optional float noiseHigh = 6 [default = 100000];
      case 6: {
        if (tag == 53) {
         parse_noiseHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noisehigh_)));
          set_has_noisehigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_noiseLower;
        break;
      }

      // optional float noiseLower = 7 [default = 100000];
      case 7: {
        if (tag == 61) {
         parse_noiseLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noiselower_)));
          set_has_noiselower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_pm10High;
        break;
      }

      // optional float pm10High = 8 [default = 100000];
      case 8: {
        if (tag == 69) {
         parse_pm10High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm10high_)));
          set_has_pm10high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pm10Lower;
        break;
      }

      // optional float pm10Lower = 9 [default = 100000];
      case 9: {
        if (tag == 77) {
         parse_pm10Lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm10lower_)));
          set_has_pm10lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pm2_5_high;
        break;
      }

      // optional float pm2_5_high = 10 [default = 100000];
      case 10: {
        if (tag == 85) {
         parse_pm2_5_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2_5_high_)));
          set_has_pm2_5_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_pm2_5_lower;
        break;
      }

      // optional float pm2_5_lower = 11 [default = 100000];
      case 11: {
        if (tag == 93) {
         parse_pm2_5_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2_5_lower_)));
          set_has_pm2_5_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_pressureHigh;
        break;
      }

      // optional float pressureHigh = 12 [default = 100000];
      case 12: {
        if (tag == 101) {
         parse_pressureHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressurehigh_)));
          set_has_pressurehigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_pressureLower;
        break;
      }

      // optional float pressureLower = 13 [default = 100000];
      case 13: {
        if (tag == 109) {
         parse_pressureLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressurelower_)));
          set_has_pressurelower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_tmperatureHigh;
        break;
      }

      // optional float tmperatureHigh = 14 [default = 100000];
      case 14: {
        if (tag == 117) {
         parse_tmperatureHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tmperaturehigh_)));
          set_has_tmperaturehigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_tmperatureLower;
        break;
      }

      // optional float tmperatureLower = 15 [default = 100000];
      case 15: {
        if (tag == 125) {
         parse_tmperatureLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tmperaturelower_)));
          set_has_tmperaturelower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_tspHigh;
        break;
      }

      // optional float tspHigh = 16 [default = 100000];
      case 16: {
        if (tag == 133) {
         parse_tspHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsphigh_)));
          set_has_tsphigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_tspLower;
        break;
      }

      // optional float tspLower = 17 [default = 100000];
      case 17: {
        if (tag == 141) {
         parse_tspLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsplower_)));
          set_has_tsplower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_voltageHigh;
        break;
      }

      // optional float voltageHigh = 18 [default = 100000];
      case 18: {
        if (tag == 149) {
         parse_voltageHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltagehigh_)));
          set_has_voltagehigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_voltageLower;
        break;
      }

      // optional float voltageLower = 19 [default = 100000];
      case 19: {
        if (tag == 157) {
         parse_voltageLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltagelower_)));
          set_has_voltagelower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_windDirectionHigh;
        break;
      }

      // optional float windDirectionHigh = 20 [default = 100000];
      case 20: {
        if (tag == 165) {
         parse_windDirectionHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winddirectionhigh_)));
          set_has_winddirectionhigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_windDirectionLower;
        break;
      }

      // optional float windDirectionLower = 21 [default = 100000];
      case 21: {
        if (tag == 173) {
         parse_windDirectionLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winddirectionlower_)));
          set_has_winddirectionlower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_windSpeedHigh;
        break;
      }

      // optional float windSpeedHigh = 22 [default = 100000];
      case 22: {
        if (tag == 181) {
         parse_windSpeedHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windspeedhigh_)));
          set_has_windspeedhigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_windSpeedLower;
        break;
      }

      // optional float windSpeedLower = 23 [default = 100000];
      case 23: {
        if (tag == 189) {
         parse_windSpeedLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windspeedlower_)));
          set_has_windspeedlower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_devInfo;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devInfo = 24;
      case 24: {
        if (tag == 194) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_keepTime;
        break;
      }

      // optional int32 keepTime = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_keepTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keeptime_)));
          set_has_keeptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustPlanData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustPlanData)
  return false;
#undef DO_
}

void RaisuDustPlanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustPlanData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string code = 2 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string sn = 3 [default = ""];
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sn(), output);
  }

  // optional float humidityHigh = 4 [default = 100000];
  if (has_humidityhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->humidityhigh(), output);
  }

  // optional float humidityLower = 5 [default = 100000];
  if (has_humiditylower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->humiditylower(), output);
  }

  // optional float noiseHigh = 6 [default = 100000];
  if (has_noisehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->noisehigh(), output);
  }

  // optional float noiseLower = 7 [default = 100000];
  if (has_noiselower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->noiselower(), output);
  }

  // optional float pm10High = 8 [default = 100000];
  if (has_pm10high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pm10high(), output);
  }

  // optional float pm10Lower = 9 [default = 100000];
  if (has_pm10lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pm10lower(), output);
  }

  // optional float pm2_5_high = 10 [default = 100000];
  if (has_pm2_5_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pm2_5_high(), output);
  }

  // optional float pm2_5_lower = 11 [default = 100000];
  if (has_pm2_5_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pm2_5_lower(), output);
  }

  // optional float pressureHigh = 12 [default = 100000];
  if (has_pressurehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pressurehigh(), output);
  }

  // optional float pressureLower = 13 [default = 100000];
  if (has_pressurelower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pressurelower(), output);
  }

  // optional float tmperatureHigh = 14 [default = 100000];
  if (has_tmperaturehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tmperaturehigh(), output);
  }

  // optional float tmperatureLower = 15 [default = 100000];
  if (has_tmperaturelower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tmperaturelower(), output);
  }

  // optional float tspHigh = 16 [default = 100000];
  if (has_tsphigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tsphigh(), output);
  }

  // optional float tspLower = 17 [default = 100000];
  if (has_tsplower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tsplower(), output);
  }

  // optional float voltageHigh = 18 [default = 100000];
  if (has_voltagehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->voltagehigh(), output);
  }

  // optional float voltageLower = 19 [default = 100000];
  if (has_voltagelower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->voltagelower(), output);
  }

  // optional float windDirectionHigh = 20 [default = 100000];
  if (has_winddirectionhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->winddirectionhigh(), output);
  }

  // optional float windDirectionLower = 21 [default = 100000];
  if (has_winddirectionlower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->winddirectionlower(), output);
  }

  // optional float windSpeedHigh = 22 [default = 100000];
  if (has_windspeedhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->windspeedhigh(), output);
  }

  // optional float windSpeedLower = 23 [default = 100000];
  if (has_windspeedlower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->windspeedlower(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 24;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->devinfo(), output);
  }

  // optional int32 keepTime = 25 [default = 0];
  if (has_keeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->keeptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustPlanData)
}

::google::protobuf::uint8* RaisuDustPlanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustPlanData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string code = 2 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string sn = 3 [default = ""];
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sn(), target);
  }

  // optional float humidityHigh = 4 [default = 100000];
  if (has_humidityhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->humidityhigh(), target);
  }

  // optional float humidityLower = 5 [default = 100000];
  if (has_humiditylower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->humiditylower(), target);
  }

  // optional float noiseHigh = 6 [default = 100000];
  if (has_noisehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->noisehigh(), target);
  }

  // optional float noiseLower = 7 [default = 100000];
  if (has_noiselower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->noiselower(), target);
  }

  // optional float pm10High = 8 [default = 100000];
  if (has_pm10high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pm10high(), target);
  }

  // optional float pm10Lower = 9 [default = 100000];
  if (has_pm10lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pm10lower(), target);
  }

  // optional float pm2_5_high = 10 [default = 100000];
  if (has_pm2_5_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pm2_5_high(), target);
  }

  // optional float pm2_5_lower = 11 [default = 100000];
  if (has_pm2_5_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pm2_5_lower(), target);
  }

  // optional float pressureHigh = 12 [default = 100000];
  if (has_pressurehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pressurehigh(), target);
  }

  // optional float pressureLower = 13 [default = 100000];
  if (has_pressurelower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pressurelower(), target);
  }

  // optional float tmperatureHigh = 14 [default = 100000];
  if (has_tmperaturehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tmperaturehigh(), target);
  }

  // optional float tmperatureLower = 15 [default = 100000];
  if (has_tmperaturelower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->tmperaturelower(), target);
  }

  // optional float tspHigh = 16 [default = 100000];
  if (has_tsphigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tsphigh(), target);
  }

  // optional float tspLower = 17 [default = 100000];
  if (has_tsplower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tsplower(), target);
  }

  // optional float voltageHigh = 18 [default = 100000];
  if (has_voltagehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->voltagehigh(), target);
  }

  // optional float voltageLower = 19 [default = 100000];
  if (has_voltagelower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->voltagelower(), target);
  }

  // optional float windDirectionHigh = 20 [default = 100000];
  if (has_winddirectionhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->winddirectionhigh(), target);
  }

  // optional float windDirectionLower = 21 [default = 100000];
  if (has_winddirectionlower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->winddirectionlower(), target);
  }

  // optional float windSpeedHigh = 22 [default = 100000];
  if (has_windspeedhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->windspeedhigh(), target);
  }

  // optional float windSpeedLower = 23 [default = 100000];
  if (has_windspeedlower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->windspeedlower(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 24;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->devinfo(), target);
  }

  // optional int32 keepTime = 25 [default = 0];
  if (has_keeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->keeptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustPlanData)
  return target;
}

int RaisuDustPlanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string code = 2 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string sn = 3 [default = ""];
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // optional float humidityHigh = 4 [default = 100000];
    if (has_humidityhigh()) {
      total_size += 1 + 4;
    }

    // optional float humidityLower = 5 [default = 100000];
    if (has_humiditylower()) {
      total_size += 1 + 4;
    }

    // optional float noiseHigh = 6 [default = 100000];
    if (has_noisehigh()) {
      total_size += 1 + 4;
    }

    // optional float noiseLower = 7 [default = 100000];
    if (has_noiselower()) {
      total_size += 1 + 4;
    }

    // optional float pm10High = 8 [default = 100000];
    if (has_pm10high()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pm10Lower = 9 [default = 100000];
    if (has_pm10lower()) {
      total_size += 1 + 4;
    }

    // optional float pm2_5_high = 10 [default = 100000];
    if (has_pm2_5_high()) {
      total_size += 1 + 4;
    }

    // optional float pm2_5_lower = 11 [default = 100000];
    if (has_pm2_5_lower()) {
      total_size += 1 + 4;
    }

    // optional float pressureHigh = 12 [default = 100000];
    if (has_pressurehigh()) {
      total_size += 1 + 4;
    }

    // optional float pressureLower = 13 [default = 100000];
    if (has_pressurelower()) {
      total_size += 1 + 4;
    }

    // optional float tmperatureHigh = 14 [default = 100000];
    if (has_tmperaturehigh()) {
      total_size += 1 + 4;
    }

    // optional float tmperatureLower = 15 [default = 100000];
    if (has_tmperaturelower()) {
      total_size += 1 + 4;
    }

    // optional float tspHigh = 16 [default = 100000];
    if (has_tsphigh()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float tspLower = 17 [default = 100000];
    if (has_tsplower()) {
      total_size += 2 + 4;
    }

    // optional float voltageHigh = 18 [default = 100000];
    if (has_voltagehigh()) {
      total_size += 2 + 4;
    }

    // optional float voltageLower = 19 [default = 100000];
    if (has_voltagelower()) {
      total_size += 2 + 4;
    }

    // optional float windDirectionHigh = 20 [default = 100000];
    if (has_winddirectionhigh()) {
      total_size += 2 + 4;
    }

    // optional float windDirectionLower = 21 [default = 100000];
    if (has_winddirectionlower()) {
      total_size += 2 + 4;
    }

    // optional float windSpeedHigh = 22 [default = 100000];
    if (has_windspeedhigh()) {
      total_size += 2 + 4;
    }

    // optional float windSpeedLower = 23 [default = 100000];
    if (has_windspeedlower()) {
      total_size += 2 + 4;
    }

    // optional .com.arges.file.proto.DeviceInfo devInfo = 24;
    if (has_devinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 keepTime = 25 [default = 0];
    if (has_keeptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keeptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustPlanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustPlanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustPlanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustPlanData::MergeFrom(const RaisuDustPlanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_humidityhigh()) {
      set_humidityhigh(from.humidityhigh());
    }
    if (from.has_humiditylower()) {
      set_humiditylower(from.humiditylower());
    }
    if (from.has_noisehigh()) {
      set_noisehigh(from.noisehigh());
    }
    if (from.has_noiselower()) {
      set_noiselower(from.noiselower());
    }
    if (from.has_pm10high()) {
      set_pm10high(from.pm10high());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pm10lower()) {
      set_pm10lower(from.pm10lower());
    }
    if (from.has_pm2_5_high()) {
      set_pm2_5_high(from.pm2_5_high());
    }
    if (from.has_pm2_5_lower()) {
      set_pm2_5_lower(from.pm2_5_lower());
    }
    if (from.has_pressurehigh()) {
      set_pressurehigh(from.pressurehigh());
    }
    if (from.has_pressurelower()) {
      set_pressurelower(from.pressurelower());
    }
    if (from.has_tmperaturehigh()) {
      set_tmperaturehigh(from.tmperaturehigh());
    }
    if (from.has_tmperaturelower()) {
      set_tmperaturelower(from.tmperaturelower());
    }
    if (from.has_tsphigh()) {
      set_tsphigh(from.tsphigh());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tsplower()) {
      set_tsplower(from.tsplower());
    }
    if (from.has_voltagehigh()) {
      set_voltagehigh(from.voltagehigh());
    }
    if (from.has_voltagelower()) {
      set_voltagelower(from.voltagelower());
    }
    if (from.has_winddirectionhigh()) {
      set_winddirectionhigh(from.winddirectionhigh());
    }
    if (from.has_winddirectionlower()) {
      set_winddirectionlower(from.winddirectionlower());
    }
    if (from.has_windspeedhigh()) {
      set_windspeedhigh(from.windspeedhigh());
    }
    if (from.has_windspeedlower()) {
      set_windspeedlower(from.windspeedlower());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_keeptime()) {
      set_keeptime(from.keeptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustPlanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustPlanData::CopyFrom(const RaisuDustPlanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustPlanData::IsInitialized() const {

  return true;
}

void RaisuDustPlanData::Swap(RaisuDustPlanData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(sn_, other->sn_);
    std::swap(humidityhigh_, other->humidityhigh_);
    std::swap(humiditylower_, other->humiditylower_);
    std::swap(noisehigh_, other->noisehigh_);
    std::swap(noiselower_, other->noiselower_);
    std::swap(pm10high_, other->pm10high_);
    std::swap(pm10lower_, other->pm10lower_);
    std::swap(pm2_5_high_, other->pm2_5_high_);
    std::swap(pm2_5_lower_, other->pm2_5_lower_);
    std::swap(pressurehigh_, other->pressurehigh_);
    std::swap(pressurelower_, other->pressurelower_);
    std::swap(tmperaturehigh_, other->tmperaturehigh_);
    std::swap(tmperaturelower_, other->tmperaturelower_);
    std::swap(tsphigh_, other->tsphigh_);
    std::swap(tsplower_, other->tsplower_);
    std::swap(voltagehigh_, other->voltagehigh_);
    std::swap(voltagelower_, other->voltagelower_);
    std::swap(winddirectionhigh_, other->winddirectionhigh_);
    std::swap(winddirectionlower_, other->winddirectionlower_);
    std::swap(windspeedhigh_, other->windspeedhigh_);
    std::swap(windspeedlower_, other->windspeedlower_);
    std::swap(devinfo_, other->devinfo_);
    std::swap(keeptime_, other->keeptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustPlanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustPlanData_descriptor_;
  metadata.reflection = RaisuDustPlanData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustAlarmPlanMessage::kRequestTypeFieldNumber;
const int RaisuDustAlarmPlanMessage::kResultFieldNumber;
const int RaisuDustAlarmPlanMessage::kResultDescribeFieldNumber;
const int RaisuDustAlarmPlanMessage::kDatasFieldNumber;
const int RaisuDustAlarmPlanMessage::kBoxCodeFieldNumber;
const int RaisuDustAlarmPlanMessage::kDevCodeFieldNumber;
#endif  // !_MSC_VER

RaisuDustAlarmPlanMessage::RaisuDustAlarmPlanMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustAlarmPlanMessage)
}

void RaisuDustAlarmPlanMessage::InitAsDefaultInstance() {
}

RaisuDustAlarmPlanMessage::RaisuDustAlarmPlanMessage(const RaisuDustAlarmPlanMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustAlarmPlanMessage)
}

void RaisuDustAlarmPlanMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustAlarmPlanMessage::~RaisuDustAlarmPlanMessage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  SharedDtor();
}

void RaisuDustAlarmPlanMessage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxcode_;
  }
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (this != default_instance_) {
  }
}

void RaisuDustAlarmPlanMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustAlarmPlanMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustAlarmPlanMessage_descriptor_;
}

const RaisuDustAlarmPlanMessage& RaisuDustAlarmPlanMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustAlarmPlanMessage* RaisuDustAlarmPlanMessage::default_instance_ = NULL;

RaisuDustAlarmPlanMessage* RaisuDustAlarmPlanMessage::New() const {
  return new RaisuDustAlarmPlanMessage;
}

void RaisuDustAlarmPlanMessage::Clear() {
  if (_has_bits_[0 / 32] & 55) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_boxcode()) {
      if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxcode_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustAlarmPlanMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectTag(42)) goto parse_boxCode;
        break;
      }

      // optional string boxCode = 5;
      case 5: {
        if (tag == 42) {
         parse_boxCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxcode().data(), this->boxcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_devCode;
        break;
      }

      // optional string devCode = 6;
      case 6: {
        if (tag == 50) {
         parse_devCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  return false;
#undef DO_
}

void RaisuDustAlarmPlanMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  // optional string boxCode = 5;
  if (has_boxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxcode().data(), this->boxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->boxcode(), output);
  }

  // optional string devCode = 6;
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->devcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustAlarmPlanMessage)
}

::google::protobuf::uint8* RaisuDustAlarmPlanMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  // optional string boxCode = 5;
  if (has_boxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxcode().data(), this->boxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->boxcode(), target);
  }

  // optional string devCode = 6;
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->devcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustAlarmPlanMessage)
  return target;
}

int RaisuDustAlarmPlanMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string boxCode = 5;
    if (has_boxcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxcode());
    }

    // optional string devCode = 6;
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

  }
  // repeated .com.arges.file.proto.RaisuDustPlanData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustAlarmPlanMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustAlarmPlanMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustAlarmPlanMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustAlarmPlanMessage::MergeFrom(const RaisuDustAlarmPlanMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_boxcode()) {
      set_boxcode(from.boxcode());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustAlarmPlanMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustAlarmPlanMessage::CopyFrom(const RaisuDustAlarmPlanMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustAlarmPlanMessage::IsInitialized() const {

  return true;
}

void RaisuDustAlarmPlanMessage::Swap(RaisuDustAlarmPlanMessage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    datas_.Swap(&other->datas_);
    std::swap(boxcode_, other->boxcode_);
    std::swap(devcode_, other->devcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustAlarmPlanMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustAlarmPlanMessage_descriptor_;
  metadata.reflection = RaisuDustAlarmPlanMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustNoiseData::kDeviceCodeFieldNumber;
const int RaisuDustNoiseData::kIdFieldNumber;
const int RaisuDustNoiseData::kLongitudeFieldNumber;
const int RaisuDustNoiseData::kLatitudeFieldNumber;
const int RaisuDustNoiseData::kDateFieldNumber;
const int RaisuDustNoiseData::kHeaderFileFieldNumber;
const int RaisuDustNoiseData::kFilePathFieldNumber;
const int RaisuDustNoiseData::kThresholdFieldNumber;
#endif  // !_MSC_VER

RaisuDustNoiseData::RaisuDustNoiseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustNoiseData)
}

void RaisuDustNoiseData::InitAsDefaultInstance() {
}

RaisuDustNoiseData::RaisuDustNoiseData(const RaisuDustNoiseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustNoiseData)
}

void RaisuDustNoiseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = 0;
  latitude_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headerfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustNoiseData::~RaisuDustNoiseData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustNoiseData)
  SharedDtor();
}

void RaisuDustNoiseData::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (headerfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headerfile_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void RaisuDustNoiseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustNoiseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustNoiseData_descriptor_;
}

const RaisuDustNoiseData& RaisuDustNoiseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustNoiseData* RaisuDustNoiseData::default_instance_ = NULL;

RaisuDustNoiseData* RaisuDustNoiseData::New() const {
  return new RaisuDustNoiseData;
}

void RaisuDustNoiseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaisuDustNoiseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(longitude_, latitude_);
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_headerfile()) {
      if (headerfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headerfile_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    threshold_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustNoiseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustNoiseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_latitude;
        break;
      }

      // optional float latitude = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_date;
        break;
      }

      // optional string date = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_headerFile;
        break;
      }

      // optional string headerFile = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_headerFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headerfile().data(), this->headerfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headerfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filePath;
        break;
      }

      // optional string filePath = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_threshold;
        break;
      }

      // optional float threshold = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustNoiseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustNoiseData)
  return false;
#undef DO_
}

void RaisuDustNoiseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustNoiseData)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional string id = 2 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional float longitude = 3 [default = 0];
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional float latitude = 4 [default = 0];
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // optional string date = 5 [default = ""];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->date(), output);
  }

  // optional string headerFile = 6 [default = ""];
  if (has_headerfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headerfile().data(), this->headerfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headerfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->headerfile(), output);
  }

  // optional string filePath = 7 [default = ""];
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filepath(), output);
  }

  // optional float threshold = 8 [default = 0];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustNoiseData)
}

::google::protobuf::uint8* RaisuDustNoiseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustNoiseData)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional string id = 2 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional float longitude = 3 [default = 0];
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional float latitude = 4 [default = 0];
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // optional string date = 5 [default = ""];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  // optional string headerFile = 6 [default = ""];
  if (has_headerfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headerfile().data(), this->headerfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headerfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headerfile(), target);
  }

  // optional string filePath = 7 [default = ""];
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filepath(), target);
  }

  // optional float threshold = 8 [default = 0];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustNoiseData)
  return target;
}

int RaisuDustNoiseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceCode = 1 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional string id = 2 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional float longitude = 3 [default = 0];
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 4 [default = 0];
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional string date = 5 [default = ""];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string headerFile = 6 [default = ""];
    if (has_headerfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerfile());
    }

    // optional string filePath = 7 [default = ""];
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // optional float threshold = 8 [default = 0];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustNoiseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustNoiseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustNoiseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustNoiseData::MergeFrom(const RaisuDustNoiseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_headerfile()) {
      set_headerfile(from.headerfile());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustNoiseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustNoiseData::CopyFrom(const RaisuDustNoiseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustNoiseData::IsInitialized() const {

  return true;
}

void RaisuDustNoiseData::Swap(RaisuDustNoiseData* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(id_, other->id_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(date_, other->date_);
    std::swap(headerfile_, other->headerfile_);
    std::swap(filepath_, other->filepath_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustNoiseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustNoiseData_descriptor_;
  metadata.reflection = RaisuDustNoiseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaisuDustNoiseThreshold::kDeviceCodeFieldNumber;
const int RaisuDustNoiseThreshold::kValueFieldNumber;
#endif  // !_MSC_VER

RaisuDustNoiseThreshold::RaisuDustNoiseThreshold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RaisuDustNoiseThreshold)
}

void RaisuDustNoiseThreshold::InitAsDefaultInstance() {
}

RaisuDustNoiseThreshold::RaisuDustNoiseThreshold(const RaisuDustNoiseThreshold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RaisuDustNoiseThreshold)
}

void RaisuDustNoiseThreshold::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaisuDustNoiseThreshold::~RaisuDustNoiseThreshold() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RaisuDustNoiseThreshold)
  SharedDtor();
}

void RaisuDustNoiseThreshold::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (this != default_instance_) {
  }
}

void RaisuDustNoiseThreshold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaisuDustNoiseThreshold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaisuDustNoiseThreshold_descriptor_;
}

const RaisuDustNoiseThreshold& RaisuDustNoiseThreshold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaiseDustDataBean_2eproto();
  return *default_instance_;
}

RaisuDustNoiseThreshold* RaisuDustNoiseThreshold::default_instance_ = NULL;

RaisuDustNoiseThreshold* RaisuDustNoiseThreshold::New() const {
  return new RaisuDustNoiseThreshold;
}

void RaisuDustNoiseThreshold::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaisuDustNoiseThreshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RaisuDustNoiseThreshold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RaisuDustNoiseThreshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RaisuDustNoiseThreshold)
  return false;
#undef DO_
}

void RaisuDustNoiseThreshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RaisuDustNoiseThreshold)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RaisuDustNoiseThreshold)
}

::google::protobuf::uint8* RaisuDustNoiseThreshold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RaisuDustNoiseThreshold)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RaisuDustNoiseThreshold)
  return target;
}

int RaisuDustNoiseThreshold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceCode = 1 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaisuDustNoiseThreshold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaisuDustNoiseThreshold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaisuDustNoiseThreshold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaisuDustNoiseThreshold::MergeFrom(const RaisuDustNoiseThreshold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaisuDustNoiseThreshold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaisuDustNoiseThreshold::CopyFrom(const RaisuDustNoiseThreshold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaisuDustNoiseThreshold::IsInitialized() const {

  return true;
}

void RaisuDustNoiseThreshold::Swap(RaisuDustNoiseThreshold* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaisuDustNoiseThreshold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaisuDustNoiseThreshold_descriptor_;
  metadata.reflection = RaisuDustNoiseThreshold_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
