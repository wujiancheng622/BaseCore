// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VideoBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* VideoPlanDescri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoPlanDescri_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoPlanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoPlanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoPlanMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoPlanMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_VIDEO_PLAN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_VIDEO_PLAN_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_VideoBean_2eproto() {
  protobuf_AddDesc_VideoBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VideoBean.proto");
  GOOGLE_CHECK(file != NULL);
  VideoPlanDescri_descriptor_ = file->message_type(0);
  static const int VideoPlanDescri_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, timetempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, planname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, isincludesub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, assistantstream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, plantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, channelcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, distributestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, storagepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, storagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, planstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, capacityconfigstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, planconfigstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, devstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, timetmp_),
  };
  VideoPlanDescri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoPlanDescri_descriptor_,
      VideoPlanDescri::default_instance_,
      VideoPlanDescri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanDescri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoPlanDescri));
  VideoPlanInfo_descriptor_ = file->message_type(1);
  static const int VideoPlanInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, channelflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, encoders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, boxs_),
  };
  VideoPlanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoPlanInfo_descriptor_,
      VideoPlanInfo::default_instance_,
      VideoPlanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoPlanInfo));
  VideoPlanMessage_descriptor_ = file->message_type(2);
  static const int VideoPlanMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, org_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, devcode_),
  };
  VideoPlanMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoPlanMessage_descriptor_,
      VideoPlanMessage::default_instance_,
      VideoPlanMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPlanMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoPlanMessage));
  REQUEST_TYPE_OF_VIDEO_PLAN_descriptor_ = file->enum_type(0);
  RESULT_TYPE_OF_VIDEO_PLAN_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VideoBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoPlanDescri_descriptor_, &VideoPlanDescri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoPlanInfo_descriptor_, &VideoPlanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoPlanMessage_descriptor_, &VideoPlanMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VideoBean_2eproto() {
  delete VideoPlanDescri::default_instance_;
  delete VideoPlanDescri_reflection_;
  delete VideoPlanInfo::default_instance_;
  delete VideoPlanInfo_reflection_;
  delete VideoPlanMessage::default_instance_;
  delete VideoPlanMessage_reflection_;
}

void protobuf_AddDesc_VideoBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::com::arges::file::proto::protobuf_AddDesc_TimeTemplateBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017VideoBean.proto\022\024com.arges.file.proto\032"
    "\025DevInfoListBean.proto\032\026TimeTemplateBean"
    ".proto\"\206\004\n\017VideoPlanDescri\022\r\n\002id\030\001 \001(\003:\001"
    "0\022\025\n\ntimetempId\030\002 \001(\003:\0010\022\022\n\010planname\030\003 \001"
    "(\t:\000\022\027\n\014isIncludeSub\030\004 \001(\005:\0010\022\032\n\017assista"
    "ntStream\030\005 \001(\005:\0010\022\016\n\004memo\030\006 \001(\t:\000\022\020\n\005sta"
    "te\030\007 \001(\005:\0010\022\023\n\010planType\030\010 \001(\005:\0010\022\017\n\004time"
    "\030\t \001(\003:\0010\022\032\n\017channelCapacity\030\n \001(\003:\0010\022\032\n"
    "\017distributeState\030\013 \001(\005:\0010\022\025\n\013storagePath"
    "\030\014 \001(\t:\000\022\026\n\013storageSize\030\r \001(\003:\0010\022\024\n\tplan"
    "State\030\016 \001(\005:\0010\022\036\n\023capacityConfigState\030\017 "
    "\001(\005:\0010\022\032\n\017planConfigState\030\020 \001(\005:\0010\022\016\n\004uu"
    "id\030\021 \001(\t:\000\022\021\n\007devcode\030\022 \001(\t:\000\022\023\n\010devStat"
    "e\030\023 \001(\005:\0010\022\022\n\007addType\030\024 \001(\005:\0010\0227\n\007timeTm"
    "p\030\025 \001(\0132&.com.arges.file.proto.TimeTempl"
    "ateData\"\314\001\n\rVideoPlanInfo\022\r\n\002id\030\001 \001(\003:\0010"
    "\0223\n\004desc\030\002 \001(\0132%.com.arges.file.proto.Vi"
    "deoPlanDescri\022\023\n\013channelFlag\030\003 \003(\t\0222\n\010en"
    "coders\030\004 \003(\0132 .com.arges.file.proto.Devi"
    "ceInfo\022.\n\004boxs\030\005 \003(\0132 .com.arges.file.pr"
    "oto.DeviceInfo\"\272\001\n\020VideoPlanMessage\022\027\n\013r"
    "equestType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1"
    "\022\030\n\016resultDescribe\030\003 \001(\t:\000\0222\n\005datas\030\004 \003("
    "\0132#.com.arges.file.proto.VideoPlanInfo\022\013"
    "\n\003ids\030\005 \003(\t\022\r\n\003org\030\006 \001(\t:\000\022\017\n\007devcode\030\007 "
    "\001(\t*\325\002\n\032REQUEST_TYPE_OF_VIDEO_PLAN\022!\n\035VI"
    "DEO_PLAN_REQUEST_GET_BY_IDS\020\001\022#\n\037VIDEO_P"
    "LAN_REQUEST_GET_DEV_INFO\020\002\022&\n\"VIDEO_PLAN"
    "_REQUEST_GET_BY_BOX_CODE\020\003\022\036\n\032VIDEO_PLAN"
    "_REQUEST_GET_ALL\020\004\022!\n\035VIDEO_PLAN_REQUEST"
    "_GET_BY_ORG\020\005\022\032\n\026VIDEO_PLAN_ADD_CHANNEL\020"
    "\006\022\035\n\031VIDEO_PLAN_REMOVE_CHANNEL\020\007\022\036\n\032VIDE"
    "O_PLAN_UPDATE_DESCRIBE\020\010\022\022\n\016VIDEO_PLAN_A"
    "DD\020\t\022\025\n\021VIDEO_PLAN_DELETE\020\n*a\n\031RESULT_TY"
    "PE_OF_VIDEO_PLAN\022\'\n\032VIDEO_PLAN_RESULT_IS"
    "_ERROR\020\377\377\377\377\377\377\377\377\377\001\022\033\n\027VIDEO_PLAN_RESULT_I"
    "S_OK\020\000", 1446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VideoBean.proto", &protobuf_RegisterTypes);
  VideoPlanDescri::default_instance_ = new VideoPlanDescri();
  VideoPlanInfo::default_instance_ = new VideoPlanInfo();
  VideoPlanMessage::default_instance_ = new VideoPlanMessage();
  VideoPlanDescri::default_instance_->InitAsDefaultInstance();
  VideoPlanInfo::default_instance_->InitAsDefaultInstance();
  VideoPlanMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VideoBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VideoBean_2eproto {
  StaticDescriptorInitializer_VideoBean_2eproto() {
    protobuf_AddDesc_VideoBean_2eproto();
  }
} static_descriptor_initializer_VideoBean_2eproto_;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_VIDEO_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_VIDEO_PLAN_descriptor_;
}
bool REQUEST_TYPE_OF_VIDEO_PLAN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_VIDEO_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_VIDEO_PLAN_descriptor_;
}
bool RESULT_TYPE_OF_VIDEO_PLAN_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int VideoPlanDescri::kIdFieldNumber;
const int VideoPlanDescri::kTimetempIdFieldNumber;
const int VideoPlanDescri::kPlannameFieldNumber;
const int VideoPlanDescri::kIsIncludeSubFieldNumber;
const int VideoPlanDescri::kAssistantStreamFieldNumber;
const int VideoPlanDescri::kMemoFieldNumber;
const int VideoPlanDescri::kStateFieldNumber;
const int VideoPlanDescri::kPlanTypeFieldNumber;
const int VideoPlanDescri::kTimeFieldNumber;
const int VideoPlanDescri::kChannelCapacityFieldNumber;
const int VideoPlanDescri::kDistributeStateFieldNumber;
const int VideoPlanDescri::kStoragePathFieldNumber;
const int VideoPlanDescri::kStorageSizeFieldNumber;
const int VideoPlanDescri::kPlanStateFieldNumber;
const int VideoPlanDescri::kCapacityConfigStateFieldNumber;
const int VideoPlanDescri::kPlanConfigStateFieldNumber;
const int VideoPlanDescri::kUuidFieldNumber;
const int VideoPlanDescri::kDevcodeFieldNumber;
const int VideoPlanDescri::kDevStateFieldNumber;
const int VideoPlanDescri::kAddTypeFieldNumber;
const int VideoPlanDescri::kTimeTmpFieldNumber;
#endif  // !_MSC_VER

VideoPlanDescri::VideoPlanDescri()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.VideoPlanDescri)
}

void VideoPlanDescri::InitAsDefaultInstance() {
  timetmp_ = const_cast< ::com::arges::file::proto::TimeTemplateData*>(&::com::arges::file::proto::TimeTemplateData::default_instance());
}

VideoPlanDescri::VideoPlanDescri(const VideoPlanDescri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.VideoPlanDescri)
}

void VideoPlanDescri::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  timetempid_ = GOOGLE_LONGLONG(0);
  planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isincludesub_ = 0;
  assistantstream_ = 0;
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  plantype_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  channelcapacity_ = GOOGLE_LONGLONG(0);
  distributestate_ = 0;
  storagepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagesize_ = GOOGLE_LONGLONG(0);
  planstate_ = 0;
  capacityconfigstate_ = 0;
  planconfigstate_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devstate_ = 0;
  addtype_ = 0;
  timetmp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoPlanDescri::~VideoPlanDescri() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.VideoPlanDescri)
  SharedDtor();
}

void VideoPlanDescri::SharedDtor() {
  if (planname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete planname_;
  }
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (storagepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storagepath_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (this != default_instance_) {
    delete timetmp_;
  }
}

void VideoPlanDescri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPlanDescri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoPlanDescri_descriptor_;
}

const VideoPlanDescri& VideoPlanDescri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoBean_2eproto();
  return *default_instance_;
}

VideoPlanDescri* VideoPlanDescri::default_instance_ = NULL;

VideoPlanDescri* VideoPlanDescri::New() const {
  return new VideoPlanDescri;
}

void VideoPlanDescri::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VideoPlanDescri*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, timetempid_);
    ZR_(isincludesub_, assistantstream_);
    ZR_(state_, plantype_);
    if (has_planname()) {
      if (planname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        planname_->clear();
      }
    }
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memo_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(time_, channelcapacity_);
    ZR_(distributestate_, planconfigstate_);
    if (has_storagepath()) {
      if (storagepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storagepath_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(devstate_, addtype_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    if (has_timetmp()) {
      if (timetmp_ != NULL) timetmp_->::com::arges::file::proto::TimeTemplateData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoPlanDescri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.VideoPlanDescri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timetempId;
        break;
      }

      // optional int64 timetempId = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_timetempId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timetempid_)));
          set_has_timetempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_planname;
        break;
      }

      // optional string planname = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_planname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planname().data(), this->planname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isIncludeSub;
        break;
      }

      // optional int32 isIncludeSub = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_isIncludeSub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isincludesub_)));
          set_has_isincludesub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_assistantStream;
        break;
      }

      // optional int32 assistantStream = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_assistantStream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistantstream_)));
          set_has_assistantstream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memo;
        break;
      }

      // optional string memo = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "memo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_planType;
        break;
      }

      // optional int32 planType = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_planType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantype_)));
          set_has_plantype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional int64 time = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_channelCapacity;
        break;
      }

      // optional int64 channelCapacity = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_channelCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channelcapacity_)));
          set_has_channelcapacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_distributeState;
        break;
      }

      // optional int32 distributeState = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_distributeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distributestate_)));
          set_has_distributestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_storagePath;
        break;
      }

      // optional string storagePath = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_storagePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storagepath().data(), this->storagepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storagepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_storageSize;
        break;
      }

      // optional int64 storageSize = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_storageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storagesize_)));
          set_has_storagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_planState;
        break;
      }

      // optional int32 planState = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_planState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planstate_)));
          set_has_planstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_capacityConfigState;
        break;
      }

      // optional int32 capacityConfigState = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_capacityConfigState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacityconfigstate_)));
          set_has_capacityconfigstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_planConfigState;
        break;
      }

      // optional int32 planConfigState = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_planConfigState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planconfigstate_)));
          set_has_planconfigstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_uuid;
        break;
      }

      // optional string uuid = 17 [default = ""];
      case 17: {
        if (tag == 138) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_devcode;
        break;
      }

      // optional string devcode = 18 [default = ""];
      case 18: {
        if (tag == 146) {
         parse_devcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_devState;
        break;
      }

      // optional int32 devState = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_devState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devstate_)));
          set_has_devstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_addType;
        break;
      }

      // optional int32 addType = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_addType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_timeTmp;
        break;
      }

      // optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
      case 21: {
        if (tag == 170) {
         parse_timeTmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timetmp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.VideoPlanDescri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.VideoPlanDescri)
  return false;
#undef DO_
}

void VideoPlanDescri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.VideoPlanDescri)
  // optional int64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 timetempId = 2 [default = 0];
  if (has_timetempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timetempid(), output);
  }

  // optional string planname = 3 [default = ""];
  if (has_planname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), this->planname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->planname(), output);
  }

  // optional int32 isIncludeSub = 4 [default = 0];
  if (has_isincludesub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isincludesub(), output);
  }

  // optional int32 assistantStream = 5 [default = 0];
  if (has_assistantstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->assistantstream(), output);
  }

  // optional string memo = 6 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->memo(), output);
  }

  // optional int32 state = 7 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // optional int32 planType = 8 [default = 0];
  if (has_plantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->plantype(), output);
  }

  // optional int64 time = 9 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time(), output);
  }

  // optional int64 channelCapacity = 10 [default = 0];
  if (has_channelcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->channelcapacity(), output);
  }

  // optional int32 distributeState = 11 [default = 0];
  if (has_distributestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->distributestate(), output);
  }

  // optional string storagePath = 12 [default = ""];
  if (has_storagepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storagepath().data(), this->storagepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storagepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->storagepath(), output);
  }

  // optional int64 storageSize = 13 [default = 0];
  if (has_storagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->storagesize(), output);
  }

  // optional int32 planState = 14 [default = 0];
  if (has_planstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->planstate(), output);
  }

  // optional int32 capacityConfigState = 15 [default = 0];
  if (has_capacityconfigstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->capacityconfigstate(), output);
  }

  // optional int32 planConfigState = 16 [default = 0];
  if (has_planconfigstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->planconfigstate(), output);
  }

  // optional string uuid = 17 [default = ""];
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->uuid(), output);
  }

  // optional string devcode = 18 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->devcode(), output);
  }

  // optional int32 devState = 19 [default = 0];
  if (has_devstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->devstate(), output);
  }

  // optional int32 addType = 20 [default = 0];
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->addtype(), output);
  }

  // optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
  if (has_timetmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->timetmp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.VideoPlanDescri)
}

::google::protobuf::uint8* VideoPlanDescri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.VideoPlanDescri)
  // optional int64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 timetempId = 2 [default = 0];
  if (has_timetempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timetempid(), target);
  }

  // optional string planname = 3 [default = ""];
  if (has_planname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), this->planname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->planname(), target);
  }

  // optional int32 isIncludeSub = 4 [default = 0];
  if (has_isincludesub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isincludesub(), target);
  }

  // optional int32 assistantStream = 5 [default = 0];
  if (has_assistantstream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->assistantstream(), target);
  }

  // optional string memo = 6 [default = ""];
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->memo(), target);
  }

  // optional int32 state = 7 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // optional int32 planType = 8 [default = 0];
  if (has_plantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->plantype(), target);
  }

  // optional int64 time = 9 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time(), target);
  }

  // optional int64 channelCapacity = 10 [default = 0];
  if (has_channelcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->channelcapacity(), target);
  }

  // optional int32 distributeState = 11 [default = 0];
  if (has_distributestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->distributestate(), target);
  }

  // optional string storagePath = 12 [default = ""];
  if (has_storagepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storagepath().data(), this->storagepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storagepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->storagepath(), target);
  }

  // optional int64 storageSize = 13 [default = 0];
  if (has_storagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->storagesize(), target);
  }

  // optional int32 planState = 14 [default = 0];
  if (has_planstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->planstate(), target);
  }

  // optional int32 capacityConfigState = 15 [default = 0];
  if (has_capacityconfigstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->capacityconfigstate(), target);
  }

  // optional int32 planConfigState = 16 [default = 0];
  if (has_planconfigstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->planconfigstate(), target);
  }

  // optional string uuid = 17 [default = ""];
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->uuid(), target);
  }

  // optional string devcode = 18 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->devcode(), target);
  }

  // optional int32 devState = 19 [default = 0];
  if (has_devstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->devstate(), target);
  }

  // optional int32 addType = 20 [default = 0];
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->addtype(), target);
  }

  // optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
  if (has_timetmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->timetmp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.VideoPlanDescri)
  return target;
}

int VideoPlanDescri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 timetempId = 2 [default = 0];
    if (has_timetempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timetempid());
    }

    // optional string planname = 3 [default = ""];
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }

    // optional int32 isIncludeSub = 4 [default = 0];
    if (has_isincludesub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isincludesub());
    }

    // optional int32 assistantStream = 5 [default = 0];
    if (has_assistantstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistantstream());
    }

    // optional string memo = 6 [default = ""];
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional int32 state = 7 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 planType = 8 [default = 0];
    if (has_plantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 time = 9 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 channelCapacity = 10 [default = 0];
    if (has_channelcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->channelcapacity());
    }

    // optional int32 distributeState = 11 [default = 0];
    if (has_distributestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distributestate());
    }

    // optional string storagePath = 12 [default = ""];
    if (has_storagepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storagepath());
    }

    // optional int64 storageSize = 13 [default = 0];
    if (has_storagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->storagesize());
    }

    // optional int32 planState = 14 [default = 0];
    if (has_planstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planstate());
    }

    // optional int32 capacityConfigState = 15 [default = 0];
    if (has_capacityconfigstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacityconfigstate());
    }

    // optional int32 planConfigState = 16 [default = 0];
    if (has_planconfigstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planconfigstate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string uuid = 17 [default = ""];
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string devcode = 18 [default = ""];
    if (has_devcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional int32 devState = 19 [default = 0];
    if (has_devstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devstate());
    }

    // optional int32 addType = 20 [default = 0];
    if (has_addtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
    if (has_timetmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timetmp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPlanDescri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoPlanDescri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoPlanDescri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoPlanDescri::MergeFrom(const VideoPlanDescri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timetempid()) {
      set_timetempid(from.timetempid());
    }
    if (from.has_planname()) {
      set_planname(from.planname());
    }
    if (from.has_isincludesub()) {
      set_isincludesub(from.isincludesub());
    }
    if (from.has_assistantstream()) {
      set_assistantstream(from.assistantstream());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_plantype()) {
      set_plantype(from.plantype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_channelcapacity()) {
      set_channelcapacity(from.channelcapacity());
    }
    if (from.has_distributestate()) {
      set_distributestate(from.distributestate());
    }
    if (from.has_storagepath()) {
      set_storagepath(from.storagepath());
    }
    if (from.has_storagesize()) {
      set_storagesize(from.storagesize());
    }
    if (from.has_planstate()) {
      set_planstate(from.planstate());
    }
    if (from.has_capacityconfigstate()) {
      set_capacityconfigstate(from.capacityconfigstate());
    }
    if (from.has_planconfigstate()) {
      set_planconfigstate(from.planconfigstate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_devstate()) {
      set_devstate(from.devstate());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_timetmp()) {
      mutable_timetmp()->::com::arges::file::proto::TimeTemplateData::MergeFrom(from.timetmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoPlanDescri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPlanDescri::CopyFrom(const VideoPlanDescri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPlanDescri::IsInitialized() const {

  return true;
}

void VideoPlanDescri::Swap(VideoPlanDescri* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timetempid_, other->timetempid_);
    std::swap(planname_, other->planname_);
    std::swap(isincludesub_, other->isincludesub_);
    std::swap(assistantstream_, other->assistantstream_);
    std::swap(memo_, other->memo_);
    std::swap(state_, other->state_);
    std::swap(plantype_, other->plantype_);
    std::swap(time_, other->time_);
    std::swap(channelcapacity_, other->channelcapacity_);
    std::swap(distributestate_, other->distributestate_);
    std::swap(storagepath_, other->storagepath_);
    std::swap(storagesize_, other->storagesize_);
    std::swap(planstate_, other->planstate_);
    std::swap(capacityconfigstate_, other->capacityconfigstate_);
    std::swap(planconfigstate_, other->planconfigstate_);
    std::swap(uuid_, other->uuid_);
    std::swap(devcode_, other->devcode_);
    std::swap(devstate_, other->devstate_);
    std::swap(addtype_, other->addtype_);
    std::swap(timetmp_, other->timetmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoPlanDescri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoPlanDescri_descriptor_;
  metadata.reflection = VideoPlanDescri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoPlanInfo::kIdFieldNumber;
const int VideoPlanInfo::kDescFieldNumber;
const int VideoPlanInfo::kChannelFlagFieldNumber;
const int VideoPlanInfo::kEncodersFieldNumber;
const int VideoPlanInfo::kBoxsFieldNumber;
#endif  // !_MSC_VER

VideoPlanInfo::VideoPlanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.VideoPlanInfo)
}

void VideoPlanInfo::InitAsDefaultInstance() {
  desc_ = const_cast< ::com::arges::file::proto::VideoPlanDescri*>(&::com::arges::file::proto::VideoPlanDescri::default_instance());
}

VideoPlanInfo::VideoPlanInfo(const VideoPlanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.VideoPlanInfo)
}

void VideoPlanInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  desc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoPlanInfo::~VideoPlanInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.VideoPlanInfo)
  SharedDtor();
}

void VideoPlanInfo::SharedDtor() {
  if (this != default_instance_) {
    delete desc_;
  }
}

void VideoPlanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPlanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoPlanInfo_descriptor_;
}

const VideoPlanInfo& VideoPlanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoBean_2eproto();
  return *default_instance_;
}

VideoPlanInfo* VideoPlanInfo::default_instance_ = NULL;

VideoPlanInfo* VideoPlanInfo::New() const {
  return new VideoPlanInfo;
}

void VideoPlanInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_desc()) {
      if (desc_ != NULL) desc_->::com::arges::file::proto::VideoPlanDescri::Clear();
    }
  }
  channelflag_.Clear();
  encoders_.Clear();
  boxs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoPlanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.VideoPlanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional .com.arges.file.proto.VideoPlanDescri desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelFlag;
        break;
      }

      // repeated string channelFlag = 3;
      case 3: {
        if (tag == 26) {
         parse_channelFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channelflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelflag(this->channelflag_size() - 1).data(),
            this->channelflag(this->channelflag_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelFlag;
        if (input->ExpectTag(34)) goto parse_encoders;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo encoders = 4;
      case 4: {
        if (tag == 34) {
         parse_encoders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encoders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encoders;
        if (input->ExpectTag(42)) goto parse_boxs;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo boxs = 5;
      case 5: {
        if (tag == 42) {
         parse_boxs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boxs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.VideoPlanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.VideoPlanInfo)
  return false;
#undef DO_
}

void VideoPlanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.VideoPlanInfo)
  // optional int64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .com.arges.file.proto.VideoPlanDescri desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->desc(), output);
  }

  // repeated string channelFlag = 3;
  for (int i = 0; i < this->channelflag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channelflag(i).data(), this->channelflag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "channelflag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelflag(i), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo encoders = 4;
  for (int i = 0; i < this->encoders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->encoders(i), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo boxs = 5;
  for (int i = 0; i < this->boxs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->boxs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.VideoPlanInfo)
}

::google::protobuf::uint8* VideoPlanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.VideoPlanInfo)
  // optional int64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .com.arges.file.proto.VideoPlanDescri desc = 2;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->desc(), target);
  }

  // repeated string channelFlag = 3;
  for (int i = 0; i < this->channelflag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelflag(i).data(), this->channelflag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelflag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channelflag(i), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo encoders = 4;
  for (int i = 0; i < this->encoders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->encoders(i), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo boxs = 5;
  for (int i = 0; i < this->boxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->boxs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.VideoPlanInfo)
  return target;
}

int VideoPlanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .com.arges.file.proto.VideoPlanDescri desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc());
    }

  }
  // repeated string channelFlag = 3;
  total_size += 1 * this->channelflag_size();
  for (int i = 0; i < this->channelflag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channelflag(i));
  }

  // repeated .com.arges.file.proto.DeviceInfo encoders = 4;
  total_size += 1 * this->encoders_size();
  for (int i = 0; i < this->encoders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encoders(i));
  }

  // repeated .com.arges.file.proto.DeviceInfo boxs = 5;
  total_size += 1 * this->boxs_size();
  for (int i = 0; i < this->boxs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPlanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoPlanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoPlanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoPlanInfo::MergeFrom(const VideoPlanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  channelflag_.MergeFrom(from.channelflag_);
  encoders_.MergeFrom(from.encoders_);
  boxs_.MergeFrom(from.boxs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      mutable_desc()->::com::arges::file::proto::VideoPlanDescri::MergeFrom(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoPlanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPlanInfo::CopyFrom(const VideoPlanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPlanInfo::IsInitialized() const {

  return true;
}

void VideoPlanInfo::Swap(VideoPlanInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    channelflag_.Swap(&other->channelflag_);
    encoders_.Swap(&other->encoders_);
    boxs_.Swap(&other->boxs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoPlanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoPlanInfo_descriptor_;
  metadata.reflection = VideoPlanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoPlanMessage::kRequestTypeFieldNumber;
const int VideoPlanMessage::kResultFieldNumber;
const int VideoPlanMessage::kResultDescribeFieldNumber;
const int VideoPlanMessage::kDatasFieldNumber;
const int VideoPlanMessage::kIdsFieldNumber;
const int VideoPlanMessage::kOrgFieldNumber;
const int VideoPlanMessage::kDevcodeFieldNumber;
#endif  // !_MSC_VER

VideoPlanMessage::VideoPlanMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.VideoPlanMessage)
}

void VideoPlanMessage::InitAsDefaultInstance() {
}

VideoPlanMessage::VideoPlanMessage(const VideoPlanMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.VideoPlanMessage)
}

void VideoPlanMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  org_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoPlanMessage::~VideoPlanMessage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.VideoPlanMessage)
  SharedDtor();
}

void VideoPlanMessage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (org_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete org_;
  }
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (this != default_instance_) {
  }
}

void VideoPlanMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPlanMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoPlanMessage_descriptor_;
}

const VideoPlanMessage& VideoPlanMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoBean_2eproto();
  return *default_instance_;
}

VideoPlanMessage* VideoPlanMessage::default_instance_ = NULL;

VideoPlanMessage* VideoPlanMessage::New() const {
  return new VideoPlanMessage;
}

void VideoPlanMessage::Clear() {
  if (_has_bits_[0 / 32] & 103) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_org()) {
      if (org_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        org_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
  }
  datas_.Clear();
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoPlanMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.VideoPlanMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional string resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultdescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultdescribe().data(), this->resultdescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultdescribe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectTag(42)) goto parse_ids;
        break;
      }

      // repeated string ids = 5;
      case 5: {
        if (tag == 42) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ids(this->ids_size() - 1).data(),
            this->ids(this->ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ids;
        if (input->ExpectTag(50)) goto parse_org;
        break;
      }

      // optional string org = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_org:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_org()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->org().data(), this->org().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_devcode;
        break;
      }

      // optional string devcode = 7;
      case 7: {
        if (tag == 58) {
         parse_devcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.VideoPlanMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.VideoPlanMessage)
  return false;
#undef DO_
}

void VideoPlanMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.VideoPlanMessage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescribe().data(), this->resultdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescribe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  // repeated string ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->ids(i).data(), this->ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ids(i), output);
  }

  // optional string org = 6 [default = ""];
  if (has_org()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->org().data(), this->org().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->org(), output);
  }

  // optional string devcode = 7;
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->devcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.VideoPlanMessage)
}

::google::protobuf::uint8* VideoPlanMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.VideoPlanMessage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdescribe().data(), this->resultdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdescribe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resultdescribe(), target);
  }

  // repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  // repeated string ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ids(i).data(), this->ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->ids(i), target);
  }

  // optional string org = 6 [default = ""];
  if (has_org()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->org().data(), this->org().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->org(), target);
  }

  // optional string devcode = 7;
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->devcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.VideoPlanMessage)
  return target;
}

int VideoPlanMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultdescribe());
    }

    // optional string org = 6 [default = ""];
    if (has_org()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->org());
    }

    // optional string devcode = 7;
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

  }
  // repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated string ids = 5;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPlanMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoPlanMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoPlanMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoPlanMessage::MergeFrom(const VideoPlanMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_org()) {
      set_org(from.org());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoPlanMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPlanMessage::CopyFrom(const VideoPlanMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPlanMessage::IsInitialized() const {

  return true;
}

void VideoPlanMessage::Swap(VideoPlanMessage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    datas_.Swap(&other->datas_);
    ids_.Swap(&other->ids_);
    std::swap(org_, other->org_);
    std::swap(devcode_, other->devcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoPlanMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoPlanMessage_descriptor_;
  metadata.reflection = VideoPlanMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
