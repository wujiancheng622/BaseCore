// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CatalogBean.proto

#ifndef PROTOBUF_CatalogBean_2eproto__INCLUDED
#define PROTOBUF_CatalogBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CatalogBean_2eproto();
void protobuf_AssignDesc_CatalogBean_2eproto();
void protobuf_ShutdownFile_CatalogBean_2eproto();

class RspDeviceList;
class ReqChannelList;
class RspChannelList;
class ReqPlayStream;
class RspPlayStream;
class RecordInfo;
class ReqQueryRecord;
class RspQueryRecord;
class ReqPlayRecord;
class RspPlayRecord;
class ReqDownloadRecord;
class RspDownloadRecord;
class NoticeReportRecord;

enum RESULT_TYPE_OF_CATALOG {
  CATALOG_RESULT_ERROR = -1,
  CATALOG_RESULT_OK = 0,
  CATALOG_RESULT_DEVICE_NOTFOUND = 1,
  CATALOG_RESULT_PARAM_ERROR = 2,
  CATALOG_RESULT_NOAVAILABLE_MEDIASERVER = 3,
  CATALOG_RESULT_REQUEST_TIMEOUT = 4,
  CATALOG_RESULT_ROUTE_FAILED = 5
};
bool RESULT_TYPE_OF_CATALOG_IsValid(int value);
const RESULT_TYPE_OF_CATALOG RESULT_TYPE_OF_CATALOG_MIN = CATALOG_RESULT_ERROR;
const RESULT_TYPE_OF_CATALOG RESULT_TYPE_OF_CATALOG_MAX = CATALOG_RESULT_ROUTE_FAILED;
const int RESULT_TYPE_OF_CATALOG_ARRAYSIZE = RESULT_TYPE_OF_CATALOG_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_CATALOG_descriptor();
inline const ::std::string& RESULT_TYPE_OF_CATALOG_Name(RESULT_TYPE_OF_CATALOG value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_CATALOG_descriptor(), value);
}
inline bool RESULT_TYPE_OF_CATALOG_Parse(
    const ::std::string& name, RESULT_TYPE_OF_CATALOG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_CATALOG>(
    RESULT_TYPE_OF_CATALOG_descriptor(), name, value);
}
enum STREAM_PROTOCOL_TYPE {
  STREAM_PROTOCOL_TYPE_RTSP = 0,
  STREAM_PROTOCOL_TYPE_RTMP = 1,
  STREAM_PROTOCOL_TYPE_HLS = 2
};
bool STREAM_PROTOCOL_TYPE_IsValid(int value);
const STREAM_PROTOCOL_TYPE STREAM_PROTOCOL_TYPE_MIN = STREAM_PROTOCOL_TYPE_RTSP;
const STREAM_PROTOCOL_TYPE STREAM_PROTOCOL_TYPE_MAX = STREAM_PROTOCOL_TYPE_HLS;
const int STREAM_PROTOCOL_TYPE_ARRAYSIZE = STREAM_PROTOCOL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* STREAM_PROTOCOL_TYPE_descriptor();
inline const ::std::string& STREAM_PROTOCOL_TYPE_Name(STREAM_PROTOCOL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    STREAM_PROTOCOL_TYPE_descriptor(), value);
}
inline bool STREAM_PROTOCOL_TYPE_Parse(
    const ::std::string& name, STREAM_PROTOCOL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STREAM_PROTOCOL_TYPE>(
    STREAM_PROTOCOL_TYPE_descriptor(), name, value);
}
enum URL_TYPE {
  URL_TYPE_INSIDE = 0,
  URL_TYPE_OUTSIDE = 1
};
bool URL_TYPE_IsValid(int value);
const URL_TYPE URL_TYPE_MIN = URL_TYPE_INSIDE;
const URL_TYPE URL_TYPE_MAX = URL_TYPE_OUTSIDE;
const int URL_TYPE_ARRAYSIZE = URL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* URL_TYPE_descriptor();
inline const ::std::string& URL_TYPE_Name(URL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    URL_TYPE_descriptor(), value);
}
inline bool URL_TYPE_Parse(
    const ::std::string& name, URL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<URL_TYPE>(
    URL_TYPE_descriptor(), name, value);
}
enum RECORD_SOURCE_TYPE {
  RECORD_SOURCE_TYPE_BOX = 0,
  RECORD_SOURCE_TYPE_FRONT_END = 1
};
bool RECORD_SOURCE_TYPE_IsValid(int value);
const RECORD_SOURCE_TYPE RECORD_SOURCE_TYPE_MIN = RECORD_SOURCE_TYPE_BOX;
const RECORD_SOURCE_TYPE RECORD_SOURCE_TYPE_MAX = RECORD_SOURCE_TYPE_FRONT_END;
const int RECORD_SOURCE_TYPE_ARRAYSIZE = RECORD_SOURCE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RECORD_SOURCE_TYPE_descriptor();
inline const ::std::string& RECORD_SOURCE_TYPE_Name(RECORD_SOURCE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RECORD_SOURCE_TYPE_descriptor(), value);
}
inline bool RECORD_SOURCE_TYPE_Parse(
    const ::std::string& name, RECORD_SOURCE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RECORD_SOURCE_TYPE>(
    RECORD_SOURCE_TYPE_descriptor(), name, value);
}
// ===================================================================

class RspDeviceList : public ::google::protobuf::Message {
 public:
  RspDeviceList();
  virtual ~RspDeviceList();

  RspDeviceList(const RspDeviceList& from);

  inline RspDeviceList& operator=(const RspDeviceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDeviceList& default_instance();

  void Swap(RspDeviceList* other);

  // implements Message ----------------------------------------------

  RspDeviceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDeviceList& from);
  void MergeFrom(const RspDeviceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
  inline int devinfo_size() const;
  inline void clear_devinfo();
  static const int kDevinfoFieldNumber = 2;
  inline const ::com::arges::file::proto::DeviceInfo& devinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_devinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      devinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_devinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDeviceList)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > devinfo_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspDeviceList* default_instance_;
};
// -------------------------------------------------------------------

class ReqChannelList : public ::google::protobuf::Message {
 public:
  ReqChannelList();
  virtual ~ReqChannelList();

  ReqChannelList(const ReqChannelList& from);

  inline ReqChannelList& operator=(const ReqChannelList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChannelList& default_instance();

  void Swap(ReqChannelList* other);

  // implements Message ----------------------------------------------

  ReqChannelList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChannelList& from);
  void MergeFrom(const ReqChannelList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqChannelList)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static ReqChannelList* default_instance_;
};
// -------------------------------------------------------------------

class RspChannelList : public ::google::protobuf::Message {
 public:
  RspChannelList();
  virtual ~RspChannelList();

  RspChannelList(const RspChannelList& from);

  inline RspChannelList& operator=(const RspChannelList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspChannelList& default_instance();

  void Swap(RspChannelList* other);

  // implements Message ----------------------------------------------

  RspChannelList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspChannelList& from);
  void MergeFrom(const RspChannelList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::com::arges::file::proto::EncodeChnnelInfo& infos(int index) const;
  inline ::com::arges::file::proto::EncodeChnnelInfo* mutable_infos(int index);
  inline ::com::arges::file::proto::EncodeChnnelInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspChannelList)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo > infos_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspChannelList* default_instance_;
};
// -------------------------------------------------------------------

class ReqPlayStream : public ::google::protobuf::Message {
 public:
  ReqPlayStream();
  virtual ~ReqPlayStream();

  ReqPlayStream(const ReqPlayStream& from);

  inline ReqPlayStream& operator=(const ReqPlayStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPlayStream& default_instance();

  void Swap(ReqPlayStream* other);

  // implements Message ----------------------------------------------

  ReqPlayStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPlayStream& from);
  void MergeFrom(const ReqPlayStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string streamId = 3 [default = ""];
  inline bool has_streamid() const;
  inline void clear_streamid();
  static const int kStreamIdFieldNumber = 3;
  inline const ::std::string& streamid() const;
  inline void set_streamid(const ::std::string& value);
  inline void set_streamid(const char* value);
  inline void set_streamid(const char* value, size_t size);
  inline ::std::string* mutable_streamid();
  inline ::std::string* release_streamid();
  inline void set_allocated_streamid(::std::string* streamid);

  // optional string proxyServiceCode = 4 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 4;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional int32 streamType = 5 [default = 0];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 5;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // optional int32 urlType = 6 [default = 0];
  inline bool has_urltype() const;
  inline void clear_urltype();
  static const int kUrlTypeFieldNumber = 6;
  inline ::google::protobuf::int32 urltype() const;
  inline void set_urltype(::google::protobuf::int32 value);

  // optional string mediaServer = 7 [default = ""];
  inline bool has_mediaserver() const;
  inline void clear_mediaserver();
  static const int kMediaServerFieldNumber = 7;
  inline const ::std::string& mediaserver() const;
  inline void set_mediaserver(const ::std::string& value);
  inline void set_mediaserver(const char* value);
  inline void set_mediaserver(const char* value, size_t size);
  inline ::std::string* mutable_mediaserver();
  inline ::std::string* release_mediaserver();
  inline void set_allocated_mediaserver(::std::string* mediaserver);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqPlayStream)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_streamid();
  inline void clear_has_streamid();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_streamtype();
  inline void clear_has_streamtype();
  inline void set_has_urltype();
  inline void clear_has_urltype();
  inline void set_has_mediaserver();
  inline void clear_has_mediaserver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::std::string* channelid_;
  ::std::string* streamid_;
  ::std::string* proxyservicecode_;
  ::google::protobuf::int32 streamtype_;
  ::google::protobuf::int32 urltype_;
  ::std::string* mediaserver_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static ReqPlayStream* default_instance_;
};
// -------------------------------------------------------------------

class RspPlayStream : public ::google::protobuf::Message {
 public:
  RspPlayStream();
  virtual ~RspPlayStream();

  RspPlayStream(const RspPlayStream& from);

  inline RspPlayStream& operator=(const RspPlayStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspPlayStream& default_instance();

  void Swap(RspPlayStream* other);

  // implements Message ----------------------------------------------

  RspPlayStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspPlayStream& from);
  void MergeFrom(const RspPlayStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string url = 2 [default = ""];
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspPlayStream)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspPlayStream* default_instance_;
};
// -------------------------------------------------------------------

class RecordInfo : public ::google::protobuf::Message {
 public:
  RecordInfo();
  virtual ~RecordInfo();

  RecordInfo(const RecordInfo& from);

  inline RecordInfo& operator=(const RecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordInfo& default_instance();

  void Swap(RecordInfo* other);

  // implements Message ----------------------------------------------

  RecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordInfo& from);
  void MergeFrom(const RecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string path = 2 [default = ""];
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional int32 size = 3 [default = 0];
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional string beginTime = 4 [default = ""];
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline const ::std::string& begintime() const;
  inline void set_begintime(const ::std::string& value);
  inline void set_begintime(const char* value);
  inline void set_begintime(const char* value, size_t size);
  inline ::std::string* mutable_begintime();
  inline ::std::string* release_begintime();
  inline void set_allocated_begintime(::std::string* begintime);

  // optional string endTime = 5 [default = ""];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional string id = 6 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string reason = 7 [default = ""];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 sourceType = 8 [default = 0];
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 8;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RecordInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* path_;
  ::std::string* begintime_;
  ::std::string* endtime_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 sourcetype_;
  ::std::string* id_;
  ::std::string* reason_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqQueryRecord : public ::google::protobuf::Message {
 public:
  ReqQueryRecord();
  virtual ~ReqQueryRecord();

  ReqQueryRecord(const ReqQueryRecord& from);

  inline ReqQueryRecord& operator=(const ReqQueryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqQueryRecord& default_instance();

  void Swap(ReqQueryRecord* other);

  // implements Message ----------------------------------------------

  ReqQueryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqQueryRecord& from);
  void MergeFrom(const ReqQueryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string proxyServiceCode = 3 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 3;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional int32 sourceType = 4 [default = 0];
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // optional int32 recordType = 5 [default = 0];
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 5;
  inline ::google::protobuf::int32 recordtype() const;
  inline void set_recordtype(::google::protobuf::int32 value);

  // optional string beginTime = 6 [default = ""];
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 6;
  inline const ::std::string& begintime() const;
  inline void set_begintime(const ::std::string& value);
  inline void set_begintime(const char* value);
  inline void set_begintime(const char* value, size_t size);
  inline ::std::string* mutable_begintime();
  inline ::std::string* release_begintime();
  inline void set_allocated_begintime(::std::string* begintime);

  // optional string endTime = 7 [default = ""];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional int32 offset = 8 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 8;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 9 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 9;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqQueryRecord)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();
  inline void set_has_recordtype();
  inline void clear_has_recordtype();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::std::string* channelid_;
  ::std::string* proxyservicecode_;
  ::google::protobuf::int32 sourcetype_;
  ::google::protobuf::int32 recordtype_;
  ::std::string* begintime_;
  ::std::string* endtime_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static ReqQueryRecord* default_instance_;
};
// -------------------------------------------------------------------

class RspQueryRecord : public ::google::protobuf::Message {
 public:
  RspQueryRecord();
  virtual ~RspQueryRecord();

  RspQueryRecord(const RspQueryRecord& from);

  inline RspQueryRecord& operator=(const RspQueryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspQueryRecord& default_instance();

  void Swap(RspQueryRecord* other);

  // implements Message ----------------------------------------------

  RspQueryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspQueryRecord& from);
  void MergeFrom(const RspQueryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
  inline int recordinfos_size() const;
  inline void clear_recordinfos();
  static const int kRecordInfosFieldNumber = 2;
  inline const ::com::arges::file::proto::RecordInfo& recordinfos(int index) const;
  inline ::com::arges::file::proto::RecordInfo* mutable_recordinfos(int index);
  inline ::com::arges::file::proto::RecordInfo* add_recordinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordInfo >&
      recordinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordInfo >*
      mutable_recordinfos();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspQueryRecord)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordInfo > recordinfos_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspQueryRecord* default_instance_;
};
// -------------------------------------------------------------------

class ReqPlayRecord : public ::google::protobuf::Message {
 public:
  ReqPlayRecord();
  virtual ~ReqPlayRecord();

  ReqPlayRecord(const ReqPlayRecord& from);

  inline ReqPlayRecord& operator=(const ReqPlayRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPlayRecord& default_instance();

  void Swap(ReqPlayRecord* other);

  // implements Message ----------------------------------------------

  ReqPlayRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPlayRecord& from);
  void MergeFrom(const ReqPlayRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string proxyServiceCode = 3 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 3;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional string beginTime = 4 [default = ""];
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline const ::std::string& begintime() const;
  inline void set_begintime(const ::std::string& value);
  inline void set_begintime(const char* value);
  inline void set_begintime(const char* value, size_t size);
  inline ::std::string* mutable_begintime();
  inline ::std::string* release_begintime();
  inline void set_allocated_begintime(::std::string* begintime);

  // optional string endTime = 5 [default = ""];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional int32 sourceType = 6 [default = 0];
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 6;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqPlayRecord)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::std::string* channelid_;
  ::std::string* proxyservicecode_;
  ::std::string* begintime_;
  ::std::string* endtime_;
  ::google::protobuf::int32 sourcetype_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static ReqPlayRecord* default_instance_;
};
// -------------------------------------------------------------------

class RspPlayRecord : public ::google::protobuf::Message {
 public:
  RspPlayRecord();
  virtual ~RspPlayRecord();

  RspPlayRecord(const RspPlayRecord& from);

  inline RspPlayRecord& operator=(const RspPlayRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspPlayRecord& default_instance();

  void Swap(RspPlayRecord* other);

  // implements Message ----------------------------------------------

  RspPlayRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspPlayRecord& from);
  void MergeFrom(const RspPlayRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string ip = 2 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string token = 4 [default = ""];
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string session = 5 [default = ""];
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 5;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspPlayRecord)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_session();
  inline void clear_has_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  ::std::string* token_;
  ::std::string* session_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspPlayRecord* default_instance_;
};
// -------------------------------------------------------------------

class ReqDownloadRecord : public ::google::protobuf::Message {
 public:
  ReqDownloadRecord();
  virtual ~ReqDownloadRecord();

  ReqDownloadRecord(const ReqDownloadRecord& from);

  inline ReqDownloadRecord& operator=(const ReqDownloadRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDownloadRecord& default_instance();

  void Swap(ReqDownloadRecord* other);

  // implements Message ----------------------------------------------

  ReqDownloadRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDownloadRecord& from);
  void MergeFrom(const ReqDownloadRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string proxyServiceCode = 2 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 2;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional .com.arges.file.proto.RecordInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::com::arges::file::proto::RecordInfo& info() const;
  inline ::com::arges::file::proto::RecordInfo* mutable_info();
  inline ::com::arges::file::proto::RecordInfo* release_info();
  inline void set_allocated_info(::com::arges::file::proto::RecordInfo* info);

  // optional int32 offset = 4 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDownloadRecord)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::std::string* proxyservicecode_;
  ::com::arges::file::proto::RecordInfo* info_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDownloadRecord* default_instance_;
};
// -------------------------------------------------------------------

class RspDownloadRecord : public ::google::protobuf::Message {
 public:
  RspDownloadRecord();
  virtual ~RspDownloadRecord();

  RspDownloadRecord(const RspDownloadRecord& from);

  inline RspDownloadRecord& operator=(const RspDownloadRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDownloadRecord& default_instance();

  void Swap(RspDownloadRecord* other);

  // implements Message ----------------------------------------------

  RspDownloadRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDownloadRecord& from);
  void MergeFrom(const RspDownloadRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string ip = 2 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string token = 4 [default = ""];
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDownloadRecord)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static RspDownloadRecord* default_instance_;
};
// -------------------------------------------------------------------

class NoticeReportRecord : public ::google::protobuf::Message {
 public:
  NoticeReportRecord();
  virtual ~NoticeReportRecord();

  NoticeReportRecord(const NoticeReportRecord& from);

  inline NoticeReportRecord& operator=(const NoticeReportRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeReportRecord& default_instance();

  void Swap(NoticeReportRecord* other);

  // implements Message ----------------------------------------------

  NoticeReportRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeReportRecord& from);
  void MergeFrom(const NoticeReportRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devId = 1 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional .com.arges.file.proto.RecordInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::com::arges::file::proto::RecordInfo& info() const;
  inline ::com::arges::file::proto::RecordInfo* mutable_info();
  inline ::com::arges::file::proto::RecordInfo* release_info();
  inline void set_allocated_info(::com::arges::file::proto::RecordInfo* info);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.NoticeReportRecord)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devid_;
  ::std::string* channelid_;
  ::com::arges::file::proto::RecordInfo* info_;
  friend void  protobuf_AddDesc_CatalogBean_2eproto();
  friend void protobuf_AssignDesc_CatalogBean_2eproto();
  friend void protobuf_ShutdownFile_CatalogBean_2eproto();

  void InitAsDefaultInstance();
  static NoticeReportRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// RspDeviceList

// optional int32 result = 1 [default = -1];
inline bool RspDeviceList::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspDeviceList::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspDeviceList::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspDeviceList::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspDeviceList::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceList.result)
  return result_;
}
inline void RspDeviceList::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceList.result)
}

// repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
inline int RspDeviceList::devinfo_size() const {
  return devinfo_.size();
}
inline void RspDeviceList::clear_devinfo() {
  devinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDeviceList::devinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceList.devinfo)
  return devinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceList::mutable_devinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDeviceList.devinfo)
  return devinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceList::add_devinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDeviceList.devinfo)
  return devinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDeviceList::devinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDeviceList.devinfo)
  return devinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDeviceList::mutable_devinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDeviceList.devinfo)
  return &devinfo_;
}

// -------------------------------------------------------------------

// ReqChannelList

// optional string devId = 1 [default = ""];
inline bool ReqChannelList::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChannelList::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChannelList::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChannelList::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqChannelList::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqChannelList.devId)
  return *devid_;
}
inline void ReqChannelList::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqChannelList.devId)
}
inline void ReqChannelList::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqChannelList.devId)
}
inline void ReqChannelList::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqChannelList.devId)
}
inline ::std::string* ReqChannelList::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqChannelList.devId)
  return devid_;
}
inline ::std::string* ReqChannelList::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqChannelList::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqChannelList.devId)
}

// -------------------------------------------------------------------

// RspChannelList

// optional int32 result = 1 [default = -1];
inline bool RspChannelList::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspChannelList::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspChannelList::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspChannelList::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspChannelList::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspChannelList.result)
  return result_;
}
inline void RspChannelList::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspChannelList.result)
}

// repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
inline int RspChannelList::infos_size() const {
  return infos_.size();
}
inline void RspChannelList::clear_infos() {
  infos_.Clear();
}
inline const ::com::arges::file::proto::EncodeChnnelInfo& RspChannelList::infos(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspChannelList.infos)
  return infos_.Get(index);
}
inline ::com::arges::file::proto::EncodeChnnelInfo* RspChannelList::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspChannelList.infos)
  return infos_.Mutable(index);
}
inline ::com::arges::file::proto::EncodeChnnelInfo* RspChannelList::add_infos() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspChannelList.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >&
RspChannelList::infos() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspChannelList.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >*
RspChannelList::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspChannelList.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// ReqPlayStream

// optional string devId = 1 [default = ""];
inline bool ReqPlayStream::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayStream::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPlayStream::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPlayStream::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqPlayStream::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.devId)
  return *devid_;
}
inline void ReqPlayStream::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.devId)
}
inline void ReqPlayStream::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayStream.devId)
}
inline void ReqPlayStream::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayStream.devId)
}
inline ::std::string* ReqPlayStream::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayStream.devId)
  return devid_;
}
inline ::std::string* ReqPlayStream::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayStream::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayStream.devId)
}

// optional string channelId = 2 [default = ""];
inline bool ReqPlayStream::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayStream::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPlayStream::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPlayStream::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& ReqPlayStream::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.channelId)
  return *channelid_;
}
inline void ReqPlayStream::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.channelId)
}
inline void ReqPlayStream::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayStream.channelId)
}
inline void ReqPlayStream::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayStream.channelId)
}
inline ::std::string* ReqPlayStream::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayStream.channelId)
  return channelid_;
}
inline ::std::string* ReqPlayStream::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayStream::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayStream.channelId)
}

// optional string streamId = 3 [default = ""];
inline bool ReqPlayStream::has_streamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPlayStream::set_has_streamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqPlayStream::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqPlayStream::clear_streamid() {
  if (streamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    streamid_->clear();
  }
  clear_has_streamid();
}
inline const ::std::string& ReqPlayStream::streamid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.streamId)
  return *streamid_;
}
inline void ReqPlayStream::set_streamid(const ::std::string& value) {
  set_has_streamid();
  if (streamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    streamid_ = new ::std::string;
  }
  streamid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.streamId)
}
inline void ReqPlayStream::set_streamid(const char* value) {
  set_has_streamid();
  if (streamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    streamid_ = new ::std::string;
  }
  streamid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayStream.streamId)
}
inline void ReqPlayStream::set_streamid(const char* value, size_t size) {
  set_has_streamid();
  if (streamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    streamid_ = new ::std::string;
  }
  streamid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayStream.streamId)
}
inline ::std::string* ReqPlayStream::mutable_streamid() {
  set_has_streamid();
  if (streamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    streamid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayStream.streamId)
  return streamid_;
}
inline ::std::string* ReqPlayStream::release_streamid() {
  clear_has_streamid();
  if (streamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = streamid_;
    streamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayStream::set_allocated_streamid(::std::string* streamid) {
  if (streamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete streamid_;
  }
  if (streamid) {
    set_has_streamid();
    streamid_ = streamid;
  } else {
    clear_has_streamid();
    streamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayStream.streamId)
}

// optional string proxyServiceCode = 4 [default = ""];
inline bool ReqPlayStream::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqPlayStream::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqPlayStream::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqPlayStream::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& ReqPlayStream::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
  return *proxyservicecode_;
}
inline void ReqPlayStream::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
}
inline void ReqPlayStream::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
}
inline void ReqPlayStream::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
}
inline ::std::string* ReqPlayStream::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* ReqPlayStream::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayStream::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayStream.proxyServiceCode)
}

// optional int32 streamType = 5 [default = 0];
inline bool ReqPlayStream::has_streamtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqPlayStream::set_has_streamtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqPlayStream::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqPlayStream::clear_streamtype() {
  streamtype_ = 0;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 ReqPlayStream::streamtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.streamType)
  return streamtype_;
}
inline void ReqPlayStream::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.streamType)
}

// optional int32 urlType = 6 [default = 0];
inline bool ReqPlayStream::has_urltype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqPlayStream::set_has_urltype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqPlayStream::clear_has_urltype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqPlayStream::clear_urltype() {
  urltype_ = 0;
  clear_has_urltype();
}
inline ::google::protobuf::int32 ReqPlayStream::urltype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.urlType)
  return urltype_;
}
inline void ReqPlayStream::set_urltype(::google::protobuf::int32 value) {
  set_has_urltype();
  urltype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.urlType)
}

// optional string mediaServer = 7 [default = ""];
inline bool ReqPlayStream::has_mediaserver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqPlayStream::set_has_mediaserver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqPlayStream::clear_has_mediaserver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqPlayStream::clear_mediaserver() {
  if (mediaserver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediaserver_->clear();
  }
  clear_has_mediaserver();
}
inline const ::std::string& ReqPlayStream::mediaserver() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayStream.mediaServer)
  return *mediaserver_;
}
inline void ReqPlayStream::set_mediaserver(const ::std::string& value) {
  set_has_mediaserver();
  if (mediaserver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediaserver_ = new ::std::string;
  }
  mediaserver_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayStream.mediaServer)
}
inline void ReqPlayStream::set_mediaserver(const char* value) {
  set_has_mediaserver();
  if (mediaserver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediaserver_ = new ::std::string;
  }
  mediaserver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayStream.mediaServer)
}
inline void ReqPlayStream::set_mediaserver(const char* value, size_t size) {
  set_has_mediaserver();
  if (mediaserver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediaserver_ = new ::std::string;
  }
  mediaserver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayStream.mediaServer)
}
inline ::std::string* ReqPlayStream::mutable_mediaserver() {
  set_has_mediaserver();
  if (mediaserver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediaserver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayStream.mediaServer)
  return mediaserver_;
}
inline ::std::string* ReqPlayStream::release_mediaserver() {
  clear_has_mediaserver();
  if (mediaserver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mediaserver_;
    mediaserver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayStream::set_allocated_mediaserver(::std::string* mediaserver) {
  if (mediaserver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mediaserver_;
  }
  if (mediaserver) {
    set_has_mediaserver();
    mediaserver_ = mediaserver;
  } else {
    clear_has_mediaserver();
    mediaserver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayStream.mediaServer)
}

// -------------------------------------------------------------------

// RspPlayStream

// optional int32 result = 1 [default = -1];
inline bool RspPlayStream::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspPlayStream::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspPlayStream::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspPlayStream::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspPlayStream::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayStream.result)
  return result_;
}
inline void RspPlayStream::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayStream.result)
}

// optional string url = 2 [default = ""];
inline bool RspPlayStream::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspPlayStream::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspPlayStream::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspPlayStream::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& RspPlayStream::url() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayStream.url)
  return *url_;
}
inline void RspPlayStream::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayStream.url)
}
inline void RspPlayStream::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspPlayStream.url)
}
inline void RspPlayStream::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspPlayStream.url)
}
inline ::std::string* RspPlayStream::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspPlayStream.url)
  return url_;
}
inline ::std::string* RspPlayStream::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspPlayStream::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspPlayStream.url)
}

// -------------------------------------------------------------------

// RecordInfo

// optional string name = 1 [default = ""];
inline bool RecordInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RecordInfo::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.name)
  return *name_;
}
inline void RecordInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.name)
}
inline void RecordInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.name)
}
inline void RecordInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.name)
}
inline ::std::string* RecordInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.name)
  return name_;
}
inline ::std::string* RecordInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.name)
}

// optional string path = 2 [default = ""];
inline bool RecordInfo::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordInfo::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& RecordInfo::path() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.path)
  return *path_;
}
inline void RecordInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.path)
}
inline void RecordInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.path)
}
inline void RecordInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.path)
}
inline ::std::string* RecordInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.path)
  return path_;
}
inline ::std::string* RecordInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.path)
}

// optional int32 size = 3 [default = 0];
inline bool RecordInfo::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordInfo::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 RecordInfo::size() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.size)
  return size_;
}
inline void RecordInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.size)
}

// optional string beginTime = 4 [default = ""];
inline bool RecordInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordInfo::clear_begintime() {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_->clear();
  }
  clear_has_begintime();
}
inline const ::std::string& RecordInfo::begintime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.beginTime)
  return *begintime_;
}
inline void RecordInfo::set_begintime(const ::std::string& value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.beginTime)
}
inline void RecordInfo::set_begintime(const char* value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.beginTime)
}
inline void RecordInfo::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.beginTime)
}
inline ::std::string* RecordInfo::mutable_begintime() {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.beginTime)
  return begintime_;
}
inline ::std::string* RecordInfo::release_begintime() {
  clear_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime_;
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_begintime(::std::string* begintime) {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (begintime) {
    set_has_begintime();
    begintime_ = begintime;
  } else {
    clear_has_begintime();
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.beginTime)
}

// optional string endTime = 5 [default = ""];
inline bool RecordInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordInfo::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& RecordInfo::endtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.endTime)
  return *endtime_;
}
inline void RecordInfo::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.endTime)
}
inline void RecordInfo::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.endTime)
}
inline void RecordInfo::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.endTime)
}
inline ::std::string* RecordInfo::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.endTime)
  return endtime_;
}
inline ::std::string* RecordInfo::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.endTime)
}

// optional string id = 6 [default = ""];
inline bool RecordInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RecordInfo::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.id)
  return *id_;
}
inline void RecordInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.id)
}
inline void RecordInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.id)
}
inline void RecordInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.id)
}
inline ::std::string* RecordInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.id)
  return id_;
}
inline ::std::string* RecordInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.id)
}

// optional string reason = 7 [default = ""];
inline bool RecordInfo::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordInfo::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordInfo::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordInfo::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& RecordInfo::reason() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.reason)
  return *reason_;
}
inline void RecordInfo::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.reason)
}
inline void RecordInfo::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordInfo.reason)
}
inline void RecordInfo::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordInfo.reason)
}
inline ::std::string* RecordInfo::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordInfo.reason)
  return reason_;
}
inline ::std::string* RecordInfo::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordInfo::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RecordInfo.reason)
}

// optional int32 sourceType = 8 [default = 0];
inline bool RecordInfo::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordInfo::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordInfo::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordInfo::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 RecordInfo::sourcetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordInfo.sourceType)
  return sourcetype_;
}
inline void RecordInfo::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordInfo.sourceType)
}

// -------------------------------------------------------------------

// ReqQueryRecord

// optional string devId = 1 [default = ""];
inline bool ReqQueryRecord::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqQueryRecord::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqQueryRecord::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqQueryRecord::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqQueryRecord::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.devId)
  return *devid_;
}
inline void ReqQueryRecord::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.devId)
}
inline void ReqQueryRecord::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqQueryRecord.devId)
}
inline void ReqQueryRecord::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqQueryRecord.devId)
}
inline ::std::string* ReqQueryRecord::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqQueryRecord.devId)
  return devid_;
}
inline ::std::string* ReqQueryRecord::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqQueryRecord::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqQueryRecord.devId)
}

// optional string channelId = 2 [default = ""];
inline bool ReqQueryRecord::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqQueryRecord::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqQueryRecord::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqQueryRecord::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& ReqQueryRecord::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.channelId)
  return *channelid_;
}
inline void ReqQueryRecord::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.channelId)
}
inline void ReqQueryRecord::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqQueryRecord.channelId)
}
inline void ReqQueryRecord::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqQueryRecord.channelId)
}
inline ::std::string* ReqQueryRecord::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqQueryRecord.channelId)
  return channelid_;
}
inline ::std::string* ReqQueryRecord::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqQueryRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqQueryRecord.channelId)
}

// optional string proxyServiceCode = 3 [default = ""];
inline bool ReqQueryRecord::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqQueryRecord::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqQueryRecord::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqQueryRecord::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& ReqQueryRecord::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
  return *proxyservicecode_;
}
inline void ReqQueryRecord::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
}
inline void ReqQueryRecord::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
}
inline void ReqQueryRecord::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
}
inline ::std::string* ReqQueryRecord::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* ReqQueryRecord::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqQueryRecord::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqQueryRecord.proxyServiceCode)
}

// optional int32 sourceType = 4 [default = 0];
inline bool ReqQueryRecord::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqQueryRecord::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqQueryRecord::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqQueryRecord::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 ReqQueryRecord::sourcetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.sourceType)
  return sourcetype_;
}
inline void ReqQueryRecord::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.sourceType)
}

// optional int32 recordType = 5 [default = 0];
inline bool ReqQueryRecord::has_recordtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqQueryRecord::set_has_recordtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqQueryRecord::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqQueryRecord::clear_recordtype() {
  recordtype_ = 0;
  clear_has_recordtype();
}
inline ::google::protobuf::int32 ReqQueryRecord::recordtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.recordType)
  return recordtype_;
}
inline void ReqQueryRecord::set_recordtype(::google::protobuf::int32 value) {
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.recordType)
}

// optional string beginTime = 6 [default = ""];
inline bool ReqQueryRecord::has_begintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqQueryRecord::set_has_begintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqQueryRecord::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqQueryRecord::clear_begintime() {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_->clear();
  }
  clear_has_begintime();
}
inline const ::std::string& ReqQueryRecord::begintime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.beginTime)
  return *begintime_;
}
inline void ReqQueryRecord::set_begintime(const ::std::string& value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.beginTime)
}
inline void ReqQueryRecord::set_begintime(const char* value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqQueryRecord.beginTime)
}
inline void ReqQueryRecord::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqQueryRecord.beginTime)
}
inline ::std::string* ReqQueryRecord::mutable_begintime() {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqQueryRecord.beginTime)
  return begintime_;
}
inline ::std::string* ReqQueryRecord::release_begintime() {
  clear_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime_;
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqQueryRecord::set_allocated_begintime(::std::string* begintime) {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (begintime) {
    set_has_begintime();
    begintime_ = begintime;
  } else {
    clear_has_begintime();
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqQueryRecord.beginTime)
}

// optional string endTime = 7 [default = ""];
inline bool ReqQueryRecord::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqQueryRecord::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqQueryRecord::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqQueryRecord::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& ReqQueryRecord::endtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.endTime)
  return *endtime_;
}
inline void ReqQueryRecord::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.endTime)
}
inline void ReqQueryRecord::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqQueryRecord.endTime)
}
inline void ReqQueryRecord::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqQueryRecord.endTime)
}
inline ::std::string* ReqQueryRecord::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqQueryRecord.endTime)
  return endtime_;
}
inline ::std::string* ReqQueryRecord::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqQueryRecord::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqQueryRecord.endTime)
}

// optional int32 offset = 8 [default = 0];
inline bool ReqQueryRecord::has_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqQueryRecord::set_has_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqQueryRecord::clear_has_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqQueryRecord::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ReqQueryRecord::offset() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.offset)
  return offset_;
}
inline void ReqQueryRecord::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.offset)
}

// optional int32 count = 9 [default = 0];
inline bool ReqQueryRecord::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqQueryRecord::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqQueryRecord::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqQueryRecord::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ReqQueryRecord::count() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqQueryRecord.count)
  return count_;
}
inline void ReqQueryRecord::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqQueryRecord.count)
}

// -------------------------------------------------------------------

// RspQueryRecord

// optional int32 result = 1 [default = -1];
inline bool RspQueryRecord::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspQueryRecord::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspQueryRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspQueryRecord::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspQueryRecord::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspQueryRecord.result)
  return result_;
}
inline void RspQueryRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspQueryRecord.result)
}

// repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
inline int RspQueryRecord::recordinfos_size() const {
  return recordinfos_.size();
}
inline void RspQueryRecord::clear_recordinfos() {
  recordinfos_.Clear();
}
inline const ::com::arges::file::proto::RecordInfo& RspQueryRecord::recordinfos(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspQueryRecord.recordInfos)
  return recordinfos_.Get(index);
}
inline ::com::arges::file::proto::RecordInfo* RspQueryRecord::mutable_recordinfos(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspQueryRecord.recordInfos)
  return recordinfos_.Mutable(index);
}
inline ::com::arges::file::proto::RecordInfo* RspQueryRecord::add_recordinfos() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspQueryRecord.recordInfos)
  return recordinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordInfo >&
RspQueryRecord::recordinfos() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspQueryRecord.recordInfos)
  return recordinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordInfo >*
RspQueryRecord::mutable_recordinfos() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspQueryRecord.recordInfos)
  return &recordinfos_;
}

// -------------------------------------------------------------------

// ReqPlayRecord

// optional string devId = 1 [default = ""];
inline bool ReqPlayRecord::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayRecord::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPlayRecord::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPlayRecord::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqPlayRecord::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.devId)
  return *devid_;
}
inline void ReqPlayRecord::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.devId)
}
inline void ReqPlayRecord::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayRecord.devId)
}
inline void ReqPlayRecord::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayRecord.devId)
}
inline ::std::string* ReqPlayRecord::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayRecord.devId)
  return devid_;
}
inline ::std::string* ReqPlayRecord::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayRecord::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayRecord.devId)
}

// optional string channelId = 2 [default = ""];
inline bool ReqPlayRecord::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayRecord::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPlayRecord::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPlayRecord::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& ReqPlayRecord::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.channelId)
  return *channelid_;
}
inline void ReqPlayRecord::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.channelId)
}
inline void ReqPlayRecord::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayRecord.channelId)
}
inline void ReqPlayRecord::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayRecord.channelId)
}
inline ::std::string* ReqPlayRecord::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayRecord.channelId)
  return channelid_;
}
inline ::std::string* ReqPlayRecord::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayRecord.channelId)
}

// optional string proxyServiceCode = 3 [default = ""];
inline bool ReqPlayRecord::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPlayRecord::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqPlayRecord::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqPlayRecord::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& ReqPlayRecord::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
  return *proxyservicecode_;
}
inline void ReqPlayRecord::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
}
inline void ReqPlayRecord::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
}
inline void ReqPlayRecord::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
}
inline ::std::string* ReqPlayRecord::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* ReqPlayRecord::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayRecord::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayRecord.proxyServiceCode)
}

// optional string beginTime = 4 [default = ""];
inline bool ReqPlayRecord::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqPlayRecord::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqPlayRecord::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqPlayRecord::clear_begintime() {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_->clear();
  }
  clear_has_begintime();
}
inline const ::std::string& ReqPlayRecord::begintime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.beginTime)
  return *begintime_;
}
inline void ReqPlayRecord::set_begintime(const ::std::string& value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.beginTime)
}
inline void ReqPlayRecord::set_begintime(const char* value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayRecord.beginTime)
}
inline void ReqPlayRecord::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayRecord.beginTime)
}
inline ::std::string* ReqPlayRecord::mutable_begintime() {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayRecord.beginTime)
  return begintime_;
}
inline ::std::string* ReqPlayRecord::release_begintime() {
  clear_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime_;
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayRecord::set_allocated_begintime(::std::string* begintime) {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (begintime) {
    set_has_begintime();
    begintime_ = begintime;
  } else {
    clear_has_begintime();
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayRecord.beginTime)
}

// optional string endTime = 5 [default = ""];
inline bool ReqPlayRecord::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqPlayRecord::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqPlayRecord::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqPlayRecord::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& ReqPlayRecord::endtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.endTime)
  return *endtime_;
}
inline void ReqPlayRecord::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.endTime)
}
inline void ReqPlayRecord::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqPlayRecord.endTime)
}
inline void ReqPlayRecord::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqPlayRecord.endTime)
}
inline ::std::string* ReqPlayRecord::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqPlayRecord.endTime)
  return endtime_;
}
inline ::std::string* ReqPlayRecord::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqPlayRecord::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqPlayRecord.endTime)
}

// optional int32 sourceType = 6 [default = 0];
inline bool ReqPlayRecord::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqPlayRecord::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqPlayRecord::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqPlayRecord::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 ReqPlayRecord::sourcetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqPlayRecord.sourceType)
  return sourcetype_;
}
inline void ReqPlayRecord::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqPlayRecord.sourceType)
}

// -------------------------------------------------------------------

// RspPlayRecord

// optional int32 result = 1 [default = -1];
inline bool RspPlayRecord::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspPlayRecord::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspPlayRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspPlayRecord::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspPlayRecord::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayRecord.result)
  return result_;
}
inline void RspPlayRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayRecord.result)
}

// optional string ip = 2 [default = ""];
inline bool RspPlayRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspPlayRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspPlayRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspPlayRecord::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspPlayRecord::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayRecord.ip)
  return *ip_;
}
inline void RspPlayRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayRecord.ip)
}
inline void RspPlayRecord::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspPlayRecord.ip)
}
inline void RspPlayRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspPlayRecord.ip)
}
inline ::std::string* RspPlayRecord::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspPlayRecord.ip)
  return ip_;
}
inline ::std::string* RspPlayRecord::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspPlayRecord::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspPlayRecord.ip)
}

// optional int32 port = 3 [default = -1];
inline bool RspPlayRecord::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspPlayRecord::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspPlayRecord::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspPlayRecord::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 RspPlayRecord::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayRecord.port)
  return port_;
}
inline void RspPlayRecord::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayRecord.port)
}

// optional string token = 4 [default = ""];
inline bool RspPlayRecord::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspPlayRecord::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspPlayRecord::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspPlayRecord::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspPlayRecord::token() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayRecord.token)
  return *token_;
}
inline void RspPlayRecord::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayRecord.token)
}
inline void RspPlayRecord::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspPlayRecord.token)
}
inline void RspPlayRecord::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspPlayRecord.token)
}
inline ::std::string* RspPlayRecord::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspPlayRecord.token)
  return token_;
}
inline ::std::string* RspPlayRecord::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspPlayRecord::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspPlayRecord.token)
}

// optional string session = 5 [default = ""];
inline bool RspPlayRecord::has_session() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspPlayRecord::set_has_session() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspPlayRecord::clear_has_session() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspPlayRecord::clear_session() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& RspPlayRecord::session() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspPlayRecord.session)
  return *session_;
}
inline void RspPlayRecord::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspPlayRecord.session)
}
inline void RspPlayRecord::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspPlayRecord.session)
}
inline void RspPlayRecord::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspPlayRecord.session)
}
inline ::std::string* RspPlayRecord::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspPlayRecord.session)
  return session_;
}
inline ::std::string* RspPlayRecord::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspPlayRecord::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspPlayRecord.session)
}

// -------------------------------------------------------------------

// ReqDownloadRecord

// optional string devId = 1 [default = ""];
inline bool ReqDownloadRecord::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDownloadRecord::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDownloadRecord::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDownloadRecord::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& ReqDownloadRecord::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDownloadRecord.devId)
  return *devid_;
}
inline void ReqDownloadRecord::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDownloadRecord.devId)
}
inline void ReqDownloadRecord::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDownloadRecord.devId)
}
inline void ReqDownloadRecord::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDownloadRecord.devId)
}
inline ::std::string* ReqDownloadRecord::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDownloadRecord.devId)
  return devid_;
}
inline ::std::string* ReqDownloadRecord::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDownloadRecord::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDownloadRecord.devId)
}

// optional string proxyServiceCode = 2 [default = ""];
inline bool ReqDownloadRecord::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDownloadRecord::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDownloadRecord::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDownloadRecord::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& ReqDownloadRecord::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
  return *proxyservicecode_;
}
inline void ReqDownloadRecord::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
}
inline void ReqDownloadRecord::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
}
inline void ReqDownloadRecord::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
}
inline ::std::string* ReqDownloadRecord::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* ReqDownloadRecord::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDownloadRecord::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDownloadRecord.proxyServiceCode)
}

// optional .com.arges.file.proto.RecordInfo info = 3;
inline bool ReqDownloadRecord::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqDownloadRecord::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqDownloadRecord::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqDownloadRecord::clear_info() {
  if (info_ != NULL) info_->::com::arges::file::proto::RecordInfo::Clear();
  clear_has_info();
}
inline const ::com::arges::file::proto::RecordInfo& ReqDownloadRecord::info() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDownloadRecord.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::com::arges::file::proto::RecordInfo* ReqDownloadRecord::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::com::arges::file::proto::RecordInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDownloadRecord.info)
  return info_;
}
inline ::com::arges::file::proto::RecordInfo* ReqDownloadRecord::release_info() {
  clear_has_info();
  ::com::arges::file::proto::RecordInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ReqDownloadRecord::set_allocated_info(::com::arges::file::proto::RecordInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDownloadRecord.info)
}

// optional int32 offset = 4 [default = 0];
inline bool ReqDownloadRecord::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqDownloadRecord::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqDownloadRecord::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqDownloadRecord::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ReqDownloadRecord::offset() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDownloadRecord.offset)
  return offset_;
}
inline void ReqDownloadRecord::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDownloadRecord.offset)
}

// -------------------------------------------------------------------

// RspDownloadRecord

// optional int32 result = 1 [default = -1];
inline bool RspDownloadRecord::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspDownloadRecord::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspDownloadRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspDownloadRecord::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspDownloadRecord::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDownloadRecord.result)
  return result_;
}
inline void RspDownloadRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDownloadRecord.result)
}

// optional string ip = 2 [default = ""];
inline bool RspDownloadRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspDownloadRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspDownloadRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspDownloadRecord::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspDownloadRecord::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDownloadRecord.ip)
  return *ip_;
}
inline void RspDownloadRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDownloadRecord.ip)
}
inline void RspDownloadRecord::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDownloadRecord.ip)
}
inline void RspDownloadRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDownloadRecord.ip)
}
inline ::std::string* RspDownloadRecord::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDownloadRecord.ip)
  return ip_;
}
inline ::std::string* RspDownloadRecord::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspDownloadRecord::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDownloadRecord.ip)
}

// optional int32 port = 3 [default = -1];
inline bool RspDownloadRecord::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspDownloadRecord::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspDownloadRecord::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspDownloadRecord::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 RspDownloadRecord::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDownloadRecord.port)
  return port_;
}
inline void RspDownloadRecord::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDownloadRecord.port)
}

// optional string token = 4 [default = ""];
inline bool RspDownloadRecord::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspDownloadRecord::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspDownloadRecord::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspDownloadRecord::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspDownloadRecord::token() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDownloadRecord.token)
  return *token_;
}
inline void RspDownloadRecord::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDownloadRecord.token)
}
inline void RspDownloadRecord::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDownloadRecord.token)
}
inline void RspDownloadRecord::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDownloadRecord.token)
}
inline ::std::string* RspDownloadRecord::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDownloadRecord.token)
  return token_;
}
inline ::std::string* RspDownloadRecord::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspDownloadRecord::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDownloadRecord.token)
}

// -------------------------------------------------------------------

// NoticeReportRecord

// optional string devId = 1 [default = ""];
inline bool NoticeReportRecord::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeReportRecord::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeReportRecord::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeReportRecord::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& NoticeReportRecord::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.NoticeReportRecord.devId)
  return *devid_;
}
inline void NoticeReportRecord::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.NoticeReportRecord.devId)
}
inline void NoticeReportRecord::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.NoticeReportRecord.devId)
}
inline void NoticeReportRecord::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.NoticeReportRecord.devId)
}
inline ::std::string* NoticeReportRecord::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.NoticeReportRecord.devId)
  return devid_;
}
inline ::std::string* NoticeReportRecord::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoticeReportRecord::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.NoticeReportRecord.devId)
}

// optional string channelId = 2 [default = ""];
inline bool NoticeReportRecord::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeReportRecord::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeReportRecord::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeReportRecord::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& NoticeReportRecord::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.NoticeReportRecord.channelId)
  return *channelid_;
}
inline void NoticeReportRecord::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.NoticeReportRecord.channelId)
}
inline void NoticeReportRecord::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.NoticeReportRecord.channelId)
}
inline void NoticeReportRecord::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.NoticeReportRecord.channelId)
}
inline ::std::string* NoticeReportRecord::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.NoticeReportRecord.channelId)
  return channelid_;
}
inline ::std::string* NoticeReportRecord::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoticeReportRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.NoticeReportRecord.channelId)
}

// optional .com.arges.file.proto.RecordInfo info = 3;
inline bool NoticeReportRecord::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticeReportRecord::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticeReportRecord::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticeReportRecord::clear_info() {
  if (info_ != NULL) info_->::com::arges::file::proto::RecordInfo::Clear();
  clear_has_info();
}
inline const ::com::arges::file::proto::RecordInfo& NoticeReportRecord::info() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.NoticeReportRecord.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::com::arges::file::proto::RecordInfo* NoticeReportRecord::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::com::arges::file::proto::RecordInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.NoticeReportRecord.info)
  return info_;
}
inline ::com::arges::file::proto::RecordInfo* NoticeReportRecord::release_info() {
  clear_has_info();
  ::com::arges::file::proto::RecordInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void NoticeReportRecord::set_allocated_info(::com::arges::file::proto::RecordInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.NoticeReportRecord.info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_CATALOG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_CATALOG>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_CATALOG_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::STREAM_PROTOCOL_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::STREAM_PROTOCOL_TYPE>() {
  return ::com::arges::file::proto::STREAM_PROTOCOL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::URL_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::URL_TYPE>() {
  return ::com::arges::file::proto::URL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RECORD_SOURCE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RECORD_SOURCE_TYPE>() {
  return ::com::arges::file::proto::RECORD_SOURCE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CatalogBean_2eproto__INCLUDED
