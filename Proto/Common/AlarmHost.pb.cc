// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlarmHost.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AlarmHost.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SetAHostMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAHostMassage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ALARMHOST_OPT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AHOST_CMD_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AlarmHost_2eproto() {
  protobuf_AddDesc_AlarmHost_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AlarmHost.proto");
  GOOGLE_CHECK(file != NULL);
  SetAHostMassage_descriptor_ = file->message_type(0);
  static const int SetAHostMassage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, endtime_),
  };
  SetAHostMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAHostMassage_descriptor_,
      SetAHostMassage::default_instance_,
      SetAHostMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAHostMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAHostMassage));
  ALARMHOST_OPT_TYPE_descriptor_ = file->enum_type(0);
  AHOST_CMD_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AlarmHost_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAHostMassage_descriptor_, &SetAHostMassage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AlarmHost_2eproto() {
  delete SetAHostMassage::default_instance_;
  delete SetAHostMassage_reflection_;
}

void protobuf_AddDesc_AlarmHost_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017AlarmHost.proto\022\024com.arges.file.proto\""
    "\201\001\n\017SetAHostMassage\022\017\n\005devid\030\001 \001(\t:\000\022\016\n\006"
    "nodeid\030\002 \003(\t\022\020\n\004type\030\003 \001(\005:\002-1\022\017\n\003cmd\030\004 "
    "\001(\005:\002-1\022\025\n\tstartTime\030\005 \001(\003:\002-1\022\023\n\007endTim"
    "e\030\006 \001(\003:\002-1*f\n\022ALARMHOST_OPT_TYPE\022\030\n\024AHO"
    "ST_OPERATE_DEVICE\020\001\022\031\n\025AHOST_OPERATE_CHA"
    "NNEL\020\002\022\033\n\027AHOST_OPERATE_PARTITION\020\003*\333\001\n\016"
    "AHOST_CMD_TYPE\022\024\n\020AHOST_CMD_ENABLE\020\001\022\025\n\021"
    "AHOST_CMD_DISABLE\020\002\022\024\n\020AHOST_CMD_BYPASS\020"
    "\003\022\033\n\027AHOST_CMD_CANCELKBLIGHT\020\004\022\027\n\023AHOST_"
    "CMD_ALARMMODE\020\005\022\031\n\025AHOST_CMD_CANCELALARM"
    "\020\006\022\031\n\025AHOST_CMD_ALARMOUT_ON\020\007\022\032\n\026AHOST_C"
    "MD_ALARMOUT_OFF\020\010", 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AlarmHost.proto", &protobuf_RegisterTypes);
  SetAHostMassage::default_instance_ = new SetAHostMassage();
  SetAHostMassage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AlarmHost_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AlarmHost_2eproto {
  StaticDescriptorInitializer_AlarmHost_2eproto() {
    protobuf_AddDesc_AlarmHost_2eproto();
  }
} static_descriptor_initializer_AlarmHost_2eproto_;
const ::google::protobuf::EnumDescriptor* ALARMHOST_OPT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALARMHOST_OPT_TYPE_descriptor_;
}
bool ALARMHOST_OPT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AHOST_CMD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AHOST_CMD_TYPE_descriptor_;
}
bool AHOST_CMD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SetAHostMassage::kDevidFieldNumber;
const int SetAHostMassage::kNodeidFieldNumber;
const int SetAHostMassage::kTypeFieldNumber;
const int SetAHostMassage::kCmdFieldNumber;
const int SetAHostMassage::kStartTimeFieldNumber;
const int SetAHostMassage::kEndTimeFieldNumber;
#endif  // !_MSC_VER

SetAHostMassage::SetAHostMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.SetAHostMassage)
}

void SetAHostMassage::InitAsDefaultInstance() {
}

SetAHostMassage::SetAHostMassage(const SetAHostMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.SetAHostMassage)
}

void SetAHostMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  cmd_ = -1;
  starttime_ = GOOGLE_LONGLONG(-1);
  endtime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAHostMassage::~SetAHostMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.SetAHostMassage)
  SharedDtor();
}

void SetAHostMassage::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (this != default_instance_) {
  }
}

void SetAHostMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAHostMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAHostMassage_descriptor_;
}

const SetAHostMassage& SetAHostMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmHost_2eproto();
  return *default_instance_;
}

SetAHostMassage* SetAHostMassage::default_instance_ = NULL;

SetAHostMassage* SetAHostMassage::New() const {
  return new SetAHostMassage;
}

void SetAHostMassage::Clear() {
  if (_has_bits_[0 / 32] & 61) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    type_ = -1;
    cmd_ = -1;
    starttime_ = GOOGLE_LONGLONG(-1);
    endtime_ = GOOGLE_LONGLONG(-1);
  }
  nodeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAHostMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.SetAHostMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodeid;
        break;
      }

      // repeated string nodeid = 2;
      case 2: {
        if (tag == 18) {
         parse_nodeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodeid(this->nodeid_size() - 1).data(),
            this->nodeid(this->nodeid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodeid;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }

      // optional int32 cmd = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.SetAHostMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.SetAHostMassage)
  return false;
#undef DO_
}

void SetAHostMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.SetAHostMassage)
  // optional string devid = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // repeated string nodeid = 2;
  for (int i = 0; i < this->nodeid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodeid(i).data(), this->nodeid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "nodeid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodeid(i), output);
  }

  // optional int32 type = 3 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 cmd = 4 [default = -1];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cmd(), output);
  }

  // optional int64 startTime = 5 [default = -1];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starttime(), output);
  }

  // optional int64 endTime = 6 [default = -1];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.SetAHostMassage)
}

::google::protobuf::uint8* SetAHostMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.SetAHostMassage)
  // optional string devid = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // repeated string nodeid = 2;
  for (int i = 0; i < this->nodeid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid(i).data(), this->nodeid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodeid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nodeid(i), target);
  }

  // optional int32 type = 3 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 cmd = 4 [default = -1];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cmd(), target);
  }

  // optional int64 startTime = 5 [default = -1];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starttime(), target);
  }

  // optional int64 endTime = 6 [default = -1];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.SetAHostMassage)
  return target;
}

int SetAHostMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devid = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional int32 type = 3 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cmd = 4 [default = -1];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int64 startTime = 5 [default = -1];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 6 [default = -1];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  // repeated string nodeid = 2;
  total_size += 1 * this->nodeid_size();
  for (int i = 0; i < this->nodeid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodeid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAHostMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAHostMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAHostMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAHostMassage::MergeFrom(const SetAHostMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodeid_.MergeFrom(from.nodeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAHostMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAHostMassage::CopyFrom(const SetAHostMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAHostMassage::IsInitialized() const {

  return true;
}

void SetAHostMassage::Swap(SetAHostMassage* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    nodeid_.Swap(&other->nodeid_);
    std::swap(type_, other->type_);
    std::swap(cmd_, other->cmd_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAHostMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAHostMassage_descriptor_;
  metadata.reflection = SetAHostMassage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
