// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignInDataBean.proto

#ifndef PROTOBUF_SignInDataBean_2eproto__INCLUDED
#define PROTOBUF_SignInDataBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "HbeaconDataBean.pb.h"
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SignInDataBean_2eproto();
void protobuf_AssignDesc_SignInDataBean_2eproto();
void protobuf_ShutdownFile_SignInDataBean_2eproto();

class SigninDataForHistory;
class WristUserPhoto;
class WristUserName;
class WhiteUserMassage;
class QueryBlackWhite;
class GateConfigureInfo;
class GateConfMessage;
class WhiteUserMassageTest;
class WristSignInTime;
class SigninMassageForReal;
class HotMapData;
class HotMapMassage;
class ReportHotMapData;
class ReportHotMapData_Data;

enum AUTO_MODE_OF_USER {
  AUTO_MODE_BY_WRIST = 0,
  AUTO_MODE_BY_IDENTIFY = 1
};
bool AUTO_MODE_OF_USER_IsValid(int value);
const AUTO_MODE_OF_USER AUTO_MODE_OF_USER_MIN = AUTO_MODE_BY_WRIST;
const AUTO_MODE_OF_USER AUTO_MODE_OF_USER_MAX = AUTO_MODE_BY_IDENTIFY;
const int AUTO_MODE_OF_USER_ARRAYSIZE = AUTO_MODE_OF_USER_MAX + 1;

const ::google::protobuf::EnumDescriptor* AUTO_MODE_OF_USER_descriptor();
inline const ::std::string& AUTO_MODE_OF_USER_Name(AUTO_MODE_OF_USER value) {
  return ::google::protobuf::internal::NameOfEnum(
    AUTO_MODE_OF_USER_descriptor(), value);
}
inline bool AUTO_MODE_OF_USER_Parse(
    const ::std::string& name, AUTO_MODE_OF_USER* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AUTO_MODE_OF_USER>(
    AUTO_MODE_OF_USER_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_WHITE_LIST {
  WHITE_LIST_REQUEST_GET_ALL = 1,
  WHITE_LIST_REQUEST_GET_BY_WRIST_MAC = 2,
  WHITE_LIST_REQUEST_ADD = 3,
  WHITE_LIST_REQUEST_UPDATE = 4,
  WHITE_LIST_REQUEST_DELETE = 5,
  WHITE_LIST_REQUEST_CLEAR = 6
};
bool REQUEST_TYPE_OF_WHITE_LIST_IsValid(int value);
const REQUEST_TYPE_OF_WHITE_LIST REQUEST_TYPE_OF_WHITE_LIST_MIN = WHITE_LIST_REQUEST_GET_ALL;
const REQUEST_TYPE_OF_WHITE_LIST REQUEST_TYPE_OF_WHITE_LIST_MAX = WHITE_LIST_REQUEST_CLEAR;
const int REQUEST_TYPE_OF_WHITE_LIST_ARRAYSIZE = REQUEST_TYPE_OF_WHITE_LIST_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_WHITE_LIST_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_WHITE_LIST_Name(REQUEST_TYPE_OF_WHITE_LIST value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_WHITE_LIST_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_WHITE_LIST_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_WHITE_LIST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_WHITE_LIST>(
    REQUEST_TYPE_OF_WHITE_LIST_descriptor(), name, value);
}
enum RESULT_TYPE_OF_WHITE_LIST {
  WHITE_LIST_RESULT_IS_OK = 1,
  WHITE_LIST_RESULT_IS_ERROR = 2
};
bool RESULT_TYPE_OF_WHITE_LIST_IsValid(int value);
const RESULT_TYPE_OF_WHITE_LIST RESULT_TYPE_OF_WHITE_LIST_MIN = WHITE_LIST_RESULT_IS_OK;
const RESULT_TYPE_OF_WHITE_LIST RESULT_TYPE_OF_WHITE_LIST_MAX = WHITE_LIST_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_WHITE_LIST_ARRAYSIZE = RESULT_TYPE_OF_WHITE_LIST_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_WHITE_LIST_descriptor();
inline const ::std::string& RESULT_TYPE_OF_WHITE_LIST_Name(RESULT_TYPE_OF_WHITE_LIST value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_WHITE_LIST_descriptor(), value);
}
inline bool RESULT_TYPE_OF_WHITE_LIST_Parse(
    const ::std::string& name, RESULT_TYPE_OF_WHITE_LIST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_WHITE_LIST>(
    RESULT_TYPE_OF_WHITE_LIST_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_GATE_CONF {
  GATE_CONF_GET_BY_DEVCODE = 1,
  GATE_CONF_GET_ALL = 2,
  GATE_CONF_GET_BY_BOXCODE = 3
};
bool REQUEST_TYPE_OF_GATE_CONF_IsValid(int value);
const REQUEST_TYPE_OF_GATE_CONF REQUEST_TYPE_OF_GATE_CONF_MIN = GATE_CONF_GET_BY_DEVCODE;
const REQUEST_TYPE_OF_GATE_CONF REQUEST_TYPE_OF_GATE_CONF_MAX = GATE_CONF_GET_BY_BOXCODE;
const int REQUEST_TYPE_OF_GATE_CONF_ARRAYSIZE = REQUEST_TYPE_OF_GATE_CONF_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_GATE_CONF_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_GATE_CONF_Name(REQUEST_TYPE_OF_GATE_CONF value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_GATE_CONF_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_GATE_CONF_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_GATE_CONF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_GATE_CONF>(
    REQUEST_TYPE_OF_GATE_CONF_descriptor(), name, value);
}
enum RESULT_TYPE_OF_GATE_CONF {
  GATE_CONF_RESULT_IS_OK = 0,
  GATE_CONF_RESULT_IS_ERROR = 1
};
bool RESULT_TYPE_OF_GATE_CONF_IsValid(int value);
const RESULT_TYPE_OF_GATE_CONF RESULT_TYPE_OF_GATE_CONF_MIN = GATE_CONF_RESULT_IS_OK;
const RESULT_TYPE_OF_GATE_CONF RESULT_TYPE_OF_GATE_CONF_MAX = GATE_CONF_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_GATE_CONF_ARRAYSIZE = RESULT_TYPE_OF_GATE_CONF_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_GATE_CONF_descriptor();
inline const ::std::string& RESULT_TYPE_OF_GATE_CONF_Name(RESULT_TYPE_OF_GATE_CONF value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_GATE_CONF_descriptor(), value);
}
inline bool RESULT_TYPE_OF_GATE_CONF_Parse(
    const ::std::string& name, RESULT_TYPE_OF_GATE_CONF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_GATE_CONF>(
    RESULT_TYPE_OF_GATE_CONF_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_HOST_MAP {
  HOST_MAP_GET_IPC_BY_ORG = 1,
  HOST_MAP_GET_PEOPLE_COUNT = 2
};
bool REQUEST_TYPE_OF_HOST_MAP_IsValid(int value);
const REQUEST_TYPE_OF_HOST_MAP REQUEST_TYPE_OF_HOST_MAP_MIN = HOST_MAP_GET_IPC_BY_ORG;
const REQUEST_TYPE_OF_HOST_MAP REQUEST_TYPE_OF_HOST_MAP_MAX = HOST_MAP_GET_PEOPLE_COUNT;
const int REQUEST_TYPE_OF_HOST_MAP_ARRAYSIZE = REQUEST_TYPE_OF_HOST_MAP_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_HOST_MAP_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_HOST_MAP_Name(REQUEST_TYPE_OF_HOST_MAP value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_HOST_MAP_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_HOST_MAP_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_HOST_MAP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_HOST_MAP>(
    REQUEST_TYPE_OF_HOST_MAP_descriptor(), name, value);
}
enum RESULT_TYPE_OF_HOST_MAP {
  HOST_MAP_RESULT_IS_OK = 1,
  HOST_MAP_RESULT_IS_ERROR = 2
};
bool RESULT_TYPE_OF_HOST_MAP_IsValid(int value);
const RESULT_TYPE_OF_HOST_MAP RESULT_TYPE_OF_HOST_MAP_MIN = HOST_MAP_RESULT_IS_OK;
const RESULT_TYPE_OF_HOST_MAP RESULT_TYPE_OF_HOST_MAP_MAX = HOST_MAP_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_HOST_MAP_ARRAYSIZE = RESULT_TYPE_OF_HOST_MAP_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_HOST_MAP_descriptor();
inline const ::std::string& RESULT_TYPE_OF_HOST_MAP_Name(RESULT_TYPE_OF_HOST_MAP value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_HOST_MAP_descriptor(), value);
}
inline bool RESULT_TYPE_OF_HOST_MAP_Parse(
    const ::std::string& name, RESULT_TYPE_OF_HOST_MAP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_HOST_MAP>(
    RESULT_TYPE_OF_HOST_MAP_descriptor(), name, value);
}
// ===================================================================

class SigninDataForHistory : public ::google::protobuf::Message {
 public:
  SigninDataForHistory();
  virtual ~SigninDataForHistory();

  SigninDataForHistory(const SigninDataForHistory& from);

  inline SigninDataForHistory& operator=(const SigninDataForHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigninDataForHistory& default_instance();

  void Swap(SigninDataForHistory* other);

  // implements Message ----------------------------------------------

  SigninDataForHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigninDataForHistory& from);
  void MergeFrom(const SigninDataForHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 starttime = 1 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 1;
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 endtime = 2 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional string deviceCode = 3 [default = "default"];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 3;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional int32 signinnum = 4 [default = 0];
  inline bool has_signinnum() const;
  inline void clear_signinnum();
  static const int kSigninnumFieldNumber = 4;
  inline ::google::protobuf::int32 signinnum() const;
  inline void set_signinnum(::google::protobuf::int32 value);

  // repeated string wristmac = 5;
  inline int wristmac_size() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 5;
  inline const ::std::string& wristmac(int index) const;
  inline ::std::string* mutable_wristmac(int index);
  inline void set_wristmac(int index, const ::std::string& value);
  inline void set_wristmac(int index, const char* value);
  inline void set_wristmac(int index, const char* value, size_t size);
  inline ::std::string* add_wristmac();
  inline void add_wristmac(const ::std::string& value);
  inline void add_wristmac(const char* value);
  inline void add_wristmac(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wristmac() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wristmac();

  // repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
  inline int wristphotos_size() const;
  inline void clear_wristphotos();
  static const int kWristphotosFieldNumber = 6;
  inline const ::com::arges::file::proto::WristUserPhoto& wristphotos(int index) const;
  inline ::com::arges::file::proto::WristUserPhoto* mutable_wristphotos(int index);
  inline ::com::arges::file::proto::WristUserPhoto* add_wristphotos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserPhoto >&
      wristphotos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserPhoto >*
      mutable_wristphotos();

  // repeated .com.arges.file.proto.WristUserName wristnames = 7;
  inline int wristnames_size() const;
  inline void clear_wristnames();
  static const int kWristnamesFieldNumber = 7;
  inline const ::com::arges::file::proto::WristUserName& wristnames(int index) const;
  inline ::com::arges::file::proto::WristUserName* mutable_wristnames(int index);
  inline ::com::arges::file::proto::WristUserName* add_wristnames();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
      wristnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
      mutable_wristnames();

  // repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
  inline int signintimes_size() const;
  inline void clear_signintimes();
  static const int kSignintimesFieldNumber = 8;
  inline const ::com::arges::file::proto::WristSignInTime& signintimes(int index) const;
  inline ::com::arges::file::proto::WristSignInTime* mutable_signintimes(int index);
  inline ::com::arges::file::proto::WristSignInTime* add_signintimes();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristSignInTime >&
      signintimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristSignInTime >*
      mutable_signintimes();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SigninDataForHistory)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_signinnum();
  inline void clear_has_signinnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  static ::std::string* _default_devicecode_;
  ::std::string* devicecode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wristmac_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserPhoto > wristphotos_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName > wristnames_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristSignInTime > signintimes_;
  ::google::protobuf::int32 signinnum_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static SigninDataForHistory* default_instance_;
};
// -------------------------------------------------------------------

class WristUserPhoto : public ::google::protobuf::Message {
 public:
  WristUserPhoto();
  virtual ~WristUserPhoto();

  WristUserPhoto(const WristUserPhoto& from);

  inline WristUserPhoto& operator=(const WristUserPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WristUserPhoto& default_instance();

  void Swap(WristUserPhoto* other);

  // implements Message ----------------------------------------------

  WristUserPhoto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WristUserPhoto& from);
  void MergeFrom(const WristUserPhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wristmac = 1 [default = "default"];
  inline bool has_wristmac() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 1;
  inline const ::std::string& wristmac() const;
  inline void set_wristmac(const ::std::string& value);
  inline void set_wristmac(const char* value);
  inline void set_wristmac(const char* value, size_t size);
  inline ::std::string* mutable_wristmac();
  inline ::std::string* release_wristmac();
  inline void set_allocated_wristmac(::std::string* wristmac);

  // optional bytes wristuserphoto = 2 [default = "default"];
  inline bool has_wristuserphoto() const;
  inline void clear_wristuserphoto();
  static const int kWristuserphotoFieldNumber = 2;
  inline const ::std::string& wristuserphoto() const;
  inline void set_wristuserphoto(const ::std::string& value);
  inline void set_wristuserphoto(const char* value);
  inline void set_wristuserphoto(const void* value, size_t size);
  inline ::std::string* mutable_wristuserphoto();
  inline ::std::string* release_wristuserphoto();
  inline void set_allocated_wristuserphoto(::std::string* wristuserphoto);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WristUserPhoto)
 private:
  inline void set_has_wristmac();
  inline void clear_has_wristmac();
  inline void set_has_wristuserphoto();
  inline void clear_has_wristuserphoto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_wristmac_;
  ::std::string* wristmac_;
  static ::std::string* _default_wristuserphoto_;
  ::std::string* wristuserphoto_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static WristUserPhoto* default_instance_;
};
// -------------------------------------------------------------------

class WristUserName : public ::google::protobuf::Message {
 public:
  WristUserName();
  virtual ~WristUserName();

  WristUserName(const WristUserName& from);

  inline WristUserName& operator=(const WristUserName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WristUserName& default_instance();

  void Swap(WristUserName* other);

  // implements Message ----------------------------------------------

  WristUserName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WristUserName& from);
  void MergeFrom(const WristUserName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wristmac = 1 [default = "default"];
  inline bool has_wristmac() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 1;
  inline const ::std::string& wristmac() const;
  inline void set_wristmac(const ::std::string& value);
  inline void set_wristmac(const char* value);
  inline void set_wristmac(const char* value, size_t size);
  inline ::std::string* mutable_wristmac();
  inline ::std::string* release_wristmac();
  inline void set_allocated_wristmac(::std::string* wristmac);

  // optional string wristusername = 2 [default = "default"];
  inline bool has_wristusername() const;
  inline void clear_wristusername();
  static const int kWristusernameFieldNumber = 2;
  inline const ::std::string& wristusername() const;
  inline void set_wristusername(const ::std::string& value);
  inline void set_wristusername(const char* value);
  inline void set_wristusername(const char* value, size_t size);
  inline ::std::string* mutable_wristusername();
  inline ::std::string* release_wristusername();
  inline void set_allocated_wristusername(::std::string* wristusername);

  // optional int32 attendanceStatus = 3 [default = -1];
  inline bool has_attendancestatus() const;
  inline void clear_attendancestatus();
  static const int kAttendanceStatusFieldNumber = 3;
  inline ::google::protobuf::int32 attendancestatus() const;
  inline void set_attendancestatus(::google::protobuf::int32 value);

  // optional int32 wristCodeType = 4 [default = -1];
  inline bool has_wristcodetype() const;
  inline void clear_wristcodetype();
  static const int kWristCodeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 wristcodetype() const;
  inline void set_wristcodetype(::google::protobuf::int32 value);

  // optional int64 date = 5 [default = -1];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 5;
  inline ::google::protobuf::int64 date() const;
  inline void set_date(::google::protobuf::int64 value);

  // optional string idCard = 6 [default = ""];
  inline bool has_idcard() const;
  inline void clear_idcard();
  static const int kIdCardFieldNumber = 6;
  inline const ::std::string& idcard() const;
  inline void set_idcard(const ::std::string& value);
  inline void set_idcard(const char* value);
  inline void set_idcard(const char* value, size_t size);
  inline ::std::string* mutable_idcard();
  inline ::std::string* release_idcard();
  inline void set_allocated_idcard(::std::string* idcard);

  // optional string nickName = 7 [default = ""];
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string position = 8 [default = ""];
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 8;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional int32 sex = 9 [default = -1];
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 type = 10 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes identityPicture = 11 [default = ""];
  inline bool has_identitypicture() const;
  inline void clear_identitypicture();
  static const int kIdentityPictureFieldNumber = 11;
  inline const ::std::string& identitypicture() const;
  inline void set_identitypicture(const ::std::string& value);
  inline void set_identitypicture(const char* value);
  inline void set_identitypicture(const void* value, size_t size);
  inline ::std::string* mutable_identitypicture();
  inline ::std::string* release_identitypicture();
  inline void set_allocated_identitypicture(::std::string* identitypicture);

  // optional int32 autoMode = 12 [default = -1];
  inline bool has_automode() const;
  inline void clear_automode();
  static const int kAutoModeFieldNumber = 12;
  inline ::google::protobuf::int32 automode() const;
  inline void set_automode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WristUserName)
 private:
  inline void set_has_wristmac();
  inline void clear_has_wristmac();
  inline void set_has_wristusername();
  inline void clear_has_wristusername();
  inline void set_has_attendancestatus();
  inline void clear_has_attendancestatus();
  inline void set_has_wristcodetype();
  inline void clear_has_wristcodetype();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_idcard();
  inline void clear_has_idcard();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_identitypicture();
  inline void clear_has_identitypicture();
  inline void set_has_automode();
  inline void clear_has_automode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_wristmac_;
  ::std::string* wristmac_;
  static ::std::string* _default_wristusername_;
  ::std::string* wristusername_;
  ::google::protobuf::int32 attendancestatus_;
  ::google::protobuf::int32 wristcodetype_;
  ::google::protobuf::int64 date_;
  ::std::string* idcard_;
  ::std::string* nickname_;
  ::std::string* position_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 type_;
  ::std::string* identitypicture_;
  ::google::protobuf::int32 automode_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static WristUserName* default_instance_;
};
// -------------------------------------------------------------------

class WhiteUserMassage : public ::google::protobuf::Message {
 public:
  WhiteUserMassage();
  virtual ~WhiteUserMassage();

  WhiteUserMassage(const WhiteUserMassage& from);

  inline WhiteUserMassage& operator=(const WhiteUserMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteUserMassage& default_instance();

  void Swap(WhiteUserMassage* other);

  // implements Message ----------------------------------------------

  WhiteUserMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteUserMassage& from);
  void MergeFrom(const WhiteUserMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated string macs = 4;
  inline int macs_size() const;
  inline void clear_macs();
  static const int kMacsFieldNumber = 4;
  inline const ::std::string& macs(int index) const;
  inline ::std::string* mutable_macs(int index);
  inline void set_macs(int index, const ::std::string& value);
  inline void set_macs(int index, const char* value);
  inline void set_macs(int index, const char* value, size_t size);
  inline ::std::string* add_macs();
  inline void add_macs(const ::std::string& value);
  inline void add_macs(const char* value);
  inline void add_macs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& macs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_macs();

  // repeated .com.arges.file.proto.WristUserName users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline const ::com::arges::file::proto::WristUserName& users(int index) const;
  inline ::com::arges::file::proto::WristUserName* mutable_users(int index);
  inline ::com::arges::file::proto::WristUserName* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
      mutable_users();

  // optional .com.arges.file.proto.DeviceInfo devCode = 6;
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 6;
  inline const ::com::arges::file::proto::DeviceInfo& devcode() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devcode();
  inline ::com::arges::file::proto::DeviceInfo* release_devcode();
  inline void set_allocated_devcode(::com::arges::file::proto::DeviceInfo* devcode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WhiteUserMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_devcode();
  inline void clear_has_devcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::std::string> macs_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName > users_;
  ::com::arges::file::proto::DeviceInfo* devcode_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static WhiteUserMassage* default_instance_;
};
// -------------------------------------------------------------------

class QueryBlackWhite : public ::google::protobuf::Message {
 public:
  QueryBlackWhite();
  virtual ~QueryBlackWhite();

  QueryBlackWhite(const QueryBlackWhite& from);

  inline QueryBlackWhite& operator=(const QueryBlackWhite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryBlackWhite& default_instance();

  void Swap(QueryBlackWhite* other);

  // implements Message ----------------------------------------------

  QueryBlackWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryBlackWhite& from);
  void MergeFrom(const QueryBlackWhite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.arges.file.proto.DeviceInfo device = 1;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 1;
  inline const ::com::arges::file::proto::DeviceInfo& device() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_device();
  inline ::com::arges::file::proto::DeviceInfo* release_device();
  inline void set_allocated_device(::com::arges::file::proto::DeviceInfo* device);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.QueryBlackWhite)
 private:
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::arges::file::proto::DeviceInfo* device_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static QueryBlackWhite* default_instance_;
};
// -------------------------------------------------------------------

class GateConfigureInfo : public ::google::protobuf::Message {
 public:
  GateConfigureInfo();
  virtual ~GateConfigureInfo();

  GateConfigureInfo(const GateConfigureInfo& from);

  inline GateConfigureInfo& operator=(const GateConfigureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateConfigureInfo& default_instance();

  void Swap(GateConfigureInfo* other);

  // implements Message ----------------------------------------------

  GateConfigureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateConfigureInfo& from);
  void MergeFrom(const GateConfigureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.arges.file.proto.DeviceInfo device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::com::arges::file::proto::DeviceInfo& device() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_device();
  inline ::com::arges::file::proto::DeviceInfo* release_device();
  inline void set_allocated_device(::com::arges::file::proto::DeviceInfo* device);

  // optional string validateMode = 5 [default = ""];
  inline bool has_validatemode() const;
  inline void clear_validatemode();
  static const int kValidateModeFieldNumber = 5;
  inline const ::std::string& validatemode() const;
  inline void set_validatemode(const ::std::string& value);
  inline void set_validatemode(const char* value);
  inline void set_validatemode(const char* value, size_t size);
  inline ::std::string* mutable_validatemode();
  inline ::std::string* release_validatemode();
  inline void set_allocated_validatemode(::std::string* validatemode);

  // optional double faceRssiThreshold = 6 [default = -1];
  inline bool has_facerssithreshold() const;
  inline void clear_facerssithreshold();
  static const int kFaceRssiThresholdFieldNumber = 6;
  inline double facerssithreshold() const;
  inline void set_facerssithreshold(double value);

  // optional string boxcode = 7 [default = ""];
  inline bool has_boxcode() const;
  inline void clear_boxcode();
  static const int kBoxcodeFieldNumber = 7;
  inline const ::std::string& boxcode() const;
  inline void set_boxcode(const ::std::string& value);
  inline void set_boxcode(const char* value);
  inline void set_boxcode(const char* value, size_t size);
  inline ::std::string* mutable_boxcode();
  inline ::std::string* release_boxcode();
  inline void set_allocated_boxcode(::std::string* boxcode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.GateConfigureInfo)
 private:
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_validatemode();
  inline void clear_has_validatemode();
  inline void set_has_facerssithreshold();
  inline void clear_has_facerssithreshold();
  inline void set_has_boxcode();
  inline void clear_has_boxcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::arges::file::proto::DeviceInfo* device_;
  ::std::string* validatemode_;
  double facerssithreshold_;
  ::std::string* boxcode_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static GateConfigureInfo* default_instance_;
};
// -------------------------------------------------------------------

class GateConfMessage : public ::google::protobuf::Message {
 public:
  GateConfMessage();
  virtual ~GateConfMessage();

  GateConfMessage(const GateConfMessage& from);

  inline GateConfMessage& operator=(const GateConfMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateConfMessage& default_instance();

  void Swap(GateConfMessage* other);

  // implements Message ----------------------------------------------

  GateConfMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateConfMessage& from);
  void MergeFrom(const GateConfMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated string Ids = 4;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 4;
  inline const ::std::string& ids(int index) const;
  inline ::std::string* mutable_ids(int index);
  inline void set_ids(int index, const ::std::string& value);
  inline void set_ids(int index, const char* value);
  inline void set_ids(int index, const char* value, size_t size);
  inline ::std::string* add_ids();
  inline void add_ids(const ::std::string& value);
  inline void add_ids(const char* value);
  inline void add_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // repeated .com.arges.file.proto.GateConfigureInfo gateConfs = 5;
  inline int gateconfs_size() const;
  inline void clear_gateconfs();
  static const int kGateConfsFieldNumber = 5;
  inline const ::com::arges::file::proto::GateConfigureInfo& gateconfs(int index) const;
  inline ::com::arges::file::proto::GateConfigureInfo* mutable_gateconfs(int index);
  inline ::com::arges::file::proto::GateConfigureInfo* add_gateconfs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateConfigureInfo >&
      gateconfs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateConfigureInfo >*
      mutable_gateconfs();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.GateConfMessage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateConfigureInfo > gateconfs_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static GateConfMessage* default_instance_;
};
// -------------------------------------------------------------------

class WhiteUserMassageTest : public ::google::protobuf::Message {
 public:
  WhiteUserMassageTest();
  virtual ~WhiteUserMassageTest();

  WhiteUserMassageTest(const WhiteUserMassageTest& from);

  inline WhiteUserMassageTest& operator=(const WhiteUserMassageTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteUserMassageTest& default_instance();

  void Swap(WhiteUserMassageTest* other);

  // implements Message ----------------------------------------------

  WhiteUserMassageTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteUserMassageTest& from);
  void MergeFrom(const WhiteUserMassageTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WhiteUserMassageTest)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static WhiteUserMassageTest* default_instance_;
};
// -------------------------------------------------------------------

class WristSignInTime : public ::google::protobuf::Message {
 public:
  WristSignInTime();
  virtual ~WristSignInTime();

  WristSignInTime(const WristSignInTime& from);

  inline WristSignInTime& operator=(const WristSignInTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WristSignInTime& default_instance();

  void Swap(WristSignInTime* other);

  // implements Message ----------------------------------------------

  WristSignInTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WristSignInTime& from);
  void MergeFrom(const WristSignInTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wristmac = 1 [default = "default"];
  inline bool has_wristmac() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 1;
  inline const ::std::string& wristmac() const;
  inline void set_wristmac(const ::std::string& value);
  inline void set_wristmac(const char* value);
  inline void set_wristmac(const char* value, size_t size);
  inline ::std::string* mutable_wristmac();
  inline ::std::string* release_wristmac();
  inline void set_allocated_wristmac(::std::string* wristmac);

  // optional uint64 signintime = 2 [default = 0];
  inline bool has_signintime() const;
  inline void clear_signintime();
  static const int kSignintimeFieldNumber = 2;
  inline ::google::protobuf::uint64 signintime() const;
  inline void set_signintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WristSignInTime)
 private:
  inline void set_has_wristmac();
  inline void clear_has_wristmac();
  inline void set_has_signintime();
  inline void clear_has_signintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_wristmac_;
  ::std::string* wristmac_;
  ::google::protobuf::uint64 signintime_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static WristSignInTime* default_instance_;
};
// -------------------------------------------------------------------

class SigninMassageForReal : public ::google::protobuf::Message {
 public:
  SigninMassageForReal();
  virtual ~SigninMassageForReal();

  SigninMassageForReal(const SigninMassageForReal& from);

  inline SigninMassageForReal& operator=(const SigninMassageForReal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigninMassageForReal& default_instance();

  void Swap(SigninMassageForReal* other);

  // implements Message ----------------------------------------------

  SigninMassageForReal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigninMassageForReal& from);
  void MergeFrom(const SigninMassageForReal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional .com.arges.file.proto.Wrist wrist = 2;
  inline bool has_wrist() const;
  inline void clear_wrist();
  static const int kWristFieldNumber = 2;
  inline const ::com::arges::file::proto::Wrist& wrist() const;
  inline ::com::arges::file::proto::Wrist* mutable_wrist();
  inline ::com::arges::file::proto::Wrist* release_wrist();
  inline void set_allocated_wrist(::com::arges::file::proto::Wrist* wrist);

  // optional .com.arges.file.proto.WristUserName userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::com::arges::file::proto::WristUserName& username() const;
  inline ::com::arges::file::proto::WristUserName* mutable_username();
  inline ::com::arges::file::proto::WristUserName* release_username();
  inline void set_allocated_username(::com::arges::file::proto::WristUserName* username);

  // optional bytes wristuserphoto = 4 [default = ""];
  inline bool has_wristuserphoto() const;
  inline void clear_wristuserphoto();
  static const int kWristuserphotoFieldNumber = 4;
  inline const ::std::string& wristuserphoto() const;
  inline void set_wristuserphoto(const ::std::string& value);
  inline void set_wristuserphoto(const char* value);
  inline void set_wristuserphoto(const void* value, size_t size);
  inline ::std::string* mutable_wristuserphoto();
  inline ::std::string* release_wristuserphoto();
  inline void set_allocated_wristuserphoto(::std::string* wristuserphoto);

  // optional bytes wristuserphoto2 = 5 [default = ""];
  inline bool has_wristuserphoto2() const;
  inline void clear_wristuserphoto2();
  static const int kWristuserphoto2FieldNumber = 5;
  inline const ::std::string& wristuserphoto2() const;
  inline void set_wristuserphoto2(const ::std::string& value);
  inline void set_wristuserphoto2(const char* value);
  inline void set_wristuserphoto2(const void* value, size_t size);
  inline ::std::string* mutable_wristuserphoto2();
  inline ::std::string* release_wristuserphoto2();
  inline void set_allocated_wristuserphoto2(::std::string* wristuserphoto2);

  // optional bytes wristuserphoto3 = 6 [default = ""];
  inline bool has_wristuserphoto3() const;
  inline void clear_wristuserphoto3();
  static const int kWristuserphoto3FieldNumber = 6;
  inline const ::std::string& wristuserphoto3() const;
  inline void set_wristuserphoto3(const ::std::string& value);
  inline void set_wristuserphoto3(const char* value);
  inline void set_wristuserphoto3(const void* value, size_t size);
  inline ::std::string* mutable_wristuserphoto3();
  inline ::std::string* release_wristuserphoto3();
  inline void set_allocated_wristuserphoto3(::std::string* wristuserphoto3);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SigninMassageForReal)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_wrist();
  inline void clear_has_wrist();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_wristuserphoto();
  inline void clear_has_wristuserphoto();
  inline void set_has_wristuserphoto2();
  inline void clear_has_wristuserphoto2();
  inline void set_has_wristuserphoto3();
  inline void clear_has_wristuserphoto3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  ::com::arges::file::proto::Wrist* wrist_;
  ::com::arges::file::proto::WristUserName* username_;
  ::std::string* wristuserphoto_;
  ::std::string* wristuserphoto2_;
  ::std::string* wristuserphoto3_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static SigninMassageForReal* default_instance_;
};
// -------------------------------------------------------------------

class HotMapData : public ::google::protobuf::Message {
 public:
  HotMapData();
  virtual ~HotMapData();

  HotMapData(const HotMapData& from);

  inline HotMapData& operator=(const HotMapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotMapData& default_instance();

  void Swap(HotMapData* other);

  // implements Message ----------------------------------------------

  HotMapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotMapData& from);
  void MergeFrom(const HotMapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string orgCode = 1 [default = ""];
  inline bool has_orgcode() const;
  inline void clear_orgcode();
  static const int kOrgCodeFieldNumber = 1;
  inline const ::std::string& orgcode() const;
  inline void set_orgcode(const ::std::string& value);
  inline void set_orgcode(const char* value);
  inline void set_orgcode(const char* value, size_t size);
  inline ::std::string* mutable_orgcode();
  inline ::std::string* release_orgcode();
  inline void set_allocated_orgcode(::std::string* orgcode);

  // repeated string loginName = 2;
  inline int loginname_size() const;
  inline void clear_loginname();
  static const int kLoginNameFieldNumber = 2;
  inline const ::std::string& loginname(int index) const;
  inline ::std::string* mutable_loginname(int index);
  inline void set_loginname(int index, const ::std::string& value);
  inline void set_loginname(int index, const char* value);
  inline void set_loginname(int index, const char* value, size_t size);
  inline ::std::string* add_loginname();
  inline void add_loginname(const ::std::string& value);
  inline void add_loginname(const char* value);
  inline void add_loginname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& loginname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loginname();

  // optional int32 count = 3 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HotMapData)
 private:
  inline void set_has_orgcode();
  inline void clear_has_orgcode();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orgcode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loginname_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static HotMapData* default_instance_;
};
// -------------------------------------------------------------------

class HotMapMassage : public ::google::protobuf::Message {
 public:
  HotMapMassage();
  virtual ~HotMapMassage();

  HotMapMassage(const HotMapMassage& from);

  inline HotMapMassage& operator=(const HotMapMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotMapMassage& default_instance();

  void Swap(HotMapMassage* other);

  // implements Message ----------------------------------------------

  HotMapMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotMapMassage& from);
  void MergeFrom(const HotMapMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // optional string orgCode = 4 [default = ""];
  inline bool has_orgcode() const;
  inline void clear_orgcode();
  static const int kOrgCodeFieldNumber = 4;
  inline const ::std::string& orgcode() const;
  inline void set_orgcode(const ::std::string& value);
  inline void set_orgcode(const char* value);
  inline void set_orgcode(const char* value, size_t size);
  inline ::std::string* mutable_orgcode();
  inline ::std::string* release_orgcode();
  inline void set_allocated_orgcode(::std::string* orgcode);

  // repeated .com.arges.file.proto.HotMapData data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::com::arges::file::proto::HotMapData& data(int index) const;
  inline ::com::arges::file::proto::HotMapData* mutable_data(int index);
  inline ::com::arges::file::proto::HotMapData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HotMapData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HotMapData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HotMapMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_orgcode();
  inline void clear_has_orgcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::std::string* orgcode_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HotMapData > data_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static HotMapMassage* default_instance_;
};
// -------------------------------------------------------------------

class ReportHotMapData_Data : public ::google::protobuf::Message {
 public:
  ReportHotMapData_Data();
  virtual ~ReportHotMapData_Data();

  ReportHotMapData_Data(const ReportHotMapData_Data& from);

  inline ReportHotMapData_Data& operator=(const ReportHotMapData_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportHotMapData_Data& default_instance();

  void Swap(ReportHotMapData_Data* other);

  // implements Message ----------------------------------------------

  ReportHotMapData_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportHotMapData_Data& from);
  void MergeFrom(const ReportHotMapData_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devCode = 1 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 1;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional string orgCode = 2 [default = ""];
  inline bool has_orgcode() const;
  inline void clear_orgcode();
  static const int kOrgCodeFieldNumber = 2;
  inline const ::std::string& orgcode() const;
  inline void set_orgcode(const ::std::string& value);
  inline void set_orgcode(const char* value);
  inline void set_orgcode(const char* value, size_t size);
  inline ::std::string* mutable_orgcode();
  inline ::std::string* release_orgcode();
  inline void set_allocated_orgcode(::std::string* orgcode);

  // repeated .com.arges.file.proto.Wrist wristmac = 3;
  inline int wristmac_size() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 3;
  inline const ::com::arges::file::proto::Wrist& wristmac(int index) const;
  inline ::com::arges::file::proto::Wrist* mutable_wristmac(int index);
  inline ::com::arges::file::proto::Wrist* add_wristmac();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
      wristmac() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
      mutable_wristmac();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportHotMapData.Data)
 private:
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_orgcode();
  inline void clear_has_orgcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devcode_;
  ::std::string* orgcode_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist > wristmac_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static ReportHotMapData_Data* default_instance_;
};
// -------------------------------------------------------------------

class ReportHotMapData : public ::google::protobuf::Message {
 public:
  ReportHotMapData();
  virtual ~ReportHotMapData();

  ReportHotMapData(const ReportHotMapData& from);

  inline ReportHotMapData& operator=(const ReportHotMapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportHotMapData& default_instance();

  void Swap(ReportHotMapData* other);

  // implements Message ----------------------------------------------

  ReportHotMapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportHotMapData& from);
  void MergeFrom(const ReportHotMapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReportHotMapData_Data Data;

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.ReportHotMapData.Data datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::com::arges::file::proto::ReportHotMapData_Data& datas(int index) const;
  inline ::com::arges::file::proto::ReportHotMapData_Data* mutable_datas(int index);
  inline ::com::arges::file::proto::ReportHotMapData_Data* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportHotMapData_Data >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportHotMapData_Data >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportHotMapData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportHotMapData_Data > datas_;
  friend void  protobuf_AddDesc_SignInDataBean_2eproto();
  friend void protobuf_AssignDesc_SignInDataBean_2eproto();
  friend void protobuf_ShutdownFile_SignInDataBean_2eproto();

  void InitAsDefaultInstance();
  static ReportHotMapData* default_instance_;
};
// ===================================================================


// ===================================================================

// SigninDataForHistory

// optional uint64 starttime = 1 [default = 0];
inline bool SigninDataForHistory::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigninDataForHistory::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigninDataForHistory::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigninDataForHistory::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 SigninDataForHistory::starttime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.starttime)
  return starttime_;
}
inline void SigninDataForHistory::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninDataForHistory.starttime)
}

// optional uint64 endtime = 2 [default = 0];
inline bool SigninDataForHistory::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigninDataForHistory::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SigninDataForHistory::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SigninDataForHistory::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 SigninDataForHistory::endtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.endtime)
  return endtime_;
}
inline void SigninDataForHistory::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninDataForHistory.endtime)
}

// optional string deviceCode = 3 [default = "default"];
inline bool SigninDataForHistory::has_devicecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SigninDataForHistory::set_has_devicecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SigninDataForHistory::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SigninDataForHistory::clear_devicecode() {
  if (devicecode_ != _default_devicecode_) {
    devicecode_->assign(*_default_devicecode_);
  }
  clear_has_devicecode();
}
inline const ::std::string& SigninDataForHistory::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.deviceCode)
  return *devicecode_;
}
inline void SigninDataForHistory::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == _default_devicecode_) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninDataForHistory.deviceCode)
}
inline void SigninDataForHistory::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == _default_devicecode_) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninDataForHistory.deviceCode)
}
inline void SigninDataForHistory::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == _default_devicecode_) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninDataForHistory.deviceCode)
}
inline ::std::string* SigninDataForHistory::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == _default_devicecode_) {
    devicecode_ = new ::std::string(*_default_devicecode_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninDataForHistory.deviceCode)
  return devicecode_;
}
inline ::std::string* SigninDataForHistory::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == _default_devicecode_) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(_default_devicecode_);
    return temp;
  }
}
inline void SigninDataForHistory::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != _default_devicecode_) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(_default_devicecode_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninDataForHistory.deviceCode)
}

// optional int32 signinnum = 4 [default = 0];
inline bool SigninDataForHistory::has_signinnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SigninDataForHistory::set_has_signinnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SigninDataForHistory::clear_has_signinnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SigninDataForHistory::clear_signinnum() {
  signinnum_ = 0;
  clear_has_signinnum();
}
inline ::google::protobuf::int32 SigninDataForHistory::signinnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.signinnum)
  return signinnum_;
}
inline void SigninDataForHistory::set_signinnum(::google::protobuf::int32 value) {
  set_has_signinnum();
  signinnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninDataForHistory.signinnum)
}

// repeated string wristmac = 5;
inline int SigninDataForHistory::wristmac_size() const {
  return wristmac_.size();
}
inline void SigninDataForHistory::clear_wristmac() {
  wristmac_.Clear();
}
inline const ::std::string& SigninDataForHistory::wristmac(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.wristmac)
  return wristmac_.Get(index);
}
inline ::std::string* SigninDataForHistory::mutable_wristmac(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninDataForHistory.wristmac)
  return wristmac_.Mutable(index);
}
inline void SigninDataForHistory::set_wristmac(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninDataForHistory.wristmac)
  wristmac_.Mutable(index)->assign(value);
}
inline void SigninDataForHistory::set_wristmac(int index, const char* value) {
  wristmac_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninDataForHistory.wristmac)
}
inline void SigninDataForHistory::set_wristmac(int index, const char* value, size_t size) {
  wristmac_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninDataForHistory.wristmac)
}
inline ::std::string* SigninDataForHistory::add_wristmac() {
  return wristmac_.Add();
}
inline void SigninDataForHistory::add_wristmac(const ::std::string& value) {
  wristmac_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.SigninDataForHistory.wristmac)
}
inline void SigninDataForHistory::add_wristmac(const char* value) {
  wristmac_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.SigninDataForHistory.wristmac)
}
inline void SigninDataForHistory::add_wristmac(const char* value, size_t size) {
  wristmac_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.SigninDataForHistory.wristmac)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SigninDataForHistory::wristmac() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.SigninDataForHistory.wristmac)
  return wristmac_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SigninDataForHistory::mutable_wristmac() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.SigninDataForHistory.wristmac)
  return &wristmac_;
}

// repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
inline int SigninDataForHistory::wristphotos_size() const {
  return wristphotos_.size();
}
inline void SigninDataForHistory::clear_wristphotos() {
  wristphotos_.Clear();
}
inline const ::com::arges::file::proto::WristUserPhoto& SigninDataForHistory::wristphotos(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.wristphotos)
  return wristphotos_.Get(index);
}
inline ::com::arges::file::proto::WristUserPhoto* SigninDataForHistory::mutable_wristphotos(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninDataForHistory.wristphotos)
  return wristphotos_.Mutable(index);
}
inline ::com::arges::file::proto::WristUserPhoto* SigninDataForHistory::add_wristphotos() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.SigninDataForHistory.wristphotos)
  return wristphotos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserPhoto >&
SigninDataForHistory::wristphotos() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.SigninDataForHistory.wristphotos)
  return wristphotos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserPhoto >*
SigninDataForHistory::mutable_wristphotos() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.SigninDataForHistory.wristphotos)
  return &wristphotos_;
}

// repeated .com.arges.file.proto.WristUserName wristnames = 7;
inline int SigninDataForHistory::wristnames_size() const {
  return wristnames_.size();
}
inline void SigninDataForHistory::clear_wristnames() {
  wristnames_.Clear();
}
inline const ::com::arges::file::proto::WristUserName& SigninDataForHistory::wristnames(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.wristnames)
  return wristnames_.Get(index);
}
inline ::com::arges::file::proto::WristUserName* SigninDataForHistory::mutable_wristnames(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninDataForHistory.wristnames)
  return wristnames_.Mutable(index);
}
inline ::com::arges::file::proto::WristUserName* SigninDataForHistory::add_wristnames() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.SigninDataForHistory.wristnames)
  return wristnames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
SigninDataForHistory::wristnames() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.SigninDataForHistory.wristnames)
  return wristnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
SigninDataForHistory::mutable_wristnames() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.SigninDataForHistory.wristnames)
  return &wristnames_;
}

// repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
inline int SigninDataForHistory::signintimes_size() const {
  return signintimes_.size();
}
inline void SigninDataForHistory::clear_signintimes() {
  signintimes_.Clear();
}
inline const ::com::arges::file::proto::WristSignInTime& SigninDataForHistory::signintimes(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninDataForHistory.signintimes)
  return signintimes_.Get(index);
}
inline ::com::arges::file::proto::WristSignInTime* SigninDataForHistory::mutable_signintimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninDataForHistory.signintimes)
  return signintimes_.Mutable(index);
}
inline ::com::arges::file::proto::WristSignInTime* SigninDataForHistory::add_signintimes() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.SigninDataForHistory.signintimes)
  return signintimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristSignInTime >&
SigninDataForHistory::signintimes() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.SigninDataForHistory.signintimes)
  return signintimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristSignInTime >*
SigninDataForHistory::mutable_signintimes() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.SigninDataForHistory.signintimes)
  return &signintimes_;
}

// -------------------------------------------------------------------

// WristUserPhoto

// optional string wristmac = 1 [default = "default"];
inline bool WristUserPhoto::has_wristmac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WristUserPhoto::set_has_wristmac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WristUserPhoto::clear_has_wristmac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WristUserPhoto::clear_wristmac() {
  if (wristmac_ != _default_wristmac_) {
    wristmac_->assign(*_default_wristmac_);
  }
  clear_has_wristmac();
}
inline const ::std::string& WristUserPhoto::wristmac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserPhoto.wristmac)
  return *wristmac_;
}
inline void WristUserPhoto::set_wristmac(const ::std::string& value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserPhoto.wristmac)
}
inline void WristUserPhoto::set_wristmac(const char* value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserPhoto.wristmac)
}
inline void WristUserPhoto::set_wristmac(const char* value, size_t size) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserPhoto.wristmac)
}
inline ::std::string* WristUserPhoto::mutable_wristmac() {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string(*_default_wristmac_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserPhoto.wristmac)
  return wristmac_;
}
inline ::std::string* WristUserPhoto::release_wristmac() {
  clear_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    return NULL;
  } else {
    ::std::string* temp = wristmac_;
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
    return temp;
  }
}
inline void WristUserPhoto::set_allocated_wristmac(::std::string* wristmac) {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristmac) {
    set_has_wristmac();
    wristmac_ = wristmac;
  } else {
    clear_has_wristmac();
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserPhoto.wristmac)
}

// optional bytes wristuserphoto = 2 [default = "default"];
inline bool WristUserPhoto::has_wristuserphoto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WristUserPhoto::set_has_wristuserphoto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WristUserPhoto::clear_has_wristuserphoto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WristUserPhoto::clear_wristuserphoto() {
  if (wristuserphoto_ != _default_wristuserphoto_) {
    wristuserphoto_->assign(*_default_wristuserphoto_);
  }
  clear_has_wristuserphoto();
}
inline const ::std::string& WristUserPhoto::wristuserphoto() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserPhoto.wristuserphoto)
  return *wristuserphoto_;
}
inline void WristUserPhoto::set_wristuserphoto(const ::std::string& value) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == _default_wristuserphoto_) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserPhoto.wristuserphoto)
}
inline void WristUserPhoto::set_wristuserphoto(const char* value) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == _default_wristuserphoto_) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserPhoto.wristuserphoto)
}
inline void WristUserPhoto::set_wristuserphoto(const void* value, size_t size) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == _default_wristuserphoto_) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserPhoto.wristuserphoto)
}
inline ::std::string* WristUserPhoto::mutable_wristuserphoto() {
  set_has_wristuserphoto();
  if (wristuserphoto_ == _default_wristuserphoto_) {
    wristuserphoto_ = new ::std::string(*_default_wristuserphoto_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserPhoto.wristuserphoto)
  return wristuserphoto_;
}
inline ::std::string* WristUserPhoto::release_wristuserphoto() {
  clear_has_wristuserphoto();
  if (wristuserphoto_ == _default_wristuserphoto_) {
    return NULL;
  } else {
    ::std::string* temp = wristuserphoto_;
    wristuserphoto_ = const_cast< ::std::string*>(_default_wristuserphoto_);
    return temp;
  }
}
inline void WristUserPhoto::set_allocated_wristuserphoto(::std::string* wristuserphoto) {
  if (wristuserphoto_ != _default_wristuserphoto_) {
    delete wristuserphoto_;
  }
  if (wristuserphoto) {
    set_has_wristuserphoto();
    wristuserphoto_ = wristuserphoto;
  } else {
    clear_has_wristuserphoto();
    wristuserphoto_ = const_cast< ::std::string*>(_default_wristuserphoto_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserPhoto.wristuserphoto)
}

// -------------------------------------------------------------------

// WristUserName

// optional string wristmac = 1 [default = "default"];
inline bool WristUserName::has_wristmac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WristUserName::set_has_wristmac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WristUserName::clear_has_wristmac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WristUserName::clear_wristmac() {
  if (wristmac_ != _default_wristmac_) {
    wristmac_->assign(*_default_wristmac_);
  }
  clear_has_wristmac();
}
inline const ::std::string& WristUserName::wristmac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.wristmac)
  return *wristmac_;
}
inline void WristUserName::set_wristmac(const ::std::string& value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.wristmac)
}
inline void WristUserName::set_wristmac(const char* value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.wristmac)
}
inline void WristUserName::set_wristmac(const char* value, size_t size) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.wristmac)
}
inline ::std::string* WristUserName::mutable_wristmac() {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string(*_default_wristmac_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.wristmac)
  return wristmac_;
}
inline ::std::string* WristUserName::release_wristmac() {
  clear_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    return NULL;
  } else {
    ::std::string* temp = wristmac_;
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
    return temp;
  }
}
inline void WristUserName::set_allocated_wristmac(::std::string* wristmac) {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristmac) {
    set_has_wristmac();
    wristmac_ = wristmac;
  } else {
    clear_has_wristmac();
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.wristmac)
}

// optional string wristusername = 2 [default = "default"];
inline bool WristUserName::has_wristusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WristUserName::set_has_wristusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WristUserName::clear_has_wristusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WristUserName::clear_wristusername() {
  if (wristusername_ != _default_wristusername_) {
    wristusername_->assign(*_default_wristusername_);
  }
  clear_has_wristusername();
}
inline const ::std::string& WristUserName::wristusername() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.wristusername)
  return *wristusername_;
}
inline void WristUserName::set_wristusername(const ::std::string& value) {
  set_has_wristusername();
  if (wristusername_ == _default_wristusername_) {
    wristusername_ = new ::std::string;
  }
  wristusername_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.wristusername)
}
inline void WristUserName::set_wristusername(const char* value) {
  set_has_wristusername();
  if (wristusername_ == _default_wristusername_) {
    wristusername_ = new ::std::string;
  }
  wristusername_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.wristusername)
}
inline void WristUserName::set_wristusername(const char* value, size_t size) {
  set_has_wristusername();
  if (wristusername_ == _default_wristusername_) {
    wristusername_ = new ::std::string;
  }
  wristusername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.wristusername)
}
inline ::std::string* WristUserName::mutable_wristusername() {
  set_has_wristusername();
  if (wristusername_ == _default_wristusername_) {
    wristusername_ = new ::std::string(*_default_wristusername_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.wristusername)
  return wristusername_;
}
inline ::std::string* WristUserName::release_wristusername() {
  clear_has_wristusername();
  if (wristusername_ == _default_wristusername_) {
    return NULL;
  } else {
    ::std::string* temp = wristusername_;
    wristusername_ = const_cast< ::std::string*>(_default_wristusername_);
    return temp;
  }
}
inline void WristUserName::set_allocated_wristusername(::std::string* wristusername) {
  if (wristusername_ != _default_wristusername_) {
    delete wristusername_;
  }
  if (wristusername) {
    set_has_wristusername();
    wristusername_ = wristusername;
  } else {
    clear_has_wristusername();
    wristusername_ = const_cast< ::std::string*>(_default_wristusername_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.wristusername)
}

// optional int32 attendanceStatus = 3 [default = -1];
inline bool WristUserName::has_attendancestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WristUserName::set_has_attendancestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WristUserName::clear_has_attendancestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WristUserName::clear_attendancestatus() {
  attendancestatus_ = -1;
  clear_has_attendancestatus();
}
inline ::google::protobuf::int32 WristUserName::attendancestatus() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.attendanceStatus)
  return attendancestatus_;
}
inline void WristUserName::set_attendancestatus(::google::protobuf::int32 value) {
  set_has_attendancestatus();
  attendancestatus_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.attendanceStatus)
}

// optional int32 wristCodeType = 4 [default = -1];
inline bool WristUserName::has_wristcodetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WristUserName::set_has_wristcodetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WristUserName::clear_has_wristcodetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WristUserName::clear_wristcodetype() {
  wristcodetype_ = -1;
  clear_has_wristcodetype();
}
inline ::google::protobuf::int32 WristUserName::wristcodetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.wristCodeType)
  return wristcodetype_;
}
inline void WristUserName::set_wristcodetype(::google::protobuf::int32 value) {
  set_has_wristcodetype();
  wristcodetype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.wristCodeType)
}

// optional int64 date = 5 [default = -1];
inline bool WristUserName::has_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WristUserName::set_has_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WristUserName::clear_has_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WristUserName::clear_date() {
  date_ = GOOGLE_LONGLONG(-1);
  clear_has_date();
}
inline ::google::protobuf::int64 WristUserName::date() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.date)
  return date_;
}
inline void WristUserName::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.date)
}

// optional string idCard = 6 [default = ""];
inline bool WristUserName::has_idcard() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WristUserName::set_has_idcard() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WristUserName::clear_has_idcard() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WristUserName::clear_idcard() {
  if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_->clear();
  }
  clear_has_idcard();
}
inline const ::std::string& WristUserName::idcard() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.idCard)
  return *idcard_;
}
inline void WristUserName::set_idcard(const ::std::string& value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.idCard)
}
inline void WristUserName::set_idcard(const char* value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.idCard)
}
inline void WristUserName::set_idcard(const char* value, size_t size) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.idCard)
}
inline ::std::string* WristUserName::mutable_idcard() {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.idCard)
  return idcard_;
}
inline ::std::string* WristUserName::release_idcard() {
  clear_has_idcard();
  if (idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idcard_;
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WristUserName::set_allocated_idcard(::std::string* idcard) {
  if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_;
  }
  if (idcard) {
    set_has_idcard();
    idcard_ = idcard;
  } else {
    clear_has_idcard();
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.idCard)
}

// optional string nickName = 7 [default = ""];
inline bool WristUserName::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WristUserName::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WristUserName::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WristUserName::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& WristUserName::nickname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.nickName)
  return *nickname_;
}
inline void WristUserName::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.nickName)
}
inline void WristUserName::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.nickName)
}
inline void WristUserName::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.nickName)
}
inline ::std::string* WristUserName::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.nickName)
  return nickname_;
}
inline ::std::string* WristUserName::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WristUserName::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.nickName)
}

// optional string position = 8 [default = ""];
inline bool WristUserName::has_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WristUserName::set_has_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WristUserName::clear_has_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WristUserName::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& WristUserName::position() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.position)
  return *position_;
}
inline void WristUserName::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.position)
}
inline void WristUserName::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.position)
}
inline void WristUserName::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.position)
}
inline ::std::string* WristUserName::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.position)
  return position_;
}
inline ::std::string* WristUserName::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WristUserName::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.position)
}

// optional int32 sex = 9 [default = -1];
inline bool WristUserName::has_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WristUserName::set_has_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WristUserName::clear_has_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WristUserName::clear_sex() {
  sex_ = -1;
  clear_has_sex();
}
inline ::google::protobuf::int32 WristUserName::sex() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.sex)
  return sex_;
}
inline void WristUserName::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.sex)
}

// optional int32 type = 10 [default = 0];
inline bool WristUserName::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WristUserName::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WristUserName::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WristUserName::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WristUserName::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.type)
  return type_;
}
inline void WristUserName::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.type)
}

// optional bytes identityPicture = 11 [default = ""];
inline bool WristUserName::has_identitypicture() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WristUserName::set_has_identitypicture() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WristUserName::clear_has_identitypicture() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WristUserName::clear_identitypicture() {
  if (identitypicture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitypicture_->clear();
  }
  clear_has_identitypicture();
}
inline const ::std::string& WristUserName::identitypicture() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.identityPicture)
  return *identitypicture_;
}
inline void WristUserName::set_identitypicture(const ::std::string& value) {
  set_has_identitypicture();
  if (identitypicture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitypicture_ = new ::std::string;
  }
  identitypicture_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.identityPicture)
}
inline void WristUserName::set_identitypicture(const char* value) {
  set_has_identitypicture();
  if (identitypicture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitypicture_ = new ::std::string;
  }
  identitypicture_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristUserName.identityPicture)
}
inline void WristUserName::set_identitypicture(const void* value, size_t size) {
  set_has_identitypicture();
  if (identitypicture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitypicture_ = new ::std::string;
  }
  identitypicture_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristUserName.identityPicture)
}
inline ::std::string* WristUserName::mutable_identitypicture() {
  set_has_identitypicture();
  if (identitypicture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitypicture_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristUserName.identityPicture)
  return identitypicture_;
}
inline ::std::string* WristUserName::release_identitypicture() {
  clear_has_identitypicture();
  if (identitypicture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identitypicture_;
    identitypicture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WristUserName::set_allocated_identitypicture(::std::string* identitypicture) {
  if (identitypicture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identitypicture_;
  }
  if (identitypicture) {
    set_has_identitypicture();
    identitypicture_ = identitypicture;
  } else {
    clear_has_identitypicture();
    identitypicture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristUserName.identityPicture)
}

// optional int32 autoMode = 12 [default = -1];
inline bool WristUserName::has_automode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WristUserName::set_has_automode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WristUserName::clear_has_automode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WristUserName::clear_automode() {
  automode_ = -1;
  clear_has_automode();
}
inline ::google::protobuf::int32 WristUserName::automode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristUserName.autoMode)
  return automode_;
}
inline void WristUserName::set_automode(::google::protobuf::int32 value) {
  set_has_automode();
  automode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristUserName.autoMode)
}

// -------------------------------------------------------------------

// WhiteUserMassage

// optional int32 requestType = 1 [default = -1];
inline bool WhiteUserMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiteUserMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiteUserMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiteUserMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 WhiteUserMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.requestType)
  return requesttype_;
}
inline void WhiteUserMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool WhiteUserMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiteUserMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiteUserMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiteUserMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 WhiteUserMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.result)
  return result_;
}
inline void WhiteUserMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool WhiteUserMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiteUserMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiteUserMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiteUserMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& WhiteUserMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.resultDescribe)
  return *resultdescribe_;
}
inline void WhiteUserMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassage.resultDescribe)
}
inline void WhiteUserMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WhiteUserMassage.resultDescribe)
}
inline void WhiteUserMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WhiteUserMassage.resultDescribe)
}
inline ::std::string* WhiteUserMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WhiteUserMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* WhiteUserMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteUserMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WhiteUserMassage.resultDescribe)
}

// repeated string macs = 4;
inline int WhiteUserMassage::macs_size() const {
  return macs_.size();
}
inline void WhiteUserMassage::clear_macs() {
  macs_.Clear();
}
inline const ::std::string& WhiteUserMassage::macs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.macs)
  return macs_.Get(index);
}
inline ::std::string* WhiteUserMassage::mutable_macs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WhiteUserMassage.macs)
  return macs_.Mutable(index);
}
inline void WhiteUserMassage::set_macs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassage.macs)
  macs_.Mutable(index)->assign(value);
}
inline void WhiteUserMassage::set_macs(int index, const char* value) {
  macs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WhiteUserMassage.macs)
}
inline void WhiteUserMassage::set_macs(int index, const char* value, size_t size) {
  macs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WhiteUserMassage.macs)
}
inline ::std::string* WhiteUserMassage::add_macs() {
  return macs_.Add();
}
inline void WhiteUserMassage::add_macs(const ::std::string& value) {
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.WhiteUserMassage.macs)
}
inline void WhiteUserMassage::add_macs(const char* value) {
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.WhiteUserMassage.macs)
}
inline void WhiteUserMassage::add_macs(const char* value, size_t size) {
  macs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.WhiteUserMassage.macs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WhiteUserMassage::macs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.WhiteUserMassage.macs)
  return macs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WhiteUserMassage::mutable_macs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.WhiteUserMassage.macs)
  return &macs_;
}

// repeated .com.arges.file.proto.WristUserName users = 5;
inline int WhiteUserMassage::users_size() const {
  return users_.size();
}
inline void WhiteUserMassage::clear_users() {
  users_.Clear();
}
inline const ::com::arges::file::proto::WristUserName& WhiteUserMassage::users(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.users)
  return users_.Get(index);
}
inline ::com::arges::file::proto::WristUserName* WhiteUserMassage::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WhiteUserMassage.users)
  return users_.Mutable(index);
}
inline ::com::arges::file::proto::WristUserName* WhiteUserMassage::add_users() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.WhiteUserMassage.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >&
WhiteUserMassage::users() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.WhiteUserMassage.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::WristUserName >*
WhiteUserMassage::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.WhiteUserMassage.users)
  return &users_;
}

// optional .com.arges.file.proto.DeviceInfo devCode = 6;
inline bool WhiteUserMassage::has_devcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WhiteUserMassage::set_has_devcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WhiteUserMassage::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WhiteUserMassage::clear_devcode() {
  if (devcode_ != NULL) devcode_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devcode();
}
inline const ::com::arges::file::proto::DeviceInfo& WhiteUserMassage::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassage.devCode)
  return devcode_ != NULL ? *devcode_ : *default_instance_->devcode_;
}
inline ::com::arges::file::proto::DeviceInfo* WhiteUserMassage::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == NULL) devcode_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WhiteUserMassage.devCode)
  return devcode_;
}
inline ::com::arges::file::proto::DeviceInfo* WhiteUserMassage::release_devcode() {
  clear_has_devcode();
  ::com::arges::file::proto::DeviceInfo* temp = devcode_;
  devcode_ = NULL;
  return temp;
}
inline void WhiteUserMassage::set_allocated_devcode(::com::arges::file::proto::DeviceInfo* devcode) {
  delete devcode_;
  devcode_ = devcode;
  if (devcode) {
    set_has_devcode();
  } else {
    clear_has_devcode();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WhiteUserMassage.devCode)
}

// -------------------------------------------------------------------

// QueryBlackWhite

// optional .com.arges.file.proto.DeviceInfo device = 1;
inline bool QueryBlackWhite::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryBlackWhite::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryBlackWhite::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryBlackWhite::clear_device() {
  if (device_ != NULL) device_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_device();
}
inline const ::com::arges::file::proto::DeviceInfo& QueryBlackWhite::device() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.QueryBlackWhite.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::arges::file::proto::DeviceInfo* QueryBlackWhite::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.QueryBlackWhite.device)
  return device_;
}
inline ::com::arges::file::proto::DeviceInfo* QueryBlackWhite::release_device() {
  clear_has_device();
  ::com::arges::file::proto::DeviceInfo* temp = device_;
  device_ = NULL;
  return temp;
}
inline void QueryBlackWhite::set_allocated_device(::com::arges::file::proto::DeviceInfo* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.QueryBlackWhite.device)
}

// -------------------------------------------------------------------

// GateConfigureInfo

// optional .com.arges.file.proto.DeviceInfo device = 4;
inline bool GateConfigureInfo::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateConfigureInfo::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateConfigureInfo::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateConfigureInfo::clear_device() {
  if (device_ != NULL) device_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_device();
}
inline const ::com::arges::file::proto::DeviceInfo& GateConfigureInfo::device() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfigureInfo.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::arges::file::proto::DeviceInfo* GateConfigureInfo::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfigureInfo.device)
  return device_;
}
inline ::com::arges::file::proto::DeviceInfo* GateConfigureInfo::release_device() {
  clear_has_device();
  ::com::arges::file::proto::DeviceInfo* temp = device_;
  device_ = NULL;
  return temp;
}
inline void GateConfigureInfo::set_allocated_device(::com::arges::file::proto::DeviceInfo* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateConfigureInfo.device)
}

// optional string validateMode = 5 [default = ""];
inline bool GateConfigureInfo::has_validatemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateConfigureInfo::set_has_validatemode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateConfigureInfo::clear_has_validatemode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateConfigureInfo::clear_validatemode() {
  if (validatemode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    validatemode_->clear();
  }
  clear_has_validatemode();
}
inline const ::std::string& GateConfigureInfo::validatemode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfigureInfo.validateMode)
  return *validatemode_;
}
inline void GateConfigureInfo::set_validatemode(const ::std::string& value) {
  set_has_validatemode();
  if (validatemode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    validatemode_ = new ::std::string;
  }
  validatemode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfigureInfo.validateMode)
}
inline void GateConfigureInfo::set_validatemode(const char* value) {
  set_has_validatemode();
  if (validatemode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    validatemode_ = new ::std::string;
  }
  validatemode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateConfigureInfo.validateMode)
}
inline void GateConfigureInfo::set_validatemode(const char* value, size_t size) {
  set_has_validatemode();
  if (validatemode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    validatemode_ = new ::std::string;
  }
  validatemode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateConfigureInfo.validateMode)
}
inline ::std::string* GateConfigureInfo::mutable_validatemode() {
  set_has_validatemode();
  if (validatemode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    validatemode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfigureInfo.validateMode)
  return validatemode_;
}
inline ::std::string* GateConfigureInfo::release_validatemode() {
  clear_has_validatemode();
  if (validatemode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = validatemode_;
    validatemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GateConfigureInfo::set_allocated_validatemode(::std::string* validatemode) {
  if (validatemode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete validatemode_;
  }
  if (validatemode) {
    set_has_validatemode();
    validatemode_ = validatemode;
  } else {
    clear_has_validatemode();
    validatemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateConfigureInfo.validateMode)
}

// optional double faceRssiThreshold = 6 [default = -1];
inline bool GateConfigureInfo::has_facerssithreshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateConfigureInfo::set_has_facerssithreshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateConfigureInfo::clear_has_facerssithreshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateConfigureInfo::clear_facerssithreshold() {
  facerssithreshold_ = -1;
  clear_has_facerssithreshold();
}
inline double GateConfigureInfo::facerssithreshold() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfigureInfo.faceRssiThreshold)
  return facerssithreshold_;
}
inline void GateConfigureInfo::set_facerssithreshold(double value) {
  set_has_facerssithreshold();
  facerssithreshold_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfigureInfo.faceRssiThreshold)
}

// optional string boxcode = 7 [default = ""];
inline bool GateConfigureInfo::has_boxcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateConfigureInfo::set_has_boxcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateConfigureInfo::clear_has_boxcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateConfigureInfo::clear_boxcode() {
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_->clear();
  }
  clear_has_boxcode();
}
inline const ::std::string& GateConfigureInfo::boxcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfigureInfo.boxcode)
  return *boxcode_;
}
inline void GateConfigureInfo::set_boxcode(const ::std::string& value) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfigureInfo.boxcode)
}
inline void GateConfigureInfo::set_boxcode(const char* value) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateConfigureInfo.boxcode)
}
inline void GateConfigureInfo::set_boxcode(const char* value, size_t size) {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  boxcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateConfigureInfo.boxcode)
}
inline ::std::string* GateConfigureInfo::mutable_boxcode() {
  set_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfigureInfo.boxcode)
  return boxcode_;
}
inline ::std::string* GateConfigureInfo::release_boxcode() {
  clear_has_boxcode();
  if (boxcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxcode_;
    boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GateConfigureInfo::set_allocated_boxcode(::std::string* boxcode) {
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxcode_;
  }
  if (boxcode) {
    set_has_boxcode();
    boxcode_ = boxcode;
  } else {
    clear_has_boxcode();
    boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateConfigureInfo.boxcode)
}

// -------------------------------------------------------------------

// GateConfMessage

// optional int32 requestType = 1 [default = -1];
inline bool GateConfMessage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateConfMessage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateConfMessage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateConfMessage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 GateConfMessage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfMessage.requestType)
  return requesttype_;
}
inline void GateConfMessage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfMessage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool GateConfMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateConfMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateConfMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateConfMessage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GateConfMessage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfMessage.result)
  return result_;
}
inline void GateConfMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfMessage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool GateConfMessage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateConfMessage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateConfMessage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateConfMessage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& GateConfMessage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfMessage.resultDescribe)
  return *resultdescribe_;
}
inline void GateConfMessage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfMessage.resultDescribe)
}
inline void GateConfMessage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateConfMessage.resultDescribe)
}
inline void GateConfMessage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateConfMessage.resultDescribe)
}
inline ::std::string* GateConfMessage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfMessage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* GateConfMessage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GateConfMessage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateConfMessage.resultDescribe)
}

// repeated string Ids = 4;
inline int GateConfMessage::ids_size() const {
  return ids_.size();
}
inline void GateConfMessage::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& GateConfMessage::ids(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfMessage.Ids)
  return ids_.Get(index);
}
inline ::std::string* GateConfMessage::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfMessage.Ids)
  return ids_.Mutable(index);
}
inline void GateConfMessage::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateConfMessage.Ids)
  ids_.Mutable(index)->assign(value);
}
inline void GateConfMessage::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateConfMessage.Ids)
}
inline void GateConfMessage::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateConfMessage.Ids)
}
inline ::std::string* GateConfMessage::add_ids() {
  return ids_.Add();
}
inline void GateConfMessage::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.GateConfMessage.Ids)
}
inline void GateConfMessage::add_ids(const char* value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.GateConfMessage.Ids)
}
inline void GateConfMessage::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.GateConfMessage.Ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateConfMessage::ids() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.GateConfMessage.Ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GateConfMessage::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.GateConfMessage.Ids)
  return &ids_;
}

// repeated .com.arges.file.proto.GateConfigureInfo gateConfs = 5;
inline int GateConfMessage::gateconfs_size() const {
  return gateconfs_.size();
}
inline void GateConfMessage::clear_gateconfs() {
  gateconfs_.Clear();
}
inline const ::com::arges::file::proto::GateConfigureInfo& GateConfMessage::gateconfs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateConfMessage.gateConfs)
  return gateconfs_.Get(index);
}
inline ::com::arges::file::proto::GateConfigureInfo* GateConfMessage::mutable_gateconfs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateConfMessage.gateConfs)
  return gateconfs_.Mutable(index);
}
inline ::com::arges::file::proto::GateConfigureInfo* GateConfMessage::add_gateconfs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.GateConfMessage.gateConfs)
  return gateconfs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateConfigureInfo >&
GateConfMessage::gateconfs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.GateConfMessage.gateConfs)
  return gateconfs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateConfigureInfo >*
GateConfMessage::mutable_gateconfs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.GateConfMessage.gateConfs)
  return &gateconfs_;
}

// -------------------------------------------------------------------

// WhiteUserMassageTest

// optional int32 requestType = 1 [default = -1];
inline bool WhiteUserMassageTest::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiteUserMassageTest::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiteUserMassageTest::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiteUserMassageTest::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 WhiteUserMassageTest::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassageTest.requestType)
  return requesttype_;
}
inline void WhiteUserMassageTest::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassageTest.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool WhiteUserMassageTest::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiteUserMassageTest::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiteUserMassageTest::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiteUserMassageTest::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 WhiteUserMassageTest::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassageTest.result)
  return result_;
}
inline void WhiteUserMassageTest::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassageTest.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool WhiteUserMassageTest::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiteUserMassageTest::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiteUserMassageTest::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiteUserMassageTest::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& WhiteUserMassageTest::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
  return *resultdescribe_;
}
inline void WhiteUserMassageTest::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
}
inline void WhiteUserMassageTest::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
}
inline void WhiteUserMassageTest::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
}
inline ::std::string* WhiteUserMassageTest::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* WhiteUserMassageTest::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteUserMassageTest::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WhiteUserMassageTest.resultDescribe)
}

// -------------------------------------------------------------------

// WristSignInTime

// optional string wristmac = 1 [default = "default"];
inline bool WristSignInTime::has_wristmac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WristSignInTime::set_has_wristmac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WristSignInTime::clear_has_wristmac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WristSignInTime::clear_wristmac() {
  if (wristmac_ != _default_wristmac_) {
    wristmac_->assign(*_default_wristmac_);
  }
  clear_has_wristmac();
}
inline const ::std::string& WristSignInTime::wristmac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristSignInTime.wristmac)
  return *wristmac_;
}
inline void WristSignInTime::set_wristmac(const ::std::string& value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristSignInTime.wristmac)
}
inline void WristSignInTime::set_wristmac(const char* value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.WristSignInTime.wristmac)
}
inline void WristSignInTime::set_wristmac(const char* value, size_t size) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.WristSignInTime.wristmac)
}
inline ::std::string* WristSignInTime::mutable_wristmac() {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string(*_default_wristmac_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristSignInTime.wristmac)
  return wristmac_;
}
inline ::std::string* WristSignInTime::release_wristmac() {
  clear_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    return NULL;
  } else {
    ::std::string* temp = wristmac_;
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
    return temp;
  }
}
inline void WristSignInTime::set_allocated_wristmac(::std::string* wristmac) {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristmac) {
    set_has_wristmac();
    wristmac_ = wristmac;
  } else {
    clear_has_wristmac();
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.WristSignInTime.wristmac)
}

// optional uint64 signintime = 2 [default = 0];
inline bool WristSignInTime::has_signintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WristSignInTime::set_has_signintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WristSignInTime::clear_has_signintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WristSignInTime::clear_signintime() {
  signintime_ = GOOGLE_ULONGLONG(0);
  clear_has_signintime();
}
inline ::google::protobuf::uint64 WristSignInTime::signintime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristSignInTime.signintime)
  return signintime_;
}
inline void WristSignInTime::set_signintime(::google::protobuf::uint64 value) {
  set_has_signintime();
  signintime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.WristSignInTime.signintime)
}

// -------------------------------------------------------------------

// SigninMassageForReal

// optional string deviceCode = 1 [default = ""];
inline bool SigninMassageForReal::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigninMassageForReal::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigninMassageForReal::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigninMassageForReal::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& SigninMassageForReal::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.deviceCode)
  return *devicecode_;
}
inline void SigninMassageForReal::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninMassageForReal.deviceCode)
}
inline void SigninMassageForReal::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninMassageForReal.deviceCode)
}
inline void SigninMassageForReal::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninMassageForReal.deviceCode)
}
inline ::std::string* SigninMassageForReal::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.deviceCode)
  return devicecode_;
}
inline ::std::string* SigninMassageForReal::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SigninMassageForReal::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.deviceCode)
}

// optional .com.arges.file.proto.Wrist wrist = 2;
inline bool SigninMassageForReal::has_wrist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigninMassageForReal::set_has_wrist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SigninMassageForReal::clear_has_wrist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SigninMassageForReal::clear_wrist() {
  if (wrist_ != NULL) wrist_->::com::arges::file::proto::Wrist::Clear();
  clear_has_wrist();
}
inline const ::com::arges::file::proto::Wrist& SigninMassageForReal::wrist() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.wrist)
  return wrist_ != NULL ? *wrist_ : *default_instance_->wrist_;
}
inline ::com::arges::file::proto::Wrist* SigninMassageForReal::mutable_wrist() {
  set_has_wrist();
  if (wrist_ == NULL) wrist_ = new ::com::arges::file::proto::Wrist;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.wrist)
  return wrist_;
}
inline ::com::arges::file::proto::Wrist* SigninMassageForReal::release_wrist() {
  clear_has_wrist();
  ::com::arges::file::proto::Wrist* temp = wrist_;
  wrist_ = NULL;
  return temp;
}
inline void SigninMassageForReal::set_allocated_wrist(::com::arges::file::proto::Wrist* wrist) {
  delete wrist_;
  wrist_ = wrist;
  if (wrist) {
    set_has_wrist();
  } else {
    clear_has_wrist();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.wrist)
}

// optional .com.arges.file.proto.WristUserName userName = 3;
inline bool SigninMassageForReal::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SigninMassageForReal::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SigninMassageForReal::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SigninMassageForReal::clear_username() {
  if (username_ != NULL) username_->::com::arges::file::proto::WristUserName::Clear();
  clear_has_username();
}
inline const ::com::arges::file::proto::WristUserName& SigninMassageForReal::username() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.userName)
  return username_ != NULL ? *username_ : *default_instance_->username_;
}
inline ::com::arges::file::proto::WristUserName* SigninMassageForReal::mutable_username() {
  set_has_username();
  if (username_ == NULL) username_ = new ::com::arges::file::proto::WristUserName;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.userName)
  return username_;
}
inline ::com::arges::file::proto::WristUserName* SigninMassageForReal::release_username() {
  clear_has_username();
  ::com::arges::file::proto::WristUserName* temp = username_;
  username_ = NULL;
  return temp;
}
inline void SigninMassageForReal::set_allocated_username(::com::arges::file::proto::WristUserName* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.userName)
}

// optional bytes wristuserphoto = 4 [default = ""];
inline bool SigninMassageForReal::has_wristuserphoto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SigninMassageForReal::set_has_wristuserphoto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SigninMassageForReal::clear_has_wristuserphoto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SigninMassageForReal::clear_wristuserphoto() {
  if (wristuserphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto_->clear();
  }
  clear_has_wristuserphoto();
}
inline const ::std::string& SigninMassageForReal::wristuserphoto() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
  return *wristuserphoto_;
}
inline void SigninMassageForReal::set_wristuserphoto(const ::std::string& value) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
}
inline void SigninMassageForReal::set_wristuserphoto(const char* value) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
}
inline void SigninMassageForReal::set_wristuserphoto(const void* value, size_t size) {
  set_has_wristuserphoto();
  if (wristuserphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto_ = new ::std::string;
  }
  wristuserphoto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
}
inline ::std::string* SigninMassageForReal::mutable_wristuserphoto() {
  set_has_wristuserphoto();
  if (wristuserphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
  return wristuserphoto_;
}
inline ::std::string* SigninMassageForReal::release_wristuserphoto() {
  clear_has_wristuserphoto();
  if (wristuserphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wristuserphoto_;
    wristuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SigninMassageForReal::set_allocated_wristuserphoto(::std::string* wristuserphoto) {
  if (wristuserphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristuserphoto_;
  }
  if (wristuserphoto) {
    set_has_wristuserphoto();
    wristuserphoto_ = wristuserphoto;
  } else {
    clear_has_wristuserphoto();
    wristuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.wristuserphoto)
}

// optional bytes wristuserphoto2 = 5 [default = ""];
inline bool SigninMassageForReal::has_wristuserphoto2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SigninMassageForReal::set_has_wristuserphoto2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SigninMassageForReal::clear_has_wristuserphoto2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SigninMassageForReal::clear_wristuserphoto2() {
  if (wristuserphoto2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto2_->clear();
  }
  clear_has_wristuserphoto2();
}
inline const ::std::string& SigninMassageForReal::wristuserphoto2() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
  return *wristuserphoto2_;
}
inline void SigninMassageForReal::set_wristuserphoto2(const ::std::string& value) {
  set_has_wristuserphoto2();
  if (wristuserphoto2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto2_ = new ::std::string;
  }
  wristuserphoto2_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
}
inline void SigninMassageForReal::set_wristuserphoto2(const char* value) {
  set_has_wristuserphoto2();
  if (wristuserphoto2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto2_ = new ::std::string;
  }
  wristuserphoto2_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
}
inline void SigninMassageForReal::set_wristuserphoto2(const void* value, size_t size) {
  set_has_wristuserphoto2();
  if (wristuserphoto2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto2_ = new ::std::string;
  }
  wristuserphoto2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
}
inline ::std::string* SigninMassageForReal::mutable_wristuserphoto2() {
  set_has_wristuserphoto2();
  if (wristuserphoto2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
  return wristuserphoto2_;
}
inline ::std::string* SigninMassageForReal::release_wristuserphoto2() {
  clear_has_wristuserphoto2();
  if (wristuserphoto2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wristuserphoto2_;
    wristuserphoto2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SigninMassageForReal::set_allocated_wristuserphoto2(::std::string* wristuserphoto2) {
  if (wristuserphoto2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristuserphoto2_;
  }
  if (wristuserphoto2) {
    set_has_wristuserphoto2();
    wristuserphoto2_ = wristuserphoto2;
  } else {
    clear_has_wristuserphoto2();
    wristuserphoto2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.wristuserphoto2)
}

// optional bytes wristuserphoto3 = 6 [default = ""];
inline bool SigninMassageForReal::has_wristuserphoto3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SigninMassageForReal::set_has_wristuserphoto3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SigninMassageForReal::clear_has_wristuserphoto3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SigninMassageForReal::clear_wristuserphoto3() {
  if (wristuserphoto3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto3_->clear();
  }
  clear_has_wristuserphoto3();
}
inline const ::std::string& SigninMassageForReal::wristuserphoto3() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
  return *wristuserphoto3_;
}
inline void SigninMassageForReal::set_wristuserphoto3(const ::std::string& value) {
  set_has_wristuserphoto3();
  if (wristuserphoto3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto3_ = new ::std::string;
  }
  wristuserphoto3_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
}
inline void SigninMassageForReal::set_wristuserphoto3(const char* value) {
  set_has_wristuserphoto3();
  if (wristuserphoto3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto3_ = new ::std::string;
  }
  wristuserphoto3_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
}
inline void SigninMassageForReal::set_wristuserphoto3(const void* value, size_t size) {
  set_has_wristuserphoto3();
  if (wristuserphoto3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto3_ = new ::std::string;
  }
  wristuserphoto3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
}
inline ::std::string* SigninMassageForReal::mutable_wristuserphoto3() {
  set_has_wristuserphoto3();
  if (wristuserphoto3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristuserphoto3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
  return wristuserphoto3_;
}
inline ::std::string* SigninMassageForReal::release_wristuserphoto3() {
  clear_has_wristuserphoto3();
  if (wristuserphoto3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wristuserphoto3_;
    wristuserphoto3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SigninMassageForReal::set_allocated_wristuserphoto3(::std::string* wristuserphoto3) {
  if (wristuserphoto3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristuserphoto3_;
  }
  if (wristuserphoto3) {
    set_has_wristuserphoto3();
    wristuserphoto3_ = wristuserphoto3;
  } else {
    clear_has_wristuserphoto3();
    wristuserphoto3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SigninMassageForReal.wristuserphoto3)
}

// -------------------------------------------------------------------

// HotMapData

// optional string orgCode = 1 [default = ""];
inline bool HotMapData::has_orgcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HotMapData::set_has_orgcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HotMapData::clear_has_orgcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HotMapData::clear_orgcode() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_->clear();
  }
  clear_has_orgcode();
}
inline const ::std::string& HotMapData::orgcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapData.orgCode)
  return *orgcode_;
}
inline void HotMapData::set_orgcode(const ::std::string& value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapData.orgCode)
}
inline void HotMapData::set_orgcode(const char* value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HotMapData.orgCode)
}
inline void HotMapData::set_orgcode(const char* value, size_t size) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HotMapData.orgCode)
}
inline ::std::string* HotMapData::mutable_orgcode() {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HotMapData.orgCode)
  return orgcode_;
}
inline ::std::string* HotMapData::release_orgcode() {
  clear_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgcode_;
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HotMapData::set_allocated_orgcode(::std::string* orgcode) {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (orgcode) {
    set_has_orgcode();
    orgcode_ = orgcode;
  } else {
    clear_has_orgcode();
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HotMapData.orgCode)
}

// repeated string loginName = 2;
inline int HotMapData::loginname_size() const {
  return loginname_.size();
}
inline void HotMapData::clear_loginname() {
  loginname_.Clear();
}
inline const ::std::string& HotMapData::loginname(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapData.loginName)
  return loginname_.Get(index);
}
inline ::std::string* HotMapData::mutable_loginname(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HotMapData.loginName)
  return loginname_.Mutable(index);
}
inline void HotMapData::set_loginname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapData.loginName)
  loginname_.Mutable(index)->assign(value);
}
inline void HotMapData::set_loginname(int index, const char* value) {
  loginname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HotMapData.loginName)
}
inline void HotMapData::set_loginname(int index, const char* value, size_t size) {
  loginname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HotMapData.loginName)
}
inline ::std::string* HotMapData::add_loginname() {
  return loginname_.Add();
}
inline void HotMapData::add_loginname(const ::std::string& value) {
  loginname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.HotMapData.loginName)
}
inline void HotMapData::add_loginname(const char* value) {
  loginname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.HotMapData.loginName)
}
inline void HotMapData::add_loginname(const char* value, size_t size) {
  loginname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.HotMapData.loginName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HotMapData::loginname() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.HotMapData.loginName)
  return loginname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HotMapData::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.HotMapData.loginName)
  return &loginname_;
}

// optional int32 count = 3 [default = 0];
inline bool HotMapData::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HotMapData::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HotMapData::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HotMapData::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 HotMapData::count() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapData.count)
  return count_;
}
inline void HotMapData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapData.count)
}

// -------------------------------------------------------------------

// HotMapMassage

// optional int32 requestType = 1 [default = -1];
inline bool HotMapMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HotMapMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HotMapMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HotMapMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 HotMapMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapMassage.requestType)
  return requesttype_;
}
inline void HotMapMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool HotMapMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HotMapMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HotMapMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HotMapMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 HotMapMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapMassage.result)
  return result_;
}
inline void HotMapMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapMassage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool HotMapMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HotMapMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HotMapMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HotMapMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& HotMapMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapMassage.resultDescribe)
  return *resultdescribe_;
}
inline void HotMapMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapMassage.resultDescribe)
}
inline void HotMapMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HotMapMassage.resultDescribe)
}
inline void HotMapMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HotMapMassage.resultDescribe)
}
inline ::std::string* HotMapMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HotMapMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* HotMapMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HotMapMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HotMapMassage.resultDescribe)
}

// optional string orgCode = 4 [default = ""];
inline bool HotMapMassage::has_orgcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HotMapMassage::set_has_orgcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HotMapMassage::clear_has_orgcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HotMapMassage::clear_orgcode() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_->clear();
  }
  clear_has_orgcode();
}
inline const ::std::string& HotMapMassage::orgcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapMassage.orgCode)
  return *orgcode_;
}
inline void HotMapMassage::set_orgcode(const ::std::string& value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HotMapMassage.orgCode)
}
inline void HotMapMassage::set_orgcode(const char* value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HotMapMassage.orgCode)
}
inline void HotMapMassage::set_orgcode(const char* value, size_t size) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HotMapMassage.orgCode)
}
inline ::std::string* HotMapMassage::mutable_orgcode() {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HotMapMassage.orgCode)
  return orgcode_;
}
inline ::std::string* HotMapMassage::release_orgcode() {
  clear_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgcode_;
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HotMapMassage::set_allocated_orgcode(::std::string* orgcode) {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (orgcode) {
    set_has_orgcode();
    orgcode_ = orgcode;
  } else {
    clear_has_orgcode();
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HotMapMassage.orgCode)
}

// repeated .com.arges.file.proto.HotMapData data = 5;
inline int HotMapMassage::data_size() const {
  return data_.size();
}
inline void HotMapMassage::clear_data() {
  data_.Clear();
}
inline const ::com::arges::file::proto::HotMapData& HotMapMassage::data(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HotMapMassage.data)
  return data_.Get(index);
}
inline ::com::arges::file::proto::HotMapData* HotMapMassage::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HotMapMassage.data)
  return data_.Mutable(index);
}
inline ::com::arges::file::proto::HotMapData* HotMapMassage::add_data() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.HotMapMassage.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HotMapData >&
HotMapMassage::data() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.HotMapMassage.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::HotMapData >*
HotMapMassage::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.HotMapMassage.data)
  return &data_;
}

// -------------------------------------------------------------------

// ReportHotMapData_Data

// optional string devCode = 1 [default = ""];
inline bool ReportHotMapData_Data::has_devcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportHotMapData_Data::set_has_devcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportHotMapData_Data::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportHotMapData_Data::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& ReportHotMapData_Data::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportHotMapData.Data.devCode)
  return *devcode_;
}
inline void ReportHotMapData_Data::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportHotMapData.Data.devCode)
}
inline void ReportHotMapData_Data::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportHotMapData.Data.devCode)
}
inline void ReportHotMapData_Data::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportHotMapData.Data.devCode)
}
inline ::std::string* ReportHotMapData_Data::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportHotMapData.Data.devCode)
  return devcode_;
}
inline ::std::string* ReportHotMapData_Data::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportHotMapData_Data::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportHotMapData.Data.devCode)
}

// optional string orgCode = 2 [default = ""];
inline bool ReportHotMapData_Data::has_orgcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportHotMapData_Data::set_has_orgcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportHotMapData_Data::clear_has_orgcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportHotMapData_Data::clear_orgcode() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_->clear();
  }
  clear_has_orgcode();
}
inline const ::std::string& ReportHotMapData_Data::orgcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportHotMapData.Data.orgCode)
  return *orgcode_;
}
inline void ReportHotMapData_Data::set_orgcode(const ::std::string& value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportHotMapData.Data.orgCode)
}
inline void ReportHotMapData_Data::set_orgcode(const char* value) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportHotMapData.Data.orgCode)
}
inline void ReportHotMapData_Data::set_orgcode(const char* value, size_t size) {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  orgcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportHotMapData.Data.orgCode)
}
inline ::std::string* ReportHotMapData_Data::mutable_orgcode() {
  set_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportHotMapData.Data.orgCode)
  return orgcode_;
}
inline ::std::string* ReportHotMapData_Data::release_orgcode() {
  clear_has_orgcode();
  if (orgcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgcode_;
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportHotMapData_Data::set_allocated_orgcode(::std::string* orgcode) {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (orgcode) {
    set_has_orgcode();
    orgcode_ = orgcode;
  } else {
    clear_has_orgcode();
    orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportHotMapData.Data.orgCode)
}

// repeated .com.arges.file.proto.Wrist wristmac = 3;
inline int ReportHotMapData_Data::wristmac_size() const {
  return wristmac_.size();
}
inline void ReportHotMapData_Data::clear_wristmac() {
  wristmac_.Clear();
}
inline const ::com::arges::file::proto::Wrist& ReportHotMapData_Data::wristmac(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportHotMapData.Data.wristmac)
  return wristmac_.Get(index);
}
inline ::com::arges::file::proto::Wrist* ReportHotMapData_Data::mutable_wristmac(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportHotMapData.Data.wristmac)
  return wristmac_.Mutable(index);
}
inline ::com::arges::file::proto::Wrist* ReportHotMapData_Data::add_wristmac() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReportHotMapData.Data.wristmac)
  return wristmac_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
ReportHotMapData_Data::wristmac() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReportHotMapData.Data.wristmac)
  return wristmac_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
ReportHotMapData_Data::mutable_wristmac() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReportHotMapData.Data.wristmac)
  return &wristmac_;
}

// -------------------------------------------------------------------

// ReportHotMapData

// repeated .com.arges.file.proto.ReportHotMapData.Data datas = 1;
inline int ReportHotMapData::datas_size() const {
  return datas_.size();
}
inline void ReportHotMapData::clear_datas() {
  datas_.Clear();
}
inline const ::com::arges::file::proto::ReportHotMapData_Data& ReportHotMapData::datas(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportHotMapData.datas)
  return datas_.Get(index);
}
inline ::com::arges::file::proto::ReportHotMapData_Data* ReportHotMapData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportHotMapData.datas)
  return datas_.Mutable(index);
}
inline ::com::arges::file::proto::ReportHotMapData_Data* ReportHotMapData::add_datas() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReportHotMapData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportHotMapData_Data >&
ReportHotMapData::datas() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReportHotMapData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportHotMapData_Data >*
ReportHotMapData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReportHotMapData.datas)
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::AUTO_MODE_OF_USER> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::AUTO_MODE_OF_USER>() {
  return ::com::arges::file::proto::AUTO_MODE_OF_USER_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_WHITE_LIST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_WHITE_LIST>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_WHITE_LIST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_WHITE_LIST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_WHITE_LIST>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_WHITE_LIST_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_GATE_CONF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_GATE_CONF>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_GATE_CONF_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_GATE_CONF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_GATE_CONF>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_GATE_CONF_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_HOST_MAP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_HOST_MAP>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_HOST_MAP_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_HOST_MAP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_HOST_MAP>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_HOST_MAP_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SignInDataBean_2eproto__INCLUDED
