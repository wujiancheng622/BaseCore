// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BPXConnectToBMS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BPXConnectToBMS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace bmsbpx {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BPXConnectToBMS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BPXConnectToBMS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BPXConnectToBMS_2eproto() {
  protobuf_AddDesc_BPXConnectToBMS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BPXConnectToBMS.proto");
  GOOGLE_CHECK(file != NULL);
  BPXConnectToBMS_descriptor_ = file->message_type(0);
  static const int BPXConnectToBMS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXConnectToBMS, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXConnectToBMS, hhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXConnectToBMS, ip_),
  };
  BPXConnectToBMS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BPXConnectToBMS_descriptor_,
      BPXConnectToBMS::default_instance_,
      BPXConnectToBMS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXConnectToBMS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXConnectToBMS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BPXConnectToBMS));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BPXConnectToBMS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BPXConnectToBMS_descriptor_, &BPXConnectToBMS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BPXConnectToBMS_2eproto() {
  delete BPXConnectToBMS::default_instance_;
  delete BPXConnectToBMS_reflection_;
}

void protobuf_AddDesc_BPXConnectToBMS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025BPXConnectToBMS.proto\022\026com.arges.bmsbp"
    "x.proto\">\n\017BPXConnectToBMS\022\014\n\004uuid\030( \002(\t"
    "\022\017\n\007hHandle\030) \002(\003\022\014\n\002ip\030* \001(\t:\000", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BPXConnectToBMS.proto", &protobuf_RegisterTypes);
  BPXConnectToBMS::default_instance_ = new BPXConnectToBMS();
  BPXConnectToBMS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BPXConnectToBMS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BPXConnectToBMS_2eproto {
  StaticDescriptorInitializer_BPXConnectToBMS_2eproto() {
    protobuf_AddDesc_BPXConnectToBMS_2eproto();
  }
} static_descriptor_initializer_BPXConnectToBMS_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BPXConnectToBMS::kUuidFieldNumber;
const int BPXConnectToBMS::kHHandleFieldNumber;
const int BPXConnectToBMS::kIpFieldNumber;
#endif  // !_MSC_VER

BPXConnectToBMS::BPXConnectToBMS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.bmsbpx.proto.BPXConnectToBMS)
}

void BPXConnectToBMS::InitAsDefaultInstance() {
}

BPXConnectToBMS::BPXConnectToBMS(const BPXConnectToBMS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.bmsbpx.proto.BPXConnectToBMS)
}

void BPXConnectToBMS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hhandle_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BPXConnectToBMS::~BPXConnectToBMS() {
  // @@protoc_insertion_point(destructor:com.arges.bmsbpx.proto.BPXConnectToBMS)
  SharedDtor();
}

void BPXConnectToBMS::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void BPXConnectToBMS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BPXConnectToBMS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BPXConnectToBMS_descriptor_;
}

const BPXConnectToBMS& BPXConnectToBMS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BPXConnectToBMS_2eproto();
  return *default_instance_;
}

BPXConnectToBMS* BPXConnectToBMS::default_instance_ = NULL;

BPXConnectToBMS* BPXConnectToBMS::New() const {
  return new BPXConnectToBMS;
}

void BPXConnectToBMS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    hhandle_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BPXConnectToBMS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.bmsbpx.proto.BPXConnectToBMS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 40;
      case 40: {
        if (tag == 322) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_hHandle;
        break;
      }

      // required int64 hHandle = 41;
      case 41: {
        if (tag == 328) {
         parse_hHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hhandle_)));
          set_has_hhandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_ip;
        break;
      }

      // optional string ip = 42 [default = ""];
      case 42: {
        if (tag == 338) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.bmsbpx.proto.BPXConnectToBMS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.bmsbpx.proto.BPXConnectToBMS)
  return false;
#undef DO_
}

void BPXConnectToBMS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.bmsbpx.proto.BPXConnectToBMS)
  // required string uuid = 40;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->uuid(), output);
  }

  // required int64 hHandle = 41;
  if (has_hhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->hhandle(), output);
  }

  // optional string ip = 42 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.bmsbpx.proto.BPXConnectToBMS)
}

::google::protobuf::uint8* BPXConnectToBMS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.bmsbpx.proto.BPXConnectToBMS)
  // required string uuid = 40;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->uuid(), target);
  }

  // required int64 hHandle = 41;
  if (has_hhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->hhandle(), target);
  }

  // optional string ip = 42 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.bmsbpx.proto.BPXConnectToBMS)
  return target;
}

int BPXConnectToBMS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 40;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required int64 hHandle = 41;
    if (has_hhandle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hhandle());
    }

    // optional string ip = 42 [default = ""];
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BPXConnectToBMS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BPXConnectToBMS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BPXConnectToBMS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BPXConnectToBMS::MergeFrom(const BPXConnectToBMS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_hhandle()) {
      set_hhandle(from.hhandle());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BPXConnectToBMS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPXConnectToBMS::CopyFrom(const BPXConnectToBMS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPXConnectToBMS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BPXConnectToBMS::Swap(BPXConnectToBMS* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(hhandle_, other->hhandle_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BPXConnectToBMS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BPXConnectToBMS_descriptor_;
  metadata.reflection = BPXConnectToBMS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bmsbpx
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
