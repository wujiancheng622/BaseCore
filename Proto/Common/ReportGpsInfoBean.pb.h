// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReportGpsInfoBean.proto

#ifndef PROTOBUF_ReportGpsInfoBean_2eproto__INCLUDED
#define PROTOBUF_ReportGpsInfoBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ReportGpsInfoBean_2eproto();
void protobuf_AssignDesc_ReportGpsInfoBean_2eproto();
void protobuf_ShutdownFile_ReportGpsInfoBean_2eproto();

class ReportGpsInfo;

// ===================================================================

class ReportGpsInfo : public ::google::protobuf::Message {
 public:
  ReportGpsInfo();
  virtual ~ReportGpsInfo();

  ReportGpsInfo(const ReportGpsInfo& from);

  inline ReportGpsInfo& operator=(const ReportGpsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportGpsInfo& default_instance();

  void Swap(ReportGpsInfo* other);

  // implements Message ----------------------------------------------

  ReportGpsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportGpsInfo& from);
  void MergeFrom(const ReportGpsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 keyId = 1 [default = -1];
  inline bool has_keyid() const;
  inline void clear_keyid();
  static const int kKeyIdFieldNumber = 1;
  inline ::google::protobuf::int64 keyid() const;
  inline void set_keyid(::google::protobuf::int64 value);

  // optional string devCode = 2 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 2;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional int32 unitType = 3 [default = -1];
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 3;
  inline ::google::protobuf::int32 unittype() const;
  inline void set_unittype(::google::protobuf::int32 value);

  // optional int32 unitSeq = 4 [default = -1];
  inline bool has_unitseq() const;
  inline void clear_unitseq();
  static const int kUnitSeqFieldNumber = 4;
  inline ::google::protobuf::int32 unitseq() const;
  inline void set_unitseq(::google::protobuf::int32 value);

  // optional int32 channelSeq = 5 [default = -1];
  inline bool has_channelseq() const;
  inline void clear_channelseq();
  static const int kChannelSeqFieldNumber = 5;
  inline ::google::protobuf::int32 channelseq() const;
  inline void set_channelseq(::google::protobuf::int32 value);

  // optional float longitude = 6 [default = 0];
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 7 [default = 0];
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 7;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float height = 8 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline float height() const;
  inline void set_height(float value);

  // optional float angle = 9 [default = 0];
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 9;
  inline float angle() const;
  inline void set_angle(float value);

  // optional float speed = 10 [default = 0];
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 10;
  inline float speed() const;
  inline void set_speed(float value);

  // optional int64 alarmTime = 11 [default = -1];
  inline bool has_alarmtime() const;
  inline void clear_alarmtime();
  static const int kAlarmTimeFieldNumber = 11;
  inline ::google::protobuf::int64 alarmtime() const;
  inline void set_alarmtime(::google::protobuf::int64 value);

  // optional int32 stars = 12 [default = -1];
  inline bool has_stars() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 12;
  inline ::google::protobuf::int32 stars() const;
  inline void set_stars(::google::protobuf::int32 value);

  // optional int32 antenna = 13 [default = -1];
  inline bool has_antenna() const;
  inline void clear_antenna();
  static const int kAntennaFieldNumber = 13;
  inline ::google::protobuf::int32 antenna() const;
  inline void set_antenna(::google::protobuf::int32 value);

  // optional int32 orientation = 14 [default = -1];
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 14;
  inline ::google::protobuf::int32 orientation() const;
  inline void set_orientation(::google::protobuf::int32 value);

  // optional string alarm = 15 [default = ""];
  inline bool has_alarm() const;
  inline void clear_alarm();
  static const int kAlarmFieldNumber = 15;
  inline const ::std::string& alarm() const;
  inline void set_alarm(const ::std::string& value);
  inline void set_alarm(const char* value);
  inline void set_alarm(const char* value, size_t size);
  inline ::std::string* mutable_alarm();
  inline ::std::string* release_alarm();
  inline void set_allocated_alarm(::std::string* alarm);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportGpsInfo)
 private:
  inline void set_has_keyid();
  inline void clear_has_keyid();
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_unitseq();
  inline void clear_has_unitseq();
  inline void set_has_channelseq();
  inline void clear_has_channelseq();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_alarmtime();
  inline void clear_has_alarmtime();
  inline void set_has_stars();
  inline void clear_has_stars();
  inline void set_has_antenna();
  inline void clear_has_antenna();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_alarm();
  inline void clear_has_alarm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 keyid_;
  ::std::string* devcode_;
  ::google::protobuf::int32 unittype_;
  ::google::protobuf::int32 unitseq_;
  ::google::protobuf::int32 channelseq_;
  float longitude_;
  float latitude_;
  float height_;
  float angle_;
  float speed_;
  ::google::protobuf::int64 alarmtime_;
  ::google::protobuf::int32 stars_;
  ::google::protobuf::int32 antenna_;
  ::std::string* alarm_;
  ::google::protobuf::int32 orientation_;
  friend void  protobuf_AddDesc_ReportGpsInfoBean_2eproto();
  friend void protobuf_AssignDesc_ReportGpsInfoBean_2eproto();
  friend void protobuf_ShutdownFile_ReportGpsInfoBean_2eproto();

  void InitAsDefaultInstance();
  static ReportGpsInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ReportGpsInfo

// optional int64 keyId = 1 [default = -1];
inline bool ReportGpsInfo::has_keyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportGpsInfo::set_has_keyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportGpsInfo::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportGpsInfo::clear_keyid() {
  keyid_ = GOOGLE_LONGLONG(-1);
  clear_has_keyid();
}
inline ::google::protobuf::int64 ReportGpsInfo::keyid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.keyId)
  return keyid_;
}
inline void ReportGpsInfo::set_keyid(::google::protobuf::int64 value) {
  set_has_keyid();
  keyid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.keyId)
}

// optional string devCode = 2 [default = ""];
inline bool ReportGpsInfo::has_devcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportGpsInfo::set_has_devcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportGpsInfo::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportGpsInfo::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& ReportGpsInfo::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.devCode)
  return *devcode_;
}
inline void ReportGpsInfo::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.devCode)
}
inline void ReportGpsInfo::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportGpsInfo.devCode)
}
inline void ReportGpsInfo::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportGpsInfo.devCode)
}
inline ::std::string* ReportGpsInfo::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportGpsInfo.devCode)
  return devcode_;
}
inline ::std::string* ReportGpsInfo::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportGpsInfo::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportGpsInfo.devCode)
}

// optional int32 unitType = 3 [default = -1];
inline bool ReportGpsInfo::has_unittype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportGpsInfo::set_has_unittype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportGpsInfo::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportGpsInfo::clear_unittype() {
  unittype_ = -1;
  clear_has_unittype();
}
inline ::google::protobuf::int32 ReportGpsInfo::unittype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.unitType)
  return unittype_;
}
inline void ReportGpsInfo::set_unittype(::google::protobuf::int32 value) {
  set_has_unittype();
  unittype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.unitType)
}

// optional int32 unitSeq = 4 [default = -1];
inline bool ReportGpsInfo::has_unitseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportGpsInfo::set_has_unitseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportGpsInfo::clear_has_unitseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportGpsInfo::clear_unitseq() {
  unitseq_ = -1;
  clear_has_unitseq();
}
inline ::google::protobuf::int32 ReportGpsInfo::unitseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.unitSeq)
  return unitseq_;
}
inline void ReportGpsInfo::set_unitseq(::google::protobuf::int32 value) {
  set_has_unitseq();
  unitseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.unitSeq)
}

// optional int32 channelSeq = 5 [default = -1];
inline bool ReportGpsInfo::has_channelseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportGpsInfo::set_has_channelseq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportGpsInfo::clear_has_channelseq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportGpsInfo::clear_channelseq() {
  channelseq_ = -1;
  clear_has_channelseq();
}
inline ::google::protobuf::int32 ReportGpsInfo::channelseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.channelSeq)
  return channelseq_;
}
inline void ReportGpsInfo::set_channelseq(::google::protobuf::int32 value) {
  set_has_channelseq();
  channelseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.channelSeq)
}

// optional float longitude = 6 [default = 0];
inline bool ReportGpsInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportGpsInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportGpsInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportGpsInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float ReportGpsInfo::longitude() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.longitude)
  return longitude_;
}
inline void ReportGpsInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.longitude)
}

// optional float latitude = 7 [default = 0];
inline bool ReportGpsInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportGpsInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportGpsInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportGpsInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float ReportGpsInfo::latitude() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.latitude)
  return latitude_;
}
inline void ReportGpsInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.latitude)
}

// optional float height = 8 [default = 0];
inline bool ReportGpsInfo::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReportGpsInfo::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReportGpsInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReportGpsInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ReportGpsInfo::height() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.height)
  return height_;
}
inline void ReportGpsInfo::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.height)
}

// optional float angle = 9 [default = 0];
inline bool ReportGpsInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReportGpsInfo::set_has_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReportGpsInfo::clear_has_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReportGpsInfo::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float ReportGpsInfo::angle() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.angle)
  return angle_;
}
inline void ReportGpsInfo::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.angle)
}

// optional float speed = 10 [default = 0];
inline bool ReportGpsInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReportGpsInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReportGpsInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReportGpsInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float ReportGpsInfo::speed() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.speed)
  return speed_;
}
inline void ReportGpsInfo::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.speed)
}

// optional int64 alarmTime = 11 [default = -1];
inline bool ReportGpsInfo::has_alarmtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReportGpsInfo::set_has_alarmtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReportGpsInfo::clear_has_alarmtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReportGpsInfo::clear_alarmtime() {
  alarmtime_ = GOOGLE_LONGLONG(-1);
  clear_has_alarmtime();
}
inline ::google::protobuf::int64 ReportGpsInfo::alarmtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.alarmTime)
  return alarmtime_;
}
inline void ReportGpsInfo::set_alarmtime(::google::protobuf::int64 value) {
  set_has_alarmtime();
  alarmtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.alarmTime)
}

// optional int32 stars = 12 [default = -1];
inline bool ReportGpsInfo::has_stars() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReportGpsInfo::set_has_stars() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReportGpsInfo::clear_has_stars() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReportGpsInfo::clear_stars() {
  stars_ = -1;
  clear_has_stars();
}
inline ::google::protobuf::int32 ReportGpsInfo::stars() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.stars)
  return stars_;
}
inline void ReportGpsInfo::set_stars(::google::protobuf::int32 value) {
  set_has_stars();
  stars_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.stars)
}

// optional int32 antenna = 13 [default = -1];
inline bool ReportGpsInfo::has_antenna() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReportGpsInfo::set_has_antenna() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReportGpsInfo::clear_has_antenna() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReportGpsInfo::clear_antenna() {
  antenna_ = -1;
  clear_has_antenna();
}
inline ::google::protobuf::int32 ReportGpsInfo::antenna() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.antenna)
  return antenna_;
}
inline void ReportGpsInfo::set_antenna(::google::protobuf::int32 value) {
  set_has_antenna();
  antenna_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.antenna)
}

// optional int32 orientation = 14 [default = -1];
inline bool ReportGpsInfo::has_orientation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReportGpsInfo::set_has_orientation() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReportGpsInfo::clear_has_orientation() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReportGpsInfo::clear_orientation() {
  orientation_ = -1;
  clear_has_orientation();
}
inline ::google::protobuf::int32 ReportGpsInfo::orientation() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.orientation)
  return orientation_;
}
inline void ReportGpsInfo::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.orientation)
}

// optional string alarm = 15 [default = ""];
inline bool ReportGpsInfo::has_alarm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReportGpsInfo::set_has_alarm() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReportGpsInfo::clear_has_alarm() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReportGpsInfo::clear_alarm() {
  if (alarm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_->clear();
  }
  clear_has_alarm();
}
inline const ::std::string& ReportGpsInfo::alarm() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportGpsInfo.alarm)
  return *alarm_;
}
inline void ReportGpsInfo::set_alarm(const ::std::string& value) {
  set_has_alarm();
  if (alarm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_ = new ::std::string;
  }
  alarm_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportGpsInfo.alarm)
}
inline void ReportGpsInfo::set_alarm(const char* value) {
  set_has_alarm();
  if (alarm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_ = new ::std::string;
  }
  alarm_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportGpsInfo.alarm)
}
inline void ReportGpsInfo::set_alarm(const char* value, size_t size) {
  set_has_alarm();
  if (alarm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_ = new ::std::string;
  }
  alarm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportGpsInfo.alarm)
}
inline ::std::string* ReportGpsInfo::mutable_alarm() {
  set_has_alarm();
  if (alarm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportGpsInfo.alarm)
  return alarm_;
}
inline ::std::string* ReportGpsInfo::release_alarm() {
  clear_has_alarm();
  if (alarm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarm_;
    alarm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportGpsInfo::set_allocated_alarm(::std::string* alarm) {
  if (alarm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarm_;
  }
  if (alarm) {
    set_has_alarm();
    alarm_ = alarm;
  } else {
    clear_has_alarm();
    alarm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportGpsInfo.alarm)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ReportGpsInfoBean_2eproto__INCLUDED
