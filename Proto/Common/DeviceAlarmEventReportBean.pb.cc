// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceAlarmEventReportBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DeviceAlarmEventReportBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* DeviceAlarmEventReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAlarmEventReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DeviceAlarmEventReportBean_2eproto() {
  protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DeviceAlarmEventReportBean.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceAlarmEventReport_descriptor_ = file->message_type(0);
  static const int DeviceAlarmEventReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, alarmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, alarmstaus_),
  };
  DeviceAlarmEventReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAlarmEventReport_descriptor_,
      DeviceAlarmEventReport::default_instance_,
      DeviceAlarmEventReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAlarmEventReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAlarmEventReport));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DeviceAlarmEventReportBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAlarmEventReport_descriptor_, &DeviceAlarmEventReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DeviceAlarmEventReportBean_2eproto() {
  delete DeviceAlarmEventReport::default_instance_;
  delete DeviceAlarmEventReport_reflection_;
  delete DeviceAlarmEventReport::_default_deviceid_;
}

void protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n DeviceAlarmEventReportBean.proto\022\024com."
    "arges.file.proto\"\216\001\n\026DeviceAlarmEventRep"
    "ort\022\031\n\010deviceid\030\001 \001(\t:\007default\022\023\n\007channe"
    "l\030\002 \001(\005:\002-1\022\025\n\talarmtype\030\003 \001(\005:\002-1\022\025\n\tal"
    "armTime\030\004 \001(\003:\002-1\022\026\n\nalarmStaus\030\005 \001(\005:\002-"
    "1", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeviceAlarmEventReportBean.proto", &protobuf_RegisterTypes);
  DeviceAlarmEventReport::_default_deviceid_ =
      new ::std::string("default", 7);
  DeviceAlarmEventReport::default_instance_ = new DeviceAlarmEventReport();
  DeviceAlarmEventReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DeviceAlarmEventReportBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DeviceAlarmEventReportBean_2eproto {
  StaticDescriptorInitializer_DeviceAlarmEventReportBean_2eproto() {
    protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto();
  }
} static_descriptor_initializer_DeviceAlarmEventReportBean_2eproto_;

// ===================================================================

::std::string* DeviceAlarmEventReport::_default_deviceid_ = NULL;
#ifndef _MSC_VER
const int DeviceAlarmEventReport::kDeviceidFieldNumber;
const int DeviceAlarmEventReport::kChannelFieldNumber;
const int DeviceAlarmEventReport::kAlarmtypeFieldNumber;
const int DeviceAlarmEventReport::kAlarmTimeFieldNumber;
const int DeviceAlarmEventReport::kAlarmStausFieldNumber;
#endif  // !_MSC_VER

DeviceAlarmEventReport::DeviceAlarmEventReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DeviceAlarmEventReport)
}

void DeviceAlarmEventReport::InitAsDefaultInstance() {
}

DeviceAlarmEventReport::DeviceAlarmEventReport(const DeviceAlarmEventReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DeviceAlarmEventReport)
}

void DeviceAlarmEventReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  channel_ = -1;
  alarmtype_ = -1;
  alarmtime_ = GOOGLE_LONGLONG(-1);
  alarmstaus_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAlarmEventReport::~DeviceAlarmEventReport() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DeviceAlarmEventReport)
  SharedDtor();
}

void DeviceAlarmEventReport::SharedDtor() {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void DeviceAlarmEventReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAlarmEventReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAlarmEventReport_descriptor_;
}

const DeviceAlarmEventReport& DeviceAlarmEventReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto();
  return *default_instance_;
}

DeviceAlarmEventReport* DeviceAlarmEventReport::default_instance_ = NULL;

DeviceAlarmEventReport* DeviceAlarmEventReport::New() const {
  return new DeviceAlarmEventReport;
}

void DeviceAlarmEventReport::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_deviceid()) {
      if (deviceid_ != _default_deviceid_) {
        deviceid_->assign(*_default_deviceid_);
      }
    }
    channel_ = -1;
    alarmtype_ = -1;
    alarmtime_ = GOOGLE_LONGLONG(-1);
    alarmstaus_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAlarmEventReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DeviceAlarmEventReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceid = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarmtype;
        break;
      }

      // optional int32 alarmtype = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_alarmtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_alarmTime;
        break;
      }

      // optional int64 alarmTime = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_alarmTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alarmtime_)));
          set_has_alarmtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_alarmStaus;
        break;
      }

      // optional int32 alarmStaus = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_alarmStaus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmstaus_)));
          set_has_alarmstaus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DeviceAlarmEventReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DeviceAlarmEventReport)
  return false;
#undef DO_
}

void DeviceAlarmEventReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DeviceAlarmEventReport)
  // optional string deviceid = 1 [default = "default"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional int32 channel = 2 [default = -1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 alarmtype = 3 [default = -1];
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alarmtype(), output);
  }

  // optional int64 alarmTime = 4 [default = -1];
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->alarmtime(), output);
  }

  // optional int32 alarmStaus = 5 [default = -1];
  if (has_alarmstaus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->alarmstaus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DeviceAlarmEventReport)
}

::google::protobuf::uint8* DeviceAlarmEventReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DeviceAlarmEventReport)
  // optional string deviceid = 1 [default = "default"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // optional int32 channel = 2 [default = -1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 alarmtype = 3 [default = -1];
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alarmtype(), target);
  }

  // optional int64 alarmTime = 4 [default = -1];
  if (has_alarmtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->alarmtime(), target);
  }

  // optional int32 alarmStaus = 5 [default = -1];
  if (has_alarmstaus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->alarmstaus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DeviceAlarmEventReport)
  return target;
}

int DeviceAlarmEventReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceid = 1 [default = "default"];
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional int32 channel = 2 [default = -1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 alarmtype = 3 [default = -1];
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmtype());
    }

    // optional int64 alarmTime = 4 [default = -1];
    if (has_alarmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alarmtime());
    }

    // optional int32 alarmStaus = 5 [default = -1];
    if (has_alarmstaus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmstaus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAlarmEventReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAlarmEventReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAlarmEventReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAlarmEventReport::MergeFrom(const DeviceAlarmEventReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_alarmtime()) {
      set_alarmtime(from.alarmtime());
    }
    if (from.has_alarmstaus()) {
      set_alarmstaus(from.alarmstaus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAlarmEventReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAlarmEventReport::CopyFrom(const DeviceAlarmEventReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAlarmEventReport::IsInitialized() const {

  return true;
}

void DeviceAlarmEventReport::Swap(DeviceAlarmEventReport* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(channel_, other->channel_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(alarmtime_, other->alarmtime_);
    std::swap(alarmstaus_, other->alarmstaus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAlarmEventReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAlarmEventReport_descriptor_;
  metadata.reflection = DeviceAlarmEventReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
