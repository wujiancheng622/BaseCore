// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceAlarmEventReportBean.proto

#ifndef PROTOBUF_DeviceAlarmEventReportBean_2eproto__INCLUDED
#define PROTOBUF_DeviceAlarmEventReportBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto();
void protobuf_AssignDesc_DeviceAlarmEventReportBean_2eproto();
void protobuf_ShutdownFile_DeviceAlarmEventReportBean_2eproto();

class DeviceAlarmEventReport;

// ===================================================================

class DeviceAlarmEventReport : public ::google::protobuf::Message {
 public:
  DeviceAlarmEventReport();
  virtual ~DeviceAlarmEventReport();

  DeviceAlarmEventReport(const DeviceAlarmEventReport& from);

  inline DeviceAlarmEventReport& operator=(const DeviceAlarmEventReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAlarmEventReport& default_instance();

  void Swap(DeviceAlarmEventReport* other);

  // implements Message ----------------------------------------------

  DeviceAlarmEventReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceAlarmEventReport& from);
  void MergeFrom(const DeviceAlarmEventReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceid = 1 [default = "default"];
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional int32 channel = 2 [default = -1];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 alarmtype = 3 [default = -1];
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmtypeFieldNumber = 3;
  inline ::google::protobuf::int32 alarmtype() const;
  inline void set_alarmtype(::google::protobuf::int32 value);

  // optional int64 alarmTime = 4 [default = -1];
  inline bool has_alarmtime() const;
  inline void clear_alarmtime();
  static const int kAlarmTimeFieldNumber = 4;
  inline ::google::protobuf::int64 alarmtime() const;
  inline void set_alarmtime(::google::protobuf::int64 value);

  // optional int32 alarmStaus = 5 [default = -1];
  inline bool has_alarmstaus() const;
  inline void clear_alarmstaus();
  static const int kAlarmStausFieldNumber = 5;
  inline ::google::protobuf::int32 alarmstaus() const;
  inline void set_alarmstaus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceAlarmEventReport)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_alarmtime();
  inline void clear_has_alarmtime();
  inline void set_has_alarmstaus();
  inline void clear_has_alarmstaus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_deviceid_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 alarmtype_;
  ::google::protobuf::int64 alarmtime_;
  ::google::protobuf::int32 alarmstaus_;
  friend void  protobuf_AddDesc_DeviceAlarmEventReportBean_2eproto();
  friend void protobuf_AssignDesc_DeviceAlarmEventReportBean_2eproto();
  friend void protobuf_ShutdownFile_DeviceAlarmEventReportBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceAlarmEventReport* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceAlarmEventReport

// optional string deviceid = 1 [default = "default"];
inline bool DeviceAlarmEventReport::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAlarmEventReport::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAlarmEventReport::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAlarmEventReport::clear_deviceid() {
  if (deviceid_ != _default_deviceid_) {
    deviceid_->assign(*_default_deviceid_);
  }
  clear_has_deviceid();
}
inline const ::std::string& DeviceAlarmEventReport::deviceid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
  return *deviceid_;
}
inline void DeviceAlarmEventReport::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
}
inline void DeviceAlarmEventReport::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
}
inline void DeviceAlarmEventReport::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
}
inline ::std::string* DeviceAlarmEventReport::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string(*_default_deviceid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
  return deviceid_;
}
inline ::std::string* DeviceAlarmEventReport::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
    return temp;
  }
}
inline void DeviceAlarmEventReport::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceAlarmEventReport.deviceid)
}

// optional int32 channel = 2 [default = -1];
inline bool DeviceAlarmEventReport::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAlarmEventReport::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceAlarmEventReport::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAlarmEventReport::clear_channel() {
  channel_ = -1;
  clear_has_channel();
}
inline ::google::protobuf::int32 DeviceAlarmEventReport::channel() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceAlarmEventReport.channel)
  return channel_;
}
inline void DeviceAlarmEventReport::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceAlarmEventReport.channel)
}

// optional int32 alarmtype = 3 [default = -1];
inline bool DeviceAlarmEventReport::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAlarmEventReport::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceAlarmEventReport::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAlarmEventReport::clear_alarmtype() {
  alarmtype_ = -1;
  clear_has_alarmtype();
}
inline ::google::protobuf::int32 DeviceAlarmEventReport::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceAlarmEventReport.alarmtype)
  return alarmtype_;
}
inline void DeviceAlarmEventReport::set_alarmtype(::google::protobuf::int32 value) {
  set_has_alarmtype();
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceAlarmEventReport.alarmtype)
}

// optional int64 alarmTime = 4 [default = -1];
inline bool DeviceAlarmEventReport::has_alarmtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceAlarmEventReport::set_has_alarmtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceAlarmEventReport::clear_has_alarmtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceAlarmEventReport::clear_alarmtime() {
  alarmtime_ = GOOGLE_LONGLONG(-1);
  clear_has_alarmtime();
}
inline ::google::protobuf::int64 DeviceAlarmEventReport::alarmtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceAlarmEventReport.alarmTime)
  return alarmtime_;
}
inline void DeviceAlarmEventReport::set_alarmtime(::google::protobuf::int64 value) {
  set_has_alarmtime();
  alarmtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceAlarmEventReport.alarmTime)
}

// optional int32 alarmStaus = 5 [default = -1];
inline bool DeviceAlarmEventReport::has_alarmstaus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceAlarmEventReport::set_has_alarmstaus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceAlarmEventReport::clear_has_alarmstaus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceAlarmEventReport::clear_alarmstaus() {
  alarmstaus_ = -1;
  clear_has_alarmstaus();
}
inline ::google::protobuf::int32 DeviceAlarmEventReport::alarmstaus() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceAlarmEventReport.alarmStaus)
  return alarmstaus_;
}
inline void DeviceAlarmEventReport::set_alarmstaus(::google::protobuf::int32 value) {
  set_has_alarmstaus();
  alarmstaus_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceAlarmEventReport.alarmStaus)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceAlarmEventReportBean_2eproto__INCLUDED
