// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSBPXHeartBean.proto

#ifndef PROTOBUF_BMSBPXHeartBean_2eproto__INCLUDED
#define PROTOBUF_BMSBPXHeartBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BMSBPXHeartBean_2eproto();
void protobuf_AssignDesc_BMSBPXHeartBean_2eproto();
void protobuf_ShutdownFile_BMSBPXHeartBean_2eproto();

class BMSToBPXHeart;
class BPXToBMSHeart;

// ===================================================================

class BMSToBPXHeart : public ::google::protobuf::Message {
 public:
  BMSToBPXHeart();
  virtual ~BMSToBPXHeart();

  BMSToBPXHeart(const BMSToBPXHeart& from);

  inline BMSToBPXHeart& operator=(const BMSToBPXHeart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BMSToBPXHeart& default_instance();

  void Swap(BMSToBPXHeart* other);

  // implements Message ----------------------------------------------

  BMSToBPXHeart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BMSToBPXHeart& from);
  void MergeFrom(const BMSToBPXHeart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 6 [default = "default"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.BMSToBPXHeart)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_BMSBPXHeartBean_2eproto();
  friend void protobuf_AssignDesc_BMSBPXHeartBean_2eproto();
  friend void protobuf_ShutdownFile_BMSBPXHeartBean_2eproto();

  void InitAsDefaultInstance();
  static BMSToBPXHeart* default_instance_;
};
// -------------------------------------------------------------------

class BPXToBMSHeart : public ::google::protobuf::Message {
 public:
  BPXToBMSHeart();
  virtual ~BPXToBMSHeart();

  BPXToBMSHeart(const BPXToBMSHeart& from);

  inline BPXToBMSHeart& operator=(const BPXToBMSHeart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BPXToBMSHeart& default_instance();

  void Swap(BPXToBMSHeart* other);

  // implements Message ----------------------------------------------

  BPXToBMSHeart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BPXToBMSHeart& from);
  void MergeFrom(const BPXToBMSHeart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 6 [default = "default"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.BPXToBMSHeart)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_BMSBPXHeartBean_2eproto();
  friend void protobuf_AssignDesc_BMSBPXHeartBean_2eproto();
  friend void protobuf_ShutdownFile_BMSBPXHeartBean_2eproto();

  void InitAsDefaultInstance();
  static BPXToBMSHeart* default_instance_;
};
// ===================================================================


// ===================================================================

// BMSToBPXHeart

// optional string id = 6 [default = "default"];
inline bool BMSToBPXHeart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BMSToBPXHeart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BMSToBPXHeart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BMSToBPXHeart::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& BMSToBPXHeart::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BMSToBPXHeart.id)
  return *id_;
}
inline void BMSToBPXHeart::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BMSToBPXHeart.id)
}
inline void BMSToBPXHeart::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BMSToBPXHeart.id)
}
inline void BMSToBPXHeart::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BMSToBPXHeart.id)
}
inline ::std::string* BMSToBPXHeart::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BMSToBPXHeart.id)
  return id_;
}
inline ::std::string* BMSToBPXHeart::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void BMSToBPXHeart::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BMSToBPXHeart.id)
}

// -------------------------------------------------------------------

// BPXToBMSHeart

// optional string id = 6 [default = "default"];
inline bool BPXToBMSHeart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BPXToBMSHeart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BPXToBMSHeart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BPXToBMSHeart::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& BPXToBMSHeart::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.BPXToBMSHeart.id)
  return *id_;
}
inline void BPXToBMSHeart::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.BPXToBMSHeart.id)
}
inline void BPXToBMSHeart::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.BPXToBMSHeart.id)
}
inline void BPXToBMSHeart::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.BPXToBMSHeart.id)
}
inline ::std::string* BPXToBMSHeart::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.BPXToBMSHeart.id)
  return id_;
}
inline ::std::string* BPXToBMSHeart::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void BPXToBMSHeart::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.BPXToBMSHeart.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BMSBPXHeartBean_2eproto__INCLUDED
