// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoBean.proto

#ifndef PROTOBUF_VideoBean_2eproto__INCLUDED
#define PROTOBUF_VideoBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
#include "TimeTemplateBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VideoBean_2eproto();
void protobuf_AssignDesc_VideoBean_2eproto();
void protobuf_ShutdownFile_VideoBean_2eproto();

class VideoPlanDescri;
class VideoPlanInfo;
class VideoPlanMessage;

enum REQUEST_TYPE_OF_VIDEO_PLAN {
  VIDEO_PLAN_REQUEST_GET_BY_IDS = 1,
  VIDEO_PLAN_REQUEST_GET_DEV_INFO = 2,
  VIDEO_PLAN_REQUEST_GET_BY_BOX_CODE = 3,
  VIDEO_PLAN_REQUEST_GET_ALL = 4,
  VIDEO_PLAN_REQUEST_GET_BY_ORG = 5,
  VIDEO_PLAN_ADD_CHANNEL = 6,
  VIDEO_PLAN_REMOVE_CHANNEL = 7,
  VIDEO_PLAN_UPDATE_DESCRIBE = 8,
  VIDEO_PLAN_ADD = 9,
  VIDEO_PLAN_DELETE = 10
};
bool REQUEST_TYPE_OF_VIDEO_PLAN_IsValid(int value);
const REQUEST_TYPE_OF_VIDEO_PLAN REQUEST_TYPE_OF_VIDEO_PLAN_MIN = VIDEO_PLAN_REQUEST_GET_BY_IDS;
const REQUEST_TYPE_OF_VIDEO_PLAN REQUEST_TYPE_OF_VIDEO_PLAN_MAX = VIDEO_PLAN_DELETE;
const int REQUEST_TYPE_OF_VIDEO_PLAN_ARRAYSIZE = REQUEST_TYPE_OF_VIDEO_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_VIDEO_PLAN_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_VIDEO_PLAN_Name(REQUEST_TYPE_OF_VIDEO_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_VIDEO_PLAN_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_VIDEO_PLAN_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_VIDEO_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_VIDEO_PLAN>(
    REQUEST_TYPE_OF_VIDEO_PLAN_descriptor(), name, value);
}
enum RESULT_TYPE_OF_VIDEO_PLAN {
  VIDEO_PLAN_RESULT_IS_ERROR = -1,
  VIDEO_PLAN_RESULT_IS_OK = 0
};
bool RESULT_TYPE_OF_VIDEO_PLAN_IsValid(int value);
const RESULT_TYPE_OF_VIDEO_PLAN RESULT_TYPE_OF_VIDEO_PLAN_MIN = VIDEO_PLAN_RESULT_IS_ERROR;
const RESULT_TYPE_OF_VIDEO_PLAN RESULT_TYPE_OF_VIDEO_PLAN_MAX = VIDEO_PLAN_RESULT_IS_OK;
const int RESULT_TYPE_OF_VIDEO_PLAN_ARRAYSIZE = RESULT_TYPE_OF_VIDEO_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_VIDEO_PLAN_descriptor();
inline const ::std::string& RESULT_TYPE_OF_VIDEO_PLAN_Name(RESULT_TYPE_OF_VIDEO_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_VIDEO_PLAN_descriptor(), value);
}
inline bool RESULT_TYPE_OF_VIDEO_PLAN_Parse(
    const ::std::string& name, RESULT_TYPE_OF_VIDEO_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_VIDEO_PLAN>(
    RESULT_TYPE_OF_VIDEO_PLAN_descriptor(), name, value);
}
// ===================================================================

class VideoPlanDescri : public ::google::protobuf::Message {
 public:
  VideoPlanDescri();
  virtual ~VideoPlanDescri();

  VideoPlanDescri(const VideoPlanDescri& from);

  inline VideoPlanDescri& operator=(const VideoPlanDescri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPlanDescri& default_instance();

  void Swap(VideoPlanDescri* other);

  // implements Message ----------------------------------------------

  VideoPlanDescri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoPlanDescri& from);
  void MergeFrom(const VideoPlanDescri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 timetempId = 2 [default = 0];
  inline bool has_timetempid() const;
  inline void clear_timetempid();
  static const int kTimetempIdFieldNumber = 2;
  inline ::google::protobuf::int64 timetempid() const;
  inline void set_timetempid(::google::protobuf::int64 value);

  // optional string planname = 3 [default = ""];
  inline bool has_planname() const;
  inline void clear_planname();
  static const int kPlannameFieldNumber = 3;
  inline const ::std::string& planname() const;
  inline void set_planname(const ::std::string& value);
  inline void set_planname(const char* value);
  inline void set_planname(const char* value, size_t size);
  inline ::std::string* mutable_planname();
  inline ::std::string* release_planname();
  inline void set_allocated_planname(::std::string* planname);

  // optional int32 isIncludeSub = 4 [default = 0];
  inline bool has_isincludesub() const;
  inline void clear_isincludesub();
  static const int kIsIncludeSubFieldNumber = 4;
  inline ::google::protobuf::int32 isincludesub() const;
  inline void set_isincludesub(::google::protobuf::int32 value);

  // optional int32 assistantStream = 5 [default = 0];
  inline bool has_assistantstream() const;
  inline void clear_assistantstream();
  static const int kAssistantStreamFieldNumber = 5;
  inline ::google::protobuf::int32 assistantstream() const;
  inline void set_assistantstream(::google::protobuf::int32 value);

  // optional string memo = 6 [default = ""];
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 6;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional int32 state = 7 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 planType = 8 [default = 0];
  inline bool has_plantype() const;
  inline void clear_plantype();
  static const int kPlanTypeFieldNumber = 8;
  inline ::google::protobuf::int32 plantype() const;
  inline void set_plantype(::google::protobuf::int32 value);

  // optional int64 time = 9 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 channelCapacity = 10 [default = 0];
  inline bool has_channelcapacity() const;
  inline void clear_channelcapacity();
  static const int kChannelCapacityFieldNumber = 10;
  inline ::google::protobuf::int64 channelcapacity() const;
  inline void set_channelcapacity(::google::protobuf::int64 value);

  // optional int32 distributeState = 11 [default = 0];
  inline bool has_distributestate() const;
  inline void clear_distributestate();
  static const int kDistributeStateFieldNumber = 11;
  inline ::google::protobuf::int32 distributestate() const;
  inline void set_distributestate(::google::protobuf::int32 value);

  // optional string storagePath = 12 [default = ""];
  inline bool has_storagepath() const;
  inline void clear_storagepath();
  static const int kStoragePathFieldNumber = 12;
  inline const ::std::string& storagepath() const;
  inline void set_storagepath(const ::std::string& value);
  inline void set_storagepath(const char* value);
  inline void set_storagepath(const char* value, size_t size);
  inline ::std::string* mutable_storagepath();
  inline ::std::string* release_storagepath();
  inline void set_allocated_storagepath(::std::string* storagepath);

  // optional int64 storageSize = 13 [default = 0];
  inline bool has_storagesize() const;
  inline void clear_storagesize();
  static const int kStorageSizeFieldNumber = 13;
  inline ::google::protobuf::int64 storagesize() const;
  inline void set_storagesize(::google::protobuf::int64 value);

  // optional int32 planState = 14 [default = 0];
  inline bool has_planstate() const;
  inline void clear_planstate();
  static const int kPlanStateFieldNumber = 14;
  inline ::google::protobuf::int32 planstate() const;
  inline void set_planstate(::google::protobuf::int32 value);

  // optional int32 capacityConfigState = 15 [default = 0];
  inline bool has_capacityconfigstate() const;
  inline void clear_capacityconfigstate();
  static const int kCapacityConfigStateFieldNumber = 15;
  inline ::google::protobuf::int32 capacityconfigstate() const;
  inline void set_capacityconfigstate(::google::protobuf::int32 value);

  // optional int32 planConfigState = 16 [default = 0];
  inline bool has_planconfigstate() const;
  inline void clear_planconfigstate();
  static const int kPlanConfigStateFieldNumber = 16;
  inline ::google::protobuf::int32 planconfigstate() const;
  inline void set_planconfigstate(::google::protobuf::int32 value);

  // optional string uuid = 17 [default = ""];
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 17;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string devcode = 18 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevcodeFieldNumber = 18;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional int32 devState = 19 [default = 0];
  inline bool has_devstate() const;
  inline void clear_devstate();
  static const int kDevStateFieldNumber = 19;
  inline ::google::protobuf::int32 devstate() const;
  inline void set_devstate(::google::protobuf::int32 value);

  // optional int32 addType = 20 [default = 0];
  inline bool has_addtype() const;
  inline void clear_addtype();
  static const int kAddTypeFieldNumber = 20;
  inline ::google::protobuf::int32 addtype() const;
  inline void set_addtype(::google::protobuf::int32 value);

  // optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
  inline bool has_timetmp() const;
  inline void clear_timetmp();
  static const int kTimeTmpFieldNumber = 21;
  inline const ::com::arges::file::proto::TimeTemplateData& timetmp() const;
  inline ::com::arges::file::proto::TimeTemplateData* mutable_timetmp();
  inline ::com::arges::file::proto::TimeTemplateData* release_timetmp();
  inline void set_allocated_timetmp(::com::arges::file::proto::TimeTemplateData* timetmp);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VideoPlanDescri)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timetempid();
  inline void clear_has_timetempid();
  inline void set_has_planname();
  inline void clear_has_planname();
  inline void set_has_isincludesub();
  inline void clear_has_isincludesub();
  inline void set_has_assistantstream();
  inline void clear_has_assistantstream();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_plantype();
  inline void clear_has_plantype();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_channelcapacity();
  inline void clear_has_channelcapacity();
  inline void set_has_distributestate();
  inline void clear_has_distributestate();
  inline void set_has_storagepath();
  inline void clear_has_storagepath();
  inline void set_has_storagesize();
  inline void clear_has_storagesize();
  inline void set_has_planstate();
  inline void clear_has_planstate();
  inline void set_has_capacityconfigstate();
  inline void clear_has_capacityconfigstate();
  inline void set_has_planconfigstate();
  inline void clear_has_planconfigstate();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_devstate();
  inline void clear_has_devstate();
  inline void set_has_addtype();
  inline void clear_has_addtype();
  inline void set_has_timetmp();
  inline void clear_has_timetmp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 timetempid_;
  ::std::string* planname_;
  ::google::protobuf::int32 isincludesub_;
  ::google::protobuf::int32 assistantstream_;
  ::std::string* memo_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 plantype_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 channelcapacity_;
  ::std::string* storagepath_;
  ::google::protobuf::int32 distributestate_;
  ::google::protobuf::int32 planstate_;
  ::google::protobuf::int64 storagesize_;
  ::google::protobuf::int32 capacityconfigstate_;
  ::google::protobuf::int32 planconfigstate_;
  ::std::string* uuid_;
  ::std::string* devcode_;
  ::google::protobuf::int32 devstate_;
  ::google::protobuf::int32 addtype_;
  ::com::arges::file::proto::TimeTemplateData* timetmp_;
  friend void  protobuf_AddDesc_VideoBean_2eproto();
  friend void protobuf_AssignDesc_VideoBean_2eproto();
  friend void protobuf_ShutdownFile_VideoBean_2eproto();

  void InitAsDefaultInstance();
  static VideoPlanDescri* default_instance_;
};
// -------------------------------------------------------------------

class VideoPlanInfo : public ::google::protobuf::Message {
 public:
  VideoPlanInfo();
  virtual ~VideoPlanInfo();

  VideoPlanInfo(const VideoPlanInfo& from);

  inline VideoPlanInfo& operator=(const VideoPlanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPlanInfo& default_instance();

  void Swap(VideoPlanInfo* other);

  // implements Message ----------------------------------------------

  VideoPlanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoPlanInfo& from);
  void MergeFrom(const VideoPlanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .com.arges.file.proto.VideoPlanDescri desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::com::arges::file::proto::VideoPlanDescri& desc() const;
  inline ::com::arges::file::proto::VideoPlanDescri* mutable_desc();
  inline ::com::arges::file::proto::VideoPlanDescri* release_desc();
  inline void set_allocated_desc(::com::arges::file::proto::VideoPlanDescri* desc);

  // repeated string channelFlag = 3;
  inline int channelflag_size() const;
  inline void clear_channelflag();
  static const int kChannelFlagFieldNumber = 3;
  inline const ::std::string& channelflag(int index) const;
  inline ::std::string* mutable_channelflag(int index);
  inline void set_channelflag(int index, const ::std::string& value);
  inline void set_channelflag(int index, const char* value);
  inline void set_channelflag(int index, const char* value, size_t size);
  inline ::std::string* add_channelflag();
  inline void add_channelflag(const ::std::string& value);
  inline void add_channelflag(const char* value);
  inline void add_channelflag(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channelflag() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channelflag();

  // repeated .com.arges.file.proto.DeviceInfo encoders = 4;
  inline int encoders_size() const;
  inline void clear_encoders();
  static const int kEncodersFieldNumber = 4;
  inline const ::com::arges::file::proto::DeviceInfo& encoders(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_encoders(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_encoders();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      encoders() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_encoders();

  // repeated .com.arges.file.proto.DeviceInfo boxs = 5;
  inline int boxs_size() const;
  inline void clear_boxs();
  static const int kBoxsFieldNumber = 5;
  inline const ::com::arges::file::proto::DeviceInfo& boxs(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_boxs(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_boxs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      boxs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_boxs();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VideoPlanInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::com::arges::file::proto::VideoPlanDescri* desc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channelflag_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > encoders_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > boxs_;
  friend void  protobuf_AddDesc_VideoBean_2eproto();
  friend void protobuf_AssignDesc_VideoBean_2eproto();
  friend void protobuf_ShutdownFile_VideoBean_2eproto();

  void InitAsDefaultInstance();
  static VideoPlanInfo* default_instance_;
};
// -------------------------------------------------------------------

class VideoPlanMessage : public ::google::protobuf::Message {
 public:
  VideoPlanMessage();
  virtual ~VideoPlanMessage();

  VideoPlanMessage(const VideoPlanMessage& from);

  inline VideoPlanMessage& operator=(const VideoPlanMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPlanMessage& default_instance();

  void Swap(VideoPlanMessage* other);

  // implements Message ----------------------------------------------

  VideoPlanMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoPlanMessage& from);
  void MergeFrom(const VideoPlanMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const char* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 4;
  inline const ::com::arges::file::proto::VideoPlanInfo& datas(int index) const;
  inline ::com::arges::file::proto::VideoPlanInfo* mutable_datas(int index);
  inline ::com::arges::file::proto::VideoPlanInfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoPlanInfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoPlanInfo >*
      mutable_datas();

  // repeated string ids = 5;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 5;
  inline const ::std::string& ids(int index) const;
  inline ::std::string* mutable_ids(int index);
  inline void set_ids(int index, const ::std::string& value);
  inline void set_ids(int index, const char* value);
  inline void set_ids(int index, const char* value, size_t size);
  inline ::std::string* add_ids();
  inline void add_ids(const ::std::string& value);
  inline void add_ids(const char* value);
  inline void add_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // optional string org = 6 [default = ""];
  inline bool has_org() const;
  inline void clear_org();
  static const int kOrgFieldNumber = 6;
  inline const ::std::string& org() const;
  inline void set_org(const ::std::string& value);
  inline void set_org(const char* value);
  inline void set_org(const char* value, size_t size);
  inline ::std::string* mutable_org();
  inline ::std::string* release_org();
  inline void set_allocated_org(::std::string* org);

  // optional string devcode = 7;
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevcodeFieldNumber = 7;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VideoPlanMessage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_org();
  inline void clear_has_org();
  inline void set_has_devcode();
  inline void clear_has_devcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoPlanInfo > datas_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  ::std::string* org_;
  ::std::string* devcode_;
  friend void  protobuf_AddDesc_VideoBean_2eproto();
  friend void protobuf_AssignDesc_VideoBean_2eproto();
  friend void protobuf_ShutdownFile_VideoBean_2eproto();

  void InitAsDefaultInstance();
  static VideoPlanMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// VideoPlanDescri

// optional int64 id = 1 [default = 0];
inline bool VideoPlanDescri::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoPlanDescri::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoPlanDescri::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoPlanDescri::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VideoPlanDescri::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.id)
  return id_;
}
inline void VideoPlanDescri::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.id)
}

// optional int64 timetempId = 2 [default = 0];
inline bool VideoPlanDescri::has_timetempid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoPlanDescri::set_has_timetempid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoPlanDescri::clear_has_timetempid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoPlanDescri::clear_timetempid() {
  timetempid_ = GOOGLE_LONGLONG(0);
  clear_has_timetempid();
}
inline ::google::protobuf::int64 VideoPlanDescri::timetempid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.timetempId)
  return timetempid_;
}
inline void VideoPlanDescri::set_timetempid(::google::protobuf::int64 value) {
  set_has_timetempid();
  timetempid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.timetempId)
}

// optional string planname = 3 [default = ""];
inline bool VideoPlanDescri::has_planname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoPlanDescri::set_has_planname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoPlanDescri::clear_has_planname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoPlanDescri::clear_planname() {
  if (planname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    planname_->clear();
  }
  clear_has_planname();
}
inline const ::std::string& VideoPlanDescri::planname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.planname)
  return *planname_;
}
inline void VideoPlanDescri::set_planname(const ::std::string& value) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    planname_ = new ::std::string;
  }
  planname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.planname)
}
inline void VideoPlanDescri::set_planname(const char* value) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    planname_ = new ::std::string;
  }
  planname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanDescri.planname)
}
inline void VideoPlanDescri::set_planname(const char* value, size_t size) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    planname_ = new ::std::string;
  }
  planname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanDescri.planname)
}
inline ::std::string* VideoPlanDescri::mutable_planname() {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    planname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.planname)
  return planname_;
}
inline ::std::string* VideoPlanDescri::release_planname() {
  clear_has_planname();
  if (planname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = planname_;
    planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanDescri::set_allocated_planname(::std::string* planname) {
  if (planname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete planname_;
  }
  if (planname) {
    set_has_planname();
    planname_ = planname;
  } else {
    clear_has_planname();
    planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.planname)
}

// optional int32 isIncludeSub = 4 [default = 0];
inline bool VideoPlanDescri::has_isincludesub() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoPlanDescri::set_has_isincludesub() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoPlanDescri::clear_has_isincludesub() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoPlanDescri::clear_isincludesub() {
  isincludesub_ = 0;
  clear_has_isincludesub();
}
inline ::google::protobuf::int32 VideoPlanDescri::isincludesub() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.isIncludeSub)
  return isincludesub_;
}
inline void VideoPlanDescri::set_isincludesub(::google::protobuf::int32 value) {
  set_has_isincludesub();
  isincludesub_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.isIncludeSub)
}

// optional int32 assistantStream = 5 [default = 0];
inline bool VideoPlanDescri::has_assistantstream() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoPlanDescri::set_has_assistantstream() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoPlanDescri::clear_has_assistantstream() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoPlanDescri::clear_assistantstream() {
  assistantstream_ = 0;
  clear_has_assistantstream();
}
inline ::google::protobuf::int32 VideoPlanDescri::assistantstream() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.assistantStream)
  return assistantstream_;
}
inline void VideoPlanDescri::set_assistantstream(::google::protobuf::int32 value) {
  set_has_assistantstream();
  assistantstream_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.assistantStream)
}

// optional string memo = 6 [default = ""];
inline bool VideoPlanDescri::has_memo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoPlanDescri::set_has_memo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoPlanDescri::clear_has_memo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoPlanDescri::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& VideoPlanDescri::memo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.memo)
  return *memo_;
}
inline void VideoPlanDescri::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.memo)
}
inline void VideoPlanDescri::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanDescri.memo)
}
inline void VideoPlanDescri::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanDescri.memo)
}
inline ::std::string* VideoPlanDescri::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.memo)
  return memo_;
}
inline ::std::string* VideoPlanDescri::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanDescri::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.memo)
}

// optional int32 state = 7 [default = 0];
inline bool VideoPlanDescri::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoPlanDescri::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoPlanDescri::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoPlanDescri::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 VideoPlanDescri::state() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.state)
  return state_;
}
inline void VideoPlanDescri::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.state)
}

// optional int32 planType = 8 [default = 0];
inline bool VideoPlanDescri::has_plantype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoPlanDescri::set_has_plantype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoPlanDescri::clear_has_plantype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoPlanDescri::clear_plantype() {
  plantype_ = 0;
  clear_has_plantype();
}
inline ::google::protobuf::int32 VideoPlanDescri::plantype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.planType)
  return plantype_;
}
inline void VideoPlanDescri::set_plantype(::google::protobuf::int32 value) {
  set_has_plantype();
  plantype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.planType)
}

// optional int64 time = 9 [default = 0];
inline bool VideoPlanDescri::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoPlanDescri::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoPlanDescri::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoPlanDescri::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 VideoPlanDescri::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.time)
  return time_;
}
inline void VideoPlanDescri::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.time)
}

// optional int64 channelCapacity = 10 [default = 0];
inline bool VideoPlanDescri::has_channelcapacity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoPlanDescri::set_has_channelcapacity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoPlanDescri::clear_has_channelcapacity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoPlanDescri::clear_channelcapacity() {
  channelcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_channelcapacity();
}
inline ::google::protobuf::int64 VideoPlanDescri::channelcapacity() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.channelCapacity)
  return channelcapacity_;
}
inline void VideoPlanDescri::set_channelcapacity(::google::protobuf::int64 value) {
  set_has_channelcapacity();
  channelcapacity_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.channelCapacity)
}

// optional int32 distributeState = 11 [default = 0];
inline bool VideoPlanDescri::has_distributestate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoPlanDescri::set_has_distributestate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoPlanDescri::clear_has_distributestate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoPlanDescri::clear_distributestate() {
  distributestate_ = 0;
  clear_has_distributestate();
}
inline ::google::protobuf::int32 VideoPlanDescri::distributestate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.distributeState)
  return distributestate_;
}
inline void VideoPlanDescri::set_distributestate(::google::protobuf::int32 value) {
  set_has_distributestate();
  distributestate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.distributeState)
}

// optional string storagePath = 12 [default = ""];
inline bool VideoPlanDescri::has_storagepath() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VideoPlanDescri::set_has_storagepath() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VideoPlanDescri::clear_has_storagepath() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VideoPlanDescri::clear_storagepath() {
  if (storagepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storagepath_->clear();
  }
  clear_has_storagepath();
}
inline const ::std::string& VideoPlanDescri::storagepath() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.storagePath)
  return *storagepath_;
}
inline void VideoPlanDescri::set_storagepath(const ::std::string& value) {
  set_has_storagepath();
  if (storagepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storagepath_ = new ::std::string;
  }
  storagepath_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.storagePath)
}
inline void VideoPlanDescri::set_storagepath(const char* value) {
  set_has_storagepath();
  if (storagepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storagepath_ = new ::std::string;
  }
  storagepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanDescri.storagePath)
}
inline void VideoPlanDescri::set_storagepath(const char* value, size_t size) {
  set_has_storagepath();
  if (storagepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storagepath_ = new ::std::string;
  }
  storagepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanDescri.storagePath)
}
inline ::std::string* VideoPlanDescri::mutable_storagepath() {
  set_has_storagepath();
  if (storagepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storagepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.storagePath)
  return storagepath_;
}
inline ::std::string* VideoPlanDescri::release_storagepath() {
  clear_has_storagepath();
  if (storagepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = storagepath_;
    storagepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanDescri::set_allocated_storagepath(::std::string* storagepath) {
  if (storagepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storagepath_;
  }
  if (storagepath) {
    set_has_storagepath();
    storagepath_ = storagepath;
  } else {
    clear_has_storagepath();
    storagepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.storagePath)
}

// optional int64 storageSize = 13 [default = 0];
inline bool VideoPlanDescri::has_storagesize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VideoPlanDescri::set_has_storagesize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VideoPlanDescri::clear_has_storagesize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VideoPlanDescri::clear_storagesize() {
  storagesize_ = GOOGLE_LONGLONG(0);
  clear_has_storagesize();
}
inline ::google::protobuf::int64 VideoPlanDescri::storagesize() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.storageSize)
  return storagesize_;
}
inline void VideoPlanDescri::set_storagesize(::google::protobuf::int64 value) {
  set_has_storagesize();
  storagesize_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.storageSize)
}

// optional int32 planState = 14 [default = 0];
inline bool VideoPlanDescri::has_planstate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VideoPlanDescri::set_has_planstate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VideoPlanDescri::clear_has_planstate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VideoPlanDescri::clear_planstate() {
  planstate_ = 0;
  clear_has_planstate();
}
inline ::google::protobuf::int32 VideoPlanDescri::planstate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.planState)
  return planstate_;
}
inline void VideoPlanDescri::set_planstate(::google::protobuf::int32 value) {
  set_has_planstate();
  planstate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.planState)
}

// optional int32 capacityConfigState = 15 [default = 0];
inline bool VideoPlanDescri::has_capacityconfigstate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VideoPlanDescri::set_has_capacityconfigstate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VideoPlanDescri::clear_has_capacityconfigstate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VideoPlanDescri::clear_capacityconfigstate() {
  capacityconfigstate_ = 0;
  clear_has_capacityconfigstate();
}
inline ::google::protobuf::int32 VideoPlanDescri::capacityconfigstate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.capacityConfigState)
  return capacityconfigstate_;
}
inline void VideoPlanDescri::set_capacityconfigstate(::google::protobuf::int32 value) {
  set_has_capacityconfigstate();
  capacityconfigstate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.capacityConfigState)
}

// optional int32 planConfigState = 16 [default = 0];
inline bool VideoPlanDescri::has_planconfigstate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VideoPlanDescri::set_has_planconfigstate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VideoPlanDescri::clear_has_planconfigstate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VideoPlanDescri::clear_planconfigstate() {
  planconfigstate_ = 0;
  clear_has_planconfigstate();
}
inline ::google::protobuf::int32 VideoPlanDescri::planconfigstate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.planConfigState)
  return planconfigstate_;
}
inline void VideoPlanDescri::set_planconfigstate(::google::protobuf::int32 value) {
  set_has_planconfigstate();
  planconfigstate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.planConfigState)
}

// optional string uuid = 17 [default = ""];
inline bool VideoPlanDescri::has_uuid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VideoPlanDescri::set_has_uuid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VideoPlanDescri::clear_has_uuid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VideoPlanDescri::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& VideoPlanDescri::uuid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.uuid)
  return *uuid_;
}
inline void VideoPlanDescri::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.uuid)
}
inline void VideoPlanDescri::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanDescri.uuid)
}
inline void VideoPlanDescri::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanDescri.uuid)
}
inline ::std::string* VideoPlanDescri::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.uuid)
  return uuid_;
}
inline ::std::string* VideoPlanDescri::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanDescri::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.uuid)
}

// optional string devcode = 18 [default = ""];
inline bool VideoPlanDescri::has_devcode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VideoPlanDescri::set_has_devcode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VideoPlanDescri::clear_has_devcode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VideoPlanDescri::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& VideoPlanDescri::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.devcode)
  return *devcode_;
}
inline void VideoPlanDescri::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.devcode)
}
inline void VideoPlanDescri::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanDescri.devcode)
}
inline void VideoPlanDescri::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanDescri.devcode)
}
inline ::std::string* VideoPlanDescri::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.devcode)
  return devcode_;
}
inline ::std::string* VideoPlanDescri::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanDescri::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.devcode)
}

// optional int32 devState = 19 [default = 0];
inline bool VideoPlanDescri::has_devstate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VideoPlanDescri::set_has_devstate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VideoPlanDescri::clear_has_devstate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VideoPlanDescri::clear_devstate() {
  devstate_ = 0;
  clear_has_devstate();
}
inline ::google::protobuf::int32 VideoPlanDescri::devstate() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.devState)
  return devstate_;
}
inline void VideoPlanDescri::set_devstate(::google::protobuf::int32 value) {
  set_has_devstate();
  devstate_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.devState)
}

// optional int32 addType = 20 [default = 0];
inline bool VideoPlanDescri::has_addtype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VideoPlanDescri::set_has_addtype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VideoPlanDescri::clear_has_addtype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VideoPlanDescri::clear_addtype() {
  addtype_ = 0;
  clear_has_addtype();
}
inline ::google::protobuf::int32 VideoPlanDescri::addtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.addType)
  return addtype_;
}
inline void VideoPlanDescri::set_addtype(::google::protobuf::int32 value) {
  set_has_addtype();
  addtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanDescri.addType)
}

// optional .com.arges.file.proto.TimeTemplateData timeTmp = 21;
inline bool VideoPlanDescri::has_timetmp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VideoPlanDescri::set_has_timetmp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VideoPlanDescri::clear_has_timetmp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VideoPlanDescri::clear_timetmp() {
  if (timetmp_ != NULL) timetmp_->::com::arges::file::proto::TimeTemplateData::Clear();
  clear_has_timetmp();
}
inline const ::com::arges::file::proto::TimeTemplateData& VideoPlanDescri::timetmp() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanDescri.timeTmp)
  return timetmp_ != NULL ? *timetmp_ : *default_instance_->timetmp_;
}
inline ::com::arges::file::proto::TimeTemplateData* VideoPlanDescri::mutable_timetmp() {
  set_has_timetmp();
  if (timetmp_ == NULL) timetmp_ = new ::com::arges::file::proto::TimeTemplateData;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanDescri.timeTmp)
  return timetmp_;
}
inline ::com::arges::file::proto::TimeTemplateData* VideoPlanDescri::release_timetmp() {
  clear_has_timetmp();
  ::com::arges::file::proto::TimeTemplateData* temp = timetmp_;
  timetmp_ = NULL;
  return temp;
}
inline void VideoPlanDescri::set_allocated_timetmp(::com::arges::file::proto::TimeTemplateData* timetmp) {
  delete timetmp_;
  timetmp_ = timetmp;
  if (timetmp) {
    set_has_timetmp();
  } else {
    clear_has_timetmp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanDescri.timeTmp)
}

// -------------------------------------------------------------------

// VideoPlanInfo

// optional int64 id = 1 [default = 0];
inline bool VideoPlanInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoPlanInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoPlanInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoPlanInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VideoPlanInfo::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanInfo.id)
  return id_;
}
inline void VideoPlanInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanInfo.id)
}

// optional .com.arges.file.proto.VideoPlanDescri desc = 2;
inline bool VideoPlanInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoPlanInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoPlanInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoPlanInfo::clear_desc() {
  if (desc_ != NULL) desc_->::com::arges::file::proto::VideoPlanDescri::Clear();
  clear_has_desc();
}
inline const ::com::arges::file::proto::VideoPlanDescri& VideoPlanInfo::desc() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanInfo.desc)
  return desc_ != NULL ? *desc_ : *default_instance_->desc_;
}
inline ::com::arges::file::proto::VideoPlanDescri* VideoPlanInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == NULL) desc_ = new ::com::arges::file::proto::VideoPlanDescri;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanInfo.desc)
  return desc_;
}
inline ::com::arges::file::proto::VideoPlanDescri* VideoPlanInfo::release_desc() {
  clear_has_desc();
  ::com::arges::file::proto::VideoPlanDescri* temp = desc_;
  desc_ = NULL;
  return temp;
}
inline void VideoPlanInfo::set_allocated_desc(::com::arges::file::proto::VideoPlanDescri* desc) {
  delete desc_;
  desc_ = desc;
  if (desc) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanInfo.desc)
}

// repeated string channelFlag = 3;
inline int VideoPlanInfo::channelflag_size() const {
  return channelflag_.size();
}
inline void VideoPlanInfo::clear_channelflag() {
  channelflag_.Clear();
}
inline const ::std::string& VideoPlanInfo::channelflag(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanInfo.channelFlag)
  return channelflag_.Get(index);
}
inline ::std::string* VideoPlanInfo::mutable_channelflag(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanInfo.channelFlag)
  return channelflag_.Mutable(index);
}
inline void VideoPlanInfo::set_channelflag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanInfo.channelFlag)
  channelflag_.Mutable(index)->assign(value);
}
inline void VideoPlanInfo::set_channelflag(int index, const char* value) {
  channelflag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanInfo.channelFlag)
}
inline void VideoPlanInfo::set_channelflag(int index, const char* value, size_t size) {
  channelflag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanInfo.channelFlag)
}
inline ::std::string* VideoPlanInfo::add_channelflag() {
  return channelflag_.Add();
}
inline void VideoPlanInfo::add_channelflag(const ::std::string& value) {
  channelflag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.VideoPlanInfo.channelFlag)
}
inline void VideoPlanInfo::add_channelflag(const char* value) {
  channelflag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.VideoPlanInfo.channelFlag)
}
inline void VideoPlanInfo::add_channelflag(const char* value, size_t size) {
  channelflag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.VideoPlanInfo.channelFlag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoPlanInfo::channelflag() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.VideoPlanInfo.channelFlag)
  return channelflag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoPlanInfo::mutable_channelflag() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.VideoPlanInfo.channelFlag)
  return &channelflag_;
}

// repeated .com.arges.file.proto.DeviceInfo encoders = 4;
inline int VideoPlanInfo::encoders_size() const {
  return encoders_.size();
}
inline void VideoPlanInfo::clear_encoders() {
  encoders_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& VideoPlanInfo::encoders(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanInfo.encoders)
  return encoders_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* VideoPlanInfo::mutable_encoders(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanInfo.encoders)
  return encoders_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* VideoPlanInfo::add_encoders() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.VideoPlanInfo.encoders)
  return encoders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
VideoPlanInfo::encoders() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.VideoPlanInfo.encoders)
  return encoders_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
VideoPlanInfo::mutable_encoders() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.VideoPlanInfo.encoders)
  return &encoders_;
}

// repeated .com.arges.file.proto.DeviceInfo boxs = 5;
inline int VideoPlanInfo::boxs_size() const {
  return boxs_.size();
}
inline void VideoPlanInfo::clear_boxs() {
  boxs_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& VideoPlanInfo::boxs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanInfo.boxs)
  return boxs_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* VideoPlanInfo::mutable_boxs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanInfo.boxs)
  return boxs_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* VideoPlanInfo::add_boxs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.VideoPlanInfo.boxs)
  return boxs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
VideoPlanInfo::boxs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.VideoPlanInfo.boxs)
  return boxs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
VideoPlanInfo::mutable_boxs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.VideoPlanInfo.boxs)
  return &boxs_;
}

// -------------------------------------------------------------------

// VideoPlanMessage

// optional int32 requestType = 1 [default = -1];
inline bool VideoPlanMessage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoPlanMessage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoPlanMessage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoPlanMessage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 VideoPlanMessage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.requestType)
  return requesttype_;
}
inline void VideoPlanMessage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool VideoPlanMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoPlanMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoPlanMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoPlanMessage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 VideoPlanMessage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.result)
  return result_;
}
inline void VideoPlanMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.result)
}

// optional string resultDescribe = 3 [default = ""];
inline bool VideoPlanMessage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoPlanMessage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoPlanMessage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoPlanMessage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& VideoPlanMessage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.resultDescribe)
  return *resultdescribe_;
}
inline void VideoPlanMessage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.resultDescribe)
}
inline void VideoPlanMessage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanMessage.resultDescribe)
}
inline void VideoPlanMessage::set_resultdescribe(const char* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanMessage.resultDescribe)
}
inline ::std::string* VideoPlanMessage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanMessage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* VideoPlanMessage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanMessage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanMessage.resultDescribe)
}

// repeated .com.arges.file.proto.VideoPlanInfo datas = 4;
inline int VideoPlanMessage::datas_size() const {
  return datas_.size();
}
inline void VideoPlanMessage::clear_datas() {
  datas_.Clear();
}
inline const ::com::arges::file::proto::VideoPlanInfo& VideoPlanMessage::datas(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.datas)
  return datas_.Get(index);
}
inline ::com::arges::file::proto::VideoPlanInfo* VideoPlanMessage::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanMessage.datas)
  return datas_.Mutable(index);
}
inline ::com::arges::file::proto::VideoPlanInfo* VideoPlanMessage::add_datas() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.VideoPlanMessage.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoPlanInfo >&
VideoPlanMessage::datas() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.VideoPlanMessage.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoPlanInfo >*
VideoPlanMessage::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.VideoPlanMessage.datas)
  return &datas_;
}

// repeated string ids = 5;
inline int VideoPlanMessage::ids_size() const {
  return ids_.size();
}
inline void VideoPlanMessage::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& VideoPlanMessage::ids(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.ids)
  return ids_.Get(index);
}
inline ::std::string* VideoPlanMessage::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanMessage.ids)
  return ids_.Mutable(index);
}
inline void VideoPlanMessage::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.ids)
  ids_.Mutable(index)->assign(value);
}
inline void VideoPlanMessage::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanMessage.ids)
}
inline void VideoPlanMessage::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanMessage.ids)
}
inline ::std::string* VideoPlanMessage::add_ids() {
  return ids_.Add();
}
inline void VideoPlanMessage::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.VideoPlanMessage.ids)
}
inline void VideoPlanMessage::add_ids(const char* value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.VideoPlanMessage.ids)
}
inline void VideoPlanMessage::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.VideoPlanMessage.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoPlanMessage::ids() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.VideoPlanMessage.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoPlanMessage::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.VideoPlanMessage.ids)
  return &ids_;
}

// optional string org = 6 [default = ""];
inline bool VideoPlanMessage::has_org() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoPlanMessage::set_has_org() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoPlanMessage::clear_has_org() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoPlanMessage::clear_org() {
  if (org_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    org_->clear();
  }
  clear_has_org();
}
inline const ::std::string& VideoPlanMessage::org() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.org)
  return *org_;
}
inline void VideoPlanMessage::set_org(const ::std::string& value) {
  set_has_org();
  if (org_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    org_ = new ::std::string;
  }
  org_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.org)
}
inline void VideoPlanMessage::set_org(const char* value) {
  set_has_org();
  if (org_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    org_ = new ::std::string;
  }
  org_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanMessage.org)
}
inline void VideoPlanMessage::set_org(const char* value, size_t size) {
  set_has_org();
  if (org_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    org_ = new ::std::string;
  }
  org_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanMessage.org)
}
inline ::std::string* VideoPlanMessage::mutable_org() {
  set_has_org();
  if (org_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    org_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanMessage.org)
  return org_;
}
inline ::std::string* VideoPlanMessage::release_org() {
  clear_has_org();
  if (org_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = org_;
    org_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanMessage::set_allocated_org(::std::string* org) {
  if (org_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete org_;
  }
  if (org) {
    set_has_org();
    org_ = org;
  } else {
    clear_has_org();
    org_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanMessage.org)
}

// optional string devcode = 7;
inline bool VideoPlanMessage::has_devcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoPlanMessage::set_has_devcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoPlanMessage::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoPlanMessage::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& VideoPlanMessage::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoPlanMessage.devcode)
  return *devcode_;
}
inline void VideoPlanMessage::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoPlanMessage.devcode)
}
inline void VideoPlanMessage::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoPlanMessage.devcode)
}
inline void VideoPlanMessage::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoPlanMessage.devcode)
}
inline ::std::string* VideoPlanMessage::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoPlanMessage.devcode)
  return devcode_;
}
inline ::std::string* VideoPlanMessage::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoPlanMessage::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoPlanMessage.devcode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_VIDEO_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_VIDEO_PLAN>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_VIDEO_PLAN_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_VIDEO_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_VIDEO_PLAN>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_VIDEO_PLAN_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VideoBean_2eproto__INCLUDED
