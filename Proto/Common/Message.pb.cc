// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* HeartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MODULETYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DATATYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  HeartReq_descriptor_ = file->message_type(0);
  static const int HeartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReq, userdata_),
  };
  HeartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartReq_descriptor_,
      HeartReq::default_instance_,
      HeartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartReq));
  HeartRsp_descriptor_ = file->message_type(1);
  static const int HeartRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRsp, userdata_),
  };
  HeartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartRsp_descriptor_,
      HeartRsp::default_instance_,
      HeartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartRsp));
  MODULETYPE_descriptor_ = file->enum_type(0);
  DATATYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartReq_descriptor_, &HeartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartRsp_descriptor_, &HeartRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete HeartReq::default_instance_;
  delete HeartReq_reflection_;
  delete HeartReq::_default_userdata_;
  delete HeartRsp::default_instance_;
  delete HeartRsp_reflection_;
  delete HeartRsp::_default_userdata_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\024com.arges.file.proto\"%\n"
    "\010HeartReq\022\031\n\010userdata\030\001 \001(\t:\007default\"%\n\010"
    "HeartRsp\022\031\n\010userdata\030\001 \001(\t:\007default*\'\n\nM"
    "ODULETYPE\022\010\n\004GATE\020\000\022\017\n\013GATE_CLIENT\020\001*{\n\010"
    "DATATYPE\022\r\n\tREQ_HEART\020\000\022\r\n\tRSP_HEART\020\001\022\024"
    "\n\020VERIFYINFOREPORT\020\002\022\022\n\016BLACKWHITEDATA\020\003"
    "\022\023\n\017QUERYBLACKWHITE\020\004\022\022\n\016RSSI_THRESHOLD\020"
    "\005", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  HeartReq::_default_userdata_ =
      new ::std::string("default", 7);
  HeartReq::default_instance_ = new HeartReq();
  HeartRsp::_default_userdata_ =
      new ::std::string("default", 7);
  HeartRsp::default_instance_ = new HeartRsp();
  HeartReq::default_instance_->InitAsDefaultInstance();
  HeartRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;
const ::google::protobuf::EnumDescriptor* MODULETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MODULETYPE_descriptor_;
}
bool MODULETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DATATYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATATYPE_descriptor_;
}
bool DATATYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* HeartReq::_default_userdata_ = NULL;
#ifndef _MSC_VER
const int HeartReq::kUserdataFieldNumber;
#endif  // !_MSC_VER

HeartReq::HeartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HeartReq)
}

void HeartReq::InitAsDefaultInstance() {
}

HeartReq::HeartReq(const HeartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HeartReq)
}

void HeartReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userdata_ = const_cast< ::std::string*>(_default_userdata_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartReq::~HeartReq() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HeartReq)
  SharedDtor();
}

void HeartReq::SharedDtor() {
  if (userdata_ != _default_userdata_) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void HeartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartReq_descriptor_;
}

const HeartReq& HeartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HeartReq* HeartReq::default_instance_ = NULL;

HeartReq* HeartReq::New() const {
  return new HeartReq;
}

void HeartReq::Clear() {
  if (has_userdata()) {
    if (userdata_ != _default_userdata_) {
      userdata_->assign(*_default_userdata_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HeartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userdata = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HeartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HeartReq)
  return false;
#undef DO_
}

void HeartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HeartReq)
  // optional string userdata = 1 [default = "default"];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HeartReq)
}

::google::protobuf::uint8* HeartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HeartReq)
  // optional string userdata = 1 [default = "default"];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HeartReq)
  return target;
}

int HeartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userdata = 1 [default = "default"];
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartReq::MergeFrom(const HeartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartReq::CopyFrom(const HeartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartReq::IsInitialized() const {

  return true;
}

void HeartReq::Swap(HeartReq* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartReq_descriptor_;
  metadata.reflection = HeartReq_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HeartRsp::_default_userdata_ = NULL;
#ifndef _MSC_VER
const int HeartRsp::kUserdataFieldNumber;
#endif  // !_MSC_VER

HeartRsp::HeartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HeartRsp)
}

void HeartRsp::InitAsDefaultInstance() {
}

HeartRsp::HeartRsp(const HeartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HeartRsp)
}

void HeartRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userdata_ = const_cast< ::std::string*>(_default_userdata_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartRsp::~HeartRsp() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HeartRsp)
  SharedDtor();
}

void HeartRsp::SharedDtor() {
  if (userdata_ != _default_userdata_) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void HeartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartRsp_descriptor_;
}

const HeartRsp& HeartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HeartRsp* HeartRsp::default_instance_ = NULL;

HeartRsp* HeartRsp::New() const {
  return new HeartRsp;
}

void HeartRsp::Clear() {
  if (has_userdata()) {
    if (userdata_ != _default_userdata_) {
      userdata_->assign(*_default_userdata_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HeartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userdata = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HeartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HeartRsp)
  return false;
#undef DO_
}

void HeartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HeartRsp)
  // optional string userdata = 1 [default = "default"];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HeartRsp)
}

::google::protobuf::uint8* HeartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HeartRsp)
  // optional string userdata = 1 [default = "default"];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HeartRsp)
  return target;
}

int HeartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userdata = 1 [default = "default"];
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartRsp::MergeFrom(const HeartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRsp::CopyFrom(const HeartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRsp::IsInitialized() const {

  return true;
}

void HeartRsp::Swap(HeartRsp* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartRsp_descriptor_;
  metadata.reflection = HeartRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
