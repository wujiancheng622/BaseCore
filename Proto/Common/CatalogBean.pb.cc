// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CatalogBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CatalogBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RspDeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDeviceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChannelList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChannelList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspChannelList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspChannelList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPlayStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPlayStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspPlayStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspPlayStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQueryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQueryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspQueryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspQueryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPlayRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPlayRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspPlayRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspPlayRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDownloadRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDownloadRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDownloadRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDownloadRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeReportRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeReportRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_CATALOG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STREAM_PROTOCOL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* URL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RECORD_SOURCE_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CatalogBean_2eproto() {
  protobuf_AddDesc_CatalogBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CatalogBean.proto");
  GOOGLE_CHECK(file != NULL);
  RspDeviceList_descriptor_ = file->message_type(0);
  static const int RspDeviceList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceList, devinfo_),
  };
  RspDeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDeviceList_descriptor_,
      RspDeviceList::default_instance_,
      RspDeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDeviceList));
  ReqChannelList_descriptor_ = file->message_type(1);
  static const int ReqChannelList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChannelList, devid_),
  };
  ReqChannelList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChannelList_descriptor_,
      ReqChannelList::default_instance_,
      ReqChannelList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChannelList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChannelList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChannelList));
  RspChannelList_descriptor_ = file->message_type(2);
  static const int RspChannelList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspChannelList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspChannelList, infos_),
  };
  RspChannelList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspChannelList_descriptor_,
      RspChannelList::default_instance_,
      RspChannelList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspChannelList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspChannelList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspChannelList));
  ReqPlayStream_descriptor_ = file->message_type(3);
  static const int ReqPlayStream_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, urltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, mediaserver_),
  };
  ReqPlayStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPlayStream_descriptor_,
      ReqPlayStream::default_instance_,
      ReqPlayStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPlayStream));
  RspPlayStream_descriptor_ = file->message_type(4);
  static const int RspPlayStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayStream, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayStream, url_),
  };
  RspPlayStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspPlayStream_descriptor_,
      RspPlayStream::default_instance_,
      RspPlayStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspPlayStream));
  RecordInfo_descriptor_ = file->message_type(5);
  static const int RecordInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, sourcetype_),
  };
  RecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordInfo_descriptor_,
      RecordInfo::default_instance_,
      RecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordInfo));
  ReqQueryRecord_descriptor_ = file->message_type(6);
  static const int ReqQueryRecord_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, recordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, count_),
  };
  ReqQueryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQueryRecord_descriptor_,
      ReqQueryRecord::default_instance_,
      ReqQueryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQueryRecord));
  RspQueryRecord_descriptor_ = file->message_type(7);
  static const int RspQueryRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspQueryRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspQueryRecord, recordinfos_),
  };
  RspQueryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspQueryRecord_descriptor_,
      RspQueryRecord::default_instance_,
      RspQueryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspQueryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspQueryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspQueryRecord));
  ReqPlayRecord_descriptor_ = file->message_type(8);
  static const int ReqPlayRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, sourcetype_),
  };
  ReqPlayRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPlayRecord_descriptor_,
      ReqPlayRecord::default_instance_,
      ReqPlayRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPlayRecord));
  RspPlayRecord_descriptor_ = file->message_type(9);
  static const int RspPlayRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, session_),
  };
  RspPlayRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspPlayRecord_descriptor_,
      RspPlayRecord::default_instance_,
      RspPlayRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPlayRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspPlayRecord));
  ReqDownloadRecord_descriptor_ = file->message_type(10);
  static const int ReqDownloadRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, proxyservicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, offset_),
  };
  ReqDownloadRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDownloadRecord_descriptor_,
      ReqDownloadRecord::default_instance_,
      ReqDownloadRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDownloadRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDownloadRecord));
  RspDownloadRecord_descriptor_ = file->message_type(11);
  static const int RspDownloadRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, token_),
  };
  RspDownloadRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDownloadRecord_descriptor_,
      RspDownloadRecord::default_instance_,
      RspDownloadRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDownloadRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDownloadRecord));
  NoticeReportRecord_descriptor_ = file->message_type(12);
  static const int NoticeReportRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeReportRecord, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeReportRecord, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeReportRecord, info_),
  };
  NoticeReportRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeReportRecord_descriptor_,
      NoticeReportRecord::default_instance_,
      NoticeReportRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeReportRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeReportRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeReportRecord));
  RESULT_TYPE_OF_CATALOG_descriptor_ = file->enum_type(0);
  STREAM_PROTOCOL_TYPE_descriptor_ = file->enum_type(1);
  URL_TYPE_descriptor_ = file->enum_type(2);
  RECORD_SOURCE_TYPE_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CatalogBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDeviceList_descriptor_, &RspDeviceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChannelList_descriptor_, &ReqChannelList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspChannelList_descriptor_, &RspChannelList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPlayStream_descriptor_, &ReqPlayStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspPlayStream_descriptor_, &RspPlayStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordInfo_descriptor_, &RecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQueryRecord_descriptor_, &ReqQueryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspQueryRecord_descriptor_, &RspQueryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPlayRecord_descriptor_, &ReqPlayRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspPlayRecord_descriptor_, &RspPlayRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDownloadRecord_descriptor_, &ReqDownloadRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDownloadRecord_descriptor_, &RspDownloadRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeReportRecord_descriptor_, &NoticeReportRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CatalogBean_2eproto() {
  delete RspDeviceList::default_instance_;
  delete RspDeviceList_reflection_;
  delete ReqChannelList::default_instance_;
  delete ReqChannelList_reflection_;
  delete RspChannelList::default_instance_;
  delete RspChannelList_reflection_;
  delete ReqPlayStream::default_instance_;
  delete ReqPlayStream_reflection_;
  delete RspPlayStream::default_instance_;
  delete RspPlayStream_reflection_;
  delete RecordInfo::default_instance_;
  delete RecordInfo_reflection_;
  delete ReqQueryRecord::default_instance_;
  delete ReqQueryRecord_reflection_;
  delete RspQueryRecord::default_instance_;
  delete RspQueryRecord_reflection_;
  delete ReqPlayRecord::default_instance_;
  delete ReqPlayRecord_reflection_;
  delete RspPlayRecord::default_instance_;
  delete RspPlayRecord_reflection_;
  delete ReqDownloadRecord::default_instance_;
  delete ReqDownloadRecord_reflection_;
  delete RspDownloadRecord::default_instance_;
  delete RspDownloadRecord_reflection_;
  delete NoticeReportRecord::default_instance_;
  delete NoticeReportRecord_reflection_;
}

void protobuf_AddDesc_CatalogBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CatalogBean.proto\022\024com.arges.file.prot"
    "o\032\025DevInfoListBean.proto\"V\n\rRspDeviceLis"
    "t\022\022\n\006result\030\001 \001(\005:\002-1\0221\n\007devinfo\030\002 \003(\0132 "
    ".com.arges.file.proto.DeviceInfo\"!\n\016ReqC"
    "hannelList\022\017\n\005devId\030\001 \001(\t:\000\"[\n\016RspChanne"
    "lList\022\022\n\006result\030\001 \001(\005:\002-1\0225\n\005infos\030\002 \003(\013"
    "2&.com.arges.file.proto.EncodeChnnelInfo"
    "\"\247\001\n\rReqPlayStream\022\017\n\005devId\030\001 \001(\t:\000\022\023\n\tc"
    "hannelId\030\002 \001(\t:\000\022\022\n\010streamId\030\003 \001(\t:\000\022\032\n\020"
    "proxyServiceCode\030\004 \001(\t:\000\022\025\n\nstreamType\030\005"
    " \001(\005:\0010\022\022\n\007urlType\030\006 \001(\005:\0010\022\025\n\013mediaServ"
    "er\030\007 \001(\t:\000\"2\n\rRspPlayStream\022\022\n\006result\030\001 "
    "\001(\005:\002-1\022\r\n\003url\030\002 \001(\t:\000\"\234\001\n\nRecordInfo\022\016\n"
    "\004name\030\001 \001(\t:\000\022\016\n\004path\030\002 \001(\t:\000\022\017\n\004size\030\003 "
    "\001(\005:\0010\022\023\n\tbeginTime\030\004 \001(\t:\000\022\021\n\007endTime\030\005"
    " \001(\t:\000\022\014\n\002id\030\006 \001(\t:\000\022\020\n\006reason\030\007 \001(\t:\000\022\025"
    "\n\nsourceType\030\010 \001(\005:\0010\"\315\001\n\016ReqQueryRecord"
    "\022\017\n\005devId\030\001 \001(\t:\000\022\023\n\tchannelId\030\002 \001(\t:\000\022\032"
    "\n\020proxyServiceCode\030\003 \001(\t:\000\022\025\n\nsourceType"
    "\030\004 \001(\005:\0010\022\025\n\nrecordType\030\005 \001(\005:\0010\022\023\n\tbegi"
    "nTime\030\006 \001(\t:\000\022\021\n\007endTime\030\007 \001(\t:\000\022\021\n\006offs"
    "et\030\010 \001(\005:\0010\022\020\n\005count\030\t \001(\005:\0010\"[\n\016RspQuer"
    "yRecord\022\022\n\006result\030\001 \001(\005:\002-1\0225\n\013recordInf"
    "os\030\002 \003(\0132 .com.arges.file.proto.RecordIn"
    "fo\"\220\001\n\rReqPlayRecord\022\017\n\005devId\030\001 \001(\t:\000\022\023\n"
    "\tchannelId\030\002 \001(\t:\000\022\032\n\020proxyServiceCode\030\003"
    " \001(\t:\000\022\023\n\tbeginTime\030\004 \001(\t:\000\022\021\n\007endTime\030\005"
    " \001(\t:\000\022\025\n\nsourceType\030\006 \001(\005:\0010\"g\n\rRspPlay"
    "Record\022\022\n\006result\030\001 \001(\005:\002-1\022\014\n\002ip\030\002 \001(\t:\000"
    "\022\020\n\004port\030\003 \001(\005:\002-1\022\017\n\005token\030\004 \001(\t:\000\022\021\n\007s"
    "ession\030\005 \001(\t:\000\"\203\001\n\021ReqDownloadRecord\022\017\n\005"
    "devId\030\001 \001(\t:\000\022\032\n\020proxyServiceCode\030\002 \001(\t:"
    "\000\022.\n\004info\030\003 \001(\0132 .com.arges.file.proto.R"
    "ecordInfo\022\021\n\006offset\030\004 \001(\005:\0010\"X\n\021RspDownl"
    "oadRecord\022\022\n\006result\030\001 \001(\005:\002-1\022\014\n\002ip\030\002 \001("
    "\t:\000\022\020\n\004port\030\003 \001(\005:\002-1\022\017\n\005token\030\004 \001(\t:\000\"j"
    "\n\022NoticeReportRecord\022\017\n\005devId\030\001 \001(\t:\000\022\023\n"
    "\tchannelId\030\002 \001(\t:\000\022.\n\004info\030\003 \001(\0132 .com.a"
    "rges.file.proto.RecordInfo*\207\002\n\026RESULT_TY"
    "PE_OF_CATALOG\022!\n\024CATALOG_RESULT_ERROR\020\377\377"
    "\377\377\377\377\377\377\377\001\022\025\n\021CATALOG_RESULT_OK\020\000\022\"\n\036CATAL"
    "OG_RESULT_DEVICE_NOTFOUND\020\001\022\036\n\032CATALOG_R"
    "ESULT_PARAM_ERROR\020\002\022*\n&CATALOG_RESULT_NO"
    "AVAILABLE_MEDIASERVER\020\003\022\"\n\036CATALOG_RESUL"
    "T_REQUEST_TIMEOUT\020\004\022\037\n\033CATALOG_RESULT_RO"
    "UTE_FAILED\020\005*r\n\024STREAM_PROTOCOL_TYPE\022\035\n\031"
    "STREAM_PROTOCOL_TYPE_RTSP\020\000\022\035\n\031STREAM_PR"
    "OTOCOL_TYPE_RTMP\020\001\022\034\n\030STREAM_PROTOCOL_TY"
    "PE_HLS\020\002*5\n\010URL_TYPE\022\023\n\017URL_TYPE_INSIDE\020"
    "\000\022\024\n\020URL_TYPE_OUTSIDE\020\001*R\n\022RECORD_SOURCE"
    "_TYPE\022\032\n\026RECORD_SOURCE_TYPE_BOX\020\000\022 \n\034REC"
    "ORD_SOURCE_TYPE_FRONT_END\020\001", 2067);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CatalogBean.proto", &protobuf_RegisterTypes);
  RspDeviceList::default_instance_ = new RspDeviceList();
  ReqChannelList::default_instance_ = new ReqChannelList();
  RspChannelList::default_instance_ = new RspChannelList();
  ReqPlayStream::default_instance_ = new ReqPlayStream();
  RspPlayStream::default_instance_ = new RspPlayStream();
  RecordInfo::default_instance_ = new RecordInfo();
  ReqQueryRecord::default_instance_ = new ReqQueryRecord();
  RspQueryRecord::default_instance_ = new RspQueryRecord();
  ReqPlayRecord::default_instance_ = new ReqPlayRecord();
  RspPlayRecord::default_instance_ = new RspPlayRecord();
  ReqDownloadRecord::default_instance_ = new ReqDownloadRecord();
  RspDownloadRecord::default_instance_ = new RspDownloadRecord();
  NoticeReportRecord::default_instance_ = new NoticeReportRecord();
  RspDeviceList::default_instance_->InitAsDefaultInstance();
  ReqChannelList::default_instance_->InitAsDefaultInstance();
  RspChannelList::default_instance_->InitAsDefaultInstance();
  ReqPlayStream::default_instance_->InitAsDefaultInstance();
  RspPlayStream::default_instance_->InitAsDefaultInstance();
  RecordInfo::default_instance_->InitAsDefaultInstance();
  ReqQueryRecord::default_instance_->InitAsDefaultInstance();
  RspQueryRecord::default_instance_->InitAsDefaultInstance();
  ReqPlayRecord::default_instance_->InitAsDefaultInstance();
  RspPlayRecord::default_instance_->InitAsDefaultInstance();
  ReqDownloadRecord::default_instance_->InitAsDefaultInstance();
  RspDownloadRecord::default_instance_->InitAsDefaultInstance();
  NoticeReportRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CatalogBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CatalogBean_2eproto {
  StaticDescriptorInitializer_CatalogBean_2eproto() {
    protobuf_AddDesc_CatalogBean_2eproto();
  }
} static_descriptor_initializer_CatalogBean_2eproto_;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_CATALOG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_CATALOG_descriptor_;
}
bool RESULT_TYPE_OF_CATALOG_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STREAM_PROTOCOL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STREAM_PROTOCOL_TYPE_descriptor_;
}
bool STREAM_PROTOCOL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* URL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URL_TYPE_descriptor_;
}
bool URL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RECORD_SOURCE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RECORD_SOURCE_TYPE_descriptor_;
}
bool RECORD_SOURCE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RspDeviceList::kResultFieldNumber;
const int RspDeviceList::kDevinfoFieldNumber;
#endif  // !_MSC_VER

RspDeviceList::RspDeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDeviceList)
}

void RspDeviceList::InitAsDefaultInstance() {
}

RspDeviceList::RspDeviceList(const RspDeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDeviceList)
}

void RspDeviceList::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDeviceList::~RspDeviceList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDeviceList)
  SharedDtor();
}

void RspDeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDeviceList_descriptor_;
}

const RspDeviceList& RspDeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspDeviceList* RspDeviceList::default_instance_ = NULL;

RspDeviceList* RspDeviceList::New() const {
  return new RspDeviceList;
}

void RspDeviceList::Clear() {
  result_ = -1;
  devinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDeviceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devinfo;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_devinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDeviceList)
  return false;
#undef DO_
}

void RspDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDeviceList)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
  for (int i = 0; i < this->devinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDeviceList)
}

::google::protobuf::uint8* RspDeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDeviceList)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
  for (int i = 0; i < this->devinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDeviceList)
  return target;
}

int RspDeviceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo devinfo = 2;
  total_size += 1 * this->devinfo_size();
  for (int i = 0; i < this->devinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDeviceList::MergeFrom(const RspDeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  devinfo_.MergeFrom(from.devinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDeviceList::CopyFrom(const RspDeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDeviceList::IsInitialized() const {

  return true;
}

void RspDeviceList::Swap(RspDeviceList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    devinfo_.Swap(&other->devinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDeviceList_descriptor_;
  metadata.reflection = RspDeviceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChannelList::kDevIdFieldNumber;
#endif  // !_MSC_VER

ReqChannelList::ReqChannelList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqChannelList)
}

void ReqChannelList::InitAsDefaultInstance() {
}

ReqChannelList::ReqChannelList(const ReqChannelList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqChannelList)
}

void ReqChannelList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChannelList::~ReqChannelList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqChannelList)
  SharedDtor();
}

void ReqChannelList::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (this != default_instance_) {
  }
}

void ReqChannelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChannelList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChannelList_descriptor_;
}

const ReqChannelList& ReqChannelList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

ReqChannelList* ReqChannelList::default_instance_ = NULL;

ReqChannelList* ReqChannelList::New() const {
  return new ReqChannelList;
}

void ReqChannelList::Clear() {
  if (has_devid()) {
    if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      devid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqChannelList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqChannelList)
  return false;
#undef DO_
}

void ReqChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqChannelList)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqChannelList)
}

::google::protobuf::uint8* ReqChannelList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqChannelList)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqChannelList)
  return target;
}

int ReqChannelList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChannelList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChannelList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChannelList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChannelList::MergeFrom(const ReqChannelList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChannelList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChannelList::CopyFrom(const ReqChannelList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChannelList::IsInitialized() const {

  return true;
}

void ReqChannelList::Swap(ReqChannelList* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChannelList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChannelList_descriptor_;
  metadata.reflection = ReqChannelList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspChannelList::kResultFieldNumber;
const int RspChannelList::kInfosFieldNumber;
#endif  // !_MSC_VER

RspChannelList::RspChannelList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspChannelList)
}

void RspChannelList::InitAsDefaultInstance() {
}

RspChannelList::RspChannelList(const RspChannelList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspChannelList)
}

void RspChannelList::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspChannelList::~RspChannelList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspChannelList)
  SharedDtor();
}

void RspChannelList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspChannelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspChannelList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspChannelList_descriptor_;
}

const RspChannelList& RspChannelList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspChannelList* RspChannelList::default_instance_ = NULL;

RspChannelList* RspChannelList::New() const {
  return new RspChannelList;
}

void RspChannelList::Clear() {
  result_ = -1;
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspChannelList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
      case 2: {
        if (tag == 18) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspChannelList)
  return false;
#undef DO_
}

void RspChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspChannelList)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspChannelList)
}

::google::protobuf::uint8* RspChannelList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspChannelList)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspChannelList)
  return target;
}

int RspChannelList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspChannelList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspChannelList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspChannelList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspChannelList::MergeFrom(const RspChannelList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspChannelList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspChannelList::CopyFrom(const RspChannelList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspChannelList::IsInitialized() const {

  return true;
}

void RspChannelList::Swap(RspChannelList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspChannelList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspChannelList_descriptor_;
  metadata.reflection = RspChannelList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPlayStream::kDevIdFieldNumber;
const int ReqPlayStream::kChannelIdFieldNumber;
const int ReqPlayStream::kStreamIdFieldNumber;
const int ReqPlayStream::kProxyServiceCodeFieldNumber;
const int ReqPlayStream::kStreamTypeFieldNumber;
const int ReqPlayStream::kUrlTypeFieldNumber;
const int ReqPlayStream::kMediaServerFieldNumber;
#endif  // !_MSC_VER

ReqPlayStream::ReqPlayStream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqPlayStream)
}

void ReqPlayStream::InitAsDefaultInstance() {
}

ReqPlayStream::ReqPlayStream(const ReqPlayStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqPlayStream)
}

void ReqPlayStream::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamtype_ = 0;
  urltype_ = 0;
  mediaserver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPlayStream::~ReqPlayStream() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqPlayStream)
  SharedDtor();
}

void ReqPlayStream::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (streamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete streamid_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (mediaserver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mediaserver_;
  }
  if (this != default_instance_) {
  }
}

void ReqPlayStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPlayStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPlayStream_descriptor_;
}

const ReqPlayStream& ReqPlayStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

ReqPlayStream* ReqPlayStream::default_instance_ = NULL;

ReqPlayStream* ReqPlayStream::New() const {
  return new ReqPlayStream;
}

void ReqPlayStream::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqPlayStream*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(streamtype_, urltype_);
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_streamid()) {
      if (streamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        streamid_->clear();
      }
    }
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    if (has_mediaserver()) {
      if (mediaserver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mediaserver_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPlayStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqPlayStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_streamId;
        break;
      }

      // optional string streamId = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "streamid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_streamType;
        break;
      }

      // optional int32 streamType = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_streamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_urlType;
        break;
      }

      // optional int32 urlType = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_urlType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urltype_)));
          set_has_urltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mediaServer;
        break;
      }

      // optional string mediaServer = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_mediaServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediaserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaserver().data(), this->mediaserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediaserver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqPlayStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqPlayStream)
  return false;
#undef DO_
}

void ReqPlayStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqPlayStream)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional string streamId = 3 [default = ""];
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "streamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->streamid(), output);
  }

  // optional string proxyServiceCode = 4 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->proxyservicecode(), output);
  }

  // optional int32 streamType = 5 [default = 0];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->streamtype(), output);
  }

  // optional int32 urlType = 6 [default = 0];
  if (has_urltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->urltype(), output);
  }

  // optional string mediaServer = 7 [default = ""];
  if (has_mediaserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaserver().data(), this->mediaserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediaserver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mediaserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqPlayStream)
}

::google::protobuf::uint8* ReqPlayStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqPlayStream)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional string streamId = 3 [default = ""];
  if (has_streamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "streamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->streamid(), target);
  }

  // optional string proxyServiceCode = 4 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->proxyservicecode(), target);
  }

  // optional int32 streamType = 5 [default = 0];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->streamtype(), target);
  }

  // optional int32 urlType = 6 [default = 0];
  if (has_urltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->urltype(), target);
  }

  // optional string mediaServer = 7 [default = ""];
  if (has_mediaserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaserver().data(), this->mediaserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediaserver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mediaserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqPlayStream)
  return target;
}

int ReqPlayStream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string streamId = 3 [default = ""];
    if (has_streamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamid());
    }

    // optional string proxyServiceCode = 4 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional int32 streamType = 5 [default = 0];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // optional int32 urlType = 6 [default = 0];
    if (has_urltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urltype());
    }

    // optional string mediaServer = 7 [default = ""];
    if (has_mediaserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediaserver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPlayStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPlayStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPlayStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPlayStream::MergeFrom(const ReqPlayStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_streamid()) {
      set_streamid(from.streamid());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_urltype()) {
      set_urltype(from.urltype());
    }
    if (from.has_mediaserver()) {
      set_mediaserver(from.mediaserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPlayStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPlayStream::CopyFrom(const ReqPlayStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPlayStream::IsInitialized() const {

  return true;
}

void ReqPlayStream::Swap(ReqPlayStream* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(channelid_, other->channelid_);
    std::swap(streamid_, other->streamid_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(streamtype_, other->streamtype_);
    std::swap(urltype_, other->urltype_);
    std::swap(mediaserver_, other->mediaserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPlayStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPlayStream_descriptor_;
  metadata.reflection = ReqPlayStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspPlayStream::kResultFieldNumber;
const int RspPlayStream::kUrlFieldNumber;
#endif  // !_MSC_VER

RspPlayStream::RspPlayStream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspPlayStream)
}

void RspPlayStream::InitAsDefaultInstance() {
}

RspPlayStream::RspPlayStream(const RspPlayStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspPlayStream)
}

void RspPlayStream::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspPlayStream::~RspPlayStream() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspPlayStream)
  SharedDtor();
}

void RspPlayStream::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void RspPlayStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspPlayStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspPlayStream_descriptor_;
}

const RspPlayStream& RspPlayStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspPlayStream* RspPlayStream::default_instance_ = NULL;

RspPlayStream* RspPlayStream::New() const {
  return new RspPlayStream;
}

void RspPlayStream::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = -1;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspPlayStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspPlayStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspPlayStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspPlayStream)
  return false;
#undef DO_
}

void RspPlayStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspPlayStream)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string url = 2 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspPlayStream)
}

::google::protobuf::uint8* RspPlayStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspPlayStream)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string url = 2 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspPlayStream)
  return target;
}

int RspPlayStream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string url = 2 [default = ""];
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspPlayStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspPlayStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspPlayStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspPlayStream::MergeFrom(const RspPlayStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspPlayStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspPlayStream::CopyFrom(const RspPlayStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspPlayStream::IsInitialized() const {

  return true;
}

void RspPlayStream::Swap(RspPlayStream* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspPlayStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspPlayStream_descriptor_;
  metadata.reflection = RspPlayStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordInfo::kNameFieldNumber;
const int RecordInfo::kPathFieldNumber;
const int RecordInfo::kSizeFieldNumber;
const int RecordInfo::kBeginTimeFieldNumber;
const int RecordInfo::kEndTimeFieldNumber;
const int RecordInfo::kIdFieldNumber;
const int RecordInfo::kReasonFieldNumber;
const int RecordInfo::kSourceTypeFieldNumber;
#endif  // !_MSC_VER

RecordInfo::RecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RecordInfo)
}

void RecordInfo::InitAsDefaultInstance() {
}

RecordInfo::RecordInfo(const RecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RecordInfo)
}

void RecordInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordInfo::~RecordInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RecordInfo)
  SharedDtor();
}

void RecordInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void RecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordInfo_descriptor_;
}

const RecordInfo& RecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RecordInfo* RecordInfo::default_instance_ = NULL;

RecordInfo* RecordInfo::New() const {
  return new RecordInfo;
}

void RecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(size_, sourcetype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_begintime()) {
      if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        begintime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beginTime;
        break;
      }

      // optional string beginTime = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_beginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "begintime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_endTime;
        break;
      }

      // optional string endTime = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional string id = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sourceType;
        break;
      }

      // optional int32 sourceType = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RecordInfo)
  return false;
#undef DO_
}

void RecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RecordInfo)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string path = 2 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int32 size = 3 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional string beginTime = 4 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->begintime(), output);
  }

  // optional string endTime = 5 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->endtime(), output);
  }

  // optional string id = 6 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->id(), output);
  }

  // optional string reason = 7 [default = ""];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // optional int32 sourceType = 8 [default = 0];
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sourcetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RecordInfo)
}

::google::protobuf::uint8* RecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RecordInfo)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string path = 2 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int32 size = 3 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional string beginTime = 4 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->begintime(), target);
  }

  // optional string endTime = 5 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->endtime(), target);
  }

  // optional string id = 6 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  // optional string reason = 7 [default = ""];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reason(), target);
  }

  // optional int32 sourceType = 8 [default = 0];
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sourcetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RecordInfo)
  return target;
}

int RecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 2 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 size = 3 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional string beginTime = 4 [default = ""];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endTime = 5 [default = ""];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string id = 6 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string reason = 7 [default = ""];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 sourceType = 8 [default = 0];
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordInfo::MergeFrom(const RecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInfo::CopyFrom(const RecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInfo::IsInitialized() const {

  return true;
}

void RecordInfo::Swap(RecordInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(size_, other->size_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(id_, other->id_);
    std::swap(reason_, other->reason_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordInfo_descriptor_;
  metadata.reflection = RecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqQueryRecord::kDevIdFieldNumber;
const int ReqQueryRecord::kChannelIdFieldNumber;
const int ReqQueryRecord::kProxyServiceCodeFieldNumber;
const int ReqQueryRecord::kSourceTypeFieldNumber;
const int ReqQueryRecord::kRecordTypeFieldNumber;
const int ReqQueryRecord::kBeginTimeFieldNumber;
const int ReqQueryRecord::kEndTimeFieldNumber;
const int ReqQueryRecord::kOffsetFieldNumber;
const int ReqQueryRecord::kCountFieldNumber;
#endif  // !_MSC_VER

ReqQueryRecord::ReqQueryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqQueryRecord)
}

void ReqQueryRecord::InitAsDefaultInstance() {
}

ReqQueryRecord::ReqQueryRecord(const ReqQueryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqQueryRecord)
}

void ReqQueryRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_ = 0;
  recordtype_ = 0;
  begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQueryRecord::~ReqQueryRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqQueryRecord)
  SharedDtor();
}

void ReqQueryRecord::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void ReqQueryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQueryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQueryRecord_descriptor_;
}

const ReqQueryRecord& ReqQueryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

ReqQueryRecord* ReqQueryRecord::default_instance_ = NULL;

ReqQueryRecord* ReqQueryRecord::New() const {
  return new ReqQueryRecord;
}

void ReqQueryRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqQueryRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sourcetype_, recordtype_);
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    if (has_begintime()) {
      if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        begintime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
    offset_ = 0;
  }
  count_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQueryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqQueryRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceType;
        break;
      }

      // optional int32 sourceType = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_recordType;
        break;
      }

      // optional int32 recordType = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_recordType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordtype_)));
          set_has_recordtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_beginTime;
        break;
      }

      // optional string beginTime = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_beginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "begintime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_endTime;
        break;
      }

      // optional string endTime = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offset;
        break;
      }

      // optional int32 offset = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional int32 count = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqQueryRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqQueryRecord)
  return false;
#undef DO_
}

void ReqQueryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqQueryRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional string proxyServiceCode = 3 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxyservicecode(), output);
  }

  // optional int32 sourceType = 4 [default = 0];
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sourcetype(), output);
  }

  // optional int32 recordType = 5 [default = 0];
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recordtype(), output);
  }

  // optional string beginTime = 6 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->begintime(), output);
  }

  // optional string endTime = 7 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->endtime(), output);
  }

  // optional int32 offset = 8 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->offset(), output);
  }

  // optional int32 count = 9 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqQueryRecord)
}

::google::protobuf::uint8* ReqQueryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqQueryRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional string proxyServiceCode = 3 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxyservicecode(), target);
  }

  // optional int32 sourceType = 4 [default = 0];
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sourcetype(), target);
  }

  // optional int32 recordType = 5 [default = 0];
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recordtype(), target);
  }

  // optional string beginTime = 6 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->begintime(), target);
  }

  // optional string endTime = 7 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->endtime(), target);
  }

  // optional int32 offset = 8 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->offset(), target);
  }

  // optional int32 count = 9 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqQueryRecord)
  return target;
}

int ReqQueryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string proxyServiceCode = 3 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional int32 sourceType = 4 [default = 0];
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

    // optional int32 recordType = 5 [default = 0];
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordtype());
    }

    // optional string beginTime = 6 [default = ""];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endTime = 7 [default = ""];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional int32 offset = 8 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 count = 9 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQueryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQueryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQueryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQueryRecord::MergeFrom(const ReqQueryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQueryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQueryRecord::CopyFrom(const ReqQueryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQueryRecord::IsInitialized() const {

  return true;
}

void ReqQueryRecord::Swap(ReqQueryRecord* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(channelid_, other->channelid_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(recordtype_, other->recordtype_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQueryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQueryRecord_descriptor_;
  metadata.reflection = ReqQueryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspQueryRecord::kResultFieldNumber;
const int RspQueryRecord::kRecordInfosFieldNumber;
#endif  // !_MSC_VER

RspQueryRecord::RspQueryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspQueryRecord)
}

void RspQueryRecord::InitAsDefaultInstance() {
}

RspQueryRecord::RspQueryRecord(const RspQueryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspQueryRecord)
}

void RspQueryRecord::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspQueryRecord::~RspQueryRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspQueryRecord)
  SharedDtor();
}

void RspQueryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspQueryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspQueryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspQueryRecord_descriptor_;
}

const RspQueryRecord& RspQueryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspQueryRecord* RspQueryRecord::default_instance_ = NULL;

RspQueryRecord* RspQueryRecord::New() const {
  return new RspQueryRecord;
}

void RspQueryRecord::Clear() {
  result_ = -1;
  recordinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspQueryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspQueryRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recordInfos;
        break;
      }

      // repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_recordInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recordInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspQueryRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspQueryRecord)
  return false;
#undef DO_
}

void RspQueryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspQueryRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
  for (int i = 0; i < this->recordinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recordinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspQueryRecord)
}

::google::protobuf::uint8* RspQueryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspQueryRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
  for (int i = 0; i < this->recordinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recordinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspQueryRecord)
  return target;
}

int RspQueryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .com.arges.file.proto.RecordInfo recordInfos = 2;
  total_size += 1 * this->recordinfos_size();
  for (int i = 0; i < this->recordinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspQueryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspQueryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspQueryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspQueryRecord::MergeFrom(const RspQueryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordinfos_.MergeFrom(from.recordinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspQueryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspQueryRecord::CopyFrom(const RspQueryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspQueryRecord::IsInitialized() const {

  return true;
}

void RspQueryRecord::Swap(RspQueryRecord* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    recordinfos_.Swap(&other->recordinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspQueryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspQueryRecord_descriptor_;
  metadata.reflection = RspQueryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPlayRecord::kDevIdFieldNumber;
const int ReqPlayRecord::kChannelIdFieldNumber;
const int ReqPlayRecord::kProxyServiceCodeFieldNumber;
const int ReqPlayRecord::kBeginTimeFieldNumber;
const int ReqPlayRecord::kEndTimeFieldNumber;
const int ReqPlayRecord::kSourceTypeFieldNumber;
#endif  // !_MSC_VER

ReqPlayRecord::ReqPlayRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqPlayRecord)
}

void ReqPlayRecord::InitAsDefaultInstance() {
}

ReqPlayRecord::ReqPlayRecord(const ReqPlayRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqPlayRecord)
}

void ReqPlayRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPlayRecord::~ReqPlayRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqPlayRecord)
  SharedDtor();
}

void ReqPlayRecord::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void ReqPlayRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPlayRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPlayRecord_descriptor_;
}

const ReqPlayRecord& ReqPlayRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

ReqPlayRecord* ReqPlayRecord::default_instance_ = NULL;

ReqPlayRecord* ReqPlayRecord::New() const {
  return new ReqPlayRecord;
}

void ReqPlayRecord::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    if (has_begintime()) {
      if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        begintime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
    sourcetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPlayRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqPlayRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beginTime;
        break;
      }

      // optional string beginTime = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_beginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "begintime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_endTime;
        break;
      }

      // optional string endTime = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sourceType;
        break;
      }

      // optional int32 sourceType = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqPlayRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqPlayRecord)
  return false;
#undef DO_
}

void ReqPlayRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqPlayRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional string proxyServiceCode = 3 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxyservicecode(), output);
  }

  // optional string beginTime = 4 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->begintime(), output);
  }

  // optional string endTime = 5 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->endtime(), output);
  }

  // optional int32 sourceType = 6 [default = 0];
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sourcetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqPlayRecord)
}

::google::protobuf::uint8* ReqPlayRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqPlayRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional string proxyServiceCode = 3 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxyservicecode(), target);
  }

  // optional string beginTime = 4 [default = ""];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->begintime(), target);
  }

  // optional string endTime = 5 [default = ""];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->endtime(), target);
  }

  // optional int32 sourceType = 6 [default = 0];
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sourcetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqPlayRecord)
  return target;
}

int ReqPlayRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string proxyServiceCode = 3 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional string beginTime = 4 [default = ""];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endTime = 5 [default = ""];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional int32 sourceType = 6 [default = 0];
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPlayRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPlayRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPlayRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPlayRecord::MergeFrom(const ReqPlayRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPlayRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPlayRecord::CopyFrom(const ReqPlayRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPlayRecord::IsInitialized() const {

  return true;
}

void ReqPlayRecord::Swap(ReqPlayRecord* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(channelid_, other->channelid_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPlayRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPlayRecord_descriptor_;
  metadata.reflection = ReqPlayRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspPlayRecord::kResultFieldNumber;
const int RspPlayRecord::kIpFieldNumber;
const int RspPlayRecord::kPortFieldNumber;
const int RspPlayRecord::kTokenFieldNumber;
const int RspPlayRecord::kSessionFieldNumber;
#endif  // !_MSC_VER

RspPlayRecord::RspPlayRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspPlayRecord)
}

void RspPlayRecord::InitAsDefaultInstance() {
}

RspPlayRecord::RspPlayRecord(const RspPlayRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspPlayRecord)
}

void RspPlayRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspPlayRecord::~RspPlayRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspPlayRecord)
  SharedDtor();
}

void RspPlayRecord::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void RspPlayRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspPlayRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspPlayRecord_descriptor_;
}

const RspPlayRecord& RspPlayRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspPlayRecord* RspPlayRecord::default_instance_ = NULL;

RspPlayRecord* RspPlayRecord::New() const {
  return new RspPlayRecord;
}

void RspPlayRecord::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    result_ = -1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspPlayRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspPlayRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session;
        break;
      }

      // optional string session = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspPlayRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspPlayRecord)
  return false;
#undef DO_
}

void RspPlayRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspPlayRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string token = 4 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // optional string session = 5 [default = ""];
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspPlayRecord)
}

::google::protobuf::uint8* RspPlayRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspPlayRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string token = 4 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional string session = 5 [default = ""];
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspPlayRecord)
  return target;
}

int RspPlayRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string token = 4 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string session = 5 [default = ""];
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspPlayRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspPlayRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspPlayRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspPlayRecord::MergeFrom(const RspPlayRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspPlayRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspPlayRecord::CopyFrom(const RspPlayRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspPlayRecord::IsInitialized() const {

  return true;
}

void RspPlayRecord::Swap(RspPlayRecord* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspPlayRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspPlayRecord_descriptor_;
  metadata.reflection = RspPlayRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDownloadRecord::kDevIdFieldNumber;
const int ReqDownloadRecord::kProxyServiceCodeFieldNumber;
const int ReqDownloadRecord::kInfoFieldNumber;
const int ReqDownloadRecord::kOffsetFieldNumber;
#endif  // !_MSC_VER

ReqDownloadRecord::ReqDownloadRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDownloadRecord)
}

void ReqDownloadRecord::InitAsDefaultInstance() {
  info_ = const_cast< ::com::arges::file::proto::RecordInfo*>(&::com::arges::file::proto::RecordInfo::default_instance());
}

ReqDownloadRecord::ReqDownloadRecord(const ReqDownloadRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDownloadRecord)
}

void ReqDownloadRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDownloadRecord::~ReqDownloadRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDownloadRecord)
  SharedDtor();
}

void ReqDownloadRecord::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void ReqDownloadRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDownloadRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDownloadRecord_descriptor_;
}

const ReqDownloadRecord& ReqDownloadRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

ReqDownloadRecord* ReqDownloadRecord::default_instance_ = NULL;

ReqDownloadRecord* ReqDownloadRecord::New() const {
  return new ReqDownloadRecord;
}

void ReqDownloadRecord::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::com::arges::file::proto::RecordInfo::Clear();
    }
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDownloadRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDownloadRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .com.arges.file.proto.RecordInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int32 offset = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDownloadRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDownloadRecord)
  return false;
#undef DO_
}

void ReqDownloadRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDownloadRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string proxyServiceCode = 2 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proxyservicecode(), output);
  }

  // optional .com.arges.file.proto.RecordInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional int32 offset = 4 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDownloadRecord)
}

::google::protobuf::uint8* ReqDownloadRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDownloadRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string proxyServiceCode = 2 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proxyservicecode(), target);
  }

  // optional .com.arges.file.proto.RecordInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional int32 offset = 4 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDownloadRecord)
  return target;
}

int ReqDownloadRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string proxyServiceCode = 2 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

    // optional .com.arges.file.proto.RecordInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 offset = 4 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDownloadRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDownloadRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDownloadRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDownloadRecord::MergeFrom(const ReqDownloadRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
    if (from.has_info()) {
      mutable_info()->::com::arges::file::proto::RecordInfo::MergeFrom(from.info());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDownloadRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDownloadRecord::CopyFrom(const ReqDownloadRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDownloadRecord::IsInitialized() const {

  return true;
}

void ReqDownloadRecord::Swap(ReqDownloadRecord* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(info_, other->info_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDownloadRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDownloadRecord_descriptor_;
  metadata.reflection = ReqDownloadRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspDownloadRecord::kResultFieldNumber;
const int RspDownloadRecord::kIpFieldNumber;
const int RspDownloadRecord::kPortFieldNumber;
const int RspDownloadRecord::kTokenFieldNumber;
#endif  // !_MSC_VER

RspDownloadRecord::RspDownloadRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDownloadRecord)
}

void RspDownloadRecord::InitAsDefaultInstance() {
}

RspDownloadRecord::RspDownloadRecord(const RspDownloadRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDownloadRecord)
}

void RspDownloadRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDownloadRecord::~RspDownloadRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDownloadRecord)
  SharedDtor();
}

void RspDownloadRecord::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspDownloadRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDownloadRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDownloadRecord_descriptor_;
}

const RspDownloadRecord& RspDownloadRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

RspDownloadRecord* RspDownloadRecord::default_instance_ = NULL;

RspDownloadRecord* RspDownloadRecord::New() const {
  return new RspDownloadRecord;
}

void RspDownloadRecord::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = -1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDownloadRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDownloadRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDownloadRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDownloadRecord)
  return false;
#undef DO_
}

void RspDownloadRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDownloadRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string token = 4 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDownloadRecord)
}

::google::protobuf::uint8* RspDownloadRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDownloadRecord)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string token = 4 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDownloadRecord)
  return target;
}

int RspDownloadRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string token = 4 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDownloadRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDownloadRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDownloadRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDownloadRecord::MergeFrom(const RspDownloadRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDownloadRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDownloadRecord::CopyFrom(const RspDownloadRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDownloadRecord::IsInitialized() const {

  return true;
}

void RspDownloadRecord::Swap(RspDownloadRecord* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDownloadRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDownloadRecord_descriptor_;
  metadata.reflection = RspDownloadRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeReportRecord::kDevIdFieldNumber;
const int NoticeReportRecord::kChannelIdFieldNumber;
const int NoticeReportRecord::kInfoFieldNumber;
#endif  // !_MSC_VER

NoticeReportRecord::NoticeReportRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.NoticeReportRecord)
}

void NoticeReportRecord::InitAsDefaultInstance() {
  info_ = const_cast< ::com::arges::file::proto::RecordInfo*>(&::com::arges::file::proto::RecordInfo::default_instance());
}

NoticeReportRecord::NoticeReportRecord(const NoticeReportRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.NoticeReportRecord)
}

void NoticeReportRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeReportRecord::~NoticeReportRecord() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.NoticeReportRecord)
  SharedDtor();
}

void NoticeReportRecord::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void NoticeReportRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeReportRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeReportRecord_descriptor_;
}

const NoticeReportRecord& NoticeReportRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CatalogBean_2eproto();
  return *default_instance_;
}

NoticeReportRecord* NoticeReportRecord::default_instance_ = NULL;

NoticeReportRecord* NoticeReportRecord::New() const {
  return new NoticeReportRecord;
}

void NoticeReportRecord::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::com::arges::file::proto::RecordInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeReportRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.NoticeReportRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .com.arges.file.proto.RecordInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.NoticeReportRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.NoticeReportRecord)
  return false;
#undef DO_
}

void NoticeReportRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.NoticeReportRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional .com.arges.file.proto.RecordInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.NoticeReportRecord)
}

::google::protobuf::uint8* NoticeReportRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.NoticeReportRecord)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional .com.arges.file.proto.RecordInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.NoticeReportRecord)
  return target;
}

int NoticeReportRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional .com.arges.file.proto.RecordInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeReportRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeReportRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeReportRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeReportRecord::MergeFrom(const NoticeReportRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_info()) {
      mutable_info()->::com::arges::file::proto::RecordInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeReportRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeReportRecord::CopyFrom(const NoticeReportRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeReportRecord::IsInitialized() const {

  return true;
}

void NoticeReportRecord::Swap(NoticeReportRecord* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(channelid_, other->channelid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeReportRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeReportRecord_descriptor_;
  metadata.reflection = NoticeReportRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
