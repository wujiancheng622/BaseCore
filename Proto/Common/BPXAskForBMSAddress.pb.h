// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BPXAskForBMSAddress.proto

#ifndef PROTOBUF_BPXAskForBMSAddress_2eproto__INCLUDED
#define PROTOBUF_BPXAskForBMSAddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
void protobuf_AssignDesc_BPXAskForBMSAddress_2eproto();
void protobuf_ShutdownFile_BPXAskForBMSAddress_2eproto();

class ReqBPXAskForBMSAddress;
class RspBPXAskForBMSAddress;

// ===================================================================

class ReqBPXAskForBMSAddress : public ::google::protobuf::Message {
 public:
  ReqBPXAskForBMSAddress();
  virtual ~ReqBPXAskForBMSAddress();

  ReqBPXAskForBMSAddress(const ReqBPXAskForBMSAddress& from);

  inline ReqBPXAskForBMSAddress& operator=(const ReqBPXAskForBMSAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBPXAskForBMSAddress& default_instance();

  void Swap(ReqBPXAskForBMSAddress* other);

  // implements Message ----------------------------------------------

  ReqBPXAskForBMSAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBPXAskForBMSAddress& from);
  void MergeFrom(const ReqBPXAskForBMSAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bpxid = 1 [default = "default"];
  inline bool has_bpxid() const;
  inline void clear_bpxid();
  static const int kBpxidFieldNumber = 1;
  inline const ::std::string& bpxid() const;
  inline void set_bpxid(const ::std::string& value);
  inline void set_bpxid(const char* value);
  inline void set_bpxid(const char* value, size_t size);
  inline ::std::string* mutable_bpxid();
  inline ::std::string* release_bpxid();
  inline void set_allocated_bpxid(::std::string* bpxid);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqBPXAskForBMSAddress)
 private:
  inline void set_has_bpxid();
  inline void clear_has_bpxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_bpxid_;
  ::std::string* bpxid_;
  friend void  protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  friend void protobuf_AssignDesc_BPXAskForBMSAddress_2eproto();
  friend void protobuf_ShutdownFile_BPXAskForBMSAddress_2eproto();

  void InitAsDefaultInstance();
  static ReqBPXAskForBMSAddress* default_instance_;
};
// -------------------------------------------------------------------

class RspBPXAskForBMSAddress : public ::google::protobuf::Message {
 public:
  RspBPXAskForBMSAddress();
  virtual ~RspBPXAskForBMSAddress();

  RspBPXAskForBMSAddress(const RspBPXAskForBMSAddress& from);

  inline RspBPXAskForBMSAddress& operator=(const RspBPXAskForBMSAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspBPXAskForBMSAddress& default_instance();

  void Swap(RspBPXAskForBMSAddress* other);

  // implements Message ----------------------------------------------

  RspBPXAskForBMSAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspBPXAskForBMSAddress& from);
  void MergeFrom(const RspBPXAskForBMSAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string bmsip = 1 [default = "default"];
  inline bool has_bmsip() const;
  inline void clear_bmsip();
  static const int kBmsipFieldNumber = 1;
  inline const ::std::string& bmsip() const;
  inline void set_bmsip(const ::std::string& value);
  inline void set_bmsip(const char* value);
  inline void set_bmsip(const char* value, size_t size);
  inline ::std::string* mutable_bmsip();
  inline ::std::string* release_bmsip();
  inline void set_allocated_bmsip(::std::string* bmsip);

  // required int32 bmsport = 2 [default = -1];
  inline bool has_bmsport() const;
  inline void clear_bmsport();
  static const int kBmsportFieldNumber = 2;
  inline ::google::protobuf::int32 bmsport() const;
  inline void set_bmsport(::google::protobuf::int32 value);

  // optional string bpxid = 3 [default = "default"];
  inline bool has_bpxid() const;
  inline void clear_bpxid();
  static const int kBpxidFieldNumber = 3;
  inline const ::std::string& bpxid() const;
  inline void set_bpxid(const ::std::string& value);
  inline void set_bpxid(const char* value);
  inline void set_bpxid(const char* value, size_t size);
  inline ::std::string* mutable_bpxid();
  inline ::std::string* release_bpxid();
  inline void set_allocated_bpxid(::std::string* bpxid);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspBPXAskForBMSAddress)
 private:
  inline void set_has_bmsip();
  inline void clear_has_bmsip();
  inline void set_has_bmsport();
  inline void clear_has_bmsport();
  inline void set_has_bpxid();
  inline void clear_has_bpxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_bmsip_;
  ::std::string* bmsip_;
  static ::std::string* _default_bpxid_;
  ::std::string* bpxid_;
  ::google::protobuf::int32 bmsport_;
  friend void  protobuf_AddDesc_BPXAskForBMSAddress_2eproto();
  friend void protobuf_AssignDesc_BPXAskForBMSAddress_2eproto();
  friend void protobuf_ShutdownFile_BPXAskForBMSAddress_2eproto();

  void InitAsDefaultInstance();
  static RspBPXAskForBMSAddress* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqBPXAskForBMSAddress

// optional string bpxid = 1 [default = "default"];
inline bool ReqBPXAskForBMSAddress::has_bpxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqBPXAskForBMSAddress::set_has_bpxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqBPXAskForBMSAddress::clear_has_bpxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqBPXAskForBMSAddress::clear_bpxid() {
  if (bpxid_ != _default_bpxid_) {
    bpxid_->assign(*_default_bpxid_);
  }
  clear_has_bpxid();
}
inline const ::std::string& ReqBPXAskForBMSAddress::bpxid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
  return *bpxid_;
}
inline void ReqBPXAskForBMSAddress::set_bpxid(const ::std::string& value) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
}
inline void ReqBPXAskForBMSAddress::set_bpxid(const char* value) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
}
inline void ReqBPXAskForBMSAddress::set_bpxid(const char* value, size_t size) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
}
inline ::std::string* ReqBPXAskForBMSAddress::mutable_bpxid() {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string(*_default_bpxid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
  return bpxid_;
}
inline ::std::string* ReqBPXAskForBMSAddress::release_bpxid() {
  clear_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    return NULL;
  } else {
    ::std::string* temp = bpxid_;
    bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
    return temp;
  }
}
inline void ReqBPXAskForBMSAddress::set_allocated_bpxid(::std::string* bpxid) {
  if (bpxid_ != _default_bpxid_) {
    delete bpxid_;
  }
  if (bpxid) {
    set_has_bpxid();
    bpxid_ = bpxid;
  } else {
    clear_has_bpxid();
    bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqBPXAskForBMSAddress.bpxid)
}

// -------------------------------------------------------------------

// RspBPXAskForBMSAddress

// required string bmsip = 1 [default = "default"];
inline bool RspBPXAskForBMSAddress::has_bmsip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspBPXAskForBMSAddress::set_has_bmsip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspBPXAskForBMSAddress::clear_has_bmsip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspBPXAskForBMSAddress::clear_bmsip() {
  if (bmsip_ != _default_bmsip_) {
    bmsip_->assign(*_default_bmsip_);
  }
  clear_has_bmsip();
}
inline const ::std::string& RspBPXAskForBMSAddress::bmsip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
  return *bmsip_;
}
inline void RspBPXAskForBMSAddress::set_bmsip(const ::std::string& value) {
  set_has_bmsip();
  if (bmsip_ == _default_bmsip_) {
    bmsip_ = new ::std::string;
  }
  bmsip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
}
inline void RspBPXAskForBMSAddress::set_bmsip(const char* value) {
  set_has_bmsip();
  if (bmsip_ == _default_bmsip_) {
    bmsip_ = new ::std::string;
  }
  bmsip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
}
inline void RspBPXAskForBMSAddress::set_bmsip(const char* value, size_t size) {
  set_has_bmsip();
  if (bmsip_ == _default_bmsip_) {
    bmsip_ = new ::std::string;
  }
  bmsip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
}
inline ::std::string* RspBPXAskForBMSAddress::mutable_bmsip() {
  set_has_bmsip();
  if (bmsip_ == _default_bmsip_) {
    bmsip_ = new ::std::string(*_default_bmsip_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
  return bmsip_;
}
inline ::std::string* RspBPXAskForBMSAddress::release_bmsip() {
  clear_has_bmsip();
  if (bmsip_ == _default_bmsip_) {
    return NULL;
  } else {
    ::std::string* temp = bmsip_;
    bmsip_ = const_cast< ::std::string*>(_default_bmsip_);
    return temp;
  }
}
inline void RspBPXAskForBMSAddress::set_allocated_bmsip(::std::string* bmsip) {
  if (bmsip_ != _default_bmsip_) {
    delete bmsip_;
  }
  if (bmsip) {
    set_has_bmsip();
    bmsip_ = bmsip;
  } else {
    clear_has_bmsip();
    bmsip_ = const_cast< ::std::string*>(_default_bmsip_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspBPXAskForBMSAddress.bmsip)
}

// required int32 bmsport = 2 [default = -1];
inline bool RspBPXAskForBMSAddress::has_bmsport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspBPXAskForBMSAddress::set_has_bmsport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspBPXAskForBMSAddress::clear_has_bmsport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspBPXAskForBMSAddress::clear_bmsport() {
  bmsport_ = -1;
  clear_has_bmsport();
}
inline ::google::protobuf::int32 RspBPXAskForBMSAddress::bmsport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspBPXAskForBMSAddress.bmsport)
  return bmsport_;
}
inline void RspBPXAskForBMSAddress::set_bmsport(::google::protobuf::int32 value) {
  set_has_bmsport();
  bmsport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspBPXAskForBMSAddress.bmsport)
}

// optional string bpxid = 3 [default = "default"];
inline bool RspBPXAskForBMSAddress::has_bpxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspBPXAskForBMSAddress::set_has_bpxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspBPXAskForBMSAddress::clear_has_bpxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspBPXAskForBMSAddress::clear_bpxid() {
  if (bpxid_ != _default_bpxid_) {
    bpxid_->assign(*_default_bpxid_);
  }
  clear_has_bpxid();
}
inline const ::std::string& RspBPXAskForBMSAddress::bpxid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
  return *bpxid_;
}
inline void RspBPXAskForBMSAddress::set_bpxid(const ::std::string& value) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
}
inline void RspBPXAskForBMSAddress::set_bpxid(const char* value) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
}
inline void RspBPXAskForBMSAddress::set_bpxid(const char* value, size_t size) {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
}
inline ::std::string* RspBPXAskForBMSAddress::mutable_bpxid() {
  set_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    bpxid_ = new ::std::string(*_default_bpxid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
  return bpxid_;
}
inline ::std::string* RspBPXAskForBMSAddress::release_bpxid() {
  clear_has_bpxid();
  if (bpxid_ == _default_bpxid_) {
    return NULL;
  } else {
    ::std::string* temp = bpxid_;
    bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
    return temp;
  }
}
inline void RspBPXAskForBMSAddress::set_allocated_bpxid(::std::string* bpxid) {
  if (bpxid_ != _default_bpxid_) {
    delete bpxid_;
  }
  if (bpxid) {
    set_has_bpxid();
    bpxid_ = bpxid;
  } else {
    clear_has_bpxid();
    bpxid_ = const_cast< ::std::string*>(_default_bpxid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspBPXAskForBMSAddress.bpxid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BPXAskForBMSAddress_2eproto__INCLUDED
