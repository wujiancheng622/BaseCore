// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ParamMessageBean.proto

#ifndef PROTOBUF_ParamMessageBean_2eproto__INCLUDED
#define PROTOBUF_ParamMessageBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ParamMessageBean_2eproto();
void protobuf_AssignDesc_ParamMessageBean_2eproto();
void protobuf_ShutdownFile_ParamMessageBean_2eproto();

class ParamMessage;

// ===================================================================

class ParamMessage : public ::google::protobuf::Message {
 public:
  ParamMessage();
  virtual ~ParamMessage();

  ParamMessage(const ParamMessage& from);

  inline ParamMessage& operator=(const ParamMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamMessage& default_instance();

  void Swap(ParamMessage* other);

  // implements Message ----------------------------------------------

  ParamMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamMessage& from);
  void MergeFrom(const ParamMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 model = 1 [default = -1];
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 1;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);

  // optional int32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 code = 3 [default = -1];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bytes content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 srcModule = 5 [default = -1];
  inline bool has_srcmodule() const;
  inline void clear_srcmodule();
  static const int kSrcModuleFieldNumber = 5;
  inline ::google::protobuf::int32 srcmodule() const;
  inline void set_srcmodule(::google::protobuf::int32 value);

  // optional string domain = 6 [default = ""];
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 6;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string sessionId = 7 [default = ""];
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 7;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional string brokerUrl = 8 [default = ""];
  inline bool has_brokerurl() const;
  inline void clear_brokerurl();
  static const int kBrokerUrlFieldNumber = 8;
  inline const ::std::string& brokerurl() const;
  inline void set_brokerurl(const ::std::string& value);
  inline void set_brokerurl(const char* value);
  inline void set_brokerurl(const char* value, size_t size);
  inline ::std::string* mutable_brokerurl();
  inline ::std::string* release_brokerurl();
  inline void set_allocated_brokerurl(::std::string* brokerurl);

  // optional string destUrl = 9 [default = ""];
  inline bool has_desturl() const;
  inline void clear_desturl();
  static const int kDestUrlFieldNumber = 9;
  inline const ::std::string& desturl() const;
  inline void set_desturl(const ::std::string& value);
  inline void set_desturl(const char* value);
  inline void set_desturl(const char* value, size_t size);
  inline ::std::string* mutable_desturl();
  inline ::std::string* release_desturl();
  inline void set_allocated_desturl(::std::string* desturl);

  // optional string rspIp = 10 [default = ""];
  inline bool has_rspip() const;
  inline void clear_rspip();
  static const int kRspIpFieldNumber = 10;
  inline const ::std::string& rspip() const;
  inline void set_rspip(const ::std::string& value);
  inline void set_rspip(const char* value);
  inline void set_rspip(const char* value, size_t size);
  inline ::std::string* mutable_rspip();
  inline ::std::string* release_rspip();
  inline void set_allocated_rspip(::std::string* rspip);

  // optional int32 rspPort = 11 [default = -1];
  inline bool has_rspport() const;
  inline void clear_rspport();
  static const int kRspPortFieldNumber = 11;
  inline ::google::protobuf::int32 rspport() const;
  inline void set_rspport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ParamMessage)
 private:
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_srcmodule();
  inline void clear_has_srcmodule();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_brokerurl();
  inline void clear_has_brokerurl();
  inline void set_has_desturl();
  inline void clear_has_desturl();
  inline void set_has_rspip();
  inline void clear_has_rspip();
  inline void set_has_rspport();
  inline void clear_has_rspport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 model_;
  ::google::protobuf::int32 type_;
  ::std::string* content_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 srcmodule_;
  ::std::string* domain_;
  ::std::string* sessionid_;
  ::std::string* brokerurl_;
  ::std::string* desturl_;
  ::std::string* rspip_;
  ::google::protobuf::int32 rspport_;
  friend void  protobuf_AddDesc_ParamMessageBean_2eproto();
  friend void protobuf_AssignDesc_ParamMessageBean_2eproto();
  friend void protobuf_ShutdownFile_ParamMessageBean_2eproto();

  void InitAsDefaultInstance();
  static ParamMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ParamMessage

// optional int32 model = 1 [default = -1];
inline bool ParamMessage::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamMessage::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamMessage::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamMessage::clear_model() {
  model_ = -1;
  clear_has_model();
}
inline ::google::protobuf::int32 ParamMessage::model() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.model)
  return model_;
}
inline void ParamMessage::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.model)
}

// optional int32 Type = 2 [default = -1];
inline bool ParamMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamMessage::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 ParamMessage::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.Type)
  return type_;
}
inline void ParamMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.Type)
}

// optional int32 code = 3 [default = -1];
inline bool ParamMessage::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamMessage::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamMessage::clear_code() {
  code_ = -1;
  clear_has_code();
}
inline ::google::protobuf::int32 ParamMessage::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.code)
  return code_;
}
inline void ParamMessage::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.code)
}

// optional bytes content = 4 [default = ""];
inline bool ParamMessage::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamMessage::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ParamMessage::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.content)
  return *content_;
}
inline void ParamMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.content)
}
inline void ParamMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.content)
}
inline void ParamMessage::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.content)
}
inline ::std::string* ParamMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.content)
  return content_;
}
inline ::std::string* ParamMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.content)
}

// optional int32 srcModule = 5 [default = -1];
inline bool ParamMessage::has_srcmodule() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamMessage::set_has_srcmodule() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamMessage::clear_has_srcmodule() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamMessage::clear_srcmodule() {
  srcmodule_ = -1;
  clear_has_srcmodule();
}
inline ::google::protobuf::int32 ParamMessage::srcmodule() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.srcModule)
  return srcmodule_;
}
inline void ParamMessage::set_srcmodule(::google::protobuf::int32 value) {
  set_has_srcmodule();
  srcmodule_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.srcModule)
}

// optional string domain = 6 [default = ""];
inline bool ParamMessage::has_domain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamMessage::set_has_domain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamMessage::clear_has_domain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamMessage::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& ParamMessage::domain() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.domain)
  return *domain_;
}
inline void ParamMessage::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.domain)
}
inline void ParamMessage::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.domain)
}
inline void ParamMessage::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.domain)
}
inline ::std::string* ParamMessage::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.domain)
  return domain_;
}
inline ::std::string* ParamMessage::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.domain)
}

// optional string sessionId = 7 [default = ""];
inline bool ParamMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamMessage::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& ParamMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.sessionId)
  return *sessionid_;
}
inline void ParamMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.sessionId)
}
inline void ParamMessage::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.sessionId)
}
inline void ParamMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.sessionId)
}
inline ::std::string* ParamMessage::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.sessionId)
  return sessionid_;
}
inline ::std::string* ParamMessage::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.sessionId)
}

// optional string brokerUrl = 8 [default = ""];
inline bool ParamMessage::has_brokerurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamMessage::set_has_brokerurl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamMessage::clear_has_brokerurl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamMessage::clear_brokerurl() {
  if (brokerurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brokerurl_->clear();
  }
  clear_has_brokerurl();
}
inline const ::std::string& ParamMessage::brokerurl() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.brokerUrl)
  return *brokerurl_;
}
inline void ParamMessage::set_brokerurl(const ::std::string& value) {
  set_has_brokerurl();
  if (brokerurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brokerurl_ = new ::std::string;
  }
  brokerurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.brokerUrl)
}
inline void ParamMessage::set_brokerurl(const char* value) {
  set_has_brokerurl();
  if (brokerurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brokerurl_ = new ::std::string;
  }
  brokerurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.brokerUrl)
}
inline void ParamMessage::set_brokerurl(const char* value, size_t size) {
  set_has_brokerurl();
  if (brokerurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brokerurl_ = new ::std::string;
  }
  brokerurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.brokerUrl)
}
inline ::std::string* ParamMessage::mutable_brokerurl() {
  set_has_brokerurl();
  if (brokerurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brokerurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.brokerUrl)
  return brokerurl_;
}
inline ::std::string* ParamMessage::release_brokerurl() {
  clear_has_brokerurl();
  if (brokerurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brokerurl_;
    brokerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_brokerurl(::std::string* brokerurl) {
  if (brokerurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brokerurl_;
  }
  if (brokerurl) {
    set_has_brokerurl();
    brokerurl_ = brokerurl;
  } else {
    clear_has_brokerurl();
    brokerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.brokerUrl)
}

// optional string destUrl = 9 [default = ""];
inline bool ParamMessage::has_desturl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamMessage::set_has_desturl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamMessage::clear_has_desturl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamMessage::clear_desturl() {
  if (desturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desturl_->clear();
  }
  clear_has_desturl();
}
inline const ::std::string& ParamMessage::desturl() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.destUrl)
  return *desturl_;
}
inline void ParamMessage::set_desturl(const ::std::string& value) {
  set_has_desturl();
  if (desturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desturl_ = new ::std::string;
  }
  desturl_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.destUrl)
}
inline void ParamMessage::set_desturl(const char* value) {
  set_has_desturl();
  if (desturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desturl_ = new ::std::string;
  }
  desturl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.destUrl)
}
inline void ParamMessage::set_desturl(const char* value, size_t size) {
  set_has_desturl();
  if (desturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desturl_ = new ::std::string;
  }
  desturl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.destUrl)
}
inline ::std::string* ParamMessage::mutable_desturl() {
  set_has_desturl();
  if (desturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desturl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.destUrl)
  return desturl_;
}
inline ::std::string* ParamMessage::release_desturl() {
  clear_has_desturl();
  if (desturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desturl_;
    desturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_desturl(::std::string* desturl) {
  if (desturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desturl_;
  }
  if (desturl) {
    set_has_desturl();
    desturl_ = desturl;
  } else {
    clear_has_desturl();
    desturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.destUrl)
}

// optional string rspIp = 10 [default = ""];
inline bool ParamMessage::has_rspip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamMessage::set_has_rspip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamMessage::clear_has_rspip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamMessage::clear_rspip() {
  if (rspip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rspip_->clear();
  }
  clear_has_rspip();
}
inline const ::std::string& ParamMessage::rspip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.rspIp)
  return *rspip_;
}
inline void ParamMessage::set_rspip(const ::std::string& value) {
  set_has_rspip();
  if (rspip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rspip_ = new ::std::string;
  }
  rspip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.rspIp)
}
inline void ParamMessage::set_rspip(const char* value) {
  set_has_rspip();
  if (rspip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rspip_ = new ::std::string;
  }
  rspip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ParamMessage.rspIp)
}
inline void ParamMessage::set_rspip(const char* value, size_t size) {
  set_has_rspip();
  if (rspip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rspip_ = new ::std::string;
  }
  rspip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ParamMessage.rspIp)
}
inline ::std::string* ParamMessage::mutable_rspip() {
  set_has_rspip();
  if (rspip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rspip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ParamMessage.rspIp)
  return rspip_;
}
inline ::std::string* ParamMessage::release_rspip() {
  clear_has_rspip();
  if (rspip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rspip_;
    rspip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamMessage::set_allocated_rspip(::std::string* rspip) {
  if (rspip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rspip_;
  }
  if (rspip) {
    set_has_rspip();
    rspip_ = rspip;
  } else {
    clear_has_rspip();
    rspip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ParamMessage.rspIp)
}

// optional int32 rspPort = 11 [default = -1];
inline bool ParamMessage::has_rspport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParamMessage::set_has_rspport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParamMessage::clear_has_rspport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParamMessage::clear_rspport() {
  rspport_ = -1;
  clear_has_rspport();
}
inline ::google::protobuf::int32 ParamMessage::rspport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ParamMessage.rspPort)
  return rspport_;
}
inline void ParamMessage::set_rspport(::google::protobuf::int32 value) {
  set_has_rspport();
  rspport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ParamMessage.rspPort)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ParamMessageBean_2eproto__INCLUDED
