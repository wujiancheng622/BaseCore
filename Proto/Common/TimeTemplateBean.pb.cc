// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeTemplateBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TimeTemplateBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TimeTemplateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeTemplateData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TimeTemplateBean_2eproto() {
  protobuf_AddDesc_TimeTemplateBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TimeTemplateBean.proto");
  GOOGLE_CHECK(file != NULL);
  TimeTemplateData_descriptor_ = file->message_type(0);
  static const int TimeTemplateData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, isrepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, repeatweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, isrepeatforever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, repeatendtime_),
  };
  TimeTemplateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeTemplateData_descriptor_,
      TimeTemplateData::default_instance_,
      TimeTemplateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTemplateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeTemplateData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TimeTemplateBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeTemplateData_descriptor_, &TimeTemplateData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TimeTemplateBean_2eproto() {
  delete TimeTemplateData::default_instance_;
  delete TimeTemplateData_reflection_;
}

void protobuf_AddDesc_TimeTemplateBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TimeTemplateBean.proto\022\024com.arges.file"
    ".proto\"\245\001\n\020TimeTemplateData\022\024\n\tstartTime"
    "\030\001 \001(\003:\0010\022\022\n\007endTime\030\002 \001(\003:\0010\022\027\n\010isRepea"
    "t\030\003 \001(\010:\005false\022\024\n\nrepeatWeek\030\004 \001(\t:\000\022\036\n\017"
    "isRepeatForever\030\005 \001(\010:\005false\022\030\n\rrepeatEn"
    "dTime\030\006 \001(\003:\0010", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TimeTemplateBean.proto", &protobuf_RegisterTypes);
  TimeTemplateData::default_instance_ = new TimeTemplateData();
  TimeTemplateData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TimeTemplateBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TimeTemplateBean_2eproto {
  StaticDescriptorInitializer_TimeTemplateBean_2eproto() {
    protobuf_AddDesc_TimeTemplateBean_2eproto();
  }
} static_descriptor_initializer_TimeTemplateBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeTemplateData::kStartTimeFieldNumber;
const int TimeTemplateData::kEndTimeFieldNumber;
const int TimeTemplateData::kIsRepeatFieldNumber;
const int TimeTemplateData::kRepeatWeekFieldNumber;
const int TimeTemplateData::kIsRepeatForeverFieldNumber;
const int TimeTemplateData::kRepeatEndTimeFieldNumber;
#endif  // !_MSC_VER

TimeTemplateData::TimeTemplateData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.TimeTemplateData)
}

void TimeTemplateData::InitAsDefaultInstance() {
}

TimeTemplateData::TimeTemplateData(const TimeTemplateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.TimeTemplateData)
}

void TimeTemplateData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  isrepeat_ = false;
  repeatweek_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrepeatforever_ = false;
  repeatendtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeTemplateData::~TimeTemplateData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.TimeTemplateData)
  SharedDtor();
}

void TimeTemplateData::SharedDtor() {
  if (repeatweek_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repeatweek_;
  }
  if (this != default_instance_) {
  }
}

void TimeTemplateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeTemplateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeTemplateData_descriptor_;
}

const TimeTemplateData& TimeTemplateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TimeTemplateBean_2eproto();
  return *default_instance_;
}

TimeTemplateData* TimeTemplateData::default_instance_ = NULL;

TimeTemplateData* TimeTemplateData::New() const {
  return new TimeTemplateData;
}

void TimeTemplateData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeTemplateData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(starttime_, endtime_);
    ZR_(repeatendtime_, isrepeatforever_);
    if (has_repeatweek()) {
      if (repeatweek_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repeatweek_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeTemplateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.TimeTemplateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 startTime = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isRepeat;
        break;
      }

      // optional bool isRepeat = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_isRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrepeat_)));
          set_has_isrepeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_repeatWeek;
        break;
      }

      // optional string repeatWeek = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_repeatWeek:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repeatweek()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->repeatweek().data(), this->repeatweek().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "repeatweek");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isRepeatForever;
        break;
      }

      // optional bool isRepeatForever = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_isRepeatForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrepeatforever_)));
          set_has_isrepeatforever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_repeatEndTime;
        break;
      }

      // optional int64 repeatEndTime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_repeatEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &repeatendtime_)));
          set_has_repeatendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.TimeTemplateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.TimeTemplateData)
  return false;
#undef DO_
}

void TimeTemplateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.TimeTemplateData)
  // optional int64 startTime = 1 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->starttime(), output);
  }

  // optional int64 endTime = 2 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // optional bool isRepeat = 3 [default = false];
  if (has_isrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrepeat(), output);
  }

  // optional string repeatWeek = 4 [default = ""];
  if (has_repeatweek()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeatweek().data(), this->repeatweek().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "repeatweek");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->repeatweek(), output);
  }

  // optional bool isRepeatForever = 5 [default = false];
  if (has_isrepeatforever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrepeatforever(), output);
  }

  // optional int64 repeatEndTime = 6 [default = 0];
  if (has_repeatendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->repeatendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.TimeTemplateData)
}

::google::protobuf::uint8* TimeTemplateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.TimeTemplateData)
  // optional int64 startTime = 1 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->starttime(), target);
  }

  // optional int64 endTime = 2 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // optional bool isRepeat = 3 [default = false];
  if (has_isrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrepeat(), target);
  }

  // optional string repeatWeek = 4 [default = ""];
  if (has_repeatweek()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeatweek().data(), this->repeatweek().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "repeatweek");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->repeatweek(), target);
  }

  // optional bool isRepeatForever = 5 [default = false];
  if (has_isrepeatforever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrepeatforever(), target);
  }

  // optional int64 repeatEndTime = 6 [default = 0];
  if (has_repeatendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->repeatendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.TimeTemplateData)
  return target;
}

int TimeTemplateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 startTime = 1 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 2 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional bool isRepeat = 3 [default = false];
    if (has_isrepeat()) {
      total_size += 1 + 1;
    }

    // optional string repeatWeek = 4 [default = ""];
    if (has_repeatweek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repeatweek());
    }

    // optional bool isRepeatForever = 5 [default = false];
    if (has_isrepeatforever()) {
      total_size += 1 + 1;
    }

    // optional int64 repeatEndTime = 6 [default = 0];
    if (has_repeatendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->repeatendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeTemplateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeTemplateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeTemplateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeTemplateData::MergeFrom(const TimeTemplateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_isrepeat()) {
      set_isrepeat(from.isrepeat());
    }
    if (from.has_repeatweek()) {
      set_repeatweek(from.repeatweek());
    }
    if (from.has_isrepeatforever()) {
      set_isrepeatforever(from.isrepeatforever());
    }
    if (from.has_repeatendtime()) {
      set_repeatendtime(from.repeatendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeTemplateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTemplateData::CopyFrom(const TimeTemplateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTemplateData::IsInitialized() const {

  return true;
}

void TimeTemplateData::Swap(TimeTemplateData* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(isrepeat_, other->isrepeat_);
    std::swap(repeatweek_, other->repeatweek_);
    std::swap(isrepeatforever_, other->isrepeatforever_);
    std::swap(repeatendtime_, other->repeatendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeTemplateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeTemplateData_descriptor_;
  metadata.reflection = TimeTemplateData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
