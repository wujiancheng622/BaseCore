// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HbeaconDataBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HbeaconDataBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* HbeaconData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HbeaconData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wrist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wrist_reflection_ = NULL;
const ::google::protobuf::Descriptor* WristList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WristList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HbeaconDataBean_2eproto() {
  protobuf_AddDesc_HbeaconDataBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HbeaconDataBean.proto");
  GOOGLE_CHECK(file != NULL);
  HbeaconData_descriptor_ = file->message_type(0);
  static const int HbeaconData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HbeaconData, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HbeaconData, wrists_),
  };
  HbeaconData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HbeaconData_descriptor_,
      HbeaconData::default_instance_,
      HbeaconData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HbeaconData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HbeaconData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HbeaconData));
  Wrist_descriptor_ = file->message_type(1);
  static const int Wrist_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, scannermac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, devicemac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, steps_),
  };
  Wrist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wrist_descriptor_,
      Wrist::default_instance_,
      Wrist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wrist));
  WristList_descriptor_ = file->message_type(2);
  static const int WristList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristList, wrist_),
  };
  WristList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WristList_descriptor_,
      WristList::default_instance_,
      WristList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WristList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HbeaconDataBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HbeaconData_descriptor_, &HbeaconData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wrist_descriptor_, &Wrist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WristList_descriptor_, &WristList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HbeaconDataBean_2eproto() {
  delete HbeaconData::default_instance_;
  delete HbeaconData_reflection_;
  delete Wrist::default_instance_;
  delete Wrist_reflection_;
  delete WristList::default_instance_;
  delete WristList_reflection_;
}

void protobuf_AddDesc_HbeaconDataBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025HbeaconDataBean.proto\022\024com.arges.file."
    "proto\"P\n\013HbeaconData\022\024\n\ndeviceCode\030\001 \002(\t"
    ":\000\022+\n\006wrists\030\002 \003(\0132\033.com.arges.file.prot"
    "o.Wrist\"{\n\005Wrist\022\024\n\nscannerMac\030\001 \002(\t:\000\022\023"
    "\n\tdeviceMac\030\002 \002(\t:\000\022\017\n\004time\030\003 \002(\004:\0010\022\017\n\004"
    "rssi\030\004 \002(\005:\0010\022\024\n\nuserStatus\030\005 \002(\t:\000\022\017\n\005s"
    "teps\030\006 \002(\t:\000\"7\n\tWristList\022*\n\005wrist\030\001 \003(\013"
    "2\033.com.arges.file.proto.Wrist", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HbeaconDataBean.proto", &protobuf_RegisterTypes);
  HbeaconData::default_instance_ = new HbeaconData();
  Wrist::default_instance_ = new Wrist();
  WristList::default_instance_ = new WristList();
  HbeaconData::default_instance_->InitAsDefaultInstance();
  Wrist::default_instance_->InitAsDefaultInstance();
  WristList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HbeaconDataBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HbeaconDataBean_2eproto {
  StaticDescriptorInitializer_HbeaconDataBean_2eproto() {
    protobuf_AddDesc_HbeaconDataBean_2eproto();
  }
} static_descriptor_initializer_HbeaconDataBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HbeaconData::kDeviceCodeFieldNumber;
const int HbeaconData::kWristsFieldNumber;
#endif  // !_MSC_VER

HbeaconData::HbeaconData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HbeaconData)
}

void HbeaconData::InitAsDefaultInstance() {
}

HbeaconData::HbeaconData(const HbeaconData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HbeaconData)
}

void HbeaconData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HbeaconData::~HbeaconData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HbeaconData)
  SharedDtor();
}

void HbeaconData::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (this != default_instance_) {
  }
}

void HbeaconData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HbeaconData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HbeaconData_descriptor_;
}

const HbeaconData& HbeaconData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HbeaconDataBean_2eproto();
  return *default_instance_;
}

HbeaconData* HbeaconData::default_instance_ = NULL;

HbeaconData* HbeaconData::New() const {
  return new HbeaconData;
}

void HbeaconData::Clear() {
  if (has_devicecode()) {
    if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      devicecode_->clear();
    }
  }
  wrists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HbeaconData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HbeaconData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string deviceCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wrists;
        break;
      }

      // repeated .com.arges.file.proto.Wrist wrists = 2;
      case 2: {
        if (tag == 18) {
         parse_wrists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wrists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wrists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HbeaconData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HbeaconData)
  return false;
#undef DO_
}

void HbeaconData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HbeaconData)
  // required string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // repeated .com.arges.file.proto.Wrist wrists = 2;
  for (int i = 0; i < this->wrists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wrists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HbeaconData)
}

::google::protobuf::uint8* HbeaconData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HbeaconData)
  // required string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // repeated .com.arges.file.proto.Wrist wrists = 2;
  for (int i = 0; i < this->wrists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wrists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HbeaconData)
  return target;
}

int HbeaconData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string deviceCode = 1 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

  }
  // repeated .com.arges.file.proto.Wrist wrists = 2;
  total_size += 1 * this->wrists_size();
  for (int i = 0; i < this->wrists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wrists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HbeaconData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HbeaconData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HbeaconData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HbeaconData::MergeFrom(const HbeaconData& from) {
  GOOGLE_CHECK_NE(&from, this);
  wrists_.MergeFrom(from.wrists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HbeaconData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HbeaconData::CopyFrom(const HbeaconData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HbeaconData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wrists())) return false;
  return true;
}

void HbeaconData::Swap(HbeaconData* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    wrists_.Swap(&other->wrists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HbeaconData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HbeaconData_descriptor_;
  metadata.reflection = HbeaconData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Wrist::kScannerMacFieldNumber;
const int Wrist::kDeviceMacFieldNumber;
const int Wrist::kTimeFieldNumber;
const int Wrist::kRssiFieldNumber;
const int Wrist::kUserStatusFieldNumber;
const int Wrist::kStepsFieldNumber;
#endif  // !_MSC_VER

Wrist::Wrist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.Wrist)
}

void Wrist::InitAsDefaultInstance() {
}

Wrist::Wrist(const Wrist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.Wrist)
}

void Wrist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scannermac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  rssi_ = 0;
  userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wrist::~Wrist() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.Wrist)
  SharedDtor();
}

void Wrist::SharedDtor() {
  if (scannermac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scannermac_;
  }
  if (devicemac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicemac_;
  }
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userstatus_;
  }
  if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steps_;
  }
  if (this != default_instance_) {
  }
}

void Wrist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wrist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wrist_descriptor_;
}

const Wrist& Wrist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HbeaconDataBean_2eproto();
  return *default_instance_;
}

Wrist* Wrist::default_instance_ = NULL;

Wrist* Wrist::New() const {
  return new Wrist;
}

void Wrist::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_scannermac()) {
      if (scannermac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scannermac_->clear();
      }
    }
    if (has_devicemac()) {
      if (devicemac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicemac_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    rssi_ = 0;
    if (has_userstatus()) {
      if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userstatus_->clear();
      }
    }
    if (has_steps()) {
      if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steps_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wrist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.Wrist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string scannerMac = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scannermac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scannermac().data(), this->scannermac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scannermac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceMac;
        break;
      }

      // required string deviceMac = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_deviceMac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicemac().data(), this->devicemac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicemac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint64 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rssi;
        break;
      }

      // required int32 rssi = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userStatus;
        break;
      }

      // required string userStatus = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_userStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userstatus().data(), this->userstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userstatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_steps;
        break;
      }

      // required string steps = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steps().data(), this->steps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "steps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.Wrist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.Wrist)
  return false;
#undef DO_
}

void Wrist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.Wrist)
  // required string scannerMac = 1 [default = ""];
  if (has_scannermac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scannermac().data(), this->scannermac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scannermac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scannermac(), output);
  }

  // required string deviceMac = 2 [default = ""];
  if (has_devicemac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemac().data(), this->devicemac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicemac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicemac(), output);
  }

  // required uint64 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // required int32 rssi = 4 [default = 0];
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rssi(), output);
  }

  // required string userStatus = 5 [default = ""];
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userstatus().data(), this->userstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userstatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userstatus(), output);
  }

  // required string steps = 6 [default = ""];
  if (has_steps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steps().data(), this->steps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "steps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->steps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.Wrist)
}

::google::protobuf::uint8* Wrist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.Wrist)
  // required string scannerMac = 1 [default = ""];
  if (has_scannermac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scannermac().data(), this->scannermac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scannermac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scannermac(), target);
  }

  // required string deviceMac = 2 [default = ""];
  if (has_devicemac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemac().data(), this->devicemac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicemac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicemac(), target);
  }

  // required uint64 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // required int32 rssi = 4 [default = 0];
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rssi(), target);
  }

  // required string userStatus = 5 [default = ""];
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userstatus().data(), this->userstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userstatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userstatus(), target);
  }

  // required string steps = 6 [default = ""];
  if (has_steps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steps().data(), this->steps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "steps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->steps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.Wrist)
  return target;
}

int Wrist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string scannerMac = 1 [default = ""];
    if (has_scannermac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scannermac());
    }

    // required string deviceMac = 2 [default = ""];
    if (has_devicemac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemac());
    }

    // required uint64 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required int32 rssi = 4 [default = 0];
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }

    // required string userStatus = 5 [default = ""];
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userstatus());
    }

    // required string steps = 6 [default = ""];
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wrist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wrist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wrist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wrist::MergeFrom(const Wrist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scannermac()) {
      set_scannermac(from.scannermac());
    }
    if (from.has_devicemac()) {
      set_devicemac(from.devicemac());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wrist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrist::CopyFrom(const Wrist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrist::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Wrist::Swap(Wrist* other) {
  if (other != this) {
    std::swap(scannermac_, other->scannermac_);
    std::swap(devicemac_, other->devicemac_);
    std::swap(time_, other->time_);
    std::swap(rssi_, other->rssi_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(steps_, other->steps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wrist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wrist_descriptor_;
  metadata.reflection = Wrist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WristList::kWristFieldNumber;
#endif  // !_MSC_VER

WristList::WristList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WristList)
}

void WristList::InitAsDefaultInstance() {
}

WristList::WristList(const WristList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WristList)
}

void WristList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WristList::~WristList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WristList)
  SharedDtor();
}

void WristList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WristList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WristList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WristList_descriptor_;
}

const WristList& WristList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HbeaconDataBean_2eproto();
  return *default_instance_;
}

WristList* WristList::default_instance_ = NULL;

WristList* WristList::New() const {
  return new WristList;
}

void WristList::Clear() {
  wrist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WristList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WristList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.Wrist wrist = 1;
      case 1: {
        if (tag == 10) {
         parse_wrist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wrist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_wrist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WristList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WristList)
  return false;
#undef DO_
}

void WristList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WristList)
  // repeated .com.arges.file.proto.Wrist wrist = 1;
  for (int i = 0; i < this->wrist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wrist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WristList)
}

::google::protobuf::uint8* WristList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WristList)
  // repeated .com.arges.file.proto.Wrist wrist = 1;
  for (int i = 0; i < this->wrist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wrist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WristList)
  return target;
}

int WristList::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.Wrist wrist = 1;
  total_size += 1 * this->wrist_size();
  for (int i = 0; i < this->wrist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wrist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WristList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WristList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WristList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WristList::MergeFrom(const WristList& from) {
  GOOGLE_CHECK_NE(&from, this);
  wrist_.MergeFrom(from.wrist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WristList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WristList::CopyFrom(const WristList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WristList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->wrist())) return false;
  return true;
}

void WristList::Swap(WristList* other) {
  if (other != this) {
    wrist_.Swap(&other->wrist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WristList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WristList_descriptor_;
  metadata.reflection = WristList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
