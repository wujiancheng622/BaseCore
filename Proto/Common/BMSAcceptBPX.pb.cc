// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSAcceptBPX.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BMSAcceptBPX.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace bmsbpx {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BMSAcceptBPX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BMSAcceptBPX_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BMSAcceptBPX_2eproto() {
  protobuf_AddDesc_BMSAcceptBPX_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BMSAcceptBPX.proto");
  GOOGLE_CHECK(file != NULL);
  BMSAcceptBPX_descriptor_ = file->message_type(0);
  static const int BMSAcceptBPX_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSAcceptBPX, hhandle_),
  };
  BMSAcceptBPX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BMSAcceptBPX_descriptor_,
      BMSAcceptBPX::default_instance_,
      BMSAcceptBPX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSAcceptBPX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSAcceptBPX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BMSAcceptBPX));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BMSAcceptBPX_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BMSAcceptBPX_descriptor_, &BMSAcceptBPX::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BMSAcceptBPX_2eproto() {
  delete BMSAcceptBPX::default_instance_;
  delete BMSAcceptBPX_reflection_;
}

void protobuf_AddDesc_BMSAcceptBPX_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BMSAcceptBPX.proto\022\026com.arges.bmsbpx.p"
    "roto\"\037\n\014BMSAcceptBPX\022\017\n\007hHandle\030) \002(\003", 77);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BMSAcceptBPX.proto", &protobuf_RegisterTypes);
  BMSAcceptBPX::default_instance_ = new BMSAcceptBPX();
  BMSAcceptBPX::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BMSAcceptBPX_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BMSAcceptBPX_2eproto {
  StaticDescriptorInitializer_BMSAcceptBPX_2eproto() {
    protobuf_AddDesc_BMSAcceptBPX_2eproto();
  }
} static_descriptor_initializer_BMSAcceptBPX_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BMSAcceptBPX::kHHandleFieldNumber;
#endif  // !_MSC_VER

BMSAcceptBPX::BMSAcceptBPX()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.bmsbpx.proto.BMSAcceptBPX)
}

void BMSAcceptBPX::InitAsDefaultInstance() {
}

BMSAcceptBPX::BMSAcceptBPX(const BMSAcceptBPX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.bmsbpx.proto.BMSAcceptBPX)
}

void BMSAcceptBPX::SharedCtor() {
  _cached_size_ = 0;
  hhandle_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BMSAcceptBPX::~BMSAcceptBPX() {
  // @@protoc_insertion_point(destructor:com.arges.bmsbpx.proto.BMSAcceptBPX)
  SharedDtor();
}

void BMSAcceptBPX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BMSAcceptBPX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BMSAcceptBPX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BMSAcceptBPX_descriptor_;
}

const BMSAcceptBPX& BMSAcceptBPX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSAcceptBPX_2eproto();
  return *default_instance_;
}

BMSAcceptBPX* BMSAcceptBPX::default_instance_ = NULL;

BMSAcceptBPX* BMSAcceptBPX::New() const {
  return new BMSAcceptBPX;
}

void BMSAcceptBPX::Clear() {
  hhandle_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BMSAcceptBPX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.bmsbpx.proto.BMSAcceptBPX)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hHandle = 41;
      case 41: {
        if (tag == 328) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hhandle_)));
          set_has_hhandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.bmsbpx.proto.BMSAcceptBPX)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.bmsbpx.proto.BMSAcceptBPX)
  return false;
#undef DO_
}

void BMSAcceptBPX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.bmsbpx.proto.BMSAcceptBPX)
  // required int64 hHandle = 41;
  if (has_hhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->hhandle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.bmsbpx.proto.BMSAcceptBPX)
}

::google::protobuf::uint8* BMSAcceptBPX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.bmsbpx.proto.BMSAcceptBPX)
  // required int64 hHandle = 41;
  if (has_hhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->hhandle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.bmsbpx.proto.BMSAcceptBPX)
  return target;
}

int BMSAcceptBPX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 hHandle = 41;
    if (has_hhandle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hhandle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BMSAcceptBPX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BMSAcceptBPX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BMSAcceptBPX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BMSAcceptBPX::MergeFrom(const BMSAcceptBPX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hhandle()) {
      set_hhandle(from.hhandle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BMSAcceptBPX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMSAcceptBPX::CopyFrom(const BMSAcceptBPX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMSAcceptBPX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BMSAcceptBPX::Swap(BMSAcceptBPX* other) {
  if (other != this) {
    std::swap(hhandle_, other->hhandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BMSAcceptBPX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BMSAcceptBPX_descriptor_;
  metadata.reflection = BMSAcceptBPX_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bmsbpx
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
