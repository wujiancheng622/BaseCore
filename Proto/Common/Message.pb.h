// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class HeartReq;
class HeartRsp;

enum MODULETYPE {
  GATE = 0,
  GATE_CLIENT = 1
};
bool MODULETYPE_IsValid(int value);
const MODULETYPE MODULETYPE_MIN = GATE;
const MODULETYPE MODULETYPE_MAX = GATE_CLIENT;
const int MODULETYPE_ARRAYSIZE = MODULETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MODULETYPE_descriptor();
inline const ::std::string& MODULETYPE_Name(MODULETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MODULETYPE_descriptor(), value);
}
inline bool MODULETYPE_Parse(
    const ::std::string& name, MODULETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MODULETYPE>(
    MODULETYPE_descriptor(), name, value);
}
enum DATATYPE {
  REQ_HEART = 0,
  RSP_HEART = 1,
  VERIFYINFOREPORT = 2,
  BLACKWHITEDATA = 3,
  QUERYBLACKWHITE = 4,
  RSSI_THRESHOLD = 5
};
bool DATATYPE_IsValid(int value);
const DATATYPE DATATYPE_MIN = REQ_HEART;
const DATATYPE DATATYPE_MAX = RSSI_THRESHOLD;
const int DATATYPE_ARRAYSIZE = DATATYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATATYPE_descriptor();
inline const ::std::string& DATATYPE_Name(DATATYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATATYPE_descriptor(), value);
}
inline bool DATATYPE_Parse(
    const ::std::string& name, DATATYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATATYPE>(
    DATATYPE_descriptor(), name, value);
}
// ===================================================================

class HeartReq : public ::google::protobuf::Message {
 public:
  HeartReq();
  virtual ~HeartReq();

  HeartReq(const HeartReq& from);

  inline HeartReq& operator=(const HeartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartReq& default_instance();

  void Swap(HeartReq* other);

  // implements Message ----------------------------------------------

  HeartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartReq& from);
  void MergeFrom(const HeartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userdata = 1 [default = "default"];
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 1;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const char* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HeartReq)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_userdata_;
  ::std::string* userdata_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static HeartReq* default_instance_;
};
// -------------------------------------------------------------------

class HeartRsp : public ::google::protobuf::Message {
 public:
  HeartRsp();
  virtual ~HeartRsp();

  HeartRsp(const HeartRsp& from);

  inline HeartRsp& operator=(const HeartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartRsp& default_instance();

  void Swap(HeartRsp* other);

  // implements Message ----------------------------------------------

  HeartRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartRsp& from);
  void MergeFrom(const HeartRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userdata = 1 [default = "default"];
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 1;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const char* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HeartRsp)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_userdata_;
  ::std::string* userdata_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static HeartRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// HeartReq

// optional string userdata = 1 [default = "default"];
inline bool HeartReq::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartReq::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartReq::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartReq::clear_userdata() {
  if (userdata_ != _default_userdata_) {
    userdata_->assign(*_default_userdata_);
  }
  clear_has_userdata();
}
inline const ::std::string& HeartReq::userdata() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HeartReq.userdata)
  return *userdata_;
}
inline void HeartReq::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HeartReq.userdata)
}
inline void HeartReq::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HeartReq.userdata)
}
inline void HeartReq::set_userdata(const char* value, size_t size) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HeartReq.userdata)
}
inline ::std::string* HeartReq::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string(*_default_userdata_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HeartReq.userdata)
  return userdata_;
}
inline ::std::string* HeartReq::release_userdata() {
  clear_has_userdata();
  if (userdata_ == _default_userdata_) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(_default_userdata_);
    return temp;
  }
}
inline void HeartReq::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != _default_userdata_) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(_default_userdata_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HeartReq.userdata)
}

// -------------------------------------------------------------------

// HeartRsp

// optional string userdata = 1 [default = "default"];
inline bool HeartRsp::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartRsp::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartRsp::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartRsp::clear_userdata() {
  if (userdata_ != _default_userdata_) {
    userdata_->assign(*_default_userdata_);
  }
  clear_has_userdata();
}
inline const ::std::string& HeartRsp::userdata() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HeartRsp.userdata)
  return *userdata_;
}
inline void HeartRsp::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HeartRsp.userdata)
}
inline void HeartRsp::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HeartRsp.userdata)
}
inline void HeartRsp::set_userdata(const char* value, size_t size) {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HeartRsp.userdata)
}
inline ::std::string* HeartRsp::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == _default_userdata_) {
    userdata_ = new ::std::string(*_default_userdata_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HeartRsp.userdata)
  return userdata_;
}
inline ::std::string* HeartRsp::release_userdata() {
  clear_has_userdata();
  if (userdata_ == _default_userdata_) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(_default_userdata_);
    return temp;
  }
}
inline void HeartRsp::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != _default_userdata_) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(_default_userdata_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HeartRsp.userdata)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::MODULETYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::MODULETYPE>() {
  return ::com::arges::file::proto::MODULETYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::DATATYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::DATATYPE>() {
  return ::com::arges::file::proto::DATATYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
