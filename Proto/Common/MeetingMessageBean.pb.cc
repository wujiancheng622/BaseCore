// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeetingMessageBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MeetingMessageBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* HostMapOrgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostMapOrgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingMessage_WelcomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingMessage_WelcomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingMessage_vipShowTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingMessage_vipShowTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingMessage_Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingMessage_Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConnectOfMedia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConnectOfMedia_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllMeetingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMeetingMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportStatOfMeetingShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportStatOfMeetingShow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TYPE_OF_SIGN_IN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SUBTITLE_TYPE_FOR_SHOW_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DO_TYPE_OF_MEETING_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_MEETING_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_MEETING_SHOW_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MeetingMessageBean_2eproto() {
  protobuf_AddDesc_MeetingMessageBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MeetingMessageBean.proto");
  GOOGLE_CHECK(file != NULL);
  HostMapOrgData_descriptor_ = file->message_type(0);
  static const int HostMapOrgData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostMapOrgData, orgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostMapOrgData, loginname_),
  };
  HostMapOrgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostMapOrgData_descriptor_,
      HostMapOrgData::default_instance_,
      HostMapOrgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostMapOrgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostMapOrgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostMapOrgData));
  MeetingMessage_descriptor_ = file->message_type(1);
  static const int MeetingMessage_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, meetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, meettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, collectdevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, encoderchanner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, bboxcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, showmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, backgroundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, orgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, welcominfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, vipshowtimelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, meetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, hostorgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, notices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, wristuser_),
  };
  MeetingMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingMessage_descriptor_,
      MeetingMessage::default_instance_,
      MeetingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingMessage));
  MeetingMessage_WelcomInfo_descriptor_ = MeetingMessage_descriptor_->nested_type(0);
  static const int MeetingMessage_WelcomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_WelcomInfo, welcomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_WelcomInfo, welcompre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_WelcomInfo, welcompost_),
  };
  MeetingMessage_WelcomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingMessage_WelcomInfo_descriptor_,
      MeetingMessage_WelcomInfo::default_instance_,
      MeetingMessage_WelcomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_WelcomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_WelcomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingMessage_WelcomInfo));
  MeetingMessage_vipShowTime_descriptor_ = MeetingMessage_descriptor_->nested_type(1);
  static const int MeetingMessage_vipShowTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_vipShowTime, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_vipShowTime, time_),
  };
  MeetingMessage_vipShowTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingMessage_vipShowTime_descriptor_,
      MeetingMessage_vipShowTime::default_instance_,
      MeetingMessage_vipShowTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_vipShowTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_vipShowTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingMessage_vipShowTime));
  MeetingMessage_Notice_descriptor_ = MeetingMessage_descriptor_->nested_type(2);
  static const int MeetingMessage_Notice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, week_),
  };
  MeetingMessage_Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingMessage_Notice_descriptor_,
      MeetingMessage_Notice::default_instance_,
      MeetingMessage_Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingMessage_Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingMessage_Notice));
  RspConnectOfMedia_descriptor_ = file->message_type(2);
  static const int RspConnectOfMedia_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, port_),
  };
  RspConnectOfMedia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConnectOfMedia_descriptor_,
      RspConnectOfMedia::default_instance_,
      RspConnectOfMedia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConnectOfMedia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConnectOfMedia));
  MeetingData_descriptor_ = file->message_type(3);
  static const int MeetingData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, devofsignin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, meetingmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, connofsignin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, connofmedia_),
  };
  MeetingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingData_descriptor_,
      MeetingData::default_instance_,
      MeetingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingData));
  AllMeetingMessage_descriptor_ = file->message_type(4);
  static const int AllMeetingMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, meetings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, boxcode_),
  };
  AllMeetingMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMeetingMessage_descriptor_,
      AllMeetingMessage::default_instance_,
      AllMeetingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMeetingMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMeetingMessage));
  ReportStatOfMeetingShow_descriptor_ = file->message_type(5);
  static const int ReportStatOfMeetingShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatOfMeetingShow, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatOfMeetingShow, meetingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatOfMeetingShow, stat_),
  };
  ReportStatOfMeetingShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportStatOfMeetingShow_descriptor_,
      ReportStatOfMeetingShow::default_instance_,
      ReportStatOfMeetingShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatOfMeetingShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatOfMeetingShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportStatOfMeetingShow));
  TYPE_OF_SIGN_IN_descriptor_ = file->enum_type(0);
  SUBTITLE_TYPE_FOR_SHOW_descriptor_ = file->enum_type(1);
  CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor_ = file->enum_type(2);
  DO_TYPE_OF_MEETING_descriptor_ = file->enum_type(3);
  RESULT_TYPE_OF_MEETING_descriptor_ = file->enum_type(4);
  STAT_TYPE_OF_MEETING_SHOW_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MeetingMessageBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostMapOrgData_descriptor_, &HostMapOrgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingMessage_descriptor_, &MeetingMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingMessage_WelcomInfo_descriptor_, &MeetingMessage_WelcomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingMessage_vipShowTime_descriptor_, &MeetingMessage_vipShowTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingMessage_Notice_descriptor_, &MeetingMessage_Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConnectOfMedia_descriptor_, &RspConnectOfMedia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingData_descriptor_, &MeetingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMeetingMessage_descriptor_, &AllMeetingMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportStatOfMeetingShow_descriptor_, &ReportStatOfMeetingShow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MeetingMessageBean_2eproto() {
  delete HostMapOrgData::default_instance_;
  delete HostMapOrgData_reflection_;
  delete MeetingMessage::default_instance_;
  delete MeetingMessage_reflection_;
  delete MeetingMessage_WelcomInfo::default_instance_;
  delete MeetingMessage_WelcomInfo_reflection_;
  delete MeetingMessage_vipShowTime::default_instance_;
  delete MeetingMessage_vipShowTime_reflection_;
  delete MeetingMessage_Notice::default_instance_;
  delete MeetingMessage_Notice_reflection_;
  delete RspConnectOfMedia::default_instance_;
  delete RspConnectOfMedia_reflection_;
  delete MeetingData::default_instance_;
  delete MeetingData_reflection_;
  delete AllMeetingMessage::default_instance_;
  delete AllMeetingMessage_reflection_;
  delete ReportStatOfMeetingShow::default_instance_;
  delete ReportStatOfMeetingShow_reflection_;
}

void protobuf_AddDesc_MeetingMessageBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::com::arges::file::proto::protobuf_AddDesc_SignInDataBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030MeetingMessageBean.proto\022\024com.arges.fi"
    "le.proto\032\025DevInfoListBean.proto\032\024SignInD"
    "ataBean.proto\"6\n\016HostMapOrgData\022\021\n\007orgCo"
    "de\030\001 \001(\t:\000\022\021\n\tloginName\030\002 \003(\t\"\345\007\n\016Meetin"
    "gMessage\022\022\n\010meetName\030\001 \001(\t:\000\022\024\n\010meetType"
    "\030\002 \001(\005:\002-1\022\024\n\tstartTime\030\003 \001(\004:\0010\022\022\n\007endT"
    "ime\030\004 \001(\004:\0010\022\024\n\ndeviceCode\030\005 \001(\t:\000\022\027\n\rco"
    "llectDevice\030\006 \001(\t:\000\022\030\n\016encoderChanner\030\007 "
    "\001(\t:\000\022\017\n\004rssi\030\010 \001(\005:\0010\022\022\n\010bBoxCode\030\t \001(\t"
    ":\000\022\022\n\010noticeId\030\n \001(\t:\000\022\026\n\nshowModule\030\013 \001"
    "(\005:\002-1\022\030\n\014backgroundId\030\014 \001(\005:\002-1\022\014\n\002ip\030\r"
    " \001(\t:\000\022\017\n\004port\030\016 \001(\005:\0010\022\021\n\007orgCode\030\017 \001(\t"
    ":\000\022G\n\016welcomInfoList\030\020 \003(\0132/.com.arges.f"
    "ile.proto.MeetingMessage.WelcomInfo\022I\n\017v"
    "ipShowTimeList\030\021 \003(\01320.com.arges.file.pr"
    "oto.MeetingMessage.vipShowTime\022\020\n\006meetId"
    "\030\022 \001(\t:\000\0226\n\010hostOrgs\030\023 \003(\0132$.com.arges.f"
    "ile.proto.HostMapOrgData\022<\n\007notices\030\024 \003("
    "\0132+.com.arges.file.proto.MeetingMessage."
    "Notice\022\017\n\004stat\030\025 \001(\005:\0010\0226\n\twristUser\030\026 \003"
    "(\0132#.com.arges.file.proto.WristUserName\032"
    "O\n\nWelcomInfo\022\026\n\nwelcomType\030\001 \001(\005:\002-1\022\023\n"
    "\twelcomPre\030\002 \001(\t:\000\022\024\n\nwelcomPost\030\003 \001(\t:\000"
    "\0325\n\013vipShowTime\022\024\n\010vipLevel\030\001 \001(\005:\002-1\022\020\n"
    "\004time\030\002 \001(\005:\002-1\032\253\001\n\006Notice\022\016\n\002id\030\001 \001(\003:\002"
    "-1\022\021\n\007content\030\002 \001(\t:\000\022\017\n\005devId\030\003 \001(\t:\000\022\022"
    "\n\007endDate\030\004 \001(\003:\0010\022\021\n\007keyWord\030\005 \001(\t:\000\022\024\n"
    "\tstartDate\030\006 \001(\003:\0010\022\016\n\004type\030\007 \001(\t:\000\022\020\n\006u"
    "serId\030\010 \001(\t:\000\022\016\n\004week\030\t \001(\t:\000\"S\n\021RspConn"
    "ectOfMedia\022\016\n\004code\030\001 \001(\t:\000\022\017\n\005token\030\002 \001("
    "\t:\000\022\014\n\002ip\030\003 \001(\t:\000\022\017\n\004port\030\004 \001(\005:\0010\"\324\002\n\013M"
    "eetingData\022\020\n\004type\030\001 \001(\005:\002-1\022\016\n\006result\030\002"
    " \001(\005\0221\n\007devInfo\030\003 \001(\0132 .com.arges.file.p"
    "roto.DeviceInfo\0225\n\013devOfSignIn\030\004 \003(\0132 .c"
    "om.arges.file.proto.DeviceInfo\022<\n\016meetin"
    "gMessage\030\005 \001(\0132$.com.arges.file.proto.Me"
    "etingMessage\022=\n\014connOfSignIn\030\006 \001(\0132\'.com"
    ".arges.file.proto.RspConnectOfMedia\022<\n\013c"
    "onnOfMedia\030\007 \003(\0132\'.com.arges.file.proto."
    "RspConnectOfMedia\"\231\001\n\021AllMeetingMessage\022"
    "\020\n\004type\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1\022\030\n"
    "\016resultDescribe\030\003 \001(\014:\000\0223\n\010meetings\030\004 \003("
    "\0132!.com.arges.file.proto.MeetingData\022\017\n\007"
    "boxCode\030\005 \001(\t\"U\n\027ReportStatOfMeetingShow"
    "\022\021\n\007devCode\030\001 \001(\t:\000\022\025\n\013meetingName\030\002 \001(\t"
    ":\000\022\020\n\004stat\030\003 \001(\005:\002-1*u\n\017TYPE_OF_SIGN_IN\022"
    "!\n\035SIGN_IN_TYPE_IS_THE_WHOLE_DAY\020\001\022\037\n\033SI"
    "GN_IN_TYPE_IS_SELF_DEFILE\020\002\022\036\n\032SIGN_IN_T"
    "YPE_IS_ATTENDANCE\020\003*p\n\026SUBTITLE_TYPE_FOR"
    "_SHOW\022\036\n\032SUBTITLE_TYPE_OF_REAL_TIME\020\001\022\034\n"
    "\030SUBTITLE_TYPE_OF_HISTORY\020\002\022\030\n\024SUBTITLE_"
    "TYPE_OF_VIP\020\003*t\n!CONFIG_TYPE_OF_MEETING_"
    "FOR_SYSTEM\022#\n\037MEETING_CONFIG_TYPE_FOR_HO"
    "T_MAP\020\001\022*\n&MEETING_CONFIG_TYPE_FOR_ELECT"
    "RONIC_MAP\020\002*\355\001\n\022DO_TYPE_OF_MEETING\022\017\n\013ME"
    "ETING_ADD\020\001\022\022\n\016MEETING_UPDATE\020\002\022\022\n\016MEETI"
    "NG_DELETE\020\003\022\027\n\023MEETING_QUERY_BY_ID\020\004\022\031\n\025"
    "MEETING_GET_DEV_BY_ID\020\005\022\023\n\017MEETING_GET_A"
    "LL\020\006\022\020\n\014MEETING_STOP\020\007\022\021\n\rMEETING_START\020"
    "\010\022\023\n\017MEETING_RESTART\020\t\022\033\n\027MEETING_GET_BY"
    "_BOX_CODE\020\n*\255\001\n\026RESULT_TYPE_OF_MEETING\022\027"
    "\n\023MEETING_QUERY_IS_OK\020\001\022\027\n\023MEETING_SET_I"
    "S_NULL\020\002\022 \n\034MEETING_SUBTITLE_SET_IS_NULL"
    "\020\003\022%\n!MEETING_SYSTEM_CONFIG_SET_IS_NULL\020"
    "\004\022\030\n\024MEETING_DEVICE_IS_OK\020\005*k\n\031STAT_TYPE"
    "_OF_MEETING_SHOW\022\031\n\025MEETING_SHOW_IS_USIN"
    "G\020\001\022\030\n\024MEETING_SHOW_IS_STOP\020\002\022\031\n\025MEETING"
    "_SHOW_IS_CLOSE\020\003", 2696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MeetingMessageBean.proto", &protobuf_RegisterTypes);
  HostMapOrgData::default_instance_ = new HostMapOrgData();
  MeetingMessage::default_instance_ = new MeetingMessage();
  MeetingMessage_WelcomInfo::default_instance_ = new MeetingMessage_WelcomInfo();
  MeetingMessage_vipShowTime::default_instance_ = new MeetingMessage_vipShowTime();
  MeetingMessage_Notice::default_instance_ = new MeetingMessage_Notice();
  RspConnectOfMedia::default_instance_ = new RspConnectOfMedia();
  MeetingData::default_instance_ = new MeetingData();
  AllMeetingMessage::default_instance_ = new AllMeetingMessage();
  ReportStatOfMeetingShow::default_instance_ = new ReportStatOfMeetingShow();
  HostMapOrgData::default_instance_->InitAsDefaultInstance();
  MeetingMessage::default_instance_->InitAsDefaultInstance();
  MeetingMessage_WelcomInfo::default_instance_->InitAsDefaultInstance();
  MeetingMessage_vipShowTime::default_instance_->InitAsDefaultInstance();
  MeetingMessage_Notice::default_instance_->InitAsDefaultInstance();
  RspConnectOfMedia::default_instance_->InitAsDefaultInstance();
  MeetingData::default_instance_->InitAsDefaultInstance();
  AllMeetingMessage::default_instance_->InitAsDefaultInstance();
  ReportStatOfMeetingShow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MeetingMessageBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MeetingMessageBean_2eproto {
  StaticDescriptorInitializer_MeetingMessageBean_2eproto() {
    protobuf_AddDesc_MeetingMessageBean_2eproto();
  }
} static_descriptor_initializer_MeetingMessageBean_2eproto_;
const ::google::protobuf::EnumDescriptor* TYPE_OF_SIGN_IN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TYPE_OF_SIGN_IN_descriptor_;
}
bool TYPE_OF_SIGN_IN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SUBTITLE_TYPE_FOR_SHOW_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBTITLE_TYPE_FOR_SHOW_descriptor_;
}
bool SUBTITLE_TYPE_FOR_SHOW_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_descriptor_;
}
bool CONFIG_TYPE_OF_MEETING_FOR_SYSTEM_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DO_TYPE_OF_MEETING_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DO_TYPE_OF_MEETING_descriptor_;
}
bool DO_TYPE_OF_MEETING_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_MEETING_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_MEETING_descriptor_;
}
bool RESULT_TYPE_OF_MEETING_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_MEETING_SHOW_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STAT_TYPE_OF_MEETING_SHOW_descriptor_;
}
bool STAT_TYPE_OF_MEETING_SHOW_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HostMapOrgData::kOrgCodeFieldNumber;
const int HostMapOrgData::kLoginNameFieldNumber;
#endif  // !_MSC_VER

HostMapOrgData::HostMapOrgData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HostMapOrgData)
}

void HostMapOrgData::InitAsDefaultInstance() {
}

HostMapOrgData::HostMapOrgData(const HostMapOrgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HostMapOrgData)
}

void HostMapOrgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostMapOrgData::~HostMapOrgData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HostMapOrgData)
  SharedDtor();
}

void HostMapOrgData::SharedDtor() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (this != default_instance_) {
  }
}

void HostMapOrgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostMapOrgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostMapOrgData_descriptor_;
}

const HostMapOrgData& HostMapOrgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

HostMapOrgData* HostMapOrgData::default_instance_ = NULL;

HostMapOrgData* HostMapOrgData::New() const {
  return new HostMapOrgData;
}

void HostMapOrgData::Clear() {
  if (has_orgcode()) {
    if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      orgcode_->clear();
    }
  }
  loginname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostMapOrgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HostMapOrgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orgCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgcode().data(), this->orgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginName;
        break;
      }

      // repeated string loginName = 2;
      case 2: {
        if (tag == 18) {
         parse_loginName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_loginname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginname(this->loginname_size() - 1).data(),
            this->loginname(this->loginname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HostMapOrgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HostMapOrgData)
  return false;
#undef DO_
}

void HostMapOrgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HostMapOrgData)
  // optional string orgCode = 1 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orgcode(), output);
  }

  // repeated string loginName = 2;
  for (int i = 0; i < this->loginname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->loginname(i).data(), this->loginname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "loginname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loginname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HostMapOrgData)
}

::google::protobuf::uint8* HostMapOrgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HostMapOrgData)
  // optional string orgCode = 1 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orgcode(), target);
  }

  // repeated string loginName = 2;
  for (int i = 0; i < this->loginname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname(i).data(), this->loginname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->loginname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HostMapOrgData)
  return target;
}

int HostMapOrgData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orgCode = 1 [default = ""];
    if (has_orgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgcode());
    }

  }
  // repeated string loginName = 2;
  total_size += 1 * this->loginname_size();
  for (int i = 0; i < this->loginname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->loginname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostMapOrgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostMapOrgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostMapOrgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostMapOrgData::MergeFrom(const HostMapOrgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginname_.MergeFrom(from.loginname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgcode()) {
      set_orgcode(from.orgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostMapOrgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostMapOrgData::CopyFrom(const HostMapOrgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostMapOrgData::IsInitialized() const {

  return true;
}

void HostMapOrgData::Swap(HostMapOrgData* other) {
  if (other != this) {
    std::swap(orgcode_, other->orgcode_);
    loginname_.Swap(&other->loginname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostMapOrgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostMapOrgData_descriptor_;
  metadata.reflection = HostMapOrgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeetingMessage_WelcomInfo::kWelcomTypeFieldNumber;
const int MeetingMessage_WelcomInfo::kWelcomPreFieldNumber;
const int MeetingMessage_WelcomInfo::kWelcomPostFieldNumber;
#endif  // !_MSC_VER

MeetingMessage_WelcomInfo::MeetingMessage_WelcomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.MeetingMessage.WelcomInfo)
}

void MeetingMessage_WelcomInfo::InitAsDefaultInstance() {
}

MeetingMessage_WelcomInfo::MeetingMessage_WelcomInfo(const MeetingMessage_WelcomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.MeetingMessage.WelcomInfo)
}

void MeetingMessage_WelcomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  welcomtype_ = -1;
  welcompre_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  welcompost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingMessage_WelcomInfo::~MeetingMessage_WelcomInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.MeetingMessage.WelcomInfo)
  SharedDtor();
}

void MeetingMessage_WelcomInfo::SharedDtor() {
  if (welcompre_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcompre_;
  }
  if (welcompost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcompost_;
  }
  if (this != default_instance_) {
  }
}

void MeetingMessage_WelcomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingMessage_WelcomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingMessage_WelcomInfo_descriptor_;
}

const MeetingMessage_WelcomInfo& MeetingMessage_WelcomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

MeetingMessage_WelcomInfo* MeetingMessage_WelcomInfo::default_instance_ = NULL;

MeetingMessage_WelcomInfo* MeetingMessage_WelcomInfo::New() const {
  return new MeetingMessage_WelcomInfo;
}

void MeetingMessage_WelcomInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    welcomtype_ = -1;
    if (has_welcompre()) {
      if (welcompre_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        welcompre_->clear();
      }
    }
    if (has_welcompost()) {
      if (welcompost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        welcompost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingMessage_WelcomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.MeetingMessage.WelcomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 welcomType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &welcomtype_)));
          set_has_welcomtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welcomPre;
        break;
      }

      // optional string welcomPre = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_welcomPre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcompre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcompre().data(), this->welcompre().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "welcompre");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_welcomPost;
        break;
      }

      // optional string welcomPost = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_welcomPost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcompost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcompost().data(), this->welcompost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "welcompost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.MeetingMessage.WelcomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.MeetingMessage.WelcomInfo)
  return false;
#undef DO_
}

void MeetingMessage_WelcomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.MeetingMessage.WelcomInfo)
  // optional int32 welcomType = 1 [default = -1];
  if (has_welcomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->welcomtype(), output);
  }

  // optional string welcomPre = 2 [default = ""];
  if (has_welcompre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcompre().data(), this->welcompre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcompre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->welcompre(), output);
  }

  // optional string welcomPost = 3 [default = ""];
  if (has_welcompost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcompost().data(), this->welcompost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcompost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->welcompost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.MeetingMessage.WelcomInfo)
}

::google::protobuf::uint8* MeetingMessage_WelcomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.MeetingMessage.WelcomInfo)
  // optional int32 welcomType = 1 [default = -1];
  if (has_welcomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->welcomtype(), target);
  }

  // optional string welcomPre = 2 [default = ""];
  if (has_welcompre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcompre().data(), this->welcompre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcompre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->welcompre(), target);
  }

  // optional string welcomPost = 3 [default = ""];
  if (has_welcompost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcompost().data(), this->welcompost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcompost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->welcompost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.MeetingMessage.WelcomInfo)
  return target;
}

int MeetingMessage_WelcomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 welcomType = 1 [default = -1];
    if (has_welcomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->welcomtype());
    }

    // optional string welcomPre = 2 [default = ""];
    if (has_welcompre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcompre());
    }

    // optional string welcomPost = 3 [default = ""];
    if (has_welcompost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcompost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingMessage_WelcomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingMessage_WelcomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingMessage_WelcomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingMessage_WelcomInfo::MergeFrom(const MeetingMessage_WelcomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welcomtype()) {
      set_welcomtype(from.welcomtype());
    }
    if (from.has_welcompre()) {
      set_welcompre(from.welcompre());
    }
    if (from.has_welcompost()) {
      set_welcompost(from.welcompost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingMessage_WelcomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingMessage_WelcomInfo::CopyFrom(const MeetingMessage_WelcomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingMessage_WelcomInfo::IsInitialized() const {

  return true;
}

void MeetingMessage_WelcomInfo::Swap(MeetingMessage_WelcomInfo* other) {
  if (other != this) {
    std::swap(welcomtype_, other->welcomtype_);
    std::swap(welcompre_, other->welcompre_);
    std::swap(welcompost_, other->welcompost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingMessage_WelcomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingMessage_WelcomInfo_descriptor_;
  metadata.reflection = MeetingMessage_WelcomInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MeetingMessage_vipShowTime::kVipLevelFieldNumber;
const int MeetingMessage_vipShowTime::kTimeFieldNumber;
#endif  // !_MSC_VER

MeetingMessage_vipShowTime::MeetingMessage_vipShowTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.MeetingMessage.vipShowTime)
}

void MeetingMessage_vipShowTime::InitAsDefaultInstance() {
}

MeetingMessage_vipShowTime::MeetingMessage_vipShowTime(const MeetingMessage_vipShowTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.MeetingMessage.vipShowTime)
}

void MeetingMessage_vipShowTime::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = -1;
  time_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingMessage_vipShowTime::~MeetingMessage_vipShowTime() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.MeetingMessage.vipShowTime)
  SharedDtor();
}

void MeetingMessage_vipShowTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeetingMessage_vipShowTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingMessage_vipShowTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingMessage_vipShowTime_descriptor_;
}

const MeetingMessage_vipShowTime& MeetingMessage_vipShowTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

MeetingMessage_vipShowTime* MeetingMessage_vipShowTime::default_instance_ = NULL;

MeetingMessage_vipShowTime* MeetingMessage_vipShowTime::New() const {
  return new MeetingMessage_vipShowTime;
}

void MeetingMessage_vipShowTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    viplevel_ = -1;
    time_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingMessage_vipShowTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.MeetingMessage.vipShowTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipLevel = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.MeetingMessage.vipShowTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.MeetingMessage.vipShowTime)
  return false;
#undef DO_
}

void MeetingMessage_vipShowTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.MeetingMessage.vipShowTime)
  // optional int32 vipLevel = 1 [default = -1];
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional int32 time = 2 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.MeetingMessage.vipShowTime)
}

::google::protobuf::uint8* MeetingMessage_vipShowTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.MeetingMessage.vipShowTime)
  // optional int32 vipLevel = 1 [default = -1];
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viplevel(), target);
  }

  // optional int32 time = 2 [default = -1];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.MeetingMessage.vipShowTime)
  return target;
}

int MeetingMessage_vipShowTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipLevel = 1 [default = -1];
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingMessage_vipShowTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingMessage_vipShowTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingMessage_vipShowTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingMessage_vipShowTime::MergeFrom(const MeetingMessage_vipShowTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingMessage_vipShowTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingMessage_vipShowTime::CopyFrom(const MeetingMessage_vipShowTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingMessage_vipShowTime::IsInitialized() const {

  return true;
}

void MeetingMessage_vipShowTime::Swap(MeetingMessage_vipShowTime* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingMessage_vipShowTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingMessage_vipShowTime_descriptor_;
  metadata.reflection = MeetingMessage_vipShowTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MeetingMessage_Notice::kIdFieldNumber;
const int MeetingMessage_Notice::kContentFieldNumber;
const int MeetingMessage_Notice::kDevIdFieldNumber;
const int MeetingMessage_Notice::kEndDateFieldNumber;
const int MeetingMessage_Notice::kKeyWordFieldNumber;
const int MeetingMessage_Notice::kStartDateFieldNumber;
const int MeetingMessage_Notice::kTypeFieldNumber;
const int MeetingMessage_Notice::kUserIdFieldNumber;
const int MeetingMessage_Notice::kWeekFieldNumber;
#endif  // !_MSC_VER

MeetingMessage_Notice::MeetingMessage_Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.MeetingMessage.Notice)
}

void MeetingMessage_Notice::InitAsDefaultInstance() {
}

MeetingMessage_Notice::MeetingMessage_Notice(const MeetingMessage_Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.MeetingMessage.Notice)
}

void MeetingMessage_Notice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_ = GOOGLE_LONGLONG(0);
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  week_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingMessage_Notice::~MeetingMessage_Notice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.MeetingMessage.Notice)
  SharedDtor();
}

void MeetingMessage_Notice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (week_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete week_;
  }
  if (this != default_instance_) {
  }
}

void MeetingMessage_Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingMessage_Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingMessage_Notice_descriptor_;
}

const MeetingMessage_Notice& MeetingMessage_Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

MeetingMessage_Notice* MeetingMessage_Notice::default_instance_ = NULL;

MeetingMessage_Notice* MeetingMessage_Notice::New() const {
  return new MeetingMessage_Notice;
}

void MeetingMessage_Notice::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = GOOGLE_LONGLONG(-1);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    enddate_ = GOOGLE_LONGLONG(0);
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
    startdate_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
  }
  if (has_week()) {
    if (week_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      week_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingMessage_Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.MeetingMessage.Notice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devId;
        break;
      }

      // optional string devId = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endDate;
        break;
      }

      // optional int64 endDate = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_endDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keyWord;
        break;
      }

      // optional string keyWord = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_keyWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startDate;
        break;
      }

      // optional int64 startDate = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_startDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userId;
        break;
      }

      // optional string userId = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_week;
        break;
      }

      // optional string week = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_week()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->week().data(), this->week().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "week");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.MeetingMessage.Notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.MeetingMessage.Notice)
  return false;
#undef DO_
}

void MeetingMessage_Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.MeetingMessage.Notice)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string content = 2 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional string devId = 3 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devid(), output);
  }

  // optional int64 endDate = 4 [default = 0];
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->enddate(), output);
  }

  // optional string keyWord = 5 [default = ""];
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keyword(), output);
  }

  // optional int64 startDate = 6 [default = 0];
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->startdate(), output);
  }

  // optional string type = 7 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  // optional string userId = 8 [default = ""];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->userid(), output);
  }

  // optional string week = 9 [default = ""];
  if (has_week()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->week().data(), this->week().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "week");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->week(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.MeetingMessage.Notice)
}

::google::protobuf::uint8* MeetingMessage_Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.MeetingMessage.Notice)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string content = 2 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string devId = 3 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devid(), target);
  }

  // optional int64 endDate = 4 [default = 0];
  if (has_enddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->enddate(), target);
  }

  // optional string keyWord = 5 [default = ""];
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keyword(), target);
  }

  // optional int64 startDate = 6 [default = 0];
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->startdate(), target);
  }

  // optional string type = 7 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  // optional string userId = 8 [default = ""];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->userid(), target);
  }

  // optional string week = 9 [default = ""];
  if (has_week()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->week().data(), this->week().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "week");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->week(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.MeetingMessage.Notice)
  return target;
}

int MeetingMessage_Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string content = 2 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string devId = 3 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional int64 endDate = 4 [default = 0];
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enddate());
    }

    // optional string keyWord = 5 [default = ""];
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional int64 startDate = 6 [default = 0];
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startdate());
    }

    // optional string type = 7 [default = ""];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string userId = 8 [default = ""];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string week = 9 [default = ""];
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->week());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingMessage_Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingMessage_Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingMessage_Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingMessage_Notice::MergeFrom(const MeetingMessage_Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingMessage_Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingMessage_Notice::CopyFrom(const MeetingMessage_Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingMessage_Notice::IsInitialized() const {

  return true;
}

void MeetingMessage_Notice::Swap(MeetingMessage_Notice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(devid_, other->devid_);
    std::swap(enddate_, other->enddate_);
    std::swap(keyword_, other->keyword_);
    std::swap(startdate_, other->startdate_);
    std::swap(type_, other->type_);
    std::swap(userid_, other->userid_);
    std::swap(week_, other->week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingMessage_Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingMessage_Notice_descriptor_;
  metadata.reflection = MeetingMessage_Notice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MeetingMessage::kMeetNameFieldNumber;
const int MeetingMessage::kMeetTypeFieldNumber;
const int MeetingMessage::kStartTimeFieldNumber;
const int MeetingMessage::kEndTimeFieldNumber;
const int MeetingMessage::kDeviceCodeFieldNumber;
const int MeetingMessage::kCollectDeviceFieldNumber;
const int MeetingMessage::kEncoderChannerFieldNumber;
const int MeetingMessage::kRssiFieldNumber;
const int MeetingMessage::kBBoxCodeFieldNumber;
const int MeetingMessage::kNoticeIdFieldNumber;
const int MeetingMessage::kShowModuleFieldNumber;
const int MeetingMessage::kBackgroundIdFieldNumber;
const int MeetingMessage::kIpFieldNumber;
const int MeetingMessage::kPortFieldNumber;
const int MeetingMessage::kOrgCodeFieldNumber;
const int MeetingMessage::kWelcomInfoListFieldNumber;
const int MeetingMessage::kVipShowTimeListFieldNumber;
const int MeetingMessage::kMeetIdFieldNumber;
const int MeetingMessage::kHostOrgsFieldNumber;
const int MeetingMessage::kNoticesFieldNumber;
const int MeetingMessage::kStatFieldNumber;
const int MeetingMessage::kWristUserFieldNumber;
#endif  // !_MSC_VER

MeetingMessage::MeetingMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.MeetingMessage)
}

void MeetingMessage::InitAsDefaultInstance() {
}

MeetingMessage::MeetingMessage(const MeetingMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.MeetingMessage)
}

void MeetingMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  meetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meettype_ = -1;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collectdevice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoderchanner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
  bboxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noticeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showmodule_ = -1;
  backgroundid_ = -1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingMessage::~MeetingMessage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.MeetingMessage)
  SharedDtor();
}

void MeetingMessage::SharedDtor() {
  if (meetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetname_;
  }
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (collectdevice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collectdevice_;
  }
  if (encoderchanner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoderchanner_;
  }
  if (bboxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bboxcode_;
  }
  if (noticeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticeid_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (meetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetid_;
  }
  if (this != default_instance_) {
  }
}

void MeetingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingMessage_descriptor_;
}

const MeetingMessage& MeetingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

MeetingMessage* MeetingMessage::default_instance_ = NULL;

MeetingMessage* MeetingMessage::New() const {
  return new MeetingMessage;
}

void MeetingMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MeetingMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(starttime_, endtime_);
    if (has_meetname()) {
      if (meetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        meetname_->clear();
      }
    }
    meettype_ = -1;
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_collectdevice()) {
      if (collectdevice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        collectdevice_->clear();
      }
    }
    if (has_encoderchanner()) {
      if (encoderchanner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoderchanner_->clear();
      }
    }
    rssi_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_bboxcode()) {
      if (bboxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bboxcode_->clear();
      }
    }
    if (has_noticeid()) {
      if (noticeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        noticeid_->clear();
      }
    }
    showmodule_ = -1;
    backgroundid_ = -1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_orgcode()) {
      if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgcode_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 1179648) {
    if (has_meetid()) {
      if (meetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        meetid_->clear();
      }
    }
    stat_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  welcominfolist_.Clear();
  vipshowtimelist_.Clear();
  hostorgs_.Clear();
  notices_.Clear();
  wristuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.MeetingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string meetName = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meetname().data(), this->meetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "meetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_meetType;
        break;
      }

      // optional int32 meetType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_meetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meettype_)));
          set_has_meettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deviceCode;
        break;
      }

      // optional string deviceCode = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_deviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_collectDevice;
        break;
      }

      // optional string collectDevice = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_collectDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collectdevice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collectdevice().data(), this->collectdevice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "collectdevice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_encoderChanner;
        break;
      }

      // optional string encoderChanner = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_encoderChanner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoderchanner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encoderchanner().data(), this->encoderchanner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encoderchanner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rssi;
        break;
      }

      // optional int32 rssi = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bBoxCode;
        break;
      }

      // optional string bBoxCode = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_bBoxCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bboxcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bboxcode().data(), this->bboxcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bboxcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_noticeId;
        break;
      }

      // optional string noticeId = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_noticeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noticeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->noticeid().data(), this->noticeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "noticeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_showModule;
        break;
      }

      // optional int32 showModule = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_showModule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showmodule_)));
          set_has_showmodule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_backgroundId;
        break;
      }

      // optional int32 backgroundId = 12 [default = -1];
      case 12: {
        if (tag == 96) {
         parse_backgroundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backgroundid_)));
          set_has_backgroundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ip;
        break;
      }

      // optional string ip = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_port;
        break;
      }

      // optional int32 port = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_orgCode;
        break;
      }

      // optional string orgCode = 15 [default = ""];
      case 15: {
        if (tag == 122) {
         parse_orgCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgcode().data(), this->orgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_welcomInfoList;
        break;
      }

      // repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
      case 16: {
        if (tag == 130) {
         parse_welcomInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welcominfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_welcomInfoList;
        if (input->ExpectTag(138)) goto parse_vipShowTimeList;
        break;
      }

      // repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
      case 17: {
        if (tag == 138) {
         parse_vipShowTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipshowtimelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vipShowTimeList;
        if (input->ExpectTag(146)) goto parse_meetId;
        break;
      }

      // optional string meetId = 18 [default = ""];
      case 18: {
        if (tag == 146) {
         parse_meetId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meetid().data(), this->meetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "meetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_hostOrgs;
        break;
      }

      // repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
      case 19: {
        if (tag == 154) {
         parse_hostOrgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hostorgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_hostOrgs;
        if (input->ExpectTag(162)) goto parse_notices;
        break;
      }

      // repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
      case 20: {
        if (tag == 162) {
         parse_notices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_notices;
        if (input->ExpectTag(168)) goto parse_stat;
        break;
      }

      // optional int32 stat = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_wristUser;
        break;
      }

      // repeated .com.arges.file.proto.WristUserName wristUser = 22;
      case 22: {
        if (tag == 178) {
         parse_wristUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wristuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_wristUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.MeetingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.MeetingMessage)
  return false;
#undef DO_
}

void MeetingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.MeetingMessage)
  // optional string meetName = 1 [default = ""];
  if (has_meetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetname().data(), this->meetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->meetname(), output);
  }

  // optional int32 meetType = 2 [default = -1];
  if (has_meettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meettype(), output);
  }

  // optional uint64 startTime = 3 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // optional uint64 endTime = 4 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endtime(), output);
  }

  // optional string deviceCode = 5 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devicecode(), output);
  }

  // optional string collectDevice = 6 [default = ""];
  if (has_collectdevice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collectdevice().data(), this->collectdevice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collectdevice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->collectdevice(), output);
  }

  // optional string encoderChanner = 7 [default = ""];
  if (has_encoderchanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoderchanner().data(), this->encoderchanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encoderchanner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->encoderchanner(), output);
  }

  // optional int32 rssi = 8 [default = 0];
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rssi(), output);
  }

  // optional string bBoxCode = 9 [default = ""];
  if (has_bboxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bboxcode().data(), this->bboxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bboxcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bboxcode(), output);
  }

  // optional string noticeId = 10 [default = ""];
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticeid().data(), this->noticeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "noticeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->noticeid(), output);
  }

  // optional int32 showModule = 11 [default = -1];
  if (has_showmodule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->showmodule(), output);
  }

  // optional int32 backgroundId = 12 [default = -1];
  if (has_backgroundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->backgroundid(), output);
  }

  // optional string ip = 13 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ip(), output);
  }

  // optional int32 port = 14 [default = 0];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->port(), output);
  }

  // optional string orgCode = 15 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->orgcode(), output);
  }

  // repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
  for (int i = 0; i < this->welcominfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->welcominfolist(i), output);
  }

  // repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
  for (int i = 0; i < this->vipshowtimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vipshowtimelist(i), output);
  }

  // optional string meetId = 18 [default = ""];
  if (has_meetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetid().data(), this->meetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meetid(), output);
  }

  // repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
  for (int i = 0; i < this->hostorgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->hostorgs(i), output);
  }

  // repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
  for (int i = 0; i < this->notices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->notices(i), output);
  }

  // optional int32 stat = 21 [default = 0];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->stat(), output);
  }

  // repeated .com.arges.file.proto.WristUserName wristUser = 22;
  for (int i = 0; i < this->wristuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->wristuser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.MeetingMessage)
}

::google::protobuf::uint8* MeetingMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.MeetingMessage)
  // optional string meetName = 1 [default = ""];
  if (has_meetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetname().data(), this->meetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meetname(), target);
  }

  // optional int32 meetType = 2 [default = -1];
  if (has_meettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meettype(), target);
  }

  // optional uint64 startTime = 3 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttime(), target);
  }

  // optional uint64 endTime = 4 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->endtime(), target);
  }

  // optional string deviceCode = 5 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicecode(), target);
  }

  // optional string collectDevice = 6 [default = ""];
  if (has_collectdevice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collectdevice().data(), this->collectdevice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collectdevice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->collectdevice(), target);
  }

  // optional string encoderChanner = 7 [default = ""];
  if (has_encoderchanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoderchanner().data(), this->encoderchanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encoderchanner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->encoderchanner(), target);
  }

  // optional int32 rssi = 8 [default = 0];
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rssi(), target);
  }

  // optional string bBoxCode = 9 [default = ""];
  if (has_bboxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bboxcode().data(), this->bboxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bboxcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bboxcode(), target);
  }

  // optional string noticeId = 10 [default = ""];
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticeid().data(), this->noticeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "noticeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->noticeid(), target);
  }

  // optional int32 showModule = 11 [default = -1];
  if (has_showmodule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->showmodule(), target);
  }

  // optional int32 backgroundId = 12 [default = -1];
  if (has_backgroundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->backgroundid(), target);
  }

  // optional string ip = 13 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ip(), target);
  }

  // optional int32 port = 14 [default = 0];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->port(), target);
  }

  // optional string orgCode = 15 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->orgcode(), target);
  }

  // repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
  for (int i = 0; i < this->welcominfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->welcominfolist(i), target);
  }

  // repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
  for (int i = 0; i < this->vipshowtimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vipshowtimelist(i), target);
  }

  // optional string meetId = 18 [default = ""];
  if (has_meetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetid().data(), this->meetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meetid(), target);
  }

  // repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
  for (int i = 0; i < this->hostorgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->hostorgs(i), target);
  }

  // repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
  for (int i = 0; i < this->notices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->notices(i), target);
  }

  // optional int32 stat = 21 [default = 0];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->stat(), target);
  }

  // repeated .com.arges.file.proto.WristUserName wristUser = 22;
  for (int i = 0; i < this->wristuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->wristuser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.MeetingMessage)
  return target;
}

int MeetingMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string meetName = 1 [default = ""];
    if (has_meetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meetname());
    }

    // optional int32 meetType = 2 [default = -1];
    if (has_meettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meettype());
    }

    // optional uint64 startTime = 3 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endTime = 4 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional string deviceCode = 5 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional string collectDevice = 6 [default = ""];
    if (has_collectdevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collectdevice());
    }

    // optional string encoderChanner = 7 [default = ""];
    if (has_encoderchanner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoderchanner());
    }

    // optional int32 rssi = 8 [default = 0];
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bBoxCode = 9 [default = ""];
    if (has_bboxcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bboxcode());
    }

    // optional string noticeId = 10 [default = ""];
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noticeid());
    }

    // optional int32 showModule = 11 [default = -1];
    if (has_showmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showmodule());
    }

    // optional int32 backgroundId = 12 [default = -1];
    if (has_backgroundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backgroundid());
    }

    // optional string ip = 13 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 14 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string orgCode = 15 [default = ""];
    if (has_orgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgcode());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string meetId = 18 [default = ""];
    if (has_meetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meetid());
    }

    // optional int32 stat = 21 [default = 0];
    if (has_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

  }
  // repeated .com.arges.file.proto.MeetingMessage.WelcomInfo welcomInfoList = 16;
  total_size += 2 * this->welcominfolist_size();
  for (int i = 0; i < this->welcominfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welcominfolist(i));
  }

  // repeated .com.arges.file.proto.MeetingMessage.vipShowTime vipShowTimeList = 17;
  total_size += 2 * this->vipshowtimelist_size();
  for (int i = 0; i < this->vipshowtimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipshowtimelist(i));
  }

  // repeated .com.arges.file.proto.HostMapOrgData hostOrgs = 19;
  total_size += 2 * this->hostorgs_size();
  for (int i = 0; i < this->hostorgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hostorgs(i));
  }

  // repeated .com.arges.file.proto.MeetingMessage.Notice notices = 20;
  total_size += 2 * this->notices_size();
  for (int i = 0; i < this->notices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notices(i));
  }

  // repeated .com.arges.file.proto.WristUserName wristUser = 22;
  total_size += 2 * this->wristuser_size();
  for (int i = 0; i < this->wristuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wristuser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingMessage::MergeFrom(const MeetingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  welcominfolist_.MergeFrom(from.welcominfolist_);
  vipshowtimelist_.MergeFrom(from.vipshowtimelist_);
  hostorgs_.MergeFrom(from.hostorgs_);
  notices_.MergeFrom(from.notices_);
  wristuser_.MergeFrom(from.wristuser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meetname()) {
      set_meetname(from.meetname());
    }
    if (from.has_meettype()) {
      set_meettype(from.meettype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_collectdevice()) {
      set_collectdevice(from.collectdevice());
    }
    if (from.has_encoderchanner()) {
      set_encoderchanner(from.encoderchanner());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bboxcode()) {
      set_bboxcode(from.bboxcode());
    }
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
    if (from.has_showmodule()) {
      set_showmodule(from.showmodule());
    }
    if (from.has_backgroundid()) {
      set_backgroundid(from.backgroundid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_orgcode()) {
      set_orgcode(from.orgcode());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_meetid()) {
      set_meetid(from.meetid());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingMessage::CopyFrom(const MeetingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingMessage::IsInitialized() const {

  return true;
}

void MeetingMessage::Swap(MeetingMessage* other) {
  if (other != this) {
    std::swap(meetname_, other->meetname_);
    std::swap(meettype_, other->meettype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(devicecode_, other->devicecode_);
    std::swap(collectdevice_, other->collectdevice_);
    std::swap(encoderchanner_, other->encoderchanner_);
    std::swap(rssi_, other->rssi_);
    std::swap(bboxcode_, other->bboxcode_);
    std::swap(noticeid_, other->noticeid_);
    std::swap(showmodule_, other->showmodule_);
    std::swap(backgroundid_, other->backgroundid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(orgcode_, other->orgcode_);
    welcominfolist_.Swap(&other->welcominfolist_);
    vipshowtimelist_.Swap(&other->vipshowtimelist_);
    std::swap(meetid_, other->meetid_);
    hostorgs_.Swap(&other->hostorgs_);
    notices_.Swap(&other->notices_);
    std::swap(stat_, other->stat_);
    wristuser_.Swap(&other->wristuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingMessage_descriptor_;
  metadata.reflection = MeetingMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspConnectOfMedia::kCodeFieldNumber;
const int RspConnectOfMedia::kTokenFieldNumber;
const int RspConnectOfMedia::kIpFieldNumber;
const int RspConnectOfMedia::kPortFieldNumber;
#endif  // !_MSC_VER

RspConnectOfMedia::RspConnectOfMedia()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspConnectOfMedia)
}

void RspConnectOfMedia::InitAsDefaultInstance() {
}

RspConnectOfMedia::RspConnectOfMedia(const RspConnectOfMedia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspConnectOfMedia)
}

void RspConnectOfMedia::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConnectOfMedia::~RspConnectOfMedia() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspConnectOfMedia)
  SharedDtor();
}

void RspConnectOfMedia::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RspConnectOfMedia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConnectOfMedia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConnectOfMedia_descriptor_;
}

const RspConnectOfMedia& RspConnectOfMedia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

RspConnectOfMedia* RspConnectOfMedia::default_instance_ = NULL;

RspConnectOfMedia* RspConnectOfMedia::New() const {
  return new RspConnectOfMedia;
}

void RspConnectOfMedia::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConnectOfMedia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspConnectOfMedia)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspConnectOfMedia)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspConnectOfMedia)
  return false;
#undef DO_
}

void RspConnectOfMedia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspConnectOfMedia)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string token = 2 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4 [default = 0];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspConnectOfMedia)
}

::google::protobuf::uint8* RspConnectOfMedia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspConnectOfMedia)
  // optional string code = 1 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string token = 2 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4 [default = 0];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspConnectOfMedia)
  return target;
}

int RspConnectOfMedia::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string token = 2 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string ip = 3 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConnectOfMedia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConnectOfMedia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConnectOfMedia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConnectOfMedia::MergeFrom(const RspConnectOfMedia& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConnectOfMedia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConnectOfMedia::CopyFrom(const RspConnectOfMedia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConnectOfMedia::IsInitialized() const {

  return true;
}

void RspConnectOfMedia::Swap(RspConnectOfMedia* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(token_, other->token_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConnectOfMedia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConnectOfMedia_descriptor_;
  metadata.reflection = RspConnectOfMedia_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeetingData::kTypeFieldNumber;
const int MeetingData::kResultFieldNumber;
const int MeetingData::kDevInfoFieldNumber;
const int MeetingData::kDevOfSignInFieldNumber;
const int MeetingData::kMeetingMessageFieldNumber;
const int MeetingData::kConnOfSignInFieldNumber;
const int MeetingData::kConnOfMediaFieldNumber;
#endif  // !_MSC_VER

MeetingData::MeetingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.MeetingData)
}

void MeetingData::InitAsDefaultInstance() {
  devinfo_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
  meetingmessage_ = const_cast< ::com::arges::file::proto::MeetingMessage*>(&::com::arges::file::proto::MeetingMessage::default_instance());
  connofsignin_ = const_cast< ::com::arges::file::proto::RspConnectOfMedia*>(&::com::arges::file::proto::RspConnectOfMedia::default_instance());
}

MeetingData::MeetingData(const MeetingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.MeetingData)
}

void MeetingData::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  result_ = 0;
  devinfo_ = NULL;
  meetingmessage_ = NULL;
  connofsignin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingData::~MeetingData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.MeetingData)
  SharedDtor();
}

void MeetingData::SharedDtor() {
  if (this != default_instance_) {
    delete devinfo_;
    delete meetingmessage_;
    delete connofsignin_;
  }
}

void MeetingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingData_descriptor_;
}

const MeetingData& MeetingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

MeetingData* MeetingData::default_instance_ = NULL;

MeetingData* MeetingData::New() const {
  return new MeetingData;
}

void MeetingData::Clear() {
  if (_has_bits_[0 / 32] & 55) {
    type_ = -1;
    result_ = 0;
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
    }
    if (has_meetingmessage()) {
      if (meetingmessage_ != NULL) meetingmessage_->::com::arges::file::proto::MeetingMessage::Clear();
    }
    if (has_connofsignin()) {
      if (connofsignin_ != NULL) connofsignin_->::com::arges::file::proto::RspConnectOfMedia::Clear();
    }
  }
  devofsignin_.Clear();
  connofmedia_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.MeetingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devInfo;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_devOfSignIn;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
      case 4: {
        if (tag == 34) {
         parse_devOfSignIn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devofsignin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_devOfSignIn;
        if (input->ExpectTag(42)) goto parse_meetingMessage;
        break;
      }

      // optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
      case 5: {
        if (tag == 42) {
         parse_meetingMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meetingmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_connOfSignIn;
        break;
      }

      // optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
      case 6: {
        if (tag == 50) {
         parse_connOfSignIn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connofsignin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_connOfMedia;
        break;
      }

      // repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
      case 7: {
        if (tag == 58) {
         parse_connOfMedia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connofmedia()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_connOfMedia;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.MeetingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.MeetingData)
  return false;
#undef DO_
}

void MeetingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.MeetingData)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 3;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devinfo(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
  for (int i = 0; i < this->devofsignin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->devofsignin(i), output);
  }

  // optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
  if (has_meetingmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->meetingmessage(), output);
  }

  // optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
  if (has_connofsignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->connofsignin(), output);
  }

  // repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
  for (int i = 0; i < this->connofmedia_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connofmedia(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.MeetingData)
}

::google::protobuf::uint8* MeetingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.MeetingData)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 3;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->devinfo(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
  for (int i = 0; i < this->devofsignin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->devofsignin(i), target);
  }

  // optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
  if (has_meetingmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->meetingmessage(), target);
  }

  // optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
  if (has_connofsignin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->connofsignin(), target);
  }

  // repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
  for (int i = 0; i < this->connofmedia_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->connofmedia(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.MeetingData)
  return target;
}

int MeetingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .com.arges.file.proto.DeviceInfo devInfo = 3;
    if (has_devinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devinfo());
    }

    // optional .com.arges.file.proto.MeetingMessage meetingMessage = 5;
    if (has_meetingmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meetingmessage());
    }

    // optional .com.arges.file.proto.RspConnectOfMedia connOfSignIn = 6;
    if (has_connofsignin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connofsignin());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo devOfSignIn = 4;
  total_size += 1 * this->devofsignin_size();
  for (int i = 0; i < this->devofsignin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devofsignin(i));
  }

  // repeated .com.arges.file.proto.RspConnectOfMedia connOfMedia = 7;
  total_size += 1 * this->connofmedia_size();
  for (int i = 0; i < this->connofmedia_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connofmedia(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingData::MergeFrom(const MeetingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  devofsignin_.MergeFrom(from.devofsignin_);
  connofmedia_.MergeFrom(from.connofmedia_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devinfo());
    }
    if (from.has_meetingmessage()) {
      mutable_meetingmessage()->::com::arges::file::proto::MeetingMessage::MergeFrom(from.meetingmessage());
    }
    if (from.has_connofsignin()) {
      mutable_connofsignin()->::com::arges::file::proto::RspConnectOfMedia::MergeFrom(from.connofsignin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingData::CopyFrom(const MeetingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingData::IsInitialized() const {

  return true;
}

void MeetingData::Swap(MeetingData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(devinfo_, other->devinfo_);
    devofsignin_.Swap(&other->devofsignin_);
    std::swap(meetingmessage_, other->meetingmessage_);
    std::swap(connofsignin_, other->connofsignin_);
    connofmedia_.Swap(&other->connofmedia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingData_descriptor_;
  metadata.reflection = MeetingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMeetingMessage::kTypeFieldNumber;
const int AllMeetingMessage::kResultFieldNumber;
const int AllMeetingMessage::kResultDescribeFieldNumber;
const int AllMeetingMessage::kMeetingsFieldNumber;
const int AllMeetingMessage::kBoxCodeFieldNumber;
#endif  // !_MSC_VER

AllMeetingMessage::AllMeetingMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AllMeetingMessage)
}

void AllMeetingMessage::InitAsDefaultInstance() {
}

AllMeetingMessage::AllMeetingMessage(const AllMeetingMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AllMeetingMessage)
}

void AllMeetingMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMeetingMessage::~AllMeetingMessage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AllMeetingMessage)
  SharedDtor();
}

void AllMeetingMessage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxcode_;
  }
  if (this != default_instance_) {
  }
}

void AllMeetingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMeetingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMeetingMessage_descriptor_;
}

const AllMeetingMessage& AllMeetingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

AllMeetingMessage* AllMeetingMessage::default_instance_ = NULL;

AllMeetingMessage* AllMeetingMessage::New() const {
  return new AllMeetingMessage;
}

void AllMeetingMessage::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    type_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_boxcode()) {
      if (boxcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxcode_->clear();
      }
    }
  }
  meetings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMeetingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AllMeetingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_meetings;
        break;
      }

      // repeated .com.arges.file.proto.MeetingData meetings = 4;
      case 4: {
        if (tag == 34) {
         parse_meetings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meetings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_meetings;
        if (input->ExpectTag(42)) goto parse_boxCode;
        break;
      }

      // optional string boxCode = 5;
      case 5: {
        if (tag == 42) {
         parse_boxCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxcode().data(), this->boxcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AllMeetingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AllMeetingMessage)
  return false;
#undef DO_
}

void AllMeetingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AllMeetingMessage)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated .com.arges.file.proto.MeetingData meetings = 4;
  for (int i = 0; i < this->meetings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->meetings(i), output);
  }

  // optional string boxCode = 5;
  if (has_boxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxcode().data(), this->boxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->boxcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AllMeetingMessage)
}

::google::protobuf::uint8* AllMeetingMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AllMeetingMessage)
  // optional int32 type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated .com.arges.file.proto.MeetingData meetings = 4;
  for (int i = 0; i < this->meetings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->meetings(i), target);
  }

  // optional string boxCode = 5;
  if (has_boxcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxcode().data(), this->boxcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->boxcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AllMeetingMessage)
  return target;
}

int AllMeetingMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string boxCode = 5;
    if (has_boxcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxcode());
    }

  }
  // repeated .com.arges.file.proto.MeetingData meetings = 4;
  total_size += 1 * this->meetings_size();
  for (int i = 0; i < this->meetings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meetings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMeetingMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMeetingMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMeetingMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMeetingMessage::MergeFrom(const AllMeetingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  meetings_.MergeFrom(from.meetings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_boxcode()) {
      set_boxcode(from.boxcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMeetingMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMeetingMessage::CopyFrom(const AllMeetingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMeetingMessage::IsInitialized() const {

  return true;
}

void AllMeetingMessage::Swap(AllMeetingMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    meetings_.Swap(&other->meetings_);
    std::swap(boxcode_, other->boxcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMeetingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMeetingMessage_descriptor_;
  metadata.reflection = AllMeetingMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportStatOfMeetingShow::kDevCodeFieldNumber;
const int ReportStatOfMeetingShow::kMeetingNameFieldNumber;
const int ReportStatOfMeetingShow::kStatFieldNumber;
#endif  // !_MSC_VER

ReportStatOfMeetingShow::ReportStatOfMeetingShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReportStatOfMeetingShow)
}

void ReportStatOfMeetingShow::InitAsDefaultInstance() {
}

ReportStatOfMeetingShow::ReportStatOfMeetingShow(const ReportStatOfMeetingShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReportStatOfMeetingShow)
}

void ReportStatOfMeetingShow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meetingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stat_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportStatOfMeetingShow::~ReportStatOfMeetingShow() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReportStatOfMeetingShow)
  SharedDtor();
}

void ReportStatOfMeetingShow::SharedDtor() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (meetingname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meetingname_;
  }
  if (this != default_instance_) {
  }
}

void ReportStatOfMeetingShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportStatOfMeetingShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportStatOfMeetingShow_descriptor_;
}

const ReportStatOfMeetingShow& ReportStatOfMeetingShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MeetingMessageBean_2eproto();
  return *default_instance_;
}

ReportStatOfMeetingShow* ReportStatOfMeetingShow::default_instance_ = NULL;

ReportStatOfMeetingShow* ReportStatOfMeetingShow::New() const {
  return new ReportStatOfMeetingShow;
}

void ReportStatOfMeetingShow::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    if (has_meetingname()) {
      if (meetingname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        meetingname_->clear();
      }
    }
    stat_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportStatOfMeetingShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReportStatOfMeetingShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meetingName;
        break;
      }

      // optional string meetingName = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_meetingName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meetingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meetingname().data(), this->meetingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "meetingname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stat;
        break;
      }

      // optional int32 stat = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReportStatOfMeetingShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReportStatOfMeetingShow)
  return false;
#undef DO_
}

void ReportStatOfMeetingShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReportStatOfMeetingShow)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devcode(), output);
  }

  // optional string meetingName = 2 [default = ""];
  if (has_meetingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetingname().data(), this->meetingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetingname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->meetingname(), output);
  }

  // optional int32 stat = 3 [default = -1];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReportStatOfMeetingShow)
}

::google::protobuf::uint8* ReportStatOfMeetingShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReportStatOfMeetingShow)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devcode(), target);
  }

  // optional string meetingName = 2 [default = ""];
  if (has_meetingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meetingname().data(), this->meetingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meetingname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meetingname(), target);
  }

  // optional int32 stat = 3 [default = -1];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReportStatOfMeetingShow)
  return target;
}

int ReportStatOfMeetingShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devCode = 1 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional string meetingName = 2 [default = ""];
    if (has_meetingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meetingname());
    }

    // optional int32 stat = 3 [default = -1];
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportStatOfMeetingShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportStatOfMeetingShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportStatOfMeetingShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportStatOfMeetingShow::MergeFrom(const ReportStatOfMeetingShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_meetingname()) {
      set_meetingname(from.meetingname());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportStatOfMeetingShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportStatOfMeetingShow::CopyFrom(const ReportStatOfMeetingShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportStatOfMeetingShow::IsInitialized() const {

  return true;
}

void ReportStatOfMeetingShow::Swap(ReportStatOfMeetingShow* other) {
  if (other != this) {
    std::swap(devcode_, other->devcode_);
    std::swap(meetingname_, other->meetingname_);
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportStatOfMeetingShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportStatOfMeetingShow_descriptor_;
  metadata.reflection = ReportStatOfMeetingShow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
