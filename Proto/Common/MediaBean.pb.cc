// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MediaBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReqMediaPlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMediaPlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTokenPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTokenPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspTokenPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspTokenPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLinkageToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLinkageToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLinkageToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLinkageToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCreateChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCreateChannel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCESS_TYPE_OF_DEVICE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STREAM_TYPE_OF_MEDIA_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_MEIDA_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_MEDIA_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPRATE_TYPE_OF_MEDIA_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MediaBean_2eproto() {
  protobuf_AddDesc_MediaBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MediaBean.proto");
  GOOGLE_CHECK(file != NULL);
  ReqMediaPlay_descriptor_ = file->message_type(0);
  static const int ReqMediaPlay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, resultdescribe_),
  };
  ReqMediaPlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMediaPlay_descriptor_,
      ReqMediaPlay::default_instance_,
      ReqMediaPlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMediaPlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMediaPlay));
  ReqTokenPair_descriptor_ = file->message_type(1);
  static const int ReqTokenPair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenPair, userdata_),
  };
  ReqTokenPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTokenPair_descriptor_,
      ReqTokenPair::default_instance_,
      ReqTokenPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTokenPair));
  RspTokenPair_descriptor_ = file->message_type(2);
  static const int RspTokenPair_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, token1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, token2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, userdata_),
  };
  RspTokenPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspTokenPair_descriptor_,
      RspTokenPair::default_instance_,
      RspTokenPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTokenPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspTokenPair));
  ReqLinkageToken_descriptor_ = file->message_type(3);
  static const int ReqLinkageToken_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, devcode_),
  };
  ReqLinkageToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLinkageToken_descriptor_,
      ReqLinkageToken::default_instance_,
      ReqLinkageToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLinkageToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLinkageToken));
  RspLinkageToken_descriptor_ = file->message_type(4);
  static const int RspLinkageToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLinkageToken, result_),
  };
  RspLinkageToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLinkageToken_descriptor_,
      RspLinkageToken::default_instance_,
      RspLinkageToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLinkageToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLinkageToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLinkageToken));
  ReqCreateChannel_descriptor_ = file->message_type(5);
  static const int ReqCreateChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateChannel, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateChannel, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateChannel, streamtype_),
  };
  ReqCreateChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateChannel_descriptor_,
      ReqCreateChannel::default_instance_,
      ReqCreateChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateChannel));
  RspCreateChannel_descriptor_ = file->message_type(6);
  static const int RspCreateChannel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, mtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, stoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, result_),
  };
  RspCreateChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCreateChannel_descriptor_,
      RspCreateChannel::default_instance_,
      RspCreateChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreateChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCreateChannel));
  ACCESS_TYPE_OF_DEVICE_descriptor_ = file->enum_type(0);
  STREAM_TYPE_OF_MEDIA_descriptor_ = file->enum_type(1);
  REQUEST_TYPE_OF_MEIDA_descriptor_ = file->enum_type(2);
  RESULT_TYPE_OF_MEDIA_descriptor_ = file->enum_type(3);
  OPRATE_TYPE_OF_MEDIA_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MediaBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMediaPlay_descriptor_, &ReqMediaPlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTokenPair_descriptor_, &ReqTokenPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspTokenPair_descriptor_, &RspTokenPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLinkageToken_descriptor_, &ReqLinkageToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLinkageToken_descriptor_, &RspLinkageToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateChannel_descriptor_, &ReqCreateChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCreateChannel_descriptor_, &RspCreateChannel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MediaBean_2eproto() {
  delete ReqMediaPlay::default_instance_;
  delete ReqMediaPlay_reflection_;
  delete ReqTokenPair::default_instance_;
  delete ReqTokenPair_reflection_;
  delete RspTokenPair::default_instance_;
  delete RspTokenPair_reflection_;
  delete ReqLinkageToken::default_instance_;
  delete ReqLinkageToken_reflection_;
  delete RspLinkageToken::default_instance_;
  delete RspLinkageToken_reflection_;
  delete ReqCreateChannel::default_instance_;
  delete ReqCreateChannel_reflection_;
  delete RspCreateChannel::default_instance_;
  delete RspCreateChannel_reflection_;
}

void protobuf_AddDesc_MediaBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MediaBean.proto\022\024com.arges.file.proto\032"
    "\025DevInfoListBean.proto\"\340\001\n\014ReqMediaPlay\022"
    "\027\n\013requestType\030\001 \001(\005:\002-1\022\023\n\tchannelId\030\002 "
    "\001(\t:\000\022\025\n\nstreamType\030\003 \001(\005:\0011\022-\n\003dev\030\004 \001("
    "\0132 .com.arges.file.proto.DeviceInfo\022\017\n\005t"
    "oken\030\005 \001(\t:\000\022\014\n\002ip\030\006 \001(\t:\000\022\017\n\004port\030\007 \001(\005"
    ":\0010\022\022\n\006result\030\010 \001(\005:\002-1\022\030\n\016resultDescrib"
    "e\030\t \001(\014:\000\"\"\n\014ReqTokenPair\022\022\n\010userdata\030\001 "
    "\001(\t:\000\"z\n\014RspTokenPair\022\014\n\002ip\030\001 \001(\t:\000\022\020\n\004p"
    "ort\030\002 \001(\005:\002-1\022\020\n\006token1\030\003 \001(\t:\000\022\020\n\006token"
    "2\030\004 \001(\t:\000\022\022\n\006result\030\005 \001(\005:\002-1\022\022\n\010userdat"
    "a\030\006 \001(\t:\000\"U\n\017ReqLinkageToken\022\014\n\002ip\030\001 \001(\t"
    ":\000\022\020\n\004port\030\002 \001(\005:\002-1\022\017\n\005token\030\003 \001(\t:\000\022\021\n"
    "\007devcode\030\004 \001(\t:\000\"%\n\017RspLinkageToken\022\022\n\006r"
    "esult\030\001 \001(\005:\002-1\"O\n\020ReqCreateChannel\022\017\n\005d"
    "evId\030\001 \001(\t:\000\022\023\n\tchannelId\030\002 \001(\t:\000\022\025\n\nstr"
    "eamType\030\003 \001(\005:\0011\"j\n\020RspCreateChannel\022\014\n\002"
    "ip\030\001 \001(\t:\000\022\020\n\004port\030\002 \001(\005:\002-1\022\020\n\006mtoken\030\003"
    " \001(\t:\000\022\020\n\006stoken\030\004 \001(\t:\000\022\022\n\006result\030\005 \001(\005"
    ":\002-1*X\n\025ACCESS_TYPE_OF_DEVICE\022\020\n\014MOUNT_O"
    "F_DMS\020\001\022\021\n\rMOUNT_OF_BBOX\020\002\022\032\n\026MOUNT_OF_P"
    "ROXY_SERVICE\020\003*G\n\024STREAM_TYPE_OF_MEDIA\022\027"
    "\n\023STREAM_TYPE_OF_MAIN\020\001\022\026\n\022STREAM_TYPE_O"
    "F_SUB\020\002*g\n\025REQUEST_TYPE_OF_MEIDA\022\021\n\rMEDI"
    "A_REQUEST\020\001\022\034\n\030MEIDA_REQUEST_FOR_DEVICE\020"
    "\002\022\035\n\031MEDIA_RESPONSE_FOR_DEVICE\020\003*\263\001\n\024RES"
    "ULT_TYPE_OF_MEDIA\022\023\n\017MEDIA_RESULT_OK\020\000\022\037"
    "\n\033MEDIA_RESULT_GET_TOKEN_TRUE\020\001\022 \n\034MEDIA"
    "_RESULT_GET_TOKEN_ERROR\020\002\022 \n\034MEDIA_RESUL"
    "T_GET_DEVICE_TRUE\020\003\022!\n\035MEDIA_RESULT_GET_"
    "DEVICE_ERROR\020\004*\202\001\n\024OPRATE_TYPE_OF_MEDIA\022"
    "\027\n\023START_TO_PLAY_MEDIA\020\001\022\026\n\022STOP_TO_PLAY"
    "_MEDIA\020\002\022\034\n\030START_TO_RECEIVE_SCANNER\020\003\022\033"
    "\n\027STOP_TO_RECEIVE_SCANNER\020\004", 1347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MediaBean.proto", &protobuf_RegisterTypes);
  ReqMediaPlay::default_instance_ = new ReqMediaPlay();
  ReqTokenPair::default_instance_ = new ReqTokenPair();
  RspTokenPair::default_instance_ = new RspTokenPair();
  ReqLinkageToken::default_instance_ = new ReqLinkageToken();
  RspLinkageToken::default_instance_ = new RspLinkageToken();
  ReqCreateChannel::default_instance_ = new ReqCreateChannel();
  RspCreateChannel::default_instance_ = new RspCreateChannel();
  ReqMediaPlay::default_instance_->InitAsDefaultInstance();
  ReqTokenPair::default_instance_->InitAsDefaultInstance();
  RspTokenPair::default_instance_->InitAsDefaultInstance();
  ReqLinkageToken::default_instance_->InitAsDefaultInstance();
  RspLinkageToken::default_instance_->InitAsDefaultInstance();
  ReqCreateChannel::default_instance_->InitAsDefaultInstance();
  RspCreateChannel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MediaBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MediaBean_2eproto {
  StaticDescriptorInitializer_MediaBean_2eproto() {
    protobuf_AddDesc_MediaBean_2eproto();
  }
} static_descriptor_initializer_MediaBean_2eproto_;
const ::google::protobuf::EnumDescriptor* ACCESS_TYPE_OF_DEVICE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCESS_TYPE_OF_DEVICE_descriptor_;
}
bool ACCESS_TYPE_OF_DEVICE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STREAM_TYPE_OF_MEDIA_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STREAM_TYPE_OF_MEDIA_descriptor_;
}
bool STREAM_TYPE_OF_MEDIA_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_MEIDA_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_MEIDA_descriptor_;
}
bool REQUEST_TYPE_OF_MEIDA_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_MEDIA_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_MEDIA_descriptor_;
}
bool RESULT_TYPE_OF_MEDIA_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPRATE_TYPE_OF_MEDIA_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPRATE_TYPE_OF_MEDIA_descriptor_;
}
bool OPRATE_TYPE_OF_MEDIA_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMediaPlay::kRequestTypeFieldNumber;
const int ReqMediaPlay::kChannelIdFieldNumber;
const int ReqMediaPlay::kStreamTypeFieldNumber;
const int ReqMediaPlay::kDevFieldNumber;
const int ReqMediaPlay::kTokenFieldNumber;
const int ReqMediaPlay::kIpFieldNumber;
const int ReqMediaPlay::kPortFieldNumber;
const int ReqMediaPlay::kResultFieldNumber;
const int ReqMediaPlay::kResultDescribeFieldNumber;
#endif  // !_MSC_VER

ReqMediaPlay::ReqMediaPlay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqMediaPlay)
}

void ReqMediaPlay::InitAsDefaultInstance() {
  dev_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

ReqMediaPlay::ReqMediaPlay(const ReqMediaPlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqMediaPlay)
}

void ReqMediaPlay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamtype_ = 1;
  dev_ = NULL;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMediaPlay::~ReqMediaPlay() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqMediaPlay)
  SharedDtor();
}

void ReqMediaPlay::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
    delete dev_;
  }
}

void ReqMediaPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMediaPlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMediaPlay_descriptor_;
}

const ReqMediaPlay& ReqMediaPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

ReqMediaPlay* ReqMediaPlay::default_instance_ = NULL;

ReqMediaPlay* ReqMediaPlay::New() const {
  return new ReqMediaPlay;
}

void ReqMediaPlay::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    requesttype_ = -1;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    streamtype_ = 1;
    if (has_dev()) {
      if (dev_ != NULL) dev_->::com::arges::file::proto::DeviceInfo::Clear();
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    result_ = -1;
  }
  if (has_resultdescribe()) {
    if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      resultdescribe_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMediaPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqMediaPlay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_streamType;
        break;
      }

      // optional int32 streamType = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_streamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dev;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo dev = 4;
      case 4: {
        if (tag == 34) {
         parse_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // optional int32 port = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional int32 result = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqMediaPlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqMediaPlay)
  return false;
#undef DO_
}

void ReqMediaPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqMediaPlay)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional int32 streamType = 3 [default = 1];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->streamtype(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo dev = 4;
  if (has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dev(), output);
  }

  // optional string token = 5 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  // optional string ip = 6 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional int32 port = 7 [default = 0];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  // optional int32 result = 8 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->result(), output);
  }

  // optional bytes resultDescribe = 9 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->resultdescribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqMediaPlay)
}

::google::protobuf::uint8* ReqMediaPlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqMediaPlay)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional int32 streamType = 3 [default = 1];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->streamtype(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo dev = 4;
  if (has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dev(), target);
  }

  // optional string token = 5 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  // optional string ip = 6 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional int32 port = 7 [default = 0];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  // optional int32 result = 8 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->result(), target);
  }

  // optional bytes resultDescribe = 9 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->resultdescribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqMediaPlay)
  return target;
}

int ReqMediaPlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional int32 streamType = 3 [default = 1];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // optional .com.arges.file.proto.DeviceInfo dev = 4;
    if (has_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dev());
    }

    // optional string token = 5 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string ip = 6 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 7 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 result = 8 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes resultDescribe = 9 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMediaPlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMediaPlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMediaPlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMediaPlay::MergeFrom(const ReqMediaPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_dev()) {
      mutable_dev()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.dev());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMediaPlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMediaPlay::CopyFrom(const ReqMediaPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMediaPlay::IsInitialized() const {

  return true;
}

void ReqMediaPlay::Swap(ReqMediaPlay* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(channelid_, other->channelid_);
    std::swap(streamtype_, other->streamtype_);
    std::swap(dev_, other->dev_);
    std::swap(token_, other->token_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMediaPlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMediaPlay_descriptor_;
  metadata.reflection = ReqMediaPlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTokenPair::kUserdataFieldNumber;
#endif  // !_MSC_VER

ReqTokenPair::ReqTokenPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqTokenPair)
}

void ReqTokenPair::InitAsDefaultInstance() {
}

ReqTokenPair::ReqTokenPair(const ReqTokenPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqTokenPair)
}

void ReqTokenPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTokenPair::~ReqTokenPair() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqTokenPair)
  SharedDtor();
}

void ReqTokenPair::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void ReqTokenPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTokenPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTokenPair_descriptor_;
}

const ReqTokenPair& ReqTokenPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

ReqTokenPair* ReqTokenPair::default_instance_ = NULL;

ReqTokenPair* ReqTokenPair::New() const {
  return new ReqTokenPair;
}

void ReqTokenPair::Clear() {
  if (has_userdata()) {
    if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      userdata_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTokenPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqTokenPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userdata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqTokenPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqTokenPair)
  return false;
#undef DO_
}

void ReqTokenPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqTokenPair)
  // optional string userdata = 1 [default = ""];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqTokenPair)
}

::google::protobuf::uint8* ReqTokenPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqTokenPair)
  // optional string userdata = 1 [default = ""];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqTokenPair)
  return target;
}

int ReqTokenPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userdata = 1 [default = ""];
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTokenPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTokenPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTokenPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTokenPair::MergeFrom(const ReqTokenPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTokenPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTokenPair::CopyFrom(const ReqTokenPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTokenPair::IsInitialized() const {

  return true;
}

void ReqTokenPair::Swap(ReqTokenPair* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTokenPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTokenPair_descriptor_;
  metadata.reflection = ReqTokenPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspTokenPair::kIpFieldNumber;
const int RspTokenPair::kPortFieldNumber;
const int RspTokenPair::kToken1FieldNumber;
const int RspTokenPair::kToken2FieldNumber;
const int RspTokenPair::kResultFieldNumber;
const int RspTokenPair::kUserdataFieldNumber;
#endif  // !_MSC_VER

RspTokenPair::RspTokenPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspTokenPair)
}

void RspTokenPair::InitAsDefaultInstance() {
}

RspTokenPair::RspTokenPair(const RspTokenPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspTokenPair)
}

void RspTokenPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  token1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = -1;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspTokenPair::~RspTokenPair() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspTokenPair)
  SharedDtor();
}

void RspTokenPair::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (token1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token1_;
  }
  if (token2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token2_;
  }
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void RspTokenPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspTokenPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspTokenPair_descriptor_;
}

const RspTokenPair& RspTokenPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

RspTokenPair* RspTokenPair::default_instance_ = NULL;

RspTokenPair* RspTokenPair::New() const {
  return new RspTokenPair;
}

void RspTokenPair::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_token1()) {
      if (token1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token1_->clear();
      }
    }
    if (has_token2()) {
      if (token2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token2_->clear();
      }
    }
    result_ = -1;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspTokenPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspTokenPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token1;
        break;
      }

      // optional string token1 = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_token1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token1().data(), this->token1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token2;
        break;
      }

      // optional string token2 = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_token2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token2().data(), this->token2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_userdata;
        break;
      }

      // optional string userdata = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspTokenPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspTokenPair)
  return false;
#undef DO_
}

void RspTokenPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspTokenPair)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string token1 = 3 [default = ""];
  if (has_token1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token1().data(), this->token1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token1(), output);
  }

  // optional string token2 = 4 [default = ""];
  if (has_token2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token2().data(), this->token2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token2(), output);
  }

  // optional int32 result = 5 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional string userdata = 6 [default = ""];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspTokenPair)
}

::google::protobuf::uint8* RspTokenPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspTokenPair)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string token1 = 3 [default = ""];
  if (has_token1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token1().data(), this->token1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token1(), target);
  }

  // optional string token2 = 4 [default = ""];
  if (has_token2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token2().data(), this->token2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token2(), target);
  }

  // optional int32 result = 5 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional string userdata = 6 [default = ""];
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspTokenPair)
  return target;
}

int RspTokenPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string token1 = 3 [default = ""];
    if (has_token1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token1());
    }

    // optional string token2 = 4 [default = ""];
    if (has_token2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token2());
    }

    // optional int32 result = 5 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string userdata = 6 [default = ""];
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspTokenPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspTokenPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspTokenPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspTokenPair::MergeFrom(const RspTokenPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token1()) {
      set_token1(from.token1());
    }
    if (from.has_token2()) {
      set_token2(from.token2());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspTokenPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspTokenPair::CopyFrom(const RspTokenPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspTokenPair::IsInitialized() const {

  return true;
}

void RspTokenPair::Swap(RspTokenPair* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token1_, other->token1_);
    std::swap(token2_, other->token2_);
    std::swap(result_, other->result_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspTokenPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspTokenPair_descriptor_;
  metadata.reflection = RspTokenPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLinkageToken::kIpFieldNumber;
const int ReqLinkageToken::kPortFieldNumber;
const int ReqLinkageToken::kTokenFieldNumber;
const int ReqLinkageToken::kDevcodeFieldNumber;
#endif  // !_MSC_VER

ReqLinkageToken::ReqLinkageToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqLinkageToken)
}

void ReqLinkageToken::InitAsDefaultInstance() {
}

ReqLinkageToken::ReqLinkageToken(const ReqLinkageToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqLinkageToken)
}

void ReqLinkageToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLinkageToken::~ReqLinkageToken() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqLinkageToken)
  SharedDtor();
}

void ReqLinkageToken::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (this != default_instance_) {
  }
}

void ReqLinkageToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLinkageToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLinkageToken_descriptor_;
}

const ReqLinkageToken& ReqLinkageToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

ReqLinkageToken* ReqLinkageToken::default_instance_ = NULL;

ReqLinkageToken* ReqLinkageToken::New() const {
  return new ReqLinkageToken;
}

void ReqLinkageToken::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLinkageToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqLinkageToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_devcode;
        break;
      }

      // optional string devcode = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_devcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqLinkageToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqLinkageToken)
  return false;
#undef DO_
}

void ReqLinkageToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqLinkageToken)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string token = 3 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional string devcode = 4 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqLinkageToken)
}

::google::protobuf::uint8* ReqLinkageToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqLinkageToken)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string token = 3 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string devcode = 4 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqLinkageToken)
  return target;
}

int ReqLinkageToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string token = 3 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string devcode = 4 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLinkageToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLinkageToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLinkageToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLinkageToken::MergeFrom(const ReqLinkageToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLinkageToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLinkageToken::CopyFrom(const ReqLinkageToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLinkageToken::IsInitialized() const {

  return true;
}

void ReqLinkageToken::Swap(ReqLinkageToken* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(devcode_, other->devcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLinkageToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLinkageToken_descriptor_;
  metadata.reflection = ReqLinkageToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspLinkageToken::kResultFieldNumber;
#endif  // !_MSC_VER

RspLinkageToken::RspLinkageToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspLinkageToken)
}

void RspLinkageToken::InitAsDefaultInstance() {
}

RspLinkageToken::RspLinkageToken(const RspLinkageToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspLinkageToken)
}

void RspLinkageToken::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLinkageToken::~RspLinkageToken() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspLinkageToken)
  SharedDtor();
}

void RspLinkageToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspLinkageToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLinkageToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLinkageToken_descriptor_;
}

const RspLinkageToken& RspLinkageToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

RspLinkageToken* RspLinkageToken::default_instance_ = NULL;

RspLinkageToken* RspLinkageToken::New() const {
  return new RspLinkageToken;
}

void RspLinkageToken::Clear() {
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLinkageToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspLinkageToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspLinkageToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspLinkageToken)
  return false;
#undef DO_
}

void RspLinkageToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspLinkageToken)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspLinkageToken)
}

::google::protobuf::uint8* RspLinkageToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspLinkageToken)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspLinkageToken)
  return target;
}

int RspLinkageToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLinkageToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLinkageToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLinkageToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLinkageToken::MergeFrom(const RspLinkageToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLinkageToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLinkageToken::CopyFrom(const RspLinkageToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLinkageToken::IsInitialized() const {

  return true;
}

void RspLinkageToken::Swap(RspLinkageToken* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLinkageToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLinkageToken_descriptor_;
  metadata.reflection = RspLinkageToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCreateChannel::kDevIdFieldNumber;
const int ReqCreateChannel::kChannelIdFieldNumber;
const int ReqCreateChannel::kStreamTypeFieldNumber;
#endif  // !_MSC_VER

ReqCreateChannel::ReqCreateChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqCreateChannel)
}

void ReqCreateChannel::InitAsDefaultInstance() {
}

ReqCreateChannel::ReqCreateChannel(const ReqCreateChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqCreateChannel)
}

void ReqCreateChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateChannel::~ReqCreateChannel() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqCreateChannel)
  SharedDtor();
}

void ReqCreateChannel::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void ReqCreateChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateChannel_descriptor_;
}

const ReqCreateChannel& ReqCreateChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

ReqCreateChannel* ReqCreateChannel::default_instance_ = NULL;

ReqCreateChannel* ReqCreateChannel::New() const {
  return new ReqCreateChannel;
}

void ReqCreateChannel::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelid_->clear();
      }
    }
    streamtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqCreateChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_streamType;
        break;
      }

      // optional int32 streamType = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_streamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqCreateChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqCreateChannel)
  return false;
#undef DO_
}

void ReqCreateChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqCreateChannel)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // optional int32 streamType = 3 [default = 1];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->streamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqCreateChannel)
}

::google::protobuf::uint8* ReqCreateChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqCreateChannel)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional string channelId = 2 [default = ""];
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional int32 streamType = 3 [default = 1];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->streamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqCreateChannel)
  return target;
}

int ReqCreateChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string channelId = 2 [default = ""];
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional int32 streamType = 3 [default = 1];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateChannel::MergeFrom(const ReqCreateChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateChannel::CopyFrom(const ReqCreateChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateChannel::IsInitialized() const {

  return true;
}

void ReqCreateChannel::Swap(ReqCreateChannel* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(channelid_, other->channelid_);
    std::swap(streamtype_, other->streamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateChannel_descriptor_;
  metadata.reflection = ReqCreateChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCreateChannel::kIpFieldNumber;
const int RspCreateChannel::kPortFieldNumber;
const int RspCreateChannel::kMtokenFieldNumber;
const int RspCreateChannel::kStokenFieldNumber;
const int RspCreateChannel::kResultFieldNumber;
#endif  // !_MSC_VER

RspCreateChannel::RspCreateChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspCreateChannel)
}

void RspCreateChannel::InitAsDefaultInstance() {
}

RspCreateChannel::RspCreateChannel(const RspCreateChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspCreateChannel)
}

void RspCreateChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  mtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCreateChannel::~RspCreateChannel() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspCreateChannel)
  SharedDtor();
}

void RspCreateChannel::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (mtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mtoken_;
  }
  if (stoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stoken_;
  }
  if (this != default_instance_) {
  }
}

void RspCreateChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCreateChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCreateChannel_descriptor_;
}

const RspCreateChannel& RspCreateChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MediaBean_2eproto();
  return *default_instance_;
}

RspCreateChannel* RspCreateChannel::default_instance_ = NULL;

RspCreateChannel* RspCreateChannel::New() const {
  return new RspCreateChannel;
}

void RspCreateChannel::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_mtoken()) {
      if (mtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mtoken_->clear();
      }
    }
    if (has_stoken()) {
      if (stoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stoken_->clear();
      }
    }
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCreateChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspCreateChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mtoken;
        break;
      }

      // optional string mtoken = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_mtoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mtoken().data(), this->mtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mtoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stoken;
        break;
      }

      // optional string stoken = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_stoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stoken().data(), this->stoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspCreateChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspCreateChannel)
  return false;
#undef DO_
}

void RspCreateChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspCreateChannel)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string mtoken = 3 [default = ""];
  if (has_mtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mtoken().data(), this->mtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mtoken(), output);
  }

  // optional string stoken = 4 [default = ""];
  if (has_stoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoken().data(), this->stoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stoken(), output);
  }

  // optional int32 result = 5 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspCreateChannel)
}

::google::protobuf::uint8* RspCreateChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspCreateChannel)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string mtoken = 3 [default = ""];
  if (has_mtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mtoken().data(), this->mtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mtoken(), target);
  }

  // optional string stoken = 4 [default = ""];
  if (has_stoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stoken().data(), this->stoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stoken(), target);
  }

  // optional int32 result = 5 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspCreateChannel)
  return target;
}

int RspCreateChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string mtoken = 3 [default = ""];
    if (has_mtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mtoken());
    }

    // optional string stoken = 4 [default = ""];
    if (has_stoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoken());
    }

    // optional int32 result = 5 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCreateChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCreateChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCreateChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCreateChannel::MergeFrom(const RspCreateChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_mtoken()) {
      set_mtoken(from.mtoken());
    }
    if (from.has_stoken()) {
      set_stoken(from.stoken());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCreateChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCreateChannel::CopyFrom(const RspCreateChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCreateChannel::IsInitialized() const {

  return true;
}

void RspCreateChannel::Swap(RspCreateChannel* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(mtoken_, other->mtoken_);
    std::swap(stoken_, other->stoken_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCreateChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCreateChannel_descriptor_;
  metadata.reflection = RspCreateChannel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
