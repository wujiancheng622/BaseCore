// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataDistributeBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataDistributeBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* AlarmHostOperEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmHostOperEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataDistribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataDistribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* IssueBpxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IssueBpxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateDevice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* REPORTDATATYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REALTIME_DATA_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ALARM_DATA_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QUERY_DATA_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DATADISTRIBUTETYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUETS_TYPE_OF_WHITE_LIST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataDistributeBean_2eproto() {
  protobuf_AddDesc_DataDistributeBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataDistributeBean.proto");
  GOOGLE_CHECK(file != NULL);
  AlarmHostOperEvent_descriptor_ = file->message_type(0);
  static const int AlarmHostOperEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, username_),
  };
  AlarmHostOperEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmHostOperEvent_descriptor_,
      AlarmHostOperEvent::default_instance_,
      AlarmHostOperEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmHostOperEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmHostOperEvent));
  DataReport_descriptor_ = file->message_type(1);
  static const int DataReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, contentdatatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, content_),
  };
  DataReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataReport_descriptor_,
      DataReport::default_instance_,
      DataReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataReport));
  DataDistribute_descriptor_ = file->message_type(2);
  static const int DataDistribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, devs_),
  };
  DataDistribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataDistribute_descriptor_,
      DataDistribute::default_instance_,
      DataDistribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDistribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataDistribute));
  IssueBpxData_descriptor_ = file->message_type(3);
  static const int IssueBpxData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, devs_),
  };
  IssueBpxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IssueBpxData_descriptor_,
      IssueBpxData::default_instance_,
      IssueBpxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueBpxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IssueBpxData));
  OperateDevice_descriptor_ = file->message_type(4);
  static const int OperateDevice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, nodepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, content_),
  };
  OperateDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateDevice_descriptor_,
      OperateDevice::default_instance_,
      OperateDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateDevice));
  REPORTDATATYPE_descriptor_ = file->enum_type(0);
  REALTIME_DATA_TYPE_descriptor_ = file->enum_type(1);
  ALARM_DATA_TYPE_descriptor_ = file->enum_type(2);
  QUERY_DATA_TYPE_descriptor_ = file->enum_type(3);
  DATADISTRIBUTETYPE_descriptor_ = file->enum_type(4);
  REQUETS_TYPE_OF_WHITE_LIST_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataDistributeBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmHostOperEvent_descriptor_, &AlarmHostOperEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataReport_descriptor_, &DataReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataDistribute_descriptor_, &DataDistribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IssueBpxData_descriptor_, &IssueBpxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateDevice_descriptor_, &OperateDevice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataDistributeBean_2eproto() {
  delete AlarmHostOperEvent::default_instance_;
  delete AlarmHostOperEvent_reflection_;
  delete DataReport::default_instance_;
  delete DataReport_reflection_;
  delete DataDistribute::default_instance_;
  delete DataDistribute_reflection_;
  delete IssueBpxData::default_instance_;
  delete IssueBpxData_reflection_;
  delete OperateDevice::default_instance_;
  delete OperateDevice_reflection_;
}

void protobuf_AddDesc_DataDistributeBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030DataDistributeBean.proto\022\024com.arges.fi"
    "le.proto\032\025DevInfoListBean.proto\"d\n\022Alarm"
    "HostOperEvent\022\017\n\005devId\030\001 \001(\t:\000\022\017\n\007channe"
    "l\030\002 \003(\t\022\030\n\014operatortype\030\003 \001(\005:\002-1\022\022\n\010use"
    "rname\030\004 \001(\t:\000\"\205\001\n\nDataReport\022\017\n\005devId\030\001 "
    "\001(\t:\000\0226\n\010datatype\030\002 \001(\0162$.com.arges.file"
    ".proto.REPORTDATATYPE\022\033\n\017contentdatatype"
    "\030\003 \001(\005:\002-1\022\021\n\007content\030\004 \001(\t:\000\"\227\001\n\016DataDi"
    "stribute\022\024\n\010datatype\030\001 \001(\005:\002-1\022\022\n\006result"
    "\030\002 \001(\005:\002-1\022\030\n\016resultDescribe\030\003 \001(\014:\000\022\021\n\007"
    "content\030\004 \001(\t:\000\022.\n\004devs\030\005 \003(\0132 .com.arge"
    "s.file.proto.DeviceInfo\"\225\001\n\014IssueBpxData"
    "\022\024\n\010datatype\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002"
    "-1\022\030\n\016resultDescribe\030\003 \001(\014:\000\022\021\n\007content\030"
    "\004 \001(\t:\000\022.\n\004devs\030\005 \001(\0132 .com.arges.file.p"
    "roto.DeviceInfo\"\201\001\n\rOperateDevice\022\030\n\014ope"
    "ratorType\030\001 \001(\005:\002-1\0221\n\007devInfo\030\002 \001(\0132 .c"
    "om.arges.file.proto.DeviceInfo\022\020\n\010nodePa"
    "th\030\003 \003(\t\022\021\n\007content\030\004 \001(\t:\000*V\n\016REPORTDAT"
    "ATYPE\022\021\n\rDEVICE_STATUS\020\000\022\021\n\rREALTIME_DAT"
    "A\020\001\022\016\n\nALARM_DATA\020\002\022\016\n\nQUERY_DATA\020\003**\n\022R"
    "EALTIME_DATA_TYPE\022\024\n\020GATE_VERIFY_INFO\020\000*"
    ")\n\017ALARM_DATA_TYPE\022\026\n\021COMMON_ALARM_DATA\020"
    "\350\007*)\n\017QUERY_DATA_TYPE\022\026\n\021COMMON_QUERY_DA"
    "TA\020\320\017*/\n\022DATADISTRIBUTETYPE\022\031\n\024GATE_BLAC"
    "KWHITE_DATA\020\270\027*[\n\032REQUETS_TYPE_OF_WHITE_"
    "LIST\022\'\n#WHITE_LIST_REQUEST_ROLLING_MILL_"
    "DEV\020\001\022\024\n\020WHITE_LIST_ISSUE\020\002", 1107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataDistributeBean.proto", &protobuf_RegisterTypes);
  AlarmHostOperEvent::default_instance_ = new AlarmHostOperEvent();
  DataReport::default_instance_ = new DataReport();
  DataDistribute::default_instance_ = new DataDistribute();
  IssueBpxData::default_instance_ = new IssueBpxData();
  OperateDevice::default_instance_ = new OperateDevice();
  AlarmHostOperEvent::default_instance_->InitAsDefaultInstance();
  DataReport::default_instance_->InitAsDefaultInstance();
  DataDistribute::default_instance_->InitAsDefaultInstance();
  IssueBpxData::default_instance_->InitAsDefaultInstance();
  OperateDevice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataDistributeBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataDistributeBean_2eproto {
  StaticDescriptorInitializer_DataDistributeBean_2eproto() {
    protobuf_AddDesc_DataDistributeBean_2eproto();
  }
} static_descriptor_initializer_DataDistributeBean_2eproto_;
const ::google::protobuf::EnumDescriptor* REPORTDATATYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REPORTDATATYPE_descriptor_;
}
bool REPORTDATATYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REALTIME_DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REALTIME_DATA_TYPE_descriptor_;
}
bool REALTIME_DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ALARM_DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALARM_DATA_TYPE_descriptor_;
}
bool ALARM_DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QUERY_DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUERY_DATA_TYPE_descriptor_;
}
bool QUERY_DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 2000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DATADISTRIBUTETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATADISTRIBUTETYPE_descriptor_;
}
bool DATADISTRIBUTETYPE_IsValid(int value) {
  switch(value) {
    case 3000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUETS_TYPE_OF_WHITE_LIST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUETS_TYPE_OF_WHITE_LIST_descriptor_;
}
bool REQUETS_TYPE_OF_WHITE_LIST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmHostOperEvent::kDevIdFieldNumber;
const int AlarmHostOperEvent::kChannelFieldNumber;
const int AlarmHostOperEvent::kOperatortypeFieldNumber;
const int AlarmHostOperEvent::kUsernameFieldNumber;
#endif  // !_MSC_VER

AlarmHostOperEvent::AlarmHostOperEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmHostOperEvent)
}

void AlarmHostOperEvent::InitAsDefaultInstance() {
}

AlarmHostOperEvent::AlarmHostOperEvent(const AlarmHostOperEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmHostOperEvent)
}

void AlarmHostOperEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatortype_ = -1;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmHostOperEvent::~AlarmHostOperEvent() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmHostOperEvent)
  SharedDtor();
}

void AlarmHostOperEvent::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void AlarmHostOperEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmHostOperEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmHostOperEvent_descriptor_;
}

const AlarmHostOperEvent& AlarmHostOperEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataDistributeBean_2eproto();
  return *default_instance_;
}

AlarmHostOperEvent* AlarmHostOperEvent::default_instance_ = NULL;

AlarmHostOperEvent* AlarmHostOperEvent::New() const {
  return new AlarmHostOperEvent;
}

void AlarmHostOperEvent::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    operatortype_ = -1;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmHostOperEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmHostOperEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // repeated string channel = 2;
      case 2: {
        if (tag == 18) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        if (input->ExpectTag(24)) goto parse_operatortype;
        break;
      }

      // optional int32 operatortype = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_operatortype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatortype_)));
          set_has_operatortype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // optional string username = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmHostOperEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmHostOperEvent)
  return false;
#undef DO_
}

void AlarmHostOperEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmHostOperEvent)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // repeated string channel = 2;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel(i), output);
  }

  // optional int32 operatortype = 3 [default = -1];
  if (has_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operatortype(), output);
  }

  // optional string username = 4 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmHostOperEvent)
}

::google::protobuf::uint8* AlarmHostOperEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmHostOperEvent)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // repeated string channel = 2;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->channel(i), target);
  }

  // optional int32 operatortype = 3 [default = -1];
  if (has_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operatortype(), target);
  }

  // optional string username = 4 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmHostOperEvent)
  return target;
}

int AlarmHostOperEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional int32 operatortype = 3 [default = -1];
    if (has_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatortype());
    }

    // optional string username = 4 [default = ""];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  // repeated string channel = 2;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmHostOperEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmHostOperEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmHostOperEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmHostOperEvent::MergeFrom(const AlarmHostOperEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_operatortype()) {
      set_operatortype(from.operatortype());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmHostOperEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmHostOperEvent::CopyFrom(const AlarmHostOperEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmHostOperEvent::IsInitialized() const {

  return true;
}

void AlarmHostOperEvent::Swap(AlarmHostOperEvent* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    channel_.Swap(&other->channel_);
    std::swap(operatortype_, other->operatortype_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmHostOperEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmHostOperEvent_descriptor_;
  metadata.reflection = AlarmHostOperEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataReport::kDevIdFieldNumber;
const int DataReport::kDatatypeFieldNumber;
const int DataReport::kContentdatatypeFieldNumber;
const int DataReport::kContentFieldNumber;
#endif  // !_MSC_VER

DataReport::DataReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DataReport)
}

void DataReport::InitAsDefaultInstance() {
}

DataReport::DataReport(const DataReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DataReport)
}

void DataReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0;
  contentdatatype_ = -1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReport::~DataReport() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DataReport)
  SharedDtor();
}

void DataReport::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DataReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReport_descriptor_;
}

const DataReport& DataReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataDistributeBean_2eproto();
  return *default_instance_;
}

DataReport* DataReport::default_instance_ = NULL;

DataReport* DataReport::New() const {
  return new DataReport;
}

void DataReport::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    datatype_ = 0;
    contentdatatype_ = -1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DataReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_datatype;
        break;
      }

      // optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
      case 2: {
        if (tag == 16) {
         parse_datatype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::arges::file::proto::REPORTDATATYPE_IsValid(value)) {
            set_datatype(static_cast< ::com::arges::file::proto::REPORTDATATYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_contentdatatype;
        break;
      }

      // optional int32 contentdatatype = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_contentdatatype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contentdatatype_)));
          set_has_contentdatatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DataReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DataReport)
  return false;
#undef DO_
}

void DataReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DataReport)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  // optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->datatype(), output);
  }

  // optional int32 contentdatatype = 3 [default = -1];
  if (has_contentdatatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contentdatatype(), output);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DataReport)
}

::google::protobuf::uint8* DataReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DataReport)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->datatype(), target);
  }

  // optional int32 contentdatatype = 3 [default = -1];
  if (has_contentdatatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contentdatatype(), target);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DataReport)
  return target;
}

int DataReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional .com.arges.file.proto.REPORTDATATYPE datatype = 2;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

    // optional int32 contentdatatype = 3 [default = -1];
    if (has_contentdatatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contentdatatype());
    }

    // optional string content = 4 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataReport::MergeFrom(const DataReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_contentdatatype()) {
      set_contentdatatype(from.contentdatatype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReport::CopyFrom(const DataReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReport::IsInitialized() const {

  return true;
}

void DataReport::Swap(DataReport* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(datatype_, other->datatype_);
    std::swap(contentdatatype_, other->contentdatatype_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReport_descriptor_;
  metadata.reflection = DataReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataDistribute::kDatatypeFieldNumber;
const int DataDistribute::kResultFieldNumber;
const int DataDistribute::kResultDescribeFieldNumber;
const int DataDistribute::kContentFieldNumber;
const int DataDistribute::kDevsFieldNumber;
#endif  // !_MSC_VER

DataDistribute::DataDistribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DataDistribute)
}

void DataDistribute::InitAsDefaultInstance() {
}

DataDistribute::DataDistribute(const DataDistribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DataDistribute)
}

void DataDistribute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  datatype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataDistribute::~DataDistribute() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DataDistribute)
  SharedDtor();
}

void DataDistribute::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DataDistribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataDistribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataDistribute_descriptor_;
}

const DataDistribute& DataDistribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataDistributeBean_2eproto();
  return *default_instance_;
}

DataDistribute* DataDistribute::default_instance_ = NULL;

DataDistribute* DataDistribute::New() const {
  return new DataDistribute;
}

void DataDistribute::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    datatype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  devs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataDistribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DataDistribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datatype = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devs;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo devs = 5;
      case 5: {
        if (tag == 42) {
         parse_devs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DataDistribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DataDistribute)
  return false;
#undef DO_
}

void DataDistribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DataDistribute)
  // optional int32 datatype = 1 [default = -1];
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo devs = 5;
  for (int i = 0; i < this->devs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->devs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DataDistribute)
}

::google::protobuf::uint8* DataDistribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DataDistribute)
  // optional int32 datatype = 1 [default = -1];
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datatype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo devs = 5;
  for (int i = 0; i < this->devs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->devs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DataDistribute)
  return target;
}

int DataDistribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 datatype = 1 [default = -1];
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string content = 4 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo devs = 5;
  total_size += 1 * this->devs_size();
  for (int i = 0; i < this->devs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataDistribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataDistribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataDistribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataDistribute::MergeFrom(const DataDistribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  devs_.MergeFrom(from.devs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataDistribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataDistribute::CopyFrom(const DataDistribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataDistribute::IsInitialized() const {

  return true;
}

void DataDistribute::Swap(DataDistribute* other) {
  if (other != this) {
    std::swap(datatype_, other->datatype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(content_, other->content_);
    devs_.Swap(&other->devs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataDistribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataDistribute_descriptor_;
  metadata.reflection = DataDistribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IssueBpxData::kDatatypeFieldNumber;
const int IssueBpxData::kResultFieldNumber;
const int IssueBpxData::kResultDescribeFieldNumber;
const int IssueBpxData::kContentFieldNumber;
const int IssueBpxData::kDevsFieldNumber;
#endif  // !_MSC_VER

IssueBpxData::IssueBpxData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.IssueBpxData)
}

void IssueBpxData::InitAsDefaultInstance() {
  devs_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

IssueBpxData::IssueBpxData(const IssueBpxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.IssueBpxData)
}

void IssueBpxData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  datatype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IssueBpxData::~IssueBpxData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.IssueBpxData)
  SharedDtor();
}

void IssueBpxData::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete devs_;
  }
}

void IssueBpxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueBpxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IssueBpxData_descriptor_;
}

const IssueBpxData& IssueBpxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataDistributeBean_2eproto();
  return *default_instance_;
}

IssueBpxData* IssueBpxData::default_instance_ = NULL;

IssueBpxData* IssueBpxData::New() const {
  return new IssueBpxData;
}

void IssueBpxData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    datatype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_devs()) {
      if (devs_ != NULL) devs_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IssueBpxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.IssueBpxData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datatype = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devs;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devs = 5;
      case 5: {
        if (tag == 42) {
         parse_devs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.IssueBpxData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.IssueBpxData)
  return false;
#undef DO_
}

void IssueBpxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.IssueBpxData)
  // optional int32 datatype = 1 [default = -1];
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devs = 5;
  if (has_devs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->devs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.IssueBpxData)
}

::google::protobuf::uint8* IssueBpxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.IssueBpxData)
  // optional int32 datatype = 1 [default = -1];
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datatype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devs = 5;
  if (has_devs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->devs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.IssueBpxData)
  return target;
}

int IssueBpxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 datatype = 1 [default = -1];
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string content = 4 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .com.arges.file.proto.DeviceInfo devs = 5;
    if (has_devs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueBpxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IssueBpxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IssueBpxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IssueBpxData::MergeFrom(const IssueBpxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_devs()) {
      mutable_devs()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IssueBpxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueBpxData::CopyFrom(const IssueBpxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueBpxData::IsInitialized() const {

  return true;
}

void IssueBpxData::Swap(IssueBpxData* other) {
  if (other != this) {
    std::swap(datatype_, other->datatype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(content_, other->content_);
    std::swap(devs_, other->devs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IssueBpxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IssueBpxData_descriptor_;
  metadata.reflection = IssueBpxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateDevice::kOperatorTypeFieldNumber;
const int OperateDevice::kDevInfoFieldNumber;
const int OperateDevice::kNodePathFieldNumber;
const int OperateDevice::kContentFieldNumber;
#endif  // !_MSC_VER

OperateDevice::OperateDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.OperateDevice)
}

void OperateDevice::InitAsDefaultInstance() {
  devinfo_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

OperateDevice::OperateDevice(const OperateDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.OperateDevice)
}

void OperateDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operatortype_ = -1;
  devinfo_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateDevice::~OperateDevice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.OperateDevice)
  SharedDtor();
}

void OperateDevice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete devinfo_;
  }
}

void OperateDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateDevice_descriptor_;
}

const OperateDevice& OperateDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataDistributeBean_2eproto();
  return *default_instance_;
}

OperateDevice* OperateDevice::default_instance_ = NULL;

OperateDevice* OperateDevice::New() const {
  return new OperateDevice;
}

void OperateDevice::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    operatortype_ = -1;
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  nodepath_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.OperateDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operatorType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatortype_)));
          set_has_operatortype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devInfo;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodePath;
        break;
      }

      // repeated string nodePath = 3;
      case 3: {
        if (tag == 26) {
         parse_nodePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodepath(this->nodepath_size() - 1).data(),
            this->nodepath(this->nodepath_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodePath;
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.OperateDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.OperateDevice)
  return false;
#undef DO_
}

void OperateDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.OperateDevice)
  // optional int32 operatorType = 1 [default = -1];
  if (has_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatortype(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 2;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devinfo(), output);
  }

  // repeated string nodePath = 3;
  for (int i = 0; i < this->nodepath_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodepath(i).data(), this->nodepath(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "nodepath");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodepath(i), output);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.OperateDevice)
}

::google::protobuf::uint8* OperateDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.OperateDevice)
  // optional int32 operatorType = 1 [default = -1];
  if (has_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatortype(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 2;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devinfo(), target);
  }

  // repeated string nodePath = 3;
  for (int i = 0; i < this->nodepath_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodepath(i).data(), this->nodepath(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodepath");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->nodepath(i), target);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.OperateDevice)
  return target;
}

int OperateDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operatorType = 1 [default = -1];
    if (has_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatortype());
    }

    // optional .com.arges.file.proto.DeviceInfo devInfo = 2;
    if (has_devinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devinfo());
    }

    // optional string content = 4 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated string nodePath = 3;
  total_size += 1 * this->nodepath_size();
  for (int i = 0; i < this->nodepath_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodepath(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateDevice::MergeFrom(const OperateDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodepath_.MergeFrom(from.nodepath_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatortype()) {
      set_operatortype(from.operatortype());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devinfo());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateDevice::CopyFrom(const OperateDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateDevice::IsInitialized() const {

  return true;
}

void OperateDevice::Swap(OperateDevice* other) {
  if (other != this) {
    std::swap(operatortype_, other->operatortype_);
    std::swap(devinfo_, other->devinfo_);
    nodepath_.Swap(&other->nodepath_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateDevice_descriptor_;
  metadata.reflection = OperateDevice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
