// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceStatusEventReportBean.proto

#ifndef PROTOBUF_DeviceStatusEventReportBean_2eproto__INCLUDED
#define PROTOBUF_DeviceStatusEventReportBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeviceStatusEventReportBean_2eproto();
void protobuf_AssignDesc_DeviceStatusEventReportBean_2eproto();
void protobuf_ShutdownFile_DeviceStatusEventReportBean_2eproto();

class DeviceStatusEventReport;

// ===================================================================

class DeviceStatusEventReport : public ::google::protobuf::Message {
 public:
  DeviceStatusEventReport();
  virtual ~DeviceStatusEventReport();

  DeviceStatusEventReport(const DeviceStatusEventReport& from);

  inline DeviceStatusEventReport& operator=(const DeviceStatusEventReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceStatusEventReport& default_instance();

  void Swap(DeviceStatusEventReport* other);

  // implements Message ----------------------------------------------

  DeviceStatusEventReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceStatusEventReport& from);
  void MergeFrom(const DeviceStatusEventReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceid = 1 [default = "default"];
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional int32 channel = 2 [default = -1];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 statustype = 5 [default = -1];
  inline bool has_statustype() const;
  inline void clear_statustype();
  static const int kStatustypeFieldNumber = 5;
  inline ::google::protobuf::int32 statustype() const;
  inline void set_statustype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceStatusEventReport)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_statustype();
  inline void clear_has_statustype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_deviceid_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 statustype_;
  friend void  protobuf_AddDesc_DeviceStatusEventReportBean_2eproto();
  friend void protobuf_AssignDesc_DeviceStatusEventReportBean_2eproto();
  friend void protobuf_ShutdownFile_DeviceStatusEventReportBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceStatusEventReport* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceStatusEventReport

// optional string deviceid = 1 [default = "default"];
inline bool DeviceStatusEventReport::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStatusEventReport::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceStatusEventReport::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStatusEventReport::clear_deviceid() {
  if (deviceid_ != _default_deviceid_) {
    deviceid_->assign(*_default_deviceid_);
  }
  clear_has_deviceid();
}
inline const ::std::string& DeviceStatusEventReport::deviceid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceStatusEventReport.deviceid)
  return *deviceid_;
}
inline void DeviceStatusEventReport::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceStatusEventReport.deviceid)
}
inline void DeviceStatusEventReport::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceStatusEventReport.deviceid)
}
inline void DeviceStatusEventReport::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceStatusEventReport.deviceid)
}
inline ::std::string* DeviceStatusEventReport::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string(*_default_deviceid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceStatusEventReport.deviceid)
  return deviceid_;
}
inline ::std::string* DeviceStatusEventReport::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
    return temp;
  }
}
inline void DeviceStatusEventReport::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceStatusEventReport.deviceid)
}

// optional int32 channel = 2 [default = -1];
inline bool DeviceStatusEventReport::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceStatusEventReport::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceStatusEventReport::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceStatusEventReport::clear_channel() {
  channel_ = -1;
  clear_has_channel();
}
inline ::google::protobuf::int32 DeviceStatusEventReport::channel() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceStatusEventReport.channel)
  return channel_;
}
inline void DeviceStatusEventReport::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceStatusEventReport.channel)
}

// optional int32 statustype = 5 [default = -1];
inline bool DeviceStatusEventReport::has_statustype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceStatusEventReport::set_has_statustype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceStatusEventReport::clear_has_statustype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceStatusEventReport::clear_statustype() {
  statustype_ = -1;
  clear_has_statustype();
}
inline ::google::protobuf::int32 DeviceStatusEventReport::statustype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceStatusEventReport.statustype)
  return statustype_;
}
inline void DeviceStatusEventReport::set_statustype(::google::protobuf::int32 value) {
  set_has_statustype();
  statustype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceStatusEventReport.statustype)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceStatusEventReportBean_2eproto__INCLUDED
