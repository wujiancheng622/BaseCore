// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DevInfoListBean.proto

#ifndef PROTOBUF_DevInfoListBean_2eproto__INCLUDED
#define PROTOBUF_DevInfoListBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DevInfoListBean_2eproto();
void protobuf_AssignDesc_DevInfoListBean_2eproto();
void protobuf_ShutdownFile_DevInfoListBean_2eproto();

class ChnInfo;
class DeviceInfo;
class DeviceInfoList;
class ReqDevInfoFromTms;
class RspDevInfoToTms;
class ReqDevInfoFromDms;
class RspDevInfoToDms;
class ReqDevRegisterServerInfo;
class RspDevRegisterServerInfo;

// ===================================================================

class ChnInfo : public ::google::protobuf::Message {
 public:
  ChnInfo();
  virtual ~ChnInfo();

  ChnInfo(const ChnInfo& from);

  inline ChnInfo& operator=(const ChnInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChnInfo& default_instance();

  void Swap(ChnInfo* other);

  // implements Message ----------------------------------------------

  ChnInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChnInfo& from);
  void MergeFrom(const ChnInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nIndex = 1 [default = -1];
  inline bool has_nindex() const;
  inline void clear_nindex();
  static const int kNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 nindex() const;
  inline void set_nindex(::google::protobuf::int32 value);

  // optional int32 subType = 2 [default = -1];
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 2;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional int32 nLevel = 3 [default = -1];
  inline bool has_nlevel() const;
  inline void clear_nlevel();
  static const int kNLevelFieldNumber = 3;
  inline ::google::protobuf::int32 nlevel() const;
  inline void set_nlevel(::google::protobuf::int32 value);

  // optional int32 InOrOut = 4 [default = -1];
  inline bool has_inorout() const;
  inline void clear_inorout();
  static const int kInOrOutFieldNumber = 4;
  inline ::google::protobuf::int32 inorout() const;
  inline void set_inorout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ChnInfo)
 private:
  inline void set_has_nindex();
  inline void clear_has_nindex();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_nlevel();
  inline void clear_has_nlevel();
  inline void set_has_inorout();
  inline void clear_has_inorout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nindex_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 inorout_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ChnInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string keyId = 1 [default = "default"];
  inline bool has_keyid() const;
  inline void clear_keyid();
  static const int kKeyIdFieldNumber = 1;
  inline const ::std::string& keyid() const;
  inline void set_keyid(const ::std::string& value);
  inline void set_keyid(const char* value);
  inline void set_keyid(const char* value, size_t size);
  inline ::std::string* mutable_keyid();
  inline ::std::string* release_keyid();
  inline void set_allocated_keyid(::std::string* keyid);

  // optional string devId = 2 [default = "default"];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 2;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string provider = 3 [default = "default"];
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline const ::std::string& provider() const;
  inline void set_provider(const ::std::string& value);
  inline void set_provider(const char* value);
  inline void set_provider(const char* value, size_t size);
  inline ::std::string* mutable_provider();
  inline ::std::string* release_provider();
  inline void set_allocated_provider(::std::string* provider);

  // optional string model = 4 [default = "default"];
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string devIp = 5 [default = "default"];
  inline bool has_devip() const;
  inline void clear_devip();
  static const int kDevIpFieldNumber = 5;
  inline const ::std::string& devip() const;
  inline void set_devip(const ::std::string& value);
  inline void set_devip(const char* value);
  inline void set_devip(const char* value, size_t size);
  inline ::std::string* mutable_devip();
  inline ::std::string* release_devip();
  inline void set_allocated_devip(::std::string* devip);

  // optional int32 devPort = 6 [default = -1];
  inline bool has_devport() const;
  inline void clear_devport();
  static const int kDevPortFieldNumber = 6;
  inline ::google::protobuf::int32 devport() const;
  inline void set_devport(::google::protobuf::int32 value);

  // optional string userName = 7 [default = "default"];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 7;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string userPsw = 8 [default = "default"];
  inline bool has_userpsw() const;
  inline void clear_userpsw();
  static const int kUserPswFieldNumber = 8;
  inline const ::std::string& userpsw() const;
  inline void set_userpsw(const ::std::string& value);
  inline void set_userpsw(const char* value);
  inline void set_userpsw(const char* value, size_t size);
  inline ::std::string* mutable_userpsw();
  inline ::std::string* release_userpsw();
  inline void set_allocated_userpsw(::std::string* userpsw);

  // optional int32 streamType = 9 [default = -1];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 9;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // optional int32 devType = 10 [default = -1];
  inline bool has_devtype() const;
  inline void clear_devtype();
  static const int kDevTypeFieldNumber = 10;
  inline ::google::protobuf::int32 devtype() const;
  inline void set_devtype(::google::protobuf::int32 value);

  // optional int32 proxyPort = 11 [default = -1];
  inline bool has_proxyport() const;
  inline void clear_proxyport();
  static const int kProxyPortFieldNumber = 11;
  inline ::google::protobuf::int32 proxyport() const;
  inline void set_proxyport(::google::protobuf::int32 value);

  // optional string registerId = 12 [default = "default"];
  inline bool has_registerid() const;
  inline void clear_registerid();
  static const int kRegisterIdFieldNumber = 12;
  inline const ::std::string& registerid() const;
  inline void set_registerid(const ::std::string& value);
  inline void set_registerid(const char* value);
  inline void set_registerid(const char* value, size_t size);
  inline ::std::string* mutable_registerid();
  inline ::std::string* release_registerid();
  inline void set_allocated_registerid(::std::string* registerid);

  // optional string deviceThird = 13 [default = "default"];
  inline bool has_devicethird() const;
  inline void clear_devicethird();
  static const int kDeviceThirdFieldNumber = 13;
  inline const ::std::string& devicethird() const;
  inline void set_devicethird(const ::std::string& value);
  inline void set_devicethird(const char* value);
  inline void set_devicethird(const char* value, size_t size);
  inline ::std::string* mutable_devicethird();
  inline ::std::string* release_devicethird();
  inline void set_allocated_devicethird(::std::string* devicethird);

  // optional int32 streamMode = 14 [default = -1];
  inline bool has_streammode() const;
  inline void clear_streammode();
  static const int kStreamModeFieldNumber = 14;
  inline ::google::protobuf::int32 streammode() const;
  inline void set_streammode(::google::protobuf::int32 value);

  // optional int32 channelNum = 15 [default = -1];
  inline bool has_channelnum() const;
  inline void clear_channelnum();
  static const int kChannelNumFieldNumber = 15;
  inline ::google::protobuf::int32 channelnum() const;
  inline void set_channelnum(::google::protobuf::int32 value);

  // optional int32 loginType = 16 [default = -1];
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLoginTypeFieldNumber = 16;
  inline ::google::protobuf::int32 logintype() const;
  inline void set_logintype(::google::protobuf::int32 value);

  // optional int32 combineStatus = 17 [default = -1];
  inline bool has_combinestatus() const;
  inline void clear_combinestatus();
  static const int kCombineStatusFieldNumber = 17;
  inline ::google::protobuf::int32 combinestatus() const;
  inline void set_combinestatus(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.ChnInfo chninfo = 18;
  inline int chninfo_size() const;
  inline void clear_chninfo();
  static const int kChninfoFieldNumber = 18;
  inline const ::com::arges::file::proto::ChnInfo& chninfo(int index) const;
  inline ::com::arges::file::proto::ChnInfo* mutable_chninfo(int index);
  inline ::com::arges::file::proto::ChnInfo* add_chninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ChnInfo >&
      chninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ChnInfo >*
      mutable_chninfo();

  // optional int32 serviceCode = 19 [default = -1];
  inline bool has_servicecode() const;
  inline void clear_servicecode();
  static const int kServiceCodeFieldNumber = 19;
  inline ::google::protobuf::int32 servicecode() const;
  inline void set_servicecode(::google::protobuf::int32 value);

  // optional string serviceIp = 20 [default = "default"];
  inline bool has_serviceip() const;
  inline void clear_serviceip();
  static const int kServiceIpFieldNumber = 20;
  inline const ::std::string& serviceip() const;
  inline void set_serviceip(const ::std::string& value);
  inline void set_serviceip(const char* value);
  inline void set_serviceip(const char* value, size_t size);
  inline ::std::string* mutable_serviceip();
  inline ::std::string* release_serviceip();
  inline void set_allocated_serviceip(::std::string* serviceip);

  // optional int32 servicePort = 21 [default = -1];
  inline bool has_serviceport() const;
  inline void clear_serviceport();
  static const int kServicePortFieldNumber = 21;
  inline ::google::protobuf::int32 serviceport() const;
  inline void set_serviceport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceInfo)
 private:
  inline void set_has_keyid();
  inline void clear_has_keyid();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_devip();
  inline void clear_has_devip();
  inline void set_has_devport();
  inline void clear_has_devport();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpsw();
  inline void clear_has_userpsw();
  inline void set_has_streamtype();
  inline void clear_has_streamtype();
  inline void set_has_devtype();
  inline void clear_has_devtype();
  inline void set_has_proxyport();
  inline void clear_has_proxyport();
  inline void set_has_registerid();
  inline void clear_has_registerid();
  inline void set_has_devicethird();
  inline void clear_has_devicethird();
  inline void set_has_streammode();
  inline void clear_has_streammode();
  inline void set_has_channelnum();
  inline void clear_has_channelnum();
  inline void set_has_logintype();
  inline void clear_has_logintype();
  inline void set_has_combinestatus();
  inline void clear_has_combinestatus();
  inline void set_has_servicecode();
  inline void clear_has_servicecode();
  inline void set_has_serviceip();
  inline void clear_has_serviceip();
  inline void set_has_serviceport();
  inline void clear_has_serviceport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_keyid_;
  ::std::string* keyid_;
  static ::std::string* _default_devid_;
  ::std::string* devid_;
  static ::std::string* _default_provider_;
  ::std::string* provider_;
  static ::std::string* _default_model_;
  ::std::string* model_;
  static ::std::string* _default_devip_;
  ::std::string* devip_;
  static ::std::string* _default_username_;
  ::std::string* username_;
  ::google::protobuf::int32 devport_;
  ::google::protobuf::int32 streamtype_;
  static ::std::string* _default_userpsw_;
  ::std::string* userpsw_;
  ::google::protobuf::int32 devtype_;
  ::google::protobuf::int32 proxyport_;
  static ::std::string* _default_registerid_;
  ::std::string* registerid_;
  static ::std::string* _default_devicethird_;
  ::std::string* devicethird_;
  ::google::protobuf::int32 streammode_;
  ::google::protobuf::int32 channelnum_;
  ::google::protobuf::int32 logintype_;
  ::google::protobuf::int32 combinestatus_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ChnInfo > chninfo_;
  static ::std::string* _default_serviceip_;
  ::std::string* serviceip_;
  ::google::protobuf::int32 servicecode_;
  ::google::protobuf::int32 serviceport_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfoList : public ::google::protobuf::Message {
 public:
  DeviceInfoList();
  virtual ~DeviceInfoList();

  DeviceInfoList(const DeviceInfoList& from);

  inline DeviceInfoList& operator=(const DeviceInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoList& default_instance();

  void Swap(DeviceInfoList* other);

  // implements Message ----------------------------------------------

  DeviceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfoList& from);
  void MergeFrom(const DeviceInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  inline int deviceinfo_size() const;
  inline void clear_deviceinfo();
  static const int kDeviceinfoFieldNumber = 1;
  inline const ::com::arges::file::proto::DeviceInfo& deviceinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_deviceinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_deviceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      deviceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_deviceinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > deviceinfo_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfoList* default_instance_;
};
// -------------------------------------------------------------------

class ReqDevInfoFromTms : public ::google::protobuf::Message {
 public:
  ReqDevInfoFromTms();
  virtual ~ReqDevInfoFromTms();

  ReqDevInfoFromTms(const ReqDevInfoFromTms& from);

  inline ReqDevInfoFromTms& operator=(const ReqDevInfoFromTms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDevInfoFromTms& default_instance();

  void Swap(ReqDevInfoFromTms* other);

  // implements Message ----------------------------------------------

  ReqDevInfoFromTms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDevInfoFromTms& from);
  void MergeFrom(const ReqDevInfoFromTms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tmsId = 1 [default = "default"];
  inline bool has_tmsid() const;
  inline void clear_tmsid();
  static const int kTmsIdFieldNumber = 1;
  inline const ::std::string& tmsid() const;
  inline void set_tmsid(const ::std::string& value);
  inline void set_tmsid(const char* value);
  inline void set_tmsid(const char* value, size_t size);
  inline ::std::string* mutable_tmsid();
  inline ::std::string* release_tmsid();
  inline void set_allocated_tmsid(::std::string* tmsid);

  // required int32 oprType = 2 [default = -1];
  inline bool has_oprtype() const;
  inline void clear_oprtype();
  static const int kOprTypeFieldNumber = 2;
  inline ::google::protobuf::int32 oprtype() const;
  inline void set_oprtype(::google::protobuf::int32 value);

  // repeated string devId = 3;
  inline int devid_size() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 3;
  inline const ::std::string& devid(int index) const;
  inline ::std::string* mutable_devid(int index);
  inline void set_devid(int index, const ::std::string& value);
  inline void set_devid(int index, const char* value);
  inline void set_devid(int index, const char* value, size_t size);
  inline ::std::string* add_devid();
  inline void add_devid(const ::std::string& value);
  inline void add_devid(const char* value);
  inline void add_devid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& devid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_devid();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDevInfoFromTms)
 private:
  inline void set_has_tmsid();
  inline void clear_has_tmsid();
  inline void set_has_oprtype();
  inline void clear_has_oprtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_tmsid_;
  ::std::string* tmsid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> devid_;
  ::google::protobuf::int32 oprtype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDevInfoFromTms* default_instance_;
};
// -------------------------------------------------------------------

class RspDevInfoToTms : public ::google::protobuf::Message {
 public:
  RspDevInfoToTms();
  virtual ~RspDevInfoToTms();

  RspDevInfoToTms(const RspDevInfoToTms& from);

  inline RspDevInfoToTms& operator=(const RspDevInfoToTms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDevInfoToTms& default_instance();

  void Swap(RspDevInfoToTms* other);

  // implements Message ----------------------------------------------

  RspDevInfoToTms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDevInfoToTms& from);
  void MergeFrom(const RspDevInfoToTms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tmsId = 1 [default = "default"];
  inline bool has_tmsid() const;
  inline void clear_tmsid();
  static const int kTmsIdFieldNumber = 1;
  inline const ::std::string& tmsid() const;
  inline void set_tmsid(const ::std::string& value);
  inline void set_tmsid(const char* value);
  inline void set_tmsid(const char* value, size_t size);
  inline ::std::string* mutable_tmsid();
  inline ::std::string* release_tmsid();
  inline void set_allocated_tmsid(::std::string* tmsid);

  // optional int32 oprType = 2 [default = -1];
  inline bool has_oprtype() const;
  inline void clear_oprtype();
  static const int kOprTypeFieldNumber = 2;
  inline ::google::protobuf::int32 oprtype() const;
  inline void set_oprtype(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  inline int deviceinfo_size() const;
  inline void clear_deviceinfo();
  static const int kDeviceinfoFieldNumber = 3;
  inline const ::com::arges::file::proto::DeviceInfo& deviceinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_deviceinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_deviceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      deviceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_deviceinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDevInfoToTms)
 private:
  inline void set_has_tmsid();
  inline void clear_has_tmsid();
  inline void set_has_oprtype();
  inline void clear_has_oprtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_tmsid_;
  ::std::string* tmsid_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > deviceinfo_;
  ::google::protobuf::int32 oprtype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static RspDevInfoToTms* default_instance_;
};
// -------------------------------------------------------------------

class ReqDevInfoFromDms : public ::google::protobuf::Message {
 public:
  ReqDevInfoFromDms();
  virtual ~ReqDevInfoFromDms();

  ReqDevInfoFromDms(const ReqDevInfoFromDms& from);

  inline ReqDevInfoFromDms& operator=(const ReqDevInfoFromDms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDevInfoFromDms& default_instance();

  void Swap(ReqDevInfoFromDms* other);

  // implements Message ----------------------------------------------

  ReqDevInfoFromDms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDevInfoFromDms& from);
  void MergeFrom(const ReqDevInfoFromDms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dmsId = 1 [default = "default"];
  inline bool has_dmsid() const;
  inline void clear_dmsid();
  static const int kDmsIdFieldNumber = 1;
  inline const ::std::string& dmsid() const;
  inline void set_dmsid(const ::std::string& value);
  inline void set_dmsid(const char* value);
  inline void set_dmsid(const char* value, size_t size);
  inline ::std::string* mutable_dmsid();
  inline ::std::string* release_dmsid();
  inline void set_allocated_dmsid(::std::string* dmsid);

  // required int32 oprType = 2 [default = -1];
  inline bool has_oprtype() const;
  inline void clear_oprtype();
  static const int kOprTypeFieldNumber = 2;
  inline ::google::protobuf::int32 oprtype() const;
  inline void set_oprtype(::google::protobuf::int32 value);

  // repeated string devId = 3;
  inline int devid_size() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 3;
  inline const ::std::string& devid(int index) const;
  inline ::std::string* mutable_devid(int index);
  inline void set_devid(int index, const ::std::string& value);
  inline void set_devid(int index, const char* value);
  inline void set_devid(int index, const char* value, size_t size);
  inline ::std::string* add_devid();
  inline void add_devid(const ::std::string& value);
  inline void add_devid(const char* value);
  inline void add_devid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& devid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_devid();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDevInfoFromDms)
 private:
  inline void set_has_dmsid();
  inline void clear_has_dmsid();
  inline void set_has_oprtype();
  inline void clear_has_oprtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_dmsid_;
  ::std::string* dmsid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> devid_;
  ::google::protobuf::int32 oprtype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDevInfoFromDms* default_instance_;
};
// -------------------------------------------------------------------

class RspDevInfoToDms : public ::google::protobuf::Message {
 public:
  RspDevInfoToDms();
  virtual ~RspDevInfoToDms();

  RspDevInfoToDms(const RspDevInfoToDms& from);

  inline RspDevInfoToDms& operator=(const RspDevInfoToDms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDevInfoToDms& default_instance();

  void Swap(RspDevInfoToDms* other);

  // implements Message ----------------------------------------------

  RspDevInfoToDms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDevInfoToDms& from);
  void MergeFrom(const RspDevInfoToDms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dmsId = 1 [default = "default"];
  inline bool has_dmsid() const;
  inline void clear_dmsid();
  static const int kDmsIdFieldNumber = 1;
  inline const ::std::string& dmsid() const;
  inline void set_dmsid(const ::std::string& value);
  inline void set_dmsid(const char* value);
  inline void set_dmsid(const char* value, size_t size);
  inline ::std::string* mutable_dmsid();
  inline ::std::string* release_dmsid();
  inline void set_allocated_dmsid(::std::string* dmsid);

  // optional int32 oprType = 2 [default = -1];
  inline bool has_oprtype() const;
  inline void clear_oprtype();
  static const int kOprTypeFieldNumber = 2;
  inline ::google::protobuf::int32 oprtype() const;
  inline void set_oprtype(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  inline int deviceinfo_size() const;
  inline void clear_deviceinfo();
  static const int kDeviceinfoFieldNumber = 3;
  inline const ::com::arges::file::proto::DeviceInfo& deviceinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_deviceinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_deviceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      deviceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_deviceinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDevInfoToDms)
 private:
  inline void set_has_dmsid();
  inline void clear_has_dmsid();
  inline void set_has_oprtype();
  inline void clear_has_oprtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_dmsid_;
  ::std::string* dmsid_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > deviceinfo_;
  ::google::protobuf::int32 oprtype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static RspDevInfoToDms* default_instance_;
};
// -------------------------------------------------------------------

class ReqDevRegisterServerInfo : public ::google::protobuf::Message {
 public:
  ReqDevRegisterServerInfo();
  virtual ~ReqDevRegisterServerInfo();

  ReqDevRegisterServerInfo(const ReqDevRegisterServerInfo& from);

  inline ReqDevRegisterServerInfo& operator=(const ReqDevRegisterServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDevRegisterServerInfo& default_instance();

  void Swap(ReqDevRegisterServerInfo* other);

  // implements Message ----------------------------------------------

  ReqDevRegisterServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDevRegisterServerInfo& from);
  void MergeFrom(const ReqDevRegisterServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string devId = 1;
  inline int devid_size() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid(int index) const;
  inline ::std::string* mutable_devid(int index);
  inline void set_devid(int index, const ::std::string& value);
  inline void set_devid(int index, const char* value);
  inline void set_devid(int index, const char* value, size_t size);
  inline ::std::string* add_devid();
  inline void add_devid(const ::std::string& value);
  inline void add_devid(const char* value);
  inline void add_devid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& devid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_devid();

  // required int32 mstype = 2;
  inline bool has_mstype() const;
  inline void clear_mstype();
  static const int kMstypeFieldNumber = 2;
  inline ::google::protobuf::int32 mstype() const;
  inline void set_mstype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDevRegisterServerInfo)
 private:
  inline void set_has_mstype();
  inline void clear_has_mstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> devid_;
  ::google::protobuf::int32 mstype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDevRegisterServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspDevRegisterServerInfo : public ::google::protobuf::Message {
 public:
  RspDevRegisterServerInfo();
  virtual ~RspDevRegisterServerInfo();

  RspDevRegisterServerInfo(const RspDevRegisterServerInfo& from);

  inline RspDevRegisterServerInfo& operator=(const RspDevRegisterServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDevRegisterServerInfo& default_instance();

  void Swap(RspDevRegisterServerInfo* other);

  // implements Message ----------------------------------------------

  RspDevRegisterServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDevRegisterServerInfo& from);
  void MergeFrom(const RspDevRegisterServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string devId = 1;
  inline int devid_size() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline const ::std::string& devid(int index) const;
  inline ::std::string* mutable_devid(int index);
  inline void set_devid(int index, const ::std::string& value);
  inline void set_devid(int index, const char* value);
  inline void set_devid(int index, const char* value, size_t size);
  inline ::std::string* add_devid();
  inline void add_devid(const ::std::string& value);
  inline void add_devid(const char* value);
  inline void add_devid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& devid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_devid();

  // required int32 mstype = 2;
  inline bool has_mstype() const;
  inline void clear_mstype();
  static const int kMstypeFieldNumber = 2;
  inline ::google::protobuf::int32 mstype() const;
  inline void set_mstype(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  inline int deviceinfo_size() const;
  inline void clear_deviceinfo();
  static const int kDeviceinfoFieldNumber = 3;
  inline const ::com::arges::file::proto::DeviceInfo& deviceinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_deviceinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_deviceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      deviceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_deviceinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDevRegisterServerInfo)
 private:
  inline void set_has_mstype();
  inline void clear_has_mstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> devid_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > deviceinfo_;
  ::google::protobuf::int32 mstype_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static RspDevRegisterServerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ChnInfo

// optional int32 nIndex = 1 [default = -1];
inline bool ChnInfo::has_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChnInfo::set_has_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChnInfo::clear_has_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChnInfo::clear_nindex() {
  nindex_ = -1;
  clear_has_nindex();
}
inline ::google::protobuf::int32 ChnInfo::nindex() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ChnInfo.nIndex)
  return nindex_;
}
inline void ChnInfo::set_nindex(::google::protobuf::int32 value) {
  set_has_nindex();
  nindex_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ChnInfo.nIndex)
}

// optional int32 subType = 2 [default = -1];
inline bool ChnInfo::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChnInfo::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChnInfo::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChnInfo::clear_subtype() {
  subtype_ = -1;
  clear_has_subtype();
}
inline ::google::protobuf::int32 ChnInfo::subtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ChnInfo.subType)
  return subtype_;
}
inline void ChnInfo::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ChnInfo.subType)
}

// optional int32 nLevel = 3 [default = -1];
inline bool ChnInfo::has_nlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChnInfo::set_has_nlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChnInfo::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChnInfo::clear_nlevel() {
  nlevel_ = -1;
  clear_has_nlevel();
}
inline ::google::protobuf::int32 ChnInfo::nlevel() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ChnInfo.nLevel)
  return nlevel_;
}
inline void ChnInfo::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ChnInfo.nLevel)
}

// optional int32 InOrOut = 4 [default = -1];
inline bool ChnInfo::has_inorout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChnInfo::set_has_inorout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChnInfo::clear_has_inorout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChnInfo::clear_inorout() {
  inorout_ = -1;
  clear_has_inorout();
}
inline ::google::protobuf::int32 ChnInfo::inorout() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ChnInfo.InOrOut)
  return inorout_;
}
inline void ChnInfo::set_inorout(::google::protobuf::int32 value) {
  set_has_inorout();
  inorout_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ChnInfo.InOrOut)
}

// -------------------------------------------------------------------

// DeviceInfo

// optional string keyId = 1 [default = "default"];
inline bool DeviceInfo::has_keyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_keyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_keyid() {
  if (keyid_ != _default_keyid_) {
    keyid_->assign(*_default_keyid_);
  }
  clear_has_keyid();
}
inline const ::std::string& DeviceInfo::keyid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.keyId)
  return *keyid_;
}
inline void DeviceInfo::set_keyid(const ::std::string& value) {
  set_has_keyid();
  if (keyid_ == _default_keyid_) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.keyId)
}
inline void DeviceInfo::set_keyid(const char* value) {
  set_has_keyid();
  if (keyid_ == _default_keyid_) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.keyId)
}
inline void DeviceInfo::set_keyid(const char* value, size_t size) {
  set_has_keyid();
  if (keyid_ == _default_keyid_) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.keyId)
}
inline ::std::string* DeviceInfo::mutable_keyid() {
  set_has_keyid();
  if (keyid_ == _default_keyid_) {
    keyid_ = new ::std::string(*_default_keyid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.keyId)
  return keyid_;
}
inline ::std::string* DeviceInfo::release_keyid() {
  clear_has_keyid();
  if (keyid_ == _default_keyid_) {
    return NULL;
  } else {
    ::std::string* temp = keyid_;
    keyid_ = const_cast< ::std::string*>(_default_keyid_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_keyid(::std::string* keyid) {
  if (keyid_ != _default_keyid_) {
    delete keyid_;
  }
  if (keyid) {
    set_has_keyid();
    keyid_ = keyid;
  } else {
    clear_has_keyid();
    keyid_ = const_cast< ::std::string*>(_default_keyid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.keyId)
}

// optional string devId = 2 [default = "default"];
inline bool DeviceInfo::has_devid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_devid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_devid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_devid() {
  if (devid_ != _default_devid_) {
    devid_->assign(*_default_devid_);
  }
  clear_has_devid();
}
inline const ::std::string& DeviceInfo::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devId)
  return *devid_;
}
inline void DeviceInfo::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == _default_devid_) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devId)
}
inline void DeviceInfo::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == _default_devid_) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.devId)
}
inline void DeviceInfo::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == _default_devid_) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.devId)
}
inline ::std::string* DeviceInfo::mutable_devid() {
  set_has_devid();
  if (devid_ == _default_devid_) {
    devid_ = new ::std::string(*_default_devid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.devId)
  return devid_;
}
inline ::std::string* DeviceInfo::release_devid() {
  clear_has_devid();
  if (devid_ == _default_devid_) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(_default_devid_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devid(::std::string* devid) {
  if (devid_ != _default_devid_) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(_default_devid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.devId)
}

// optional string provider = 3 [default = "default"];
inline bool DeviceInfo::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_provider() {
  if (provider_ != _default_provider_) {
    provider_->assign(*_default_provider_);
  }
  clear_has_provider();
}
inline const ::std::string& DeviceInfo::provider() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.provider)
  return *provider_;
}
inline void DeviceInfo::set_provider(const ::std::string& value) {
  set_has_provider();
  if (provider_ == _default_provider_) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.provider)
}
inline void DeviceInfo::set_provider(const char* value) {
  set_has_provider();
  if (provider_ == _default_provider_) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.provider)
}
inline void DeviceInfo::set_provider(const char* value, size_t size) {
  set_has_provider();
  if (provider_ == _default_provider_) {
    provider_ = new ::std::string;
  }
  provider_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.provider)
}
inline ::std::string* DeviceInfo::mutable_provider() {
  set_has_provider();
  if (provider_ == _default_provider_) {
    provider_ = new ::std::string(*_default_provider_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.provider)
  return provider_;
}
inline ::std::string* DeviceInfo::release_provider() {
  clear_has_provider();
  if (provider_ == _default_provider_) {
    return NULL;
  } else {
    ::std::string* temp = provider_;
    provider_ = const_cast< ::std::string*>(_default_provider_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_provider(::std::string* provider) {
  if (provider_ != _default_provider_) {
    delete provider_;
  }
  if (provider) {
    set_has_provider();
    provider_ = provider;
  } else {
    clear_has_provider();
    provider_ = const_cast< ::std::string*>(_default_provider_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.provider)
}

// optional string model = 4 [default = "default"];
inline bool DeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfo::clear_model() {
  if (model_ != _default_model_) {
    model_->assign(*_default_model_);
  }
  clear_has_model();
}
inline const ::std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.model)
  return *model_;
}
inline void DeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == _default_model_) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == _default_model_) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == _default_model_) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.model)
}
inline ::std::string* DeviceInfo::mutable_model() {
  set_has_model();
  if (model_ == _default_model_) {
    model_ = new ::std::string(*_default_model_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.model)
  return model_;
}
inline ::std::string* DeviceInfo::release_model() {
  clear_has_model();
  if (model_ == _default_model_) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(_default_model_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_model(::std::string* model) {
  if (model_ != _default_model_) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(_default_model_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.model)
}

// optional string devIp = 5 [default = "default"];
inline bool DeviceInfo::has_devip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfo::set_has_devip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceInfo::clear_has_devip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceInfo::clear_devip() {
  if (devip_ != _default_devip_) {
    devip_->assign(*_default_devip_);
  }
  clear_has_devip();
}
inline const ::std::string& DeviceInfo::devip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devIp)
  return *devip_;
}
inline void DeviceInfo::set_devip(const ::std::string& value) {
  set_has_devip();
  if (devip_ == _default_devip_) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devIp)
}
inline void DeviceInfo::set_devip(const char* value) {
  set_has_devip();
  if (devip_ == _default_devip_) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.devIp)
}
inline void DeviceInfo::set_devip(const char* value, size_t size) {
  set_has_devip();
  if (devip_ == _default_devip_) {
    devip_ = new ::std::string;
  }
  devip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.devIp)
}
inline ::std::string* DeviceInfo::mutable_devip() {
  set_has_devip();
  if (devip_ == _default_devip_) {
    devip_ = new ::std::string(*_default_devip_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.devIp)
  return devip_;
}
inline ::std::string* DeviceInfo::release_devip() {
  clear_has_devip();
  if (devip_ == _default_devip_) {
    return NULL;
  } else {
    ::std::string* temp = devip_;
    devip_ = const_cast< ::std::string*>(_default_devip_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devip(::std::string* devip) {
  if (devip_ != _default_devip_) {
    delete devip_;
  }
  if (devip) {
    set_has_devip();
    devip_ = devip;
  } else {
    clear_has_devip();
    devip_ = const_cast< ::std::string*>(_default_devip_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.devIp)
}

// optional int32 devPort = 6 [default = -1];
inline bool DeviceInfo::has_devport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceInfo::set_has_devport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceInfo::clear_has_devport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceInfo::clear_devport() {
  devport_ = -1;
  clear_has_devport();
}
inline ::google::protobuf::int32 DeviceInfo::devport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devPort)
  return devport_;
}
inline void DeviceInfo::set_devport(::google::protobuf::int32 value) {
  set_has_devport();
  devport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devPort)
}

// optional string userName = 7 [default = "default"];
inline bool DeviceInfo::has_username() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceInfo::set_has_username() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceInfo::clear_username() {
  if (username_ != _default_username_) {
    username_->assign(*_default_username_);
  }
  clear_has_username();
}
inline const ::std::string& DeviceInfo::username() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.userName)
  return *username_;
}
inline void DeviceInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.userName)
}
inline void DeviceInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.userName)
}
inline void DeviceInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.userName)
}
inline ::std::string* DeviceInfo::mutable_username() {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string(*_default_username_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.userName)
  return username_;
}
inline ::std::string* DeviceInfo::release_username() {
  clear_has_username();
  if (username_ == _default_username_) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(_default_username_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_username(::std::string* username) {
  if (username_ != _default_username_) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(_default_username_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.userName)
}

// optional string userPsw = 8 [default = "default"];
inline bool DeviceInfo::has_userpsw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceInfo::set_has_userpsw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceInfo::clear_has_userpsw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceInfo::clear_userpsw() {
  if (userpsw_ != _default_userpsw_) {
    userpsw_->assign(*_default_userpsw_);
  }
  clear_has_userpsw();
}
inline const ::std::string& DeviceInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.userPsw)
  return *userpsw_;
}
inline void DeviceInfo::set_userpsw(const ::std::string& value) {
  set_has_userpsw();
  if (userpsw_ == _default_userpsw_) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.userPsw)
}
inline void DeviceInfo::set_userpsw(const char* value) {
  set_has_userpsw();
  if (userpsw_ == _default_userpsw_) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.userPsw)
}
inline void DeviceInfo::set_userpsw(const char* value, size_t size) {
  set_has_userpsw();
  if (userpsw_ == _default_userpsw_) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.userPsw)
}
inline ::std::string* DeviceInfo::mutable_userpsw() {
  set_has_userpsw();
  if (userpsw_ == _default_userpsw_) {
    userpsw_ = new ::std::string(*_default_userpsw_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.userPsw)
  return userpsw_;
}
inline ::std::string* DeviceInfo::release_userpsw() {
  clear_has_userpsw();
  if (userpsw_ == _default_userpsw_) {
    return NULL;
  } else {
    ::std::string* temp = userpsw_;
    userpsw_ = const_cast< ::std::string*>(_default_userpsw_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_userpsw(::std::string* userpsw) {
  if (userpsw_ != _default_userpsw_) {
    delete userpsw_;
  }
  if (userpsw) {
    set_has_userpsw();
    userpsw_ = userpsw;
  } else {
    clear_has_userpsw();
    userpsw_ = const_cast< ::std::string*>(_default_userpsw_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.userPsw)
}

// optional int32 streamType = 9 [default = -1];
inline bool DeviceInfo::has_streamtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceInfo::set_has_streamtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceInfo::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceInfo::clear_streamtype() {
  streamtype_ = -1;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 DeviceInfo::streamtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.streamType)
  return streamtype_;
}
inline void DeviceInfo::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.streamType)
}

// optional int32 devType = 10 [default = -1];
inline bool DeviceInfo::has_devtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceInfo::set_has_devtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeviceInfo::clear_has_devtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeviceInfo::clear_devtype() {
  devtype_ = -1;
  clear_has_devtype();
}
inline ::google::protobuf::int32 DeviceInfo::devtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devType)
  return devtype_;
}
inline void DeviceInfo::set_devtype(::google::protobuf::int32 value) {
  set_has_devtype();
  devtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devType)
}

// optional int32 proxyPort = 11 [default = -1];
inline bool DeviceInfo::has_proxyport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceInfo::set_has_proxyport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DeviceInfo::clear_has_proxyport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DeviceInfo::clear_proxyport() {
  proxyport_ = -1;
  clear_has_proxyport();
}
inline ::google::protobuf::int32 DeviceInfo::proxyport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.proxyPort)
  return proxyport_;
}
inline void DeviceInfo::set_proxyport(::google::protobuf::int32 value) {
  set_has_proxyport();
  proxyport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.proxyPort)
}

// optional string registerId = 12 [default = "default"];
inline bool DeviceInfo::has_registerid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceInfo::set_has_registerid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DeviceInfo::clear_has_registerid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DeviceInfo::clear_registerid() {
  if (registerid_ != _default_registerid_) {
    registerid_->assign(*_default_registerid_);
  }
  clear_has_registerid();
}
inline const ::std::string& DeviceInfo::registerid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.registerId)
  return *registerid_;
}
inline void DeviceInfo::set_registerid(const ::std::string& value) {
  set_has_registerid();
  if (registerid_ == _default_registerid_) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.registerId)
}
inline void DeviceInfo::set_registerid(const char* value) {
  set_has_registerid();
  if (registerid_ == _default_registerid_) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.registerId)
}
inline void DeviceInfo::set_registerid(const char* value, size_t size) {
  set_has_registerid();
  if (registerid_ == _default_registerid_) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.registerId)
}
inline ::std::string* DeviceInfo::mutable_registerid() {
  set_has_registerid();
  if (registerid_ == _default_registerid_) {
    registerid_ = new ::std::string(*_default_registerid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.registerId)
  return registerid_;
}
inline ::std::string* DeviceInfo::release_registerid() {
  clear_has_registerid();
  if (registerid_ == _default_registerid_) {
    return NULL;
  } else {
    ::std::string* temp = registerid_;
    registerid_ = const_cast< ::std::string*>(_default_registerid_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_registerid(::std::string* registerid) {
  if (registerid_ != _default_registerid_) {
    delete registerid_;
  }
  if (registerid) {
    set_has_registerid();
    registerid_ = registerid;
  } else {
    clear_has_registerid();
    registerid_ = const_cast< ::std::string*>(_default_registerid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.registerId)
}

// optional string deviceThird = 13 [default = "default"];
inline bool DeviceInfo::has_devicethird() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceInfo::set_has_devicethird() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DeviceInfo::clear_has_devicethird() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DeviceInfo::clear_devicethird() {
  if (devicethird_ != _default_devicethird_) {
    devicethird_->assign(*_default_devicethird_);
  }
  clear_has_devicethird();
}
inline const ::std::string& DeviceInfo::devicethird() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.deviceThird)
  return *devicethird_;
}
inline void DeviceInfo::set_devicethird(const ::std::string& value) {
  set_has_devicethird();
  if (devicethird_ == _default_devicethird_) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline void DeviceInfo::set_devicethird(const char* value) {
  set_has_devicethird();
  if (devicethird_ == _default_devicethird_) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline void DeviceInfo::set_devicethird(const char* value, size_t size) {
  set_has_devicethird();
  if (devicethird_ == _default_devicethird_) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline ::std::string* DeviceInfo::mutable_devicethird() {
  set_has_devicethird();
  if (devicethird_ == _default_devicethird_) {
    devicethird_ = new ::std::string(*_default_devicethird_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.deviceThird)
  return devicethird_;
}
inline ::std::string* DeviceInfo::release_devicethird() {
  clear_has_devicethird();
  if (devicethird_ == _default_devicethird_) {
    return NULL;
  } else {
    ::std::string* temp = devicethird_;
    devicethird_ = const_cast< ::std::string*>(_default_devicethird_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devicethird(::std::string* devicethird) {
  if (devicethird_ != _default_devicethird_) {
    delete devicethird_;
  }
  if (devicethird) {
    set_has_devicethird();
    devicethird_ = devicethird;
  } else {
    clear_has_devicethird();
    devicethird_ = const_cast< ::std::string*>(_default_devicethird_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.deviceThird)
}

// optional int32 streamMode = 14 [default = -1];
inline bool DeviceInfo::has_streammode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeviceInfo::set_has_streammode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DeviceInfo::clear_has_streammode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DeviceInfo::clear_streammode() {
  streammode_ = -1;
  clear_has_streammode();
}
inline ::google::protobuf::int32 DeviceInfo::streammode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.streamMode)
  return streammode_;
}
inline void DeviceInfo::set_streammode(::google::protobuf::int32 value) {
  set_has_streammode();
  streammode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.streamMode)
}

// optional int32 channelNum = 15 [default = -1];
inline bool DeviceInfo::has_channelnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DeviceInfo::set_has_channelnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DeviceInfo::clear_has_channelnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DeviceInfo::clear_channelnum() {
  channelnum_ = -1;
  clear_has_channelnum();
}
inline ::google::protobuf::int32 DeviceInfo::channelnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.channelNum)
  return channelnum_;
}
inline void DeviceInfo::set_channelnum(::google::protobuf::int32 value) {
  set_has_channelnum();
  channelnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.channelNum)
}

// optional int32 loginType = 16 [default = -1];
inline bool DeviceInfo::has_logintype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DeviceInfo::set_has_logintype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DeviceInfo::clear_has_logintype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DeviceInfo::clear_logintype() {
  logintype_ = -1;
  clear_has_logintype();
}
inline ::google::protobuf::int32 DeviceInfo::logintype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.loginType)
  return logintype_;
}
inline void DeviceInfo::set_logintype(::google::protobuf::int32 value) {
  set_has_logintype();
  logintype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.loginType)
}

// optional int32 combineStatus = 17 [default = -1];
inline bool DeviceInfo::has_combinestatus() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DeviceInfo::set_has_combinestatus() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DeviceInfo::clear_has_combinestatus() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DeviceInfo::clear_combinestatus() {
  combinestatus_ = -1;
  clear_has_combinestatus();
}
inline ::google::protobuf::int32 DeviceInfo::combinestatus() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.combineStatus)
  return combinestatus_;
}
inline void DeviceInfo::set_combinestatus(::google::protobuf::int32 value) {
  set_has_combinestatus();
  combinestatus_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.combineStatus)
}

// repeated .com.arges.file.proto.ChnInfo chninfo = 18;
inline int DeviceInfo::chninfo_size() const {
  return chninfo_.size();
}
inline void DeviceInfo::clear_chninfo() {
  chninfo_.Clear();
}
inline const ::com::arges::file::proto::ChnInfo& DeviceInfo::chninfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.chninfo)
  return chninfo_.Get(index);
}
inline ::com::arges::file::proto::ChnInfo* DeviceInfo::mutable_chninfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.chninfo)
  return chninfo_.Mutable(index);
}
inline ::com::arges::file::proto::ChnInfo* DeviceInfo::add_chninfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.DeviceInfo.chninfo)
  return chninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ChnInfo >&
DeviceInfo::chninfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.DeviceInfo.chninfo)
  return chninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ChnInfo >*
DeviceInfo::mutable_chninfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.DeviceInfo.chninfo)
  return &chninfo_;
}

// optional int32 serviceCode = 19 [default = -1];
inline bool DeviceInfo::has_servicecode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DeviceInfo::set_has_servicecode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DeviceInfo::clear_has_servicecode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DeviceInfo::clear_servicecode() {
  servicecode_ = -1;
  clear_has_servicecode();
}
inline ::google::protobuf::int32 DeviceInfo::servicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.serviceCode)
  return servicecode_;
}
inline void DeviceInfo::set_servicecode(::google::protobuf::int32 value) {
  set_has_servicecode();
  servicecode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.serviceCode)
}

// optional string serviceIp = 20 [default = "default"];
inline bool DeviceInfo::has_serviceip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DeviceInfo::set_has_serviceip() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DeviceInfo::clear_has_serviceip() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DeviceInfo::clear_serviceip() {
  if (serviceip_ != _default_serviceip_) {
    serviceip_->assign(*_default_serviceip_);
  }
  clear_has_serviceip();
}
inline const ::std::string& DeviceInfo::serviceip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.serviceIp)
  return *serviceip_;
}
inline void DeviceInfo::set_serviceip(const ::std::string& value) {
  set_has_serviceip();
  if (serviceip_ == _default_serviceip_) {
    serviceip_ = new ::std::string;
  }
  serviceip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.serviceIp)
}
inline void DeviceInfo::set_serviceip(const char* value) {
  set_has_serviceip();
  if (serviceip_ == _default_serviceip_) {
    serviceip_ = new ::std::string;
  }
  serviceip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.serviceIp)
}
inline void DeviceInfo::set_serviceip(const char* value, size_t size) {
  set_has_serviceip();
  if (serviceip_ == _default_serviceip_) {
    serviceip_ = new ::std::string;
  }
  serviceip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.serviceIp)
}
inline ::std::string* DeviceInfo::mutable_serviceip() {
  set_has_serviceip();
  if (serviceip_ == _default_serviceip_) {
    serviceip_ = new ::std::string(*_default_serviceip_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.serviceIp)
  return serviceip_;
}
inline ::std::string* DeviceInfo::release_serviceip() {
  clear_has_serviceip();
  if (serviceip_ == _default_serviceip_) {
    return NULL;
  } else {
    ::std::string* temp = serviceip_;
    serviceip_ = const_cast< ::std::string*>(_default_serviceip_);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_serviceip(::std::string* serviceip) {
  if (serviceip_ != _default_serviceip_) {
    delete serviceip_;
  }
  if (serviceip) {
    set_has_serviceip();
    serviceip_ = serviceip;
  } else {
    clear_has_serviceip();
    serviceip_ = const_cast< ::std::string*>(_default_serviceip_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.serviceIp)
}

// optional int32 servicePort = 21 [default = -1];
inline bool DeviceInfo::has_serviceport() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DeviceInfo::set_has_serviceport() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DeviceInfo::clear_has_serviceport() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DeviceInfo::clear_serviceport() {
  serviceport_ = -1;
  clear_has_serviceport();
}
inline ::google::protobuf::int32 DeviceInfo::serviceport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.servicePort)
  return serviceport_;
}
inline void DeviceInfo::set_serviceport(::google::protobuf::int32 value) {
  set_has_serviceport();
  serviceport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.servicePort)
}

// -------------------------------------------------------------------

// DeviceInfoList

// repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
inline int DeviceInfoList::deviceinfo_size() const {
  return deviceinfo_.size();
}
inline void DeviceInfoList::clear_deviceinfo() {
  deviceinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& DeviceInfoList::deviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* DeviceInfoList::mutable_deviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* DeviceInfoList::add_deviceinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
DeviceInfoList::deviceinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
DeviceInfoList::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return &deviceinfo_;
}

// -------------------------------------------------------------------

// ReqDevInfoFromTms

// required string tmsId = 1 [default = "default"];
inline bool ReqDevInfoFromTms::has_tmsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDevInfoFromTms::set_has_tmsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDevInfoFromTms::clear_has_tmsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDevInfoFromTms::clear_tmsid() {
  if (tmsid_ != _default_tmsid_) {
    tmsid_->assign(*_default_tmsid_);
  }
  clear_has_tmsid();
}
inline const ::std::string& ReqDevInfoFromTms::tmsid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
  return *tmsid_;
}
inline void ReqDevInfoFromTms::set_tmsid(const ::std::string& value) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
}
inline void ReqDevInfoFromTms::set_tmsid(const char* value) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
}
inline void ReqDevInfoFromTms::set_tmsid(const char* value, size_t size) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
}
inline ::std::string* ReqDevInfoFromTms::mutable_tmsid() {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string(*_default_tmsid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
  return tmsid_;
}
inline ::std::string* ReqDevInfoFromTms::release_tmsid() {
  clear_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    return NULL;
  } else {
    ::std::string* temp = tmsid_;
    tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
    return temp;
  }
}
inline void ReqDevInfoFromTms::set_allocated_tmsid(::std::string* tmsid) {
  if (tmsid_ != _default_tmsid_) {
    delete tmsid_;
  }
  if (tmsid) {
    set_has_tmsid();
    tmsid_ = tmsid;
  } else {
    clear_has_tmsid();
    tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDevInfoFromTms.tmsId)
}

// required int32 oprType = 2 [default = -1];
inline bool ReqDevInfoFromTms::has_oprtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDevInfoFromTms::set_has_oprtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDevInfoFromTms::clear_has_oprtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDevInfoFromTms::clear_oprtype() {
  oprtype_ = -1;
  clear_has_oprtype();
}
inline ::google::protobuf::int32 ReqDevInfoFromTms::oprtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromTms.oprType)
  return oprtype_;
}
inline void ReqDevInfoFromTms::set_oprtype(::google::protobuf::int32 value) {
  set_has_oprtype();
  oprtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromTms.oprType)
}

// repeated string devId = 3;
inline int ReqDevInfoFromTms::devid_size() const {
  return devid_.size();
}
inline void ReqDevInfoFromTms::clear_devid() {
  devid_.Clear();
}
inline const ::std::string& ReqDevInfoFromTms::devid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromTms.devId)
  return devid_.Get(index);
}
inline ::std::string* ReqDevInfoFromTms::mutable_devid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDevInfoFromTms.devId)
  return devid_.Mutable(index);
}
inline void ReqDevInfoFromTms::set_devid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromTms.devId)
  devid_.Mutable(index)->assign(value);
}
inline void ReqDevInfoFromTms::set_devid(int index, const char* value) {
  devid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDevInfoFromTms.devId)
}
inline void ReqDevInfoFromTms::set_devid(int index, const char* value, size_t size) {
  devid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDevInfoFromTms.devId)
}
inline ::std::string* ReqDevInfoFromTms::add_devid() {
  return devid_.Add();
}
inline void ReqDevInfoFromTms::add_devid(const ::std::string& value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqDevInfoFromTms.devId)
}
inline void ReqDevInfoFromTms::add_devid(const char* value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqDevInfoFromTms.devId)
}
inline void ReqDevInfoFromTms::add_devid(const char* value, size_t size) {
  devid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqDevInfoFromTms.devId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqDevInfoFromTms::devid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqDevInfoFromTms.devId)
  return devid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqDevInfoFromTms::mutable_devid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqDevInfoFromTms.devId)
  return &devid_;
}

// -------------------------------------------------------------------

// RspDevInfoToTms

// optional string tmsId = 1 [default = "default"];
inline bool RspDevInfoToTms::has_tmsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspDevInfoToTms::set_has_tmsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspDevInfoToTms::clear_has_tmsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspDevInfoToTms::clear_tmsid() {
  if (tmsid_ != _default_tmsid_) {
    tmsid_->assign(*_default_tmsid_);
  }
  clear_has_tmsid();
}
inline const ::std::string& RspDevInfoToTms::tmsid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToTms.tmsId)
  return *tmsid_;
}
inline void RspDevInfoToTms::set_tmsid(const ::std::string& value) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevInfoToTms.tmsId)
}
inline void RspDevInfoToTms::set_tmsid(const char* value) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDevInfoToTms.tmsId)
}
inline void RspDevInfoToTms::set_tmsid(const char* value, size_t size) {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string;
  }
  tmsid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDevInfoToTms.tmsId)
}
inline ::std::string* RspDevInfoToTms::mutable_tmsid() {
  set_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    tmsid_ = new ::std::string(*_default_tmsid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevInfoToTms.tmsId)
  return tmsid_;
}
inline ::std::string* RspDevInfoToTms::release_tmsid() {
  clear_has_tmsid();
  if (tmsid_ == _default_tmsid_) {
    return NULL;
  } else {
    ::std::string* temp = tmsid_;
    tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
    return temp;
  }
}
inline void RspDevInfoToTms::set_allocated_tmsid(::std::string* tmsid) {
  if (tmsid_ != _default_tmsid_) {
    delete tmsid_;
  }
  if (tmsid) {
    set_has_tmsid();
    tmsid_ = tmsid;
  } else {
    clear_has_tmsid();
    tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDevInfoToTms.tmsId)
}

// optional int32 oprType = 2 [default = -1];
inline bool RspDevInfoToTms::has_oprtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspDevInfoToTms::set_has_oprtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspDevInfoToTms::clear_has_oprtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspDevInfoToTms::clear_oprtype() {
  oprtype_ = -1;
  clear_has_oprtype();
}
inline ::google::protobuf::int32 RspDevInfoToTms::oprtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToTms.oprType)
  return oprtype_;
}
inline void RspDevInfoToTms::set_oprtype(::google::protobuf::int32 value) {
  set_has_oprtype();
  oprtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevInfoToTms.oprType)
}

// repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
inline int RspDevInfoToTms::deviceinfo_size() const {
  return deviceinfo_.size();
}
inline void RspDevInfoToTms::clear_deviceinfo() {
  deviceinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDevInfoToTms::deviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToTms.deviceinfo)
  return deviceinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevInfoToTms::mutable_deviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevInfoToTms.deviceinfo)
  return deviceinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevInfoToTms::add_deviceinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDevInfoToTms.deviceinfo)
  return deviceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDevInfoToTms::deviceinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDevInfoToTms.deviceinfo)
  return deviceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDevInfoToTms::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDevInfoToTms.deviceinfo)
  return &deviceinfo_;
}

// -------------------------------------------------------------------

// ReqDevInfoFromDms

// required string dmsId = 1 [default = "default"];
inline bool ReqDevInfoFromDms::has_dmsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDevInfoFromDms::set_has_dmsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDevInfoFromDms::clear_has_dmsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDevInfoFromDms::clear_dmsid() {
  if (dmsid_ != _default_dmsid_) {
    dmsid_->assign(*_default_dmsid_);
  }
  clear_has_dmsid();
}
inline const ::std::string& ReqDevInfoFromDms::dmsid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
  return *dmsid_;
}
inline void ReqDevInfoFromDms::set_dmsid(const ::std::string& value) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
}
inline void ReqDevInfoFromDms::set_dmsid(const char* value) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
}
inline void ReqDevInfoFromDms::set_dmsid(const char* value, size_t size) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
}
inline ::std::string* ReqDevInfoFromDms::mutable_dmsid() {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string(*_default_dmsid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
  return dmsid_;
}
inline ::std::string* ReqDevInfoFromDms::release_dmsid() {
  clear_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    return NULL;
  } else {
    ::std::string* temp = dmsid_;
    dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
    return temp;
  }
}
inline void ReqDevInfoFromDms::set_allocated_dmsid(::std::string* dmsid) {
  if (dmsid_ != _default_dmsid_) {
    delete dmsid_;
  }
  if (dmsid) {
    set_has_dmsid();
    dmsid_ = dmsid;
  } else {
    clear_has_dmsid();
    dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDevInfoFromDms.dmsId)
}

// required int32 oprType = 2 [default = -1];
inline bool ReqDevInfoFromDms::has_oprtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDevInfoFromDms::set_has_oprtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDevInfoFromDms::clear_has_oprtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDevInfoFromDms::clear_oprtype() {
  oprtype_ = -1;
  clear_has_oprtype();
}
inline ::google::protobuf::int32 ReqDevInfoFromDms::oprtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromDms.oprType)
  return oprtype_;
}
inline void ReqDevInfoFromDms::set_oprtype(::google::protobuf::int32 value) {
  set_has_oprtype();
  oprtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromDms.oprType)
}

// repeated string devId = 3;
inline int ReqDevInfoFromDms::devid_size() const {
  return devid_.size();
}
inline void ReqDevInfoFromDms::clear_devid() {
  devid_.Clear();
}
inline const ::std::string& ReqDevInfoFromDms::devid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevInfoFromDms.devId)
  return devid_.Get(index);
}
inline ::std::string* ReqDevInfoFromDms::mutable_devid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDevInfoFromDms.devId)
  return devid_.Mutable(index);
}
inline void ReqDevInfoFromDms::set_devid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevInfoFromDms.devId)
  devid_.Mutable(index)->assign(value);
}
inline void ReqDevInfoFromDms::set_devid(int index, const char* value) {
  devid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDevInfoFromDms.devId)
}
inline void ReqDevInfoFromDms::set_devid(int index, const char* value, size_t size) {
  devid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDevInfoFromDms.devId)
}
inline ::std::string* ReqDevInfoFromDms::add_devid() {
  return devid_.Add();
}
inline void ReqDevInfoFromDms::add_devid(const ::std::string& value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqDevInfoFromDms.devId)
}
inline void ReqDevInfoFromDms::add_devid(const char* value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqDevInfoFromDms.devId)
}
inline void ReqDevInfoFromDms::add_devid(const char* value, size_t size) {
  devid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqDevInfoFromDms.devId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqDevInfoFromDms::devid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqDevInfoFromDms.devId)
  return devid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqDevInfoFromDms::mutable_devid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqDevInfoFromDms.devId)
  return &devid_;
}

// -------------------------------------------------------------------

// RspDevInfoToDms

// optional string dmsId = 1 [default = "default"];
inline bool RspDevInfoToDms::has_dmsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspDevInfoToDms::set_has_dmsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspDevInfoToDms::clear_has_dmsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspDevInfoToDms::clear_dmsid() {
  if (dmsid_ != _default_dmsid_) {
    dmsid_->assign(*_default_dmsid_);
  }
  clear_has_dmsid();
}
inline const ::std::string& RspDevInfoToDms::dmsid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToDms.dmsId)
  return *dmsid_;
}
inline void RspDevInfoToDms::set_dmsid(const ::std::string& value) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevInfoToDms.dmsId)
}
inline void RspDevInfoToDms::set_dmsid(const char* value) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDevInfoToDms.dmsId)
}
inline void RspDevInfoToDms::set_dmsid(const char* value, size_t size) {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string;
  }
  dmsid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDevInfoToDms.dmsId)
}
inline ::std::string* RspDevInfoToDms::mutable_dmsid() {
  set_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    dmsid_ = new ::std::string(*_default_dmsid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevInfoToDms.dmsId)
  return dmsid_;
}
inline ::std::string* RspDevInfoToDms::release_dmsid() {
  clear_has_dmsid();
  if (dmsid_ == _default_dmsid_) {
    return NULL;
  } else {
    ::std::string* temp = dmsid_;
    dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
    return temp;
  }
}
inline void RspDevInfoToDms::set_allocated_dmsid(::std::string* dmsid) {
  if (dmsid_ != _default_dmsid_) {
    delete dmsid_;
  }
  if (dmsid) {
    set_has_dmsid();
    dmsid_ = dmsid;
  } else {
    clear_has_dmsid();
    dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDevInfoToDms.dmsId)
}

// optional int32 oprType = 2 [default = -1];
inline bool RspDevInfoToDms::has_oprtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspDevInfoToDms::set_has_oprtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspDevInfoToDms::clear_has_oprtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspDevInfoToDms::clear_oprtype() {
  oprtype_ = -1;
  clear_has_oprtype();
}
inline ::google::protobuf::int32 RspDevInfoToDms::oprtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToDms.oprType)
  return oprtype_;
}
inline void RspDevInfoToDms::set_oprtype(::google::protobuf::int32 value) {
  set_has_oprtype();
  oprtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevInfoToDms.oprType)
}

// repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
inline int RspDevInfoToDms::deviceinfo_size() const {
  return deviceinfo_.size();
}
inline void RspDevInfoToDms::clear_deviceinfo() {
  deviceinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDevInfoToDms::deviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevInfoToDms.deviceinfo)
  return deviceinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevInfoToDms::mutable_deviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevInfoToDms.deviceinfo)
  return deviceinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevInfoToDms::add_deviceinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDevInfoToDms.deviceinfo)
  return deviceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDevInfoToDms::deviceinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDevInfoToDms.deviceinfo)
  return deviceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDevInfoToDms::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDevInfoToDms.deviceinfo)
  return &deviceinfo_;
}

// -------------------------------------------------------------------

// ReqDevRegisterServerInfo

// repeated string devId = 1;
inline int ReqDevRegisterServerInfo::devid_size() const {
  return devid_.size();
}
inline void ReqDevRegisterServerInfo::clear_devid() {
  devid_.Clear();
}
inline const ::std::string& ReqDevRegisterServerInfo::devid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
  return devid_.Get(index);
}
inline ::std::string* ReqDevRegisterServerInfo::mutable_devid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
  return devid_.Mutable(index);
}
inline void ReqDevRegisterServerInfo::set_devid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
  devid_.Mutable(index)->assign(value);
}
inline void ReqDevRegisterServerInfo::set_devid(int index, const char* value) {
  devid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
}
inline void ReqDevRegisterServerInfo::set_devid(int index, const char* value, size_t size) {
  devid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
}
inline ::std::string* ReqDevRegisterServerInfo::add_devid() {
  return devid_.Add();
}
inline void ReqDevRegisterServerInfo::add_devid(const ::std::string& value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
}
inline void ReqDevRegisterServerInfo::add_devid(const char* value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
}
inline void ReqDevRegisterServerInfo::add_devid(const char* value, size_t size) {
  devid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqDevRegisterServerInfo::devid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
  return devid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqDevRegisterServerInfo::mutable_devid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqDevRegisterServerInfo.devId)
  return &devid_;
}

// required int32 mstype = 2;
inline bool ReqDevRegisterServerInfo::has_mstype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDevRegisterServerInfo::set_has_mstype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDevRegisterServerInfo::clear_has_mstype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDevRegisterServerInfo::clear_mstype() {
  mstype_ = 0;
  clear_has_mstype();
}
inline ::google::protobuf::int32 ReqDevRegisterServerInfo::mstype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDevRegisterServerInfo.mstype)
  return mstype_;
}
inline void ReqDevRegisterServerInfo::set_mstype(::google::protobuf::int32 value) {
  set_has_mstype();
  mstype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDevRegisterServerInfo.mstype)
}

// -------------------------------------------------------------------

// RspDevRegisterServerInfo

// repeated string devId = 1;
inline int RspDevRegisterServerInfo::devid_size() const {
  return devid_.size();
}
inline void RspDevRegisterServerInfo::clear_devid() {
  devid_.Clear();
}
inline const ::std::string& RspDevRegisterServerInfo::devid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevRegisterServerInfo.devId)
  return devid_.Get(index);
}
inline ::std::string* RspDevRegisterServerInfo::mutable_devid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevRegisterServerInfo.devId)
  return devid_.Mutable(index);
}
inline void RspDevRegisterServerInfo::set_devid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevRegisterServerInfo.devId)
  devid_.Mutable(index)->assign(value);
}
inline void RspDevRegisterServerInfo::set_devid(int index, const char* value) {
  devid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDevRegisterServerInfo.devId)
}
inline void RspDevRegisterServerInfo::set_devid(int index, const char* value, size_t size) {
  devid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDevRegisterServerInfo.devId)
}
inline ::std::string* RspDevRegisterServerInfo::add_devid() {
  return devid_.Add();
}
inline void RspDevRegisterServerInfo::add_devid(const ::std::string& value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDevRegisterServerInfo.devId)
}
inline void RspDevRegisterServerInfo::add_devid(const char* value) {
  devid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.RspDevRegisterServerInfo.devId)
}
inline void RspDevRegisterServerInfo::add_devid(const char* value, size_t size) {
  devid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.RspDevRegisterServerInfo.devId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RspDevRegisterServerInfo::devid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDevRegisterServerInfo.devId)
  return devid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RspDevRegisterServerInfo::mutable_devid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDevRegisterServerInfo.devId)
  return &devid_;
}

// required int32 mstype = 2;
inline bool RspDevRegisterServerInfo::has_mstype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspDevRegisterServerInfo::set_has_mstype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspDevRegisterServerInfo::clear_has_mstype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspDevRegisterServerInfo::clear_mstype() {
  mstype_ = 0;
  clear_has_mstype();
}
inline ::google::protobuf::int32 RspDevRegisterServerInfo::mstype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevRegisterServerInfo.mstype)
  return mstype_;
}
inline void RspDevRegisterServerInfo::set_mstype(::google::protobuf::int32 value) {
  set_has_mstype();
  mstype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDevRegisterServerInfo.mstype)
}

// repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
inline int RspDevRegisterServerInfo::deviceinfo_size() const {
  return deviceinfo_.size();
}
inline void RspDevRegisterServerInfo::clear_deviceinfo() {
  deviceinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDevRegisterServerInfo::deviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDevRegisterServerInfo.deviceinfo)
  return deviceinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevRegisterServerInfo::mutable_deviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDevRegisterServerInfo.deviceinfo)
  return deviceinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDevRegisterServerInfo::add_deviceinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDevRegisterServerInfo.deviceinfo)
  return deviceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDevRegisterServerInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDevRegisterServerInfo.deviceinfo)
  return deviceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDevRegisterServerInfo::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDevRegisterServerInfo.deviceinfo)
  return &deviceinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DevInfoListBean_2eproto__INCLUDED
