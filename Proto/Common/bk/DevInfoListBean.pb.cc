// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DevInfoListBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DevInfoListBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ChnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDevInfoFromTms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDevInfoFromTms_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDevInfoToTms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDevInfoToTms_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDevInfoFromDms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDevInfoFromDms_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDevInfoToDms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDevInfoToDms_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDevRegisterServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDevRegisterServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDevRegisterServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDevRegisterServerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DevInfoListBean_2eproto() {
  protobuf_AddDesc_DevInfoListBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DevInfoListBean.proto");
  GOOGLE_CHECK(file != NULL);
  ChnInfo_descriptor_ = file->message_type(0);
  static const int ChnInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, inorout_),
  };
  ChnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChnInfo_descriptor_,
      ChnInfo::default_instance_,
      ChnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChnInfo));
  DeviceInfo_descriptor_ = file->message_type(1);
  static const int DeviceInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, userpsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, proxyport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicethird_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, streammode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, channelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, combinestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, chninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, servicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, serviceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, serviceport_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  DeviceInfoList_descriptor_ = file->message_type(2);
  static const int DeviceInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, deviceinfo_),
  };
  DeviceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfoList_descriptor_,
      DeviceInfoList::default_instance_,
      DeviceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfoList));
  ReqDevInfoFromTms_descriptor_ = file->message_type(3);
  static const int ReqDevInfoFromTms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromTms, tmsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromTms, oprtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromTms, devid_),
  };
  ReqDevInfoFromTms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDevInfoFromTms_descriptor_,
      ReqDevInfoFromTms::default_instance_,
      ReqDevInfoFromTms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromTms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromTms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDevInfoFromTms));
  RspDevInfoToTms_descriptor_ = file->message_type(4);
  static const int RspDevInfoToTms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToTms, tmsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToTms, oprtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToTms, deviceinfo_),
  };
  RspDevInfoToTms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDevInfoToTms_descriptor_,
      RspDevInfoToTms::default_instance_,
      RspDevInfoToTms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToTms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToTms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDevInfoToTms));
  ReqDevInfoFromDms_descriptor_ = file->message_type(5);
  static const int ReqDevInfoFromDms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromDms, dmsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromDms, oprtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromDms, devid_),
  };
  ReqDevInfoFromDms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDevInfoFromDms_descriptor_,
      ReqDevInfoFromDms::default_instance_,
      ReqDevInfoFromDms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromDms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevInfoFromDms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDevInfoFromDms));
  RspDevInfoToDms_descriptor_ = file->message_type(6);
  static const int RspDevInfoToDms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToDms, dmsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToDms, oprtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToDms, deviceinfo_),
  };
  RspDevInfoToDms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDevInfoToDms_descriptor_,
      RspDevInfoToDms::default_instance_,
      RspDevInfoToDms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToDms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevInfoToDms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDevInfoToDms));
  ReqDevRegisterServerInfo_descriptor_ = file->message_type(7);
  static const int ReqDevRegisterServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevRegisterServerInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevRegisterServerInfo, mstype_),
  };
  ReqDevRegisterServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDevRegisterServerInfo_descriptor_,
      ReqDevRegisterServerInfo::default_instance_,
      ReqDevRegisterServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevRegisterServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevRegisterServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDevRegisterServerInfo));
  RspDevRegisterServerInfo_descriptor_ = file->message_type(8);
  static const int RspDevRegisterServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevRegisterServerInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevRegisterServerInfo, mstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevRegisterServerInfo, deviceinfo_),
  };
  RspDevRegisterServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDevRegisterServerInfo_descriptor_,
      RspDevRegisterServerInfo::default_instance_,
      RspDevRegisterServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevRegisterServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDevRegisterServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDevRegisterServerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DevInfoListBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChnInfo_descriptor_, &ChnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfoList_descriptor_, &DeviceInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDevInfoFromTms_descriptor_, &ReqDevInfoFromTms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDevInfoToTms_descriptor_, &RspDevInfoToTms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDevInfoFromDms_descriptor_, &ReqDevInfoFromDms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDevInfoToDms_descriptor_, &RspDevInfoToDms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDevRegisterServerInfo_descriptor_, &ReqDevRegisterServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDevRegisterServerInfo_descriptor_, &RspDevRegisterServerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DevInfoListBean_2eproto() {
  delete ChnInfo::default_instance_;
  delete ChnInfo_reflection_;
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete DeviceInfo::_default_keyid_;
  delete DeviceInfo::_default_devid_;
  delete DeviceInfo::_default_provider_;
  delete DeviceInfo::_default_model_;
  delete DeviceInfo::_default_devip_;
  delete DeviceInfo::_default_username_;
  delete DeviceInfo::_default_userpsw_;
  delete DeviceInfo::_default_registerid_;
  delete DeviceInfo::_default_devicethird_;
  delete DeviceInfo::_default_serviceip_;
  delete DeviceInfoList::default_instance_;
  delete DeviceInfoList_reflection_;
  delete ReqDevInfoFromTms::default_instance_;
  delete ReqDevInfoFromTms_reflection_;
  delete ReqDevInfoFromTms::_default_tmsid_;
  delete RspDevInfoToTms::default_instance_;
  delete RspDevInfoToTms_reflection_;
  delete RspDevInfoToTms::_default_tmsid_;
  delete ReqDevInfoFromDms::default_instance_;
  delete ReqDevInfoFromDms_reflection_;
  delete ReqDevInfoFromDms::_default_dmsid_;
  delete RspDevInfoToDms::default_instance_;
  delete RspDevInfoToDms_reflection_;
  delete RspDevInfoToDms::_default_dmsid_;
  delete ReqDevRegisterServerInfo::default_instance_;
  delete ReqDevRegisterServerInfo_reflection_;
  delete RspDevRegisterServerInfo::default_instance_;
  delete RspDevRegisterServerInfo_reflection_;
}

void protobuf_AddDesc_DevInfoListBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025DevInfoListBean.proto\022\024com.arges.file."
    "proto\"[\n\007ChnInfo\022\022\n\006nIndex\030\001 \001(\005:\002-1\022\023\n\007"
    "subType\030\002 \001(\005:\002-1\022\022\n\006nLevel\030\003 \001(\005:\002-1\022\023\n"
    "\007InOrOut\030\004 \001(\005:\002-1\"\260\004\n\nDeviceInfo\022\026\n\005key"
    "Id\030\001 \001(\t:\007default\022\026\n\005devId\030\002 \001(\t:\007defaul"
    "t\022\031\n\010provider\030\003 \001(\t:\007default\022\026\n\005model\030\004 "
    "\001(\t:\007default\022\026\n\005devIp\030\005 \001(\t:\007default\022\023\n\007"
    "devPort\030\006 \001(\005:\002-1\022\031\n\010userName\030\007 \001(\t:\007def"
    "ault\022\030\n\007userPsw\030\010 \001(\t:\007default\022\026\n\nstream"
    "Type\030\t \001(\005:\002-1\022\023\n\007devType\030\n \001(\005:\002-1\022\025\n\tp"
    "roxyPort\030\013 \001(\005:\002-1\022\033\n\nregisterId\030\014 \001(\t:\007"
    "default\022\034\n\013deviceThird\030\r \001(\t:\007default\022\026\n"
    "\nstreamMode\030\016 \001(\005:\002-1\022\026\n\nchannelNum\030\017 \001("
    "\005:\002-1\022\025\n\tloginType\030\020 \001(\005:\002-1\022\031\n\rcombineS"
    "tatus\030\021 \001(\005:\002-1\022.\n\007chninfo\030\022 \003(\0132\035.com.a"
    "rges.file.proto.ChnInfo\022\027\n\013serviceCode\030\023"
    " \001(\005:\002-1\022\032\n\tserviceIp\030\024 \001(\t:\007default\022\027\n\013"
    "servicePort\030\025 \001(\005:\002-1\"F\n\016DeviceInfoList\022"
    "4\n\ndeviceinfo\030\001 \003(\0132 .com.arges.file.pro"
    "to.DeviceInfo\"O\n\021ReqDevInfoFromTms\022\026\n\005tm"
    "sId\030\001 \002(\t:\007default\022\023\n\007oprType\030\002 \002(\005:\002-1\022"
    "\r\n\005devId\030\003 \003(\t\"t\n\017RspDevInfoToTms\022\026\n\005tms"
    "Id\030\001 \001(\t:\007default\022\023\n\007oprType\030\002 \001(\005:\002-1\0224"
    "\n\ndeviceinfo\030\003 \003(\0132 .com.arges.file.prot"
    "o.DeviceInfo\"O\n\021ReqDevInfoFromDms\022\026\n\005dms"
    "Id\030\001 \002(\t:\007default\022\023\n\007oprType\030\002 \002(\005:\002-1\022\r"
    "\n\005devId\030\003 \003(\t\"t\n\017RspDevInfoToDms\022\026\n\005dmsI"
    "d\030\001 \001(\t:\007default\022\023\n\007oprType\030\002 \001(\005:\002-1\0224\n"
    "\ndeviceinfo\030\003 \003(\0132 .com.arges.file.proto"
    ".DeviceInfo\"9\n\030ReqDevRegisterServerInfo\022"
    "\r\n\005devId\030\001 \003(\t\022\016\n\006mstype\030\002 \002(\005\"o\n\030RspDev"
    "RegisterServerInfo\022\r\n\005devId\030\001 \003(\t\022\016\n\006mst"
    "ype\030\002 \002(\005\0224\n\ndeviceinfo\030\003 \003(\0132 .com.arge"
    "s.file.proto.DeviceInfo", 1343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DevInfoListBean.proto", &protobuf_RegisterTypes);
  ChnInfo::default_instance_ = new ChnInfo();
  DeviceInfo::_default_keyid_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_devid_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_provider_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_model_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_devip_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_username_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_userpsw_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_registerid_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_devicethird_ =
      new ::std::string("default", 7);
  DeviceInfo::_default_serviceip_ =
      new ::std::string("default", 7);
  DeviceInfo::default_instance_ = new DeviceInfo();
  DeviceInfoList::default_instance_ = new DeviceInfoList();
  ReqDevInfoFromTms::_default_tmsid_ =
      new ::std::string("default", 7);
  ReqDevInfoFromTms::default_instance_ = new ReqDevInfoFromTms();
  RspDevInfoToTms::_default_tmsid_ =
      new ::std::string("default", 7);
  RspDevInfoToTms::default_instance_ = new RspDevInfoToTms();
  ReqDevInfoFromDms::_default_dmsid_ =
      new ::std::string("default", 7);
  ReqDevInfoFromDms::default_instance_ = new ReqDevInfoFromDms();
  RspDevInfoToDms::_default_dmsid_ =
      new ::std::string("default", 7);
  RspDevInfoToDms::default_instance_ = new RspDevInfoToDms();
  ReqDevRegisterServerInfo::default_instance_ = new ReqDevRegisterServerInfo();
  RspDevRegisterServerInfo::default_instance_ = new RspDevRegisterServerInfo();
  ChnInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfoList::default_instance_->InitAsDefaultInstance();
  ReqDevInfoFromTms::default_instance_->InitAsDefaultInstance();
  RspDevInfoToTms::default_instance_->InitAsDefaultInstance();
  ReqDevInfoFromDms::default_instance_->InitAsDefaultInstance();
  RspDevInfoToDms::default_instance_->InitAsDefaultInstance();
  ReqDevRegisterServerInfo::default_instance_->InitAsDefaultInstance();
  RspDevRegisterServerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DevInfoListBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DevInfoListBean_2eproto {
  StaticDescriptorInitializer_DevInfoListBean_2eproto() {
    protobuf_AddDesc_DevInfoListBean_2eproto();
  }
} static_descriptor_initializer_DevInfoListBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChnInfo::kNIndexFieldNumber;
const int ChnInfo::kSubTypeFieldNumber;
const int ChnInfo::kNLevelFieldNumber;
const int ChnInfo::kInOrOutFieldNumber;
#endif  // !_MSC_VER

ChnInfo::ChnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ChnInfo)
}

void ChnInfo::InitAsDefaultInstance() {
}

ChnInfo::ChnInfo(const ChnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ChnInfo)
}

void ChnInfo::SharedCtor() {
  _cached_size_ = 0;
  nindex_ = -1;
  subtype_ = -1;
  nlevel_ = -1;
  inorout_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChnInfo::~ChnInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ChnInfo)
  SharedDtor();
}

void ChnInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChnInfo_descriptor_;
}

const ChnInfo& ChnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ChnInfo* ChnInfo::default_instance_ = NULL;

ChnInfo* ChnInfo::New() const {
  return new ChnInfo;
}

void ChnInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    nindex_ = -1;
    subtype_ = -1;
    nlevel_ = -1;
    inorout_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ChnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nIndex = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nindex_)));
          set_has_nindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subType;
        break;
      }

      // optional int32 subType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nLevel;
        break;
      }

      // optional int32 nLevel = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InOrOut;
        break;
      }

      // optional int32 InOrOut = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_InOrOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inorout_)));
          set_has_inorout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ChnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ChnInfo)
  return false;
#undef DO_
}

void ChnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ChnInfo)
  // optional int32 nIndex = 1 [default = -1];
  if (has_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nindex(), output);
  }

  // optional int32 subType = 2 [default = -1];
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subtype(), output);
  }

  // optional int32 nLevel = 3 [default = -1];
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // optional int32 InOrOut = 4 [default = -1];
  if (has_inorout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inorout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ChnInfo)
}

::google::protobuf::uint8* ChnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ChnInfo)
  // optional int32 nIndex = 1 [default = -1];
  if (has_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nindex(), target);
  }

  // optional int32 subType = 2 [default = -1];
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subtype(), target);
  }

  // optional int32 nLevel = 3 [default = -1];
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // optional int32 InOrOut = 4 [default = -1];
  if (has_inorout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inorout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ChnInfo)
  return target;
}

int ChnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nIndex = 1 [default = -1];
    if (has_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nindex());
    }

    // optional int32 subType = 2 [default = -1];
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int32 nLevel = 3 [default = -1];
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevel());
    }

    // optional int32 InOrOut = 4 [default = -1];
    if (has_inorout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inorout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChnInfo::MergeFrom(const ChnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nindex()) {
      set_nindex(from.nindex());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_inorout()) {
      set_inorout(from.inorout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChnInfo::CopyFrom(const ChnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChnInfo::IsInitialized() const {

  return true;
}

void ChnInfo::Swap(ChnInfo* other) {
  if (other != this) {
    std::swap(nindex_, other->nindex_);
    std::swap(subtype_, other->subtype_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(inorout_, other->inorout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChnInfo_descriptor_;
  metadata.reflection = ChnInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DeviceInfo::_default_keyid_ = NULL;
::std::string* DeviceInfo::_default_devid_ = NULL;
::std::string* DeviceInfo::_default_provider_ = NULL;
::std::string* DeviceInfo::_default_model_ = NULL;
::std::string* DeviceInfo::_default_devip_ = NULL;
::std::string* DeviceInfo::_default_username_ = NULL;
::std::string* DeviceInfo::_default_userpsw_ = NULL;
::std::string* DeviceInfo::_default_registerid_ = NULL;
::std::string* DeviceInfo::_default_devicethird_ = NULL;
::std::string* DeviceInfo::_default_serviceip_ = NULL;
#ifndef _MSC_VER
const int DeviceInfo::kKeyIdFieldNumber;
const int DeviceInfo::kDevIdFieldNumber;
const int DeviceInfo::kProviderFieldNumber;
const int DeviceInfo::kModelFieldNumber;
const int DeviceInfo::kDevIpFieldNumber;
const int DeviceInfo::kDevPortFieldNumber;
const int DeviceInfo::kUserNameFieldNumber;
const int DeviceInfo::kUserPswFieldNumber;
const int DeviceInfo::kStreamTypeFieldNumber;
const int DeviceInfo::kDevTypeFieldNumber;
const int DeviceInfo::kProxyPortFieldNumber;
const int DeviceInfo::kRegisterIdFieldNumber;
const int DeviceInfo::kDeviceThirdFieldNumber;
const int DeviceInfo::kStreamModeFieldNumber;
const int DeviceInfo::kChannelNumFieldNumber;
const int DeviceInfo::kLoginTypeFieldNumber;
const int DeviceInfo::kCombineStatusFieldNumber;
const int DeviceInfo::kChninfoFieldNumber;
const int DeviceInfo::kServiceCodeFieldNumber;
const int DeviceInfo::kServiceIpFieldNumber;
const int DeviceInfo::kServicePortFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyid_ = const_cast< ::std::string*>(_default_keyid_);
  devid_ = const_cast< ::std::string*>(_default_devid_);
  provider_ = const_cast< ::std::string*>(_default_provider_);
  model_ = const_cast< ::std::string*>(_default_model_);
  devip_ = const_cast< ::std::string*>(_default_devip_);
  devport_ = -1;
  username_ = const_cast< ::std::string*>(_default_username_);
  userpsw_ = const_cast< ::std::string*>(_default_userpsw_);
  streamtype_ = -1;
  devtype_ = -1;
  proxyport_ = -1;
  registerid_ = const_cast< ::std::string*>(_default_registerid_);
  devicethird_ = const_cast< ::std::string*>(_default_devicethird_);
  streammode_ = -1;
  channelnum_ = -1;
  logintype_ = -1;
  combinestatus_ = -1;
  servicecode_ = -1;
  serviceip_ = const_cast< ::std::string*>(_default_serviceip_);
  serviceport_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (keyid_ != _default_keyid_) {
    delete keyid_;
  }
  if (devid_ != _default_devid_) {
    delete devid_;
  }
  if (provider_ != _default_provider_) {
    delete provider_;
  }
  if (model_ != _default_model_) {
    delete model_;
  }
  if (devip_ != _default_devip_) {
    delete devip_;
  }
  if (username_ != _default_username_) {
    delete username_;
  }
  if (userpsw_ != _default_userpsw_) {
    delete userpsw_;
  }
  if (registerid_ != _default_registerid_) {
    delete registerid_;
  }
  if (devicethird_ != _default_devicethird_) {
    delete devicethird_;
  }
  if (serviceip_ != _default_serviceip_) {
    delete serviceip_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_keyid()) {
      if (keyid_ != _default_keyid_) {
        keyid_->assign(*_default_keyid_);
      }
    }
    if (has_devid()) {
      if (devid_ != _default_devid_) {
        devid_->assign(*_default_devid_);
      }
    }
    if (has_provider()) {
      if (provider_ != _default_provider_) {
        provider_->assign(*_default_provider_);
      }
    }
    if (has_model()) {
      if (model_ != _default_model_) {
        model_->assign(*_default_model_);
      }
    }
    if (has_devip()) {
      if (devip_ != _default_devip_) {
        devip_->assign(*_default_devip_);
      }
    }
    devport_ = -1;
    if (has_username()) {
      if (username_ != _default_username_) {
        username_->assign(*_default_username_);
      }
    }
    if (has_userpsw()) {
      if (userpsw_ != _default_userpsw_) {
        userpsw_->assign(*_default_userpsw_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    streamtype_ = -1;
    devtype_ = -1;
    proxyport_ = -1;
    if (has_registerid()) {
      if (registerid_ != _default_registerid_) {
        registerid_->assign(*_default_registerid_);
      }
    }
    if (has_devicethird()) {
      if (devicethird_ != _default_devicethird_) {
        devicethird_->assign(*_default_devicethird_);
      }
    }
    streammode_ = -1;
    channelnum_ = -1;
    logintype_ = -1;
  }
  if (_has_bits_[16 / 32] & 1900544) {
    combinestatus_ = -1;
    servicecode_ = -1;
    if (has_serviceip()) {
      if (serviceip_ != _default_serviceip_) {
        serviceip_->assign(*_default_serviceip_);
      }
    }
    serviceport_ = -1;
  }
  chninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyId = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyid().data(), this->keyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devId;
        break;
      }

      // optional string devId = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_provider;
        break;
      }

      // optional string provider = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // optional string model = 4 [default = "default"];
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devIp;
        break;
      }

      // optional string devIp = 5 [default = "default"];
      case 5: {
        if (tag == 42) {
         parse_devIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devip().data(), this->devip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_devPort;
        break;
      }

      // optional int32 devPort = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_devPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devport_)));
          set_has_devport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_userName;
        break;
      }

      // optional string userName = 7 [default = "default"];
      case 7: {
        if (tag == 58) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userPsw;
        break;
      }

      // optional string userPsw = 8 [default = "default"];
      case 8: {
        if (tag == 66) {
         parse_userPsw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpsw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpsw().data(), this->userpsw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userpsw");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_streamType;
        break;
      }

      // optional int32 streamType = 9 [default = -1];
      case 9: {
        if (tag == 72) {
         parse_streamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_devType;
        break;
      }

      // optional int32 devType = 10 [default = -1];
      case 10: {
        if (tag == 80) {
         parse_devType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devtype_)));
          set_has_devtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_proxyPort;
        break;
      }

      // optional int32 proxyPort = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_proxyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyport_)));
          set_has_proxyport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_registerId;
        break;
      }

      // optional string registerId = 12 [default = "default"];
      case 12: {
        if (tag == 98) {
         parse_registerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_deviceThird;
        break;
      }

      // optional string deviceThird = 13 [default = "default"];
      case 13: {
        if (tag == 106) {
         parse_deviceThird:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicethird()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicethird().data(), this->devicethird().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicethird");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_streamMode;
        break;
      }

      // optional int32 streamMode = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_streamMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streammode_)));
          set_has_streammode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_channelNum;
        break;
      }

      // optional int32 channelNum = 15 [default = -1];
      case 15: {
        if (tag == 120) {
         parse_channelNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelnum_)));
          set_has_channelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_loginType;
        break;
      }

      // optional int32 loginType = 16 [default = -1];
      case 16: {
        if (tag == 128) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_combineStatus;
        break;
      }

      // optional int32 combineStatus = 17 [default = -1];
      case 17: {
        if (tag == 136) {
         parse_combineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinestatus_)));
          set_has_combinestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_chninfo;
        break;
      }

      // repeated .com.arges.file.proto.ChnInfo chninfo = 18;
      case 18: {
        if (tag == 146) {
         parse_chninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_chninfo;
        if (input->ExpectTag(152)) goto parse_serviceCode;
        break;
      }

      // optional int32 serviceCode = 19 [default = -1];
      case 19: {
        if (tag == 152) {
         parse_serviceCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicecode_)));
          set_has_servicecode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_serviceIp;
        break;
      }

      // optional string serviceIp = 20 [default = "default"];
      case 20: {
        if (tag == 162) {
         parse_serviceIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceip().data(), this->serviceip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_servicePort;
        break;
      }

      // optional int32 servicePort = 21 [default = -1];
      case 21: {
        if (tag == 168) {
         parse_servicePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serviceport_)));
          set_has_serviceport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DeviceInfo)
  // optional string keyId = 1 [default = "default"];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyid().data(), this->keyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyid(), output);
  }

  // optional string devId = 2 [default = "default"];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devid(), output);
  }

  // optional string provider = 3 [default = "default"];
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->provider(), output);
  }

  // optional string model = 4 [default = "default"];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string devIp = 5 [default = "default"];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devip(), output);
  }

  // optional int32 devPort = 6 [default = -1];
  if (has_devport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->devport(), output);
  }

  // optional string userName = 7 [default = "default"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional string userPsw = 8 [default = "default"];
  if (has_userpsw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpsw().data(), this->userpsw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpsw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->userpsw(), output);
  }

  // optional int32 streamType = 9 [default = -1];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->streamtype(), output);
  }

  // optional int32 devType = 10 [default = -1];
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->devtype(), output);
  }

  // optional int32 proxyPort = 11 [default = -1];
  if (has_proxyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->proxyport(), output);
  }

  // optional string registerId = 12 [default = "default"];
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->registerid(), output);
  }

  // optional string deviceThird = 13 [default = "default"];
  if (has_devicethird()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicethird().data(), this->devicethird().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicethird");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->devicethird(), output);
  }

  // optional int32 streamMode = 14 [default = -1];
  if (has_streammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->streammode(), output);
  }

  // optional int32 channelNum = 15 [default = -1];
  if (has_channelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->channelnum(), output);
  }

  // optional int32 loginType = 16 [default = -1];
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->logintype(), output);
  }

  // optional int32 combineStatus = 17 [default = -1];
  if (has_combinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->combinestatus(), output);
  }

  // repeated .com.arges.file.proto.ChnInfo chninfo = 18;
  for (int i = 0; i < this->chninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->chninfo(i), output);
  }

  // optional int32 serviceCode = 19 [default = -1];
  if (has_servicecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->servicecode(), output);
  }

  // optional string serviceIp = 20 [default = "default"];
  if (has_serviceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceip().data(), this->serviceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->serviceip(), output);
  }

  // optional int32 servicePort = 21 [default = -1];
  if (has_serviceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->serviceport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DeviceInfo)
  // optional string keyId = 1 [default = "default"];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyid().data(), this->keyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyid(), target);
  }

  // optional string devId = 2 [default = "default"];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devid(), target);
  }

  // optional string provider = 3 [default = "default"];
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provider(), target);
  }

  // optional string model = 4 [default = "default"];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string devIp = 5 [default = "default"];
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devip(), target);
  }

  // optional int32 devPort = 6 [default = -1];
  if (has_devport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->devport(), target);
  }

  // optional string userName = 7 [default = "default"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->username(), target);
  }

  // optional string userPsw = 8 [default = "default"];
  if (has_userpsw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpsw().data(), this->userpsw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpsw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->userpsw(), target);
  }

  // optional int32 streamType = 9 [default = -1];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->streamtype(), target);
  }

  // optional int32 devType = 10 [default = -1];
  if (has_devtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->devtype(), target);
  }

  // optional int32 proxyPort = 11 [default = -1];
  if (has_proxyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->proxyport(), target);
  }

  // optional string registerId = 12 [default = "default"];
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->registerid(), target);
  }

  // optional string deviceThird = 13 [default = "default"];
  if (has_devicethird()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicethird().data(), this->devicethird().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicethird");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->devicethird(), target);
  }

  // optional int32 streamMode = 14 [default = -1];
  if (has_streammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->streammode(), target);
  }

  // optional int32 channelNum = 15 [default = -1];
  if (has_channelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->channelnum(), target);
  }

  // optional int32 loginType = 16 [default = -1];
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->logintype(), target);
  }

  // optional int32 combineStatus = 17 [default = -1];
  if (has_combinestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->combinestatus(), target);
  }

  // repeated .com.arges.file.proto.ChnInfo chninfo = 18;
  for (int i = 0; i < this->chninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->chninfo(i), target);
  }

  // optional int32 serviceCode = 19 [default = -1];
  if (has_servicecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->servicecode(), target);
  }

  // optional string serviceIp = 20 [default = "default"];
  if (has_serviceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceip().data(), this->serviceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->serviceip(), target);
  }

  // optional int32 servicePort = 21 [default = -1];
  if (has_serviceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->serviceport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DeviceInfo)
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string keyId = 1 [default = "default"];
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyid());
    }

    // optional string devId = 2 [default = "default"];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string provider = 3 [default = "default"];
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional string model = 4 [default = "default"];
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string devIp = 5 [default = "default"];
    if (has_devip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devip());
    }

    // optional int32 devPort = 6 [default = -1];
    if (has_devport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devport());
    }

    // optional string userName = 7 [default = "default"];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string userPsw = 8 [default = "default"];
    if (has_userpsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpsw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 streamType = 9 [default = -1];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // optional int32 devType = 10 [default = -1];
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devtype());
    }

    // optional int32 proxyPort = 11 [default = -1];
    if (has_proxyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyport());
    }

    // optional string registerId = 12 [default = "default"];
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // optional string deviceThird = 13 [default = "default"];
    if (has_devicethird()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicethird());
    }

    // optional int32 streamMode = 14 [default = -1];
    if (has_streammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streammode());
    }

    // optional int32 channelNum = 15 [default = -1];
    if (has_channelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelnum());
    }

    // optional int32 loginType = 16 [default = -1];
    if (has_logintype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 combineStatus = 17 [default = -1];
    if (has_combinestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinestatus());
    }

    // optional int32 serviceCode = 19 [default = -1];
    if (has_servicecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicecode());
    }

    // optional string serviceIp = 20 [default = "default"];
    if (has_serviceip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceip());
    }

    // optional int32 servicePort = 21 [default = -1];
    if (has_serviceport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serviceport());
    }

  }
  // repeated .com.arges.file.proto.ChnInfo chninfo = 18;
  total_size += 2 * this->chninfo_size();
  for (int i = 0; i < this->chninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chninfo_.MergeFrom(from.chninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_devip()) {
      set_devip(from.devip());
    }
    if (from.has_devport()) {
      set_devport(from.devport());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpsw()) {
      set_userpsw(from.userpsw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_proxyport()) {
      set_proxyport(from.proxyport());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_devicethird()) {
      set_devicethird(from.devicethird());
    }
    if (from.has_streammode()) {
      set_streammode(from.streammode());
    }
    if (from.has_channelnum()) {
      set_channelnum(from.channelnum());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_combinestatus()) {
      set_combinestatus(from.combinestatus());
    }
    if (from.has_servicecode()) {
      set_servicecode(from.servicecode());
    }
    if (from.has_serviceip()) {
      set_serviceip(from.serviceip());
    }
    if (from.has_serviceport()) {
      set_serviceport(from.serviceport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(devid_, other->devid_);
    std::swap(provider_, other->provider_);
    std::swap(model_, other->model_);
    std::swap(devip_, other->devip_);
    std::swap(devport_, other->devport_);
    std::swap(username_, other->username_);
    std::swap(userpsw_, other->userpsw_);
    std::swap(streamtype_, other->streamtype_);
    std::swap(devtype_, other->devtype_);
    std::swap(proxyport_, other->proxyport_);
    std::swap(registerid_, other->registerid_);
    std::swap(devicethird_, other->devicethird_);
    std::swap(streammode_, other->streammode_);
    std::swap(channelnum_, other->channelnum_);
    std::swap(logintype_, other->logintype_);
    std::swap(combinestatus_, other->combinestatus_);
    chninfo_.Swap(&other->chninfo_);
    std::swap(servicecode_, other->servicecode_);
    std::swap(serviceip_, other->serviceip_);
    std::swap(serviceport_, other->serviceport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfoList::kDeviceinfoFieldNumber;
#endif  // !_MSC_VER

DeviceInfoList::DeviceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.DeviceInfoList)
}

void DeviceInfoList::InitAsDefaultInstance() {
}

DeviceInfoList::DeviceInfoList(const DeviceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.DeviceInfoList)
}

void DeviceInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoList::~DeviceInfoList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.DeviceInfoList)
  SharedDtor();
}

void DeviceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoList_descriptor_;
}

const DeviceInfoList& DeviceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

DeviceInfoList* DeviceInfoList::default_instance_ = NULL;

DeviceInfoList* DeviceInfoList::New() const {
  return new DeviceInfoList;
}

void DeviceInfoList::Clear() {
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.DeviceInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_deviceinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_deviceinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.DeviceInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.DeviceInfoList)
  return false;
#undef DO_
}

void DeviceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.DeviceInfoList)
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.DeviceInfoList)
}

::google::protobuf::uint8* DeviceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.DeviceInfoList)
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.DeviceInfoList)
  return target;
}

int DeviceInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfoList::MergeFrom(const DeviceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoList::CopyFrom(const DeviceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoList::IsInitialized() const {

  return true;
}

void DeviceInfoList::Swap(DeviceInfoList* other) {
  if (other != this) {
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoList_descriptor_;
  metadata.reflection = DeviceInfoList_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReqDevInfoFromTms::_default_tmsid_ = NULL;
#ifndef _MSC_VER
const int ReqDevInfoFromTms::kTmsIdFieldNumber;
const int ReqDevInfoFromTms::kOprTypeFieldNumber;
const int ReqDevInfoFromTms::kDevIdFieldNumber;
#endif  // !_MSC_VER

ReqDevInfoFromTms::ReqDevInfoFromTms()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDevInfoFromTms)
}

void ReqDevInfoFromTms::InitAsDefaultInstance() {
}

ReqDevInfoFromTms::ReqDevInfoFromTms(const ReqDevInfoFromTms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDevInfoFromTms)
}

void ReqDevInfoFromTms::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
  oprtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDevInfoFromTms::~ReqDevInfoFromTms() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDevInfoFromTms)
  SharedDtor();
}

void ReqDevInfoFromTms::SharedDtor() {
  if (tmsid_ != _default_tmsid_) {
    delete tmsid_;
  }
  if (this != default_instance_) {
  }
}

void ReqDevInfoFromTms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDevInfoFromTms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDevInfoFromTms_descriptor_;
}

const ReqDevInfoFromTms& ReqDevInfoFromTms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqDevInfoFromTms* ReqDevInfoFromTms::default_instance_ = NULL;

ReqDevInfoFromTms* ReqDevInfoFromTms::New() const {
  return new ReqDevInfoFromTms;
}

void ReqDevInfoFromTms::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tmsid()) {
      if (tmsid_ != _default_tmsid_) {
        tmsid_->assign(*_default_tmsid_);
      }
    }
    oprtype_ = -1;
  }
  devid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDevInfoFromTms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDevInfoFromTms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tmsId = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tmsid().data(), this->tmsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tmsid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oprType;
        break;
      }

      // required int32 oprType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_oprType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oprtype_)));
          set_has_oprtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devId;
        break;
      }

      // repeated string devId = 3;
      case 3: {
        if (tag == 26) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid(this->devid_size() - 1).data(),
            this->devid(this->devid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDevInfoFromTms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDevInfoFromTms)
  return false;
#undef DO_
}

void ReqDevInfoFromTms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDevInfoFromTms)
  // required string tmsId = 1 [default = "default"];
  if (has_tmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tmsid().data(), this->tmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tmsid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tmsid(), output);
  }

  // required int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oprtype(), output);
  }

  // repeated string devId = 3;
  for (int i = 0; i < this->devid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->devid(i).data(), this->devid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "devid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDevInfoFromTms)
}

::google::protobuf::uint8* ReqDevInfoFromTms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDevInfoFromTms)
  // required string tmsId = 1 [default = "default"];
  if (has_tmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tmsid().data(), this->tmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tmsid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tmsid(), target);
  }

  // required int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oprtype(), target);
  }

  // repeated string devId = 3;
  for (int i = 0; i < this->devid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid(i).data(), this->devid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->devid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDevInfoFromTms)
  return target;
}

int ReqDevInfoFromTms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tmsId = 1 [default = "default"];
    if (has_tmsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmsid());
    }

    // required int32 oprType = 2 [default = -1];
    if (has_oprtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oprtype());
    }

  }
  // repeated string devId = 3;
  total_size += 1 * this->devid_size();
  for (int i = 0; i < this->devid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDevInfoFromTms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDevInfoFromTms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDevInfoFromTms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDevInfoFromTms::MergeFrom(const ReqDevInfoFromTms& from) {
  GOOGLE_CHECK_NE(&from, this);
  devid_.MergeFrom(from.devid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmsid()) {
      set_tmsid(from.tmsid());
    }
    if (from.has_oprtype()) {
      set_oprtype(from.oprtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDevInfoFromTms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDevInfoFromTms::CopyFrom(const ReqDevInfoFromTms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDevInfoFromTms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqDevInfoFromTms::Swap(ReqDevInfoFromTms* other) {
  if (other != this) {
    std::swap(tmsid_, other->tmsid_);
    std::swap(oprtype_, other->oprtype_);
    devid_.Swap(&other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDevInfoFromTms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDevInfoFromTms_descriptor_;
  metadata.reflection = ReqDevInfoFromTms_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspDevInfoToTms::_default_tmsid_ = NULL;
#ifndef _MSC_VER
const int RspDevInfoToTms::kTmsIdFieldNumber;
const int RspDevInfoToTms::kOprTypeFieldNumber;
const int RspDevInfoToTms::kDeviceinfoFieldNumber;
#endif  // !_MSC_VER

RspDevInfoToTms::RspDevInfoToTms()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDevInfoToTms)
}

void RspDevInfoToTms::InitAsDefaultInstance() {
}

RspDevInfoToTms::RspDevInfoToTms(const RspDevInfoToTms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDevInfoToTms)
}

void RspDevInfoToTms::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tmsid_ = const_cast< ::std::string*>(_default_tmsid_);
  oprtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDevInfoToTms::~RspDevInfoToTms() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDevInfoToTms)
  SharedDtor();
}

void RspDevInfoToTms::SharedDtor() {
  if (tmsid_ != _default_tmsid_) {
    delete tmsid_;
  }
  if (this != default_instance_) {
  }
}

void RspDevInfoToTms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDevInfoToTms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDevInfoToTms_descriptor_;
}

const RspDevInfoToTms& RspDevInfoToTms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

RspDevInfoToTms* RspDevInfoToTms::default_instance_ = NULL;

RspDevInfoToTms* RspDevInfoToTms::New() const {
  return new RspDevInfoToTms;
}

void RspDevInfoToTms::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tmsid()) {
      if (tmsid_ != _default_tmsid_) {
        tmsid_->assign(*_default_tmsid_);
      }
    }
    oprtype_ = -1;
  }
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDevInfoToTms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDevInfoToTms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tmsId = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tmsid().data(), this->tmsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tmsid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oprType;
        break;
      }

      // optional int32 oprType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_oprType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oprtype_)));
          set_has_oprtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDevInfoToTms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDevInfoToTms)
  return false;
#undef DO_
}

void RspDevInfoToTms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDevInfoToTms)
  // optional string tmsId = 1 [default = "default"];
  if (has_tmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tmsid().data(), this->tmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tmsid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tmsid(), output);
  }

  // optional int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oprtype(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDevInfoToTms)
}

::google::protobuf::uint8* RspDevInfoToTms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDevInfoToTms)
  // optional string tmsId = 1 [default = "default"];
  if (has_tmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tmsid().data(), this->tmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tmsid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tmsid(), target);
  }

  // optional int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oprtype(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDevInfoToTms)
  return target;
}

int RspDevInfoToTms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tmsId = 1 [default = "default"];
    if (has_tmsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmsid());
    }

    // optional int32 oprType = 2 [default = -1];
    if (has_oprtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oprtype());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDevInfoToTms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDevInfoToTms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDevInfoToTms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDevInfoToTms::MergeFrom(const RspDevInfoToTms& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmsid()) {
      set_tmsid(from.tmsid());
    }
    if (from.has_oprtype()) {
      set_oprtype(from.oprtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDevInfoToTms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDevInfoToTms::CopyFrom(const RspDevInfoToTms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDevInfoToTms::IsInitialized() const {

  return true;
}

void RspDevInfoToTms::Swap(RspDevInfoToTms* other) {
  if (other != this) {
    std::swap(tmsid_, other->tmsid_);
    std::swap(oprtype_, other->oprtype_);
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDevInfoToTms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDevInfoToTms_descriptor_;
  metadata.reflection = RspDevInfoToTms_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReqDevInfoFromDms::_default_dmsid_ = NULL;
#ifndef _MSC_VER
const int ReqDevInfoFromDms::kDmsIdFieldNumber;
const int ReqDevInfoFromDms::kOprTypeFieldNumber;
const int ReqDevInfoFromDms::kDevIdFieldNumber;
#endif  // !_MSC_VER

ReqDevInfoFromDms::ReqDevInfoFromDms()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDevInfoFromDms)
}

void ReqDevInfoFromDms::InitAsDefaultInstance() {
}

ReqDevInfoFromDms::ReqDevInfoFromDms(const ReqDevInfoFromDms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDevInfoFromDms)
}

void ReqDevInfoFromDms::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
  oprtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDevInfoFromDms::~ReqDevInfoFromDms() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDevInfoFromDms)
  SharedDtor();
}

void ReqDevInfoFromDms::SharedDtor() {
  if (dmsid_ != _default_dmsid_) {
    delete dmsid_;
  }
  if (this != default_instance_) {
  }
}

void ReqDevInfoFromDms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDevInfoFromDms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDevInfoFromDms_descriptor_;
}

const ReqDevInfoFromDms& ReqDevInfoFromDms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqDevInfoFromDms* ReqDevInfoFromDms::default_instance_ = NULL;

ReqDevInfoFromDms* ReqDevInfoFromDms::New() const {
  return new ReqDevInfoFromDms;
}

void ReqDevInfoFromDms::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dmsid()) {
      if (dmsid_ != _default_dmsid_) {
        dmsid_->assign(*_default_dmsid_);
      }
    }
    oprtype_ = -1;
  }
  devid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDevInfoFromDms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDevInfoFromDms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dmsId = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dmsid().data(), this->dmsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dmsid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oprType;
        break;
      }

      // required int32 oprType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_oprType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oprtype_)));
          set_has_oprtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devId;
        break;
      }

      // repeated string devId = 3;
      case 3: {
        if (tag == 26) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid(this->devid_size() - 1).data(),
            this->devid(this->devid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDevInfoFromDms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDevInfoFromDms)
  return false;
#undef DO_
}

void ReqDevInfoFromDms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDevInfoFromDms)
  // required string dmsId = 1 [default = "default"];
  if (has_dmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmsid().data(), this->dmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dmsid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dmsid(), output);
  }

  // required int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oprtype(), output);
  }

  // repeated string devId = 3;
  for (int i = 0; i < this->devid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->devid(i).data(), this->devid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "devid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDevInfoFromDms)
}

::google::protobuf::uint8* ReqDevInfoFromDms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDevInfoFromDms)
  // required string dmsId = 1 [default = "default"];
  if (has_dmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmsid().data(), this->dmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dmsid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dmsid(), target);
  }

  // required int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oprtype(), target);
  }

  // repeated string devId = 3;
  for (int i = 0; i < this->devid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid(i).data(), this->devid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->devid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDevInfoFromDms)
  return target;
}

int ReqDevInfoFromDms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dmsId = 1 [default = "default"];
    if (has_dmsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dmsid());
    }

    // required int32 oprType = 2 [default = -1];
    if (has_oprtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oprtype());
    }

  }
  // repeated string devId = 3;
  total_size += 1 * this->devid_size();
  for (int i = 0; i < this->devid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDevInfoFromDms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDevInfoFromDms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDevInfoFromDms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDevInfoFromDms::MergeFrom(const ReqDevInfoFromDms& from) {
  GOOGLE_CHECK_NE(&from, this);
  devid_.MergeFrom(from.devid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dmsid()) {
      set_dmsid(from.dmsid());
    }
    if (from.has_oprtype()) {
      set_oprtype(from.oprtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDevInfoFromDms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDevInfoFromDms::CopyFrom(const ReqDevInfoFromDms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDevInfoFromDms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqDevInfoFromDms::Swap(ReqDevInfoFromDms* other) {
  if (other != this) {
    std::swap(dmsid_, other->dmsid_);
    std::swap(oprtype_, other->oprtype_);
    devid_.Swap(&other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDevInfoFromDms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDevInfoFromDms_descriptor_;
  metadata.reflection = ReqDevInfoFromDms_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspDevInfoToDms::_default_dmsid_ = NULL;
#ifndef _MSC_VER
const int RspDevInfoToDms::kDmsIdFieldNumber;
const int RspDevInfoToDms::kOprTypeFieldNumber;
const int RspDevInfoToDms::kDeviceinfoFieldNumber;
#endif  // !_MSC_VER

RspDevInfoToDms::RspDevInfoToDms()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDevInfoToDms)
}

void RspDevInfoToDms::InitAsDefaultInstance() {
}

RspDevInfoToDms::RspDevInfoToDms(const RspDevInfoToDms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDevInfoToDms)
}

void RspDevInfoToDms::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dmsid_ = const_cast< ::std::string*>(_default_dmsid_);
  oprtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDevInfoToDms::~RspDevInfoToDms() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDevInfoToDms)
  SharedDtor();
}

void RspDevInfoToDms::SharedDtor() {
  if (dmsid_ != _default_dmsid_) {
    delete dmsid_;
  }
  if (this != default_instance_) {
  }
}

void RspDevInfoToDms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDevInfoToDms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDevInfoToDms_descriptor_;
}

const RspDevInfoToDms& RspDevInfoToDms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

RspDevInfoToDms* RspDevInfoToDms::default_instance_ = NULL;

RspDevInfoToDms* RspDevInfoToDms::New() const {
  return new RspDevInfoToDms;
}

void RspDevInfoToDms::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dmsid()) {
      if (dmsid_ != _default_dmsid_) {
        dmsid_->assign(*_default_dmsid_);
      }
    }
    oprtype_ = -1;
  }
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDevInfoToDms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDevInfoToDms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dmsId = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dmsid().data(), this->dmsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dmsid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oprType;
        break;
      }

      // optional int32 oprType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_oprType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oprtype_)));
          set_has_oprtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDevInfoToDms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDevInfoToDms)
  return false;
#undef DO_
}

void RspDevInfoToDms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDevInfoToDms)
  // optional string dmsId = 1 [default = "default"];
  if (has_dmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmsid().data(), this->dmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dmsid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dmsid(), output);
  }

  // optional int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oprtype(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDevInfoToDms)
}

::google::protobuf::uint8* RspDevInfoToDms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDevInfoToDms)
  // optional string dmsId = 1 [default = "default"];
  if (has_dmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmsid().data(), this->dmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dmsid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dmsid(), target);
  }

  // optional int32 oprType = 2 [default = -1];
  if (has_oprtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oprtype(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDevInfoToDms)
  return target;
}

int RspDevInfoToDms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dmsId = 1 [default = "default"];
    if (has_dmsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dmsid());
    }

    // optional int32 oprType = 2 [default = -1];
    if (has_oprtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oprtype());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDevInfoToDms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDevInfoToDms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDevInfoToDms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDevInfoToDms::MergeFrom(const RspDevInfoToDms& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dmsid()) {
      set_dmsid(from.dmsid());
    }
    if (from.has_oprtype()) {
      set_oprtype(from.oprtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDevInfoToDms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDevInfoToDms::CopyFrom(const RspDevInfoToDms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDevInfoToDms::IsInitialized() const {

  return true;
}

void RspDevInfoToDms::Swap(RspDevInfoToDms* other) {
  if (other != this) {
    std::swap(dmsid_, other->dmsid_);
    std::swap(oprtype_, other->oprtype_);
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDevInfoToDms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDevInfoToDms_descriptor_;
  metadata.reflection = RspDevInfoToDms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDevRegisterServerInfo::kDevIdFieldNumber;
const int ReqDevRegisterServerInfo::kMstypeFieldNumber;
#endif  // !_MSC_VER

ReqDevRegisterServerInfo::ReqDevRegisterServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDevRegisterServerInfo)
}

void ReqDevRegisterServerInfo::InitAsDefaultInstance() {
}

ReqDevRegisterServerInfo::ReqDevRegisterServerInfo(const ReqDevRegisterServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDevRegisterServerInfo)
}

void ReqDevRegisterServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDevRegisterServerInfo::~ReqDevRegisterServerInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDevRegisterServerInfo)
  SharedDtor();
}

void ReqDevRegisterServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDevRegisterServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDevRegisterServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDevRegisterServerInfo_descriptor_;
}

const ReqDevRegisterServerInfo& ReqDevRegisterServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

ReqDevRegisterServerInfo* ReqDevRegisterServerInfo::default_instance_ = NULL;

ReqDevRegisterServerInfo* ReqDevRegisterServerInfo::New() const {
  return new ReqDevRegisterServerInfo;
}

void ReqDevRegisterServerInfo::Clear() {
  mstype_ = 0;
  devid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDevRegisterServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDevRegisterServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string devId = 1;
      case 1: {
        if (tag == 10) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid(this->devid_size() - 1).data(),
            this->devid(this->devid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_devId;
        if (input->ExpectTag(16)) goto parse_mstype;
        break;
      }

      // required int32 mstype = 2;
      case 2: {
        if (tag == 16) {
         parse_mstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstype_)));
          set_has_mstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDevRegisterServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDevRegisterServerInfo)
  return false;
#undef DO_
}

void ReqDevRegisterServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDevRegisterServerInfo)
  // repeated string devId = 1;
  for (int i = 0; i < this->devid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->devid(i).data(), this->devid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "devid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->devid(i), output);
  }

  // required int32 mstype = 2;
  if (has_mstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDevRegisterServerInfo)
}

::google::protobuf::uint8* ReqDevRegisterServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDevRegisterServerInfo)
  // repeated string devId = 1;
  for (int i = 0; i < this->devid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid(i).data(), this->devid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->devid(i), target);
  }

  // required int32 mstype = 2;
  if (has_mstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDevRegisterServerInfo)
  return target;
}

int ReqDevRegisterServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 mstype = 2;
    if (has_mstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstype());
    }

  }
  // repeated string devId = 1;
  total_size += 1 * this->devid_size();
  for (int i = 0; i < this->devid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDevRegisterServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDevRegisterServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDevRegisterServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDevRegisterServerInfo::MergeFrom(const ReqDevRegisterServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devid_.MergeFrom(from.devid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mstype()) {
      set_mstype(from.mstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDevRegisterServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDevRegisterServerInfo::CopyFrom(const ReqDevRegisterServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDevRegisterServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ReqDevRegisterServerInfo::Swap(ReqDevRegisterServerInfo* other) {
  if (other != this) {
    devid_.Swap(&other->devid_);
    std::swap(mstype_, other->mstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDevRegisterServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDevRegisterServerInfo_descriptor_;
  metadata.reflection = ReqDevRegisterServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspDevRegisterServerInfo::kDevIdFieldNumber;
const int RspDevRegisterServerInfo::kMstypeFieldNumber;
const int RspDevRegisterServerInfo::kDeviceinfoFieldNumber;
#endif  // !_MSC_VER

RspDevRegisterServerInfo::RspDevRegisterServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDevRegisterServerInfo)
}

void RspDevRegisterServerInfo::InitAsDefaultInstance() {
}

RspDevRegisterServerInfo::RspDevRegisterServerInfo(const RspDevRegisterServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDevRegisterServerInfo)
}

void RspDevRegisterServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDevRegisterServerInfo::~RspDevRegisterServerInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDevRegisterServerInfo)
  SharedDtor();
}

void RspDevRegisterServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspDevRegisterServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDevRegisterServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDevRegisterServerInfo_descriptor_;
}

const RspDevRegisterServerInfo& RspDevRegisterServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DevInfoListBean_2eproto();
  return *default_instance_;
}

RspDevRegisterServerInfo* RspDevRegisterServerInfo::default_instance_ = NULL;

RspDevRegisterServerInfo* RspDevRegisterServerInfo::New() const {
  return new RspDevRegisterServerInfo;
}

void RspDevRegisterServerInfo::Clear() {
  mstype_ = 0;
  devid_.Clear();
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDevRegisterServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDevRegisterServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string devId = 1;
      case 1: {
        if (tag == 10) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid(this->devid_size() - 1).data(),
            this->devid(this->devid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_devId;
        if (input->ExpectTag(16)) goto parse_mstype;
        break;
      }

      // required int32 mstype = 2;
      case 2: {
        if (tag == 16) {
         parse_mstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstype_)));
          set_has_mstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        break;
      }

      // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDevRegisterServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDevRegisterServerInfo)
  return false;
#undef DO_
}

void RspDevRegisterServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDevRegisterServerInfo)
  // repeated string devId = 1;
  for (int i = 0; i < this->devid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->devid(i).data(), this->devid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "devid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->devid(i), output);
  }

  // required int32 mstype = 2;
  if (has_mstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mstype(), output);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDevRegisterServerInfo)
}

::google::protobuf::uint8* RspDevRegisterServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDevRegisterServerInfo)
  // repeated string devId = 1;
  for (int i = 0; i < this->devid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid(i).data(), this->devid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->devid(i), target);
  }

  // required int32 mstype = 2;
  if (has_mstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mstype(), target);
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDevRegisterServerInfo)
  return target;
}

int RspDevRegisterServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 mstype = 2;
    if (has_mstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstype());
    }

  }
  // repeated string devId = 1;
  total_size += 1 * this->devid_size();
  for (int i = 0; i < this->devid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devid(i));
  }

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 3;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDevRegisterServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDevRegisterServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDevRegisterServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDevRegisterServerInfo::MergeFrom(const RspDevRegisterServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devid_.MergeFrom(from.devid_);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mstype()) {
      set_mstype(from.mstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDevRegisterServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDevRegisterServerInfo::CopyFrom(const RspDevRegisterServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDevRegisterServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RspDevRegisterServerInfo::Swap(RspDevRegisterServerInfo* other) {
  if (other != this) {
    devid_.Swap(&other->devid_);
    std::swap(mstype_, other->mstype_);
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDevRegisterServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDevRegisterServerInfo_descriptor_;
  metadata.reflection = RspDevRegisterServerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
