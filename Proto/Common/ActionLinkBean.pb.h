// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActionLinkBean.proto

#ifndef PROTOBUF_ActionLinkBean_2eproto__INCLUDED
#define PROTOBUF_ActionLinkBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActionLinkBean_2eproto();
void protobuf_AssignDesc_ActionLinkBean_2eproto();
void protobuf_ShutdownFile_ActionLinkBean_2eproto();

class SoundLinkData;
class LightLinkData;
class VideoLinkData;
class EmailLinkData;
class RecordLinkData;
class SmsLinkData;
class TvwallMissonData;
class TvwallLinkData;
class CapitureLinkData;

enum REQUEST_TYPE_OF_PICTURE_LINK {
  PICTURE_LINK_GET_DEV_INFO = 1,
  PICTURE_LINK_GET_PICTURE = 2
};
bool REQUEST_TYPE_OF_PICTURE_LINK_IsValid(int value);
const REQUEST_TYPE_OF_PICTURE_LINK REQUEST_TYPE_OF_PICTURE_LINK_MIN = PICTURE_LINK_GET_DEV_INFO;
const REQUEST_TYPE_OF_PICTURE_LINK REQUEST_TYPE_OF_PICTURE_LINK_MAX = PICTURE_LINK_GET_PICTURE;
const int REQUEST_TYPE_OF_PICTURE_LINK_ARRAYSIZE = REQUEST_TYPE_OF_PICTURE_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PICTURE_LINK_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_PICTURE_LINK_Name(REQUEST_TYPE_OF_PICTURE_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_PICTURE_LINK_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_PICTURE_LINK_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_PICTURE_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_PICTURE_LINK>(
    REQUEST_TYPE_OF_PICTURE_LINK_descriptor(), name, value);
}
enum LOOP_TYPE_OF_SOUND_LINK {
  SOUND_LINK_NOT_LOOP_PLAY = 0,
  SOUND_LINK_LOOP_PLAY = 1
};
bool LOOP_TYPE_OF_SOUND_LINK_IsValid(int value);
const LOOP_TYPE_OF_SOUND_LINK LOOP_TYPE_OF_SOUND_LINK_MIN = SOUND_LINK_NOT_LOOP_PLAY;
const LOOP_TYPE_OF_SOUND_LINK LOOP_TYPE_OF_SOUND_LINK_MAX = SOUND_LINK_LOOP_PLAY;
const int LOOP_TYPE_OF_SOUND_LINK_ARRAYSIZE = LOOP_TYPE_OF_SOUND_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOOP_TYPE_OF_SOUND_LINK_descriptor();
inline const ::std::string& LOOP_TYPE_OF_SOUND_LINK_Name(LOOP_TYPE_OF_SOUND_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOOP_TYPE_OF_SOUND_LINK_descriptor(), value);
}
inline bool LOOP_TYPE_OF_SOUND_LINK_Parse(
    const ::std::string& name, LOOP_TYPE_OF_SOUND_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOOP_TYPE_OF_SOUND_LINK>(
    LOOP_TYPE_OF_SOUND_LINK_descriptor(), name, value);
}
enum AUTO_TYPE_OF_LIGHT_LINK {
  LIGHT_LINK_IS_NOT_AUTO_OPEN = 0,
  LIGHT_LINK_IS_AUTO_OPEN = 1
};
bool AUTO_TYPE_OF_LIGHT_LINK_IsValid(int value);
const AUTO_TYPE_OF_LIGHT_LINK AUTO_TYPE_OF_LIGHT_LINK_MIN = LIGHT_LINK_IS_NOT_AUTO_OPEN;
const AUTO_TYPE_OF_LIGHT_LINK AUTO_TYPE_OF_LIGHT_LINK_MAX = LIGHT_LINK_IS_AUTO_OPEN;
const int AUTO_TYPE_OF_LIGHT_LINK_ARRAYSIZE = AUTO_TYPE_OF_LIGHT_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* AUTO_TYPE_OF_LIGHT_LINK_descriptor();
inline const ::std::string& AUTO_TYPE_OF_LIGHT_LINK_Name(AUTO_TYPE_OF_LIGHT_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    AUTO_TYPE_OF_LIGHT_LINK_descriptor(), value);
}
inline bool AUTO_TYPE_OF_LIGHT_LINK_Parse(
    const ::std::string& name, AUTO_TYPE_OF_LIGHT_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AUTO_TYPE_OF_LIGHT_LINK>(
    AUTO_TYPE_OF_LIGHT_LINK_descriptor(), name, value);
}
// ===================================================================

class SoundLinkData : public ::google::protobuf::Message {
 public:
  SoundLinkData();
  virtual ~SoundLinkData();

  SoundLinkData(const SoundLinkData& from);

  inline SoundLinkData& operator=(const SoundLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundLinkData& default_instance();

  void Swap(SoundLinkData* other);

  // implements Message ----------------------------------------------

  SoundLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoundLinkData& from);
  void MergeFrom(const SoundLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 alarmType = 1 [default = -1];
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 1;
  inline ::google::protobuf::int64 alarmtype() const;
  inline void set_alarmtype(::google::protobuf::int64 value);

  // optional string name = 2 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string file = 3 [default = ""];
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional int32 isLoop = 4 [default = 0];
  inline bool has_isloop() const;
  inline void clear_isloop();
  static const int kIsLoopFieldNumber = 4;
  inline ::google::protobuf::int32 isloop() const;
  inline void set_isloop(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SoundLinkData)
 private:
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_isloop();
  inline void clear_has_isloop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 alarmtype_;
  ::std::string* name_;
  ::std::string* file_;
  ::google::protobuf::int32 isloop_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static SoundLinkData* default_instance_;
};
// -------------------------------------------------------------------

class LightLinkData : public ::google::protobuf::Message {
 public:
  LightLinkData();
  virtual ~LightLinkData();

  LightLinkData(const LightLinkData& from);

  inline LightLinkData& operator=(const LightLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightLinkData& default_instance();

  void Swap(LightLinkData* other);

  // implements Message ----------------------------------------------

  LightLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightLinkData& from);
  void MergeFrom(const LightLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string channelCode = 3 [default = ""];
  inline bool has_channelcode() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 3;
  inline const ::std::string& channelcode() const;
  inline void set_channelcode(const ::std::string& value);
  inline void set_channelcode(const char* value);
  inline void set_channelcode(const char* value, size_t size);
  inline ::std::string* mutable_channelcode();
  inline ::std::string* release_channelcode();
  inline void set_allocated_channelcode(::std::string* channelcode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.LightLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_channelcode();
  inline void clear_has_channelcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* channelcode_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static LightLinkData* default_instance_;
};
// -------------------------------------------------------------------

class VideoLinkData : public ::google::protobuf::Message {
 public:
  VideoLinkData();
  virtual ~VideoLinkData();

  VideoLinkData(const VideoLinkData& from);

  inline VideoLinkData& operator=(const VideoLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoLinkData& default_instance();

  void Swap(VideoLinkData* other);

  // implements Message ----------------------------------------------

  VideoLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoLinkData& from);
  void MergeFrom(const VideoLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string channelCode = 3 [default = ""];
  inline bool has_channelcode() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 3;
  inline const ::std::string& channelcode() const;
  inline void set_channelcode(const ::std::string& value);
  inline void set_channelcode(const char* value);
  inline void set_channelcode(const char* value, size_t size);
  inline ::std::string* mutable_channelcode();
  inline ::std::string* release_channelcode();
  inline void set_allocated_channelcode(::std::string* channelcode);

  // optional int64 stayTime = 4 [default = 0];
  inline bool has_staytime() const;
  inline void clear_staytime();
  static const int kStayTimeFieldNumber = 4;
  inline ::google::protobuf::int64 staytime() const;
  inline void set_staytime(::google::protobuf::int64 value);

  // optional string prepoint = 5 [default = ""];
  inline bool has_prepoint() const;
  inline void clear_prepoint();
  static const int kPrepointFieldNumber = 5;
  inline const ::std::string& prepoint() const;
  inline void set_prepoint(const ::std::string& value);
  inline void set_prepoint(const char* value);
  inline void set_prepoint(const char* value, size_t size);
  inline ::std::string* mutable_prepoint();
  inline ::std::string* release_prepoint();
  inline void set_allocated_prepoint(::std::string* prepoint);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VideoLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_channelcode();
  inline void clear_has_channelcode();
  inline void set_has_staytime();
  inline void clear_has_staytime();
  inline void set_has_prepoint();
  inline void clear_has_prepoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* channelcode_;
  ::google::protobuf::int64 staytime_;
  ::std::string* prepoint_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static VideoLinkData* default_instance_;
};
// -------------------------------------------------------------------

class EmailLinkData : public ::google::protobuf::Message {
 public:
  EmailLinkData();
  virtual ~EmailLinkData();

  EmailLinkData(const EmailLinkData& from);

  inline EmailLinkData& operator=(const EmailLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailLinkData& default_instance();

  void Swap(EmailLinkData* other);

  // implements Message ----------------------------------------------

  EmailLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailLinkData& from);
  void MergeFrom(const EmailLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string subject = 3 [default = ""];
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 3;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated string emailAddress = 5;
  inline int emailaddress_size() const;
  inline void clear_emailaddress();
  static const int kEmailAddressFieldNumber = 5;
  inline const ::std::string& emailaddress(int index) const;
  inline ::std::string* mutable_emailaddress(int index);
  inline void set_emailaddress(int index, const ::std::string& value);
  inline void set_emailaddress(int index, const char* value);
  inline void set_emailaddress(int index, const char* value, size_t size);
  inline ::std::string* add_emailaddress();
  inline void add_emailaddress(const ::std::string& value);
  inline void add_emailaddress(const char* value);
  inline void add_emailaddress(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& emailaddress() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_emailaddress();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.EmailLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* subject_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> emailaddress_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static EmailLinkData* default_instance_;
};
// -------------------------------------------------------------------

class RecordLinkData : public ::google::protobuf::Message {
 public:
  RecordLinkData();
  virtual ~RecordLinkData();

  RecordLinkData(const RecordLinkData& from);

  inline RecordLinkData& operator=(const RecordLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordLinkData& default_instance();

  void Swap(RecordLinkData* other);

  // implements Message ----------------------------------------------

  RecordLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordLinkData& from);
  void MergeFrom(const RecordLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int64 recordTime = 3 [default = 0];
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 3;
  inline ::google::protobuf::int64 recordtime() const;
  inline void set_recordtime(::google::protobuf::int64 value);

  // optional int64 preRecordTime = 4 [default = 0];
  inline bool has_prerecordtime() const;
  inline void clear_prerecordtime();
  static const int kPreRecordTimeFieldNumber = 4;
  inline ::google::protobuf::int64 prerecordtime() const;
  inline void set_prerecordtime(::google::protobuf::int64 value);

  // optional int32 assistantStream = 5 [default = -1];
  inline bool has_assistantstream() const;
  inline void clear_assistantstream();
  static const int kAssistantStreamFieldNumber = 5;
  inline ::google::protobuf::int32 assistantstream() const;
  inline void set_assistantstream(::google::protobuf::int32 value);

  // repeated string channelCode = 6;
  inline int channelcode_size() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 6;
  inline const ::std::string& channelcode(int index) const;
  inline ::std::string* mutable_channelcode(int index);
  inline void set_channelcode(int index, const ::std::string& value);
  inline void set_channelcode(int index, const char* value);
  inline void set_channelcode(int index, const char* value, size_t size);
  inline ::std::string* add_channelcode();
  inline void add_channelcode(const ::std::string& value);
  inline void add_channelcode(const char* value);
  inline void add_channelcode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channelcode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channelcode();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RecordLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_prerecordtime();
  inline void clear_has_prerecordtime();
  inline void set_has_assistantstream();
  inline void clear_has_assistantstream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::google::protobuf::int64 recordtime_;
  ::google::protobuf::int64 prerecordtime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channelcode_;
  ::google::protobuf::int32 assistantstream_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static RecordLinkData* default_instance_;
};
// -------------------------------------------------------------------

class SmsLinkData : public ::google::protobuf::Message {
 public:
  SmsLinkData();
  virtual ~SmsLinkData();

  SmsLinkData(const SmsLinkData& from);

  inline SmsLinkData& operator=(const SmsLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsLinkData& default_instance();

  void Swap(SmsLinkData* other);

  // implements Message ----------------------------------------------

  SmsLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmsLinkData& from);
  void MergeFrom(const SmsLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string content = 3 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated string phoneNumber = 4;
  inline int phonenumber_size() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 4;
  inline const ::std::string& phonenumber(int index) const;
  inline ::std::string* mutable_phonenumber(int index);
  inline void set_phonenumber(int index, const ::std::string& value);
  inline void set_phonenumber(int index, const char* value);
  inline void set_phonenumber(int index, const char* value, size_t size);
  inline ::std::string* add_phonenumber();
  inline void add_phonenumber(const ::std::string& value);
  inline void add_phonenumber(const char* value);
  inline void add_phonenumber(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& phonenumber() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phonenumber();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SmsLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phonenumber_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static SmsLinkData* default_instance_;
};
// -------------------------------------------------------------------

class TvwallMissonData : public ::google::protobuf::Message {
 public:
  TvwallMissonData();
  virtual ~TvwallMissonData();

  TvwallMissonData(const TvwallMissonData& from);

  inline TvwallMissonData& operator=(const TvwallMissonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TvwallMissonData& default_instance();

  void Swap(TvwallMissonData* other);

  // implements Message ----------------------------------------------

  TvwallMissonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TvwallMissonData& from);
  void MergeFrom(const TvwallMissonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcelCode = 1;
  inline bool has_sourcelcode() const;
  inline void clear_sourcelcode();
  static const int kSourcelCodeFieldNumber = 1;
  inline ::google::protobuf::int64 sourcelcode() const;
  inline void set_sourcelcode(::google::protobuf::int64 value);

  // optional int64 sourcelSeq = 2;
  inline bool has_sourcelseq() const;
  inline void clear_sourcelseq();
  static const int kSourcelSeqFieldNumber = 2;
  inline ::google::protobuf::int64 sourcelseq() const;
  inline void set_sourcelseq(::google::protobuf::int64 value);

  // optional int64 screenSeq = 3;
  inline bool has_screenseq() const;
  inline void clear_screenseq();
  static const int kScreenSeqFieldNumber = 3;
  inline ::google::protobuf::int64 screenseq() const;
  inline void set_screenseq(::google::protobuf::int64 value);

  // optional int64 windowIndex = 4;
  inline bool has_windowindex() const;
  inline void clear_windowindex();
  static const int kWindowIndexFieldNumber = 4;
  inline ::google::protobuf::int64 windowindex() const;
  inline void set_windowindex(::google::protobuf::int64 value);

  // optional int64 windowCount = 5;
  inline bool has_windowcount() const;
  inline void clear_windowcount();
  static const int kWindowCountFieldNumber = 5;
  inline ::google::protobuf::int64 windowcount() const;
  inline void set_windowcount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.TvwallMissonData)
 private:
  inline void set_has_sourcelcode();
  inline void clear_has_sourcelcode();
  inline void set_has_sourcelseq();
  inline void clear_has_sourcelseq();
  inline void set_has_screenseq();
  inline void clear_has_screenseq();
  inline void set_has_windowindex();
  inline void clear_has_windowindex();
  inline void set_has_windowcount();
  inline void clear_has_windowcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourcelcode_;
  ::google::protobuf::int64 sourcelseq_;
  ::google::protobuf::int64 screenseq_;
  ::google::protobuf::int64 windowindex_;
  ::google::protobuf::int64 windowcount_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static TvwallMissonData* default_instance_;
};
// -------------------------------------------------------------------

class TvwallLinkData : public ::google::protobuf::Message {
 public:
  TvwallLinkData();
  virtual ~TvwallLinkData();

  TvwallLinkData(const TvwallLinkData& from);

  inline TvwallLinkData& operator=(const TvwallLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TvwallLinkData& default_instance();

  void Swap(TvwallLinkData* other);

  // implements Message ----------------------------------------------

  TvwallLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TvwallLinkData& from);
  void MergeFrom(const TvwallLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int64 planId = 3 [default = -1];
  inline bool has_planid() const;
  inline void clear_planid();
  static const int kPlanIdFieldNumber = 3;
  inline ::google::protobuf::int64 planid() const;
  inline void set_planid(::google::protobuf::int64 value);

  // optional int64 keepTime = 4 [default = 30];
  inline bool has_keeptime() const;
  inline void clear_keeptime();
  static const int kKeepTimeFieldNumber = 4;
  inline ::google::protobuf::int64 keeptime() const;
  inline void set_keeptime(::google::protobuf::int64 value);

  // repeated .com.arges.file.proto.TvwallMissonData misson = 5;
  inline int misson_size() const;
  inline void clear_misson();
  static const int kMissonFieldNumber = 5;
  inline const ::com::arges::file::proto::TvwallMissonData& misson(int index) const;
  inline ::com::arges::file::proto::TvwallMissonData* mutable_misson(int index);
  inline ::com::arges::file::proto::TvwallMissonData* add_misson();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallMissonData >&
      misson() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallMissonData >*
      mutable_misson();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.TvwallLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_planid();
  inline void clear_has_planid();
  inline void set_has_keeptime();
  inline void clear_has_keeptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::google::protobuf::int64 planid_;
  ::google::protobuf::int64 keeptime_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallMissonData > misson_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static TvwallLinkData* default_instance_;
};
// -------------------------------------------------------------------

class CapitureLinkData : public ::google::protobuf::Message {
 public:
  CapitureLinkData();
  virtual ~CapitureLinkData();

  CapitureLinkData(const CapitureLinkData& from);

  inline CapitureLinkData& operator=(const CapitureLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapitureLinkData& default_instance();

  void Swap(CapitureLinkData* other);

  // implements Message ----------------------------------------------

  CapitureLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapitureLinkData& from);
  void MergeFrom(const CapitureLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int32 status = 3 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes picture1 = 4 [default = ""];
  inline bool has_picture1() const;
  inline void clear_picture1();
  static const int kPicture1FieldNumber = 4;
  inline const ::std::string& picture1() const;
  inline void set_picture1(const ::std::string& value);
  inline void set_picture1(const char* value);
  inline void set_picture1(const void* value, size_t size);
  inline ::std::string* mutable_picture1();
  inline ::std::string* release_picture1();
  inline void set_allocated_picture1(::std::string* picture1);

  // optional bytes picture2 = 5 [default = ""];
  inline bool has_picture2() const;
  inline void clear_picture2();
  static const int kPicture2FieldNumber = 5;
  inline const ::std::string& picture2() const;
  inline void set_picture2(const ::std::string& value);
  inline void set_picture2(const char* value);
  inline void set_picture2(const void* value, size_t size);
  inline ::std::string* mutable_picture2();
  inline ::std::string* release_picture2();
  inline void set_allocated_picture2(::std::string* picture2);

  // optional bytes picture3 = 6 [default = ""];
  inline bool has_picture3() const;
  inline void clear_picture3();
  static const int kPicture3FieldNumber = 6;
  inline const ::std::string& picture3() const;
  inline void set_picture3(const ::std::string& value);
  inline void set_picture3(const char* value);
  inline void set_picture3(const void* value, size_t size);
  inline ::std::string* mutable_picture3();
  inline ::std::string* release_picture3();
  inline void set_allocated_picture3(::std::string* picture3);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.CapitureLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_picture1();
  inline void clear_has_picture1();
  inline void set_has_picture2();
  inline void clear_has_picture2();
  inline void set_has_picture3();
  inline void clear_has_picture3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* picture1_;
  ::std::string* picture2_;
  ::std::string* picture3_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static CapitureLinkData* default_instance_;
};
// ===================================================================


// ===================================================================

// SoundLinkData

// optional int64 alarmType = 1 [default = -1];
inline bool SoundLinkData::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundLinkData::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundLinkData::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundLinkData::clear_alarmtype() {
  alarmtype_ = GOOGLE_LONGLONG(-1);
  clear_has_alarmtype();
}
inline ::google::protobuf::int64 SoundLinkData::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.alarmType)
  return alarmtype_;
}
inline void SoundLinkData::set_alarmtype(::google::protobuf::int64 value) {
  set_has_alarmtype();
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.alarmType)
}

// optional string name = 2 [default = ""];
inline bool SoundLinkData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoundLinkData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoundLinkData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoundLinkData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SoundLinkData::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.name)
  return *name_;
}
inline void SoundLinkData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.name)
}
inline void SoundLinkData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SoundLinkData.name)
}
inline void SoundLinkData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SoundLinkData.name)
}
inline ::std::string* SoundLinkData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SoundLinkData.name)
  return name_;
}
inline ::std::string* SoundLinkData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoundLinkData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SoundLinkData.name)
}

// optional string file = 3 [default = ""];
inline bool SoundLinkData::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoundLinkData::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoundLinkData::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoundLinkData::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& SoundLinkData::file() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.file)
  return *file_;
}
inline void SoundLinkData::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.file)
}
inline void SoundLinkData::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SoundLinkData.file)
}
inline void SoundLinkData::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SoundLinkData.file)
}
inline ::std::string* SoundLinkData::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SoundLinkData.file)
  return file_;
}
inline ::std::string* SoundLinkData::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoundLinkData::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SoundLinkData.file)
}

// optional int32 isLoop = 4 [default = 0];
inline bool SoundLinkData::has_isloop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoundLinkData::set_has_isloop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoundLinkData::clear_has_isloop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoundLinkData::clear_isloop() {
  isloop_ = 0;
  clear_has_isloop();
}
inline ::google::protobuf::int32 SoundLinkData::isloop() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.isLoop)
  return isloop_;
}
inline void SoundLinkData::set_isloop(::google::protobuf::int32 value) {
  set_has_isloop();
  isloop_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.isLoop)
}

// -------------------------------------------------------------------

// LightLinkData

// optional int64 id = 1 [default = -1];
inline bool LightLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 LightLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.id)
  return id_;
}
inline void LightLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool LightLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 LightLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.ruleId)
  return ruleid_;
}
inline void LightLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.ruleId)
}

// optional string channelCode = 3 [default = ""];
inline bool LightLinkData::has_channelcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightLinkData::set_has_channelcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightLinkData::clear_has_channelcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightLinkData::clear_channelcode() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_->clear();
  }
  clear_has_channelcode();
}
inline const ::std::string& LightLinkData::channelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.channelCode)
  return *channelcode_;
}
inline void LightLinkData::set_channelcode(const ::std::string& value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.channelCode)
}
inline void LightLinkData::set_channelcode(const char* value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.LightLinkData.channelCode)
}
inline void LightLinkData::set_channelcode(const char* value, size_t size) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.LightLinkData.channelCode)
}
inline ::std::string* LightLinkData::mutable_channelcode() {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.LightLinkData.channelCode)
  return channelcode_;
}
inline ::std::string* LightLinkData::release_channelcode() {
  clear_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelcode_;
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LightLinkData::set_allocated_channelcode(::std::string* channelcode) {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (channelcode) {
    set_has_channelcode();
    channelcode_ = channelcode;
  } else {
    clear_has_channelcode();
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.LightLinkData.channelCode)
}

// -------------------------------------------------------------------

// VideoLinkData

// optional int64 id = 1 [default = -1];
inline bool VideoLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 VideoLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.id)
  return id_;
}
inline void VideoLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool VideoLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 VideoLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.ruleId)
  return ruleid_;
}
inline void VideoLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.ruleId)
}

// optional string channelCode = 3 [default = ""];
inline bool VideoLinkData::has_channelcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoLinkData::set_has_channelcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoLinkData::clear_has_channelcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoLinkData::clear_channelcode() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_->clear();
  }
  clear_has_channelcode();
}
inline const ::std::string& VideoLinkData::channelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.channelCode)
  return *channelcode_;
}
inline void VideoLinkData::set_channelcode(const ::std::string& value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.channelCode)
}
inline void VideoLinkData::set_channelcode(const char* value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoLinkData.channelCode)
}
inline void VideoLinkData::set_channelcode(const char* value, size_t size) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoLinkData.channelCode)
}
inline ::std::string* VideoLinkData::mutable_channelcode() {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoLinkData.channelCode)
  return channelcode_;
}
inline ::std::string* VideoLinkData::release_channelcode() {
  clear_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelcode_;
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoLinkData::set_allocated_channelcode(::std::string* channelcode) {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (channelcode) {
    set_has_channelcode();
    channelcode_ = channelcode;
  } else {
    clear_has_channelcode();
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoLinkData.channelCode)
}

// optional int64 stayTime = 4 [default = 0];
inline bool VideoLinkData::has_staytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoLinkData::set_has_staytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoLinkData::clear_has_staytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoLinkData::clear_staytime() {
  staytime_ = GOOGLE_LONGLONG(0);
  clear_has_staytime();
}
inline ::google::protobuf::int64 VideoLinkData::staytime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.stayTime)
  return staytime_;
}
inline void VideoLinkData::set_staytime(::google::protobuf::int64 value) {
  set_has_staytime();
  staytime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.stayTime)
}

// optional string prepoint = 5 [default = ""];
inline bool VideoLinkData::has_prepoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoLinkData::set_has_prepoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoLinkData::clear_has_prepoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoLinkData::clear_prepoint() {
  if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_->clear();
  }
  clear_has_prepoint();
}
inline const ::std::string& VideoLinkData::prepoint() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.prepoint)
  return *prepoint_;
}
inline void VideoLinkData::set_prepoint(const ::std::string& value) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.prepoint)
}
inline void VideoLinkData::set_prepoint(const char* value) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoLinkData.prepoint)
}
inline void VideoLinkData::set_prepoint(const char* value, size_t size) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoLinkData.prepoint)
}
inline ::std::string* VideoLinkData::mutable_prepoint() {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoLinkData.prepoint)
  return prepoint_;
}
inline ::std::string* VideoLinkData::release_prepoint() {
  clear_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prepoint_;
    prepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoLinkData::set_allocated_prepoint(::std::string* prepoint) {
  if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prepoint_;
  }
  if (prepoint) {
    set_has_prepoint();
    prepoint_ = prepoint;
  } else {
    clear_has_prepoint();
    prepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoLinkData.prepoint)
}

// -------------------------------------------------------------------

// EmailLinkData

// optional int64 id = 1 [default = -1];
inline bool EmailLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 EmailLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.id)
  return id_;
}
inline void EmailLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool EmailLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 EmailLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.ruleId)
  return ruleid_;
}
inline void EmailLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.ruleId)
}

// optional string subject = 3 [default = ""];
inline bool EmailLinkData::has_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailLinkData::set_has_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailLinkData::clear_has_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailLinkData::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& EmailLinkData::subject() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.subject)
  return *subject_;
}
inline void EmailLinkData::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.subject)
}
inline void EmailLinkData::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EmailLinkData.subject)
}
inline void EmailLinkData::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EmailLinkData.subject)
}
inline ::std::string* EmailLinkData::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EmailLinkData.subject)
  return subject_;
}
inline ::std::string* EmailLinkData::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailLinkData::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EmailLinkData.subject)
}

// optional string content = 4 [default = ""];
inline bool EmailLinkData::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmailLinkData::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmailLinkData::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmailLinkData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& EmailLinkData::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.content)
  return *content_;
}
inline void EmailLinkData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.content)
}
inline void EmailLinkData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EmailLinkData.content)
}
inline void EmailLinkData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EmailLinkData.content)
}
inline ::std::string* EmailLinkData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EmailLinkData.content)
  return content_;
}
inline ::std::string* EmailLinkData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailLinkData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EmailLinkData.content)
}

// repeated string emailAddress = 5;
inline int EmailLinkData::emailaddress_size() const {
  return emailaddress_.size();
}
inline void EmailLinkData::clear_emailaddress() {
  emailaddress_.Clear();
}
inline const ::std::string& EmailLinkData::emailaddress(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.emailAddress)
  return emailaddress_.Get(index);
}
inline ::std::string* EmailLinkData::mutable_emailaddress(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EmailLinkData.emailAddress)
  return emailaddress_.Mutable(index);
}
inline void EmailLinkData::set_emailaddress(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.emailAddress)
  emailaddress_.Mutable(index)->assign(value);
}
inline void EmailLinkData::set_emailaddress(int index, const char* value) {
  emailaddress_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EmailLinkData.emailAddress)
}
inline void EmailLinkData::set_emailaddress(int index, const char* value, size_t size) {
  emailaddress_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EmailLinkData.emailAddress)
}
inline ::std::string* EmailLinkData::add_emailaddress() {
  return emailaddress_.Add();
}
inline void EmailLinkData::add_emailaddress(const ::std::string& value) {
  emailaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.EmailLinkData.emailAddress)
}
inline void EmailLinkData::add_emailaddress(const char* value) {
  emailaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.EmailLinkData.emailAddress)
}
inline void EmailLinkData::add_emailaddress(const char* value, size_t size) {
  emailaddress_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.EmailLinkData.emailAddress)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EmailLinkData::emailaddress() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.EmailLinkData.emailAddress)
  return emailaddress_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EmailLinkData::mutable_emailaddress() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.EmailLinkData.emailAddress)
  return &emailaddress_;
}

// -------------------------------------------------------------------

// RecordLinkData

// optional int64 id = 1 [default = -1];
inline bool RecordLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 RecordLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.id)
  return id_;
}
inline void RecordLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool RecordLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 RecordLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.ruleId)
  return ruleid_;
}
inline void RecordLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.ruleId)
}

// optional int64 recordTime = 3 [default = 0];
inline bool RecordLinkData::has_recordtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordLinkData::set_has_recordtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordLinkData::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordLinkData::clear_recordtime() {
  recordtime_ = GOOGLE_LONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::int64 RecordLinkData::recordtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.recordTime)
  return recordtime_;
}
inline void RecordLinkData::set_recordtime(::google::protobuf::int64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.recordTime)
}

// optional int64 preRecordTime = 4 [default = 0];
inline bool RecordLinkData::has_prerecordtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordLinkData::set_has_prerecordtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordLinkData::clear_has_prerecordtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordLinkData::clear_prerecordtime() {
  prerecordtime_ = GOOGLE_LONGLONG(0);
  clear_has_prerecordtime();
}
inline ::google::protobuf::int64 RecordLinkData::prerecordtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.preRecordTime)
  return prerecordtime_;
}
inline void RecordLinkData::set_prerecordtime(::google::protobuf::int64 value) {
  set_has_prerecordtime();
  prerecordtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.preRecordTime)
}

// optional int32 assistantStream = 5 [default = -1];
inline bool RecordLinkData::has_assistantstream() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordLinkData::set_has_assistantstream() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordLinkData::clear_has_assistantstream() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordLinkData::clear_assistantstream() {
  assistantstream_ = -1;
  clear_has_assistantstream();
}
inline ::google::protobuf::int32 RecordLinkData::assistantstream() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.assistantStream)
  return assistantstream_;
}
inline void RecordLinkData::set_assistantstream(::google::protobuf::int32 value) {
  set_has_assistantstream();
  assistantstream_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.assistantStream)
}

// repeated string channelCode = 6;
inline int RecordLinkData::channelcode_size() const {
  return channelcode_.size();
}
inline void RecordLinkData::clear_channelcode() {
  channelcode_.Clear();
}
inline const ::std::string& RecordLinkData::channelcode(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.channelCode)
  return channelcode_.Get(index);
}
inline ::std::string* RecordLinkData::mutable_channelcode(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RecordLinkData.channelCode)
  return channelcode_.Mutable(index);
}
inline void RecordLinkData::set_channelcode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.channelCode)
  channelcode_.Mutable(index)->assign(value);
}
inline void RecordLinkData::set_channelcode(int index, const char* value) {
  channelcode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RecordLinkData.channelCode)
}
inline void RecordLinkData::set_channelcode(int index, const char* value, size_t size) {
  channelcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RecordLinkData.channelCode)
}
inline ::std::string* RecordLinkData::add_channelcode() {
  return channelcode_.Add();
}
inline void RecordLinkData::add_channelcode(const ::std::string& value) {
  channelcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RecordLinkData.channelCode)
}
inline void RecordLinkData::add_channelcode(const char* value) {
  channelcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.RecordLinkData.channelCode)
}
inline void RecordLinkData::add_channelcode(const char* value, size_t size) {
  channelcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.RecordLinkData.channelCode)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecordLinkData::channelcode() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RecordLinkData.channelCode)
  return channelcode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RecordLinkData::mutable_channelcode() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RecordLinkData.channelCode)
  return &channelcode_;
}

// -------------------------------------------------------------------

// SmsLinkData

// optional int64 id = 1 [default = -1];
inline bool SmsLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmsLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmsLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmsLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 SmsLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.id)
  return id_;
}
inline void SmsLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool SmsLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmsLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmsLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmsLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 SmsLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.ruleId)
  return ruleid_;
}
inline void SmsLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.ruleId)
}

// optional string content = 3 [default = ""];
inline bool SmsLinkData::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmsLinkData::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmsLinkData::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmsLinkData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SmsLinkData::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.content)
  return *content_;
}
inline void SmsLinkData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.content)
}
inline void SmsLinkData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SmsLinkData.content)
}
inline void SmsLinkData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SmsLinkData.content)
}
inline ::std::string* SmsLinkData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SmsLinkData.content)
  return content_;
}
inline ::std::string* SmsLinkData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SmsLinkData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SmsLinkData.content)
}

// repeated string phoneNumber = 4;
inline int SmsLinkData::phonenumber_size() const {
  return phonenumber_.size();
}
inline void SmsLinkData::clear_phonenumber() {
  phonenumber_.Clear();
}
inline const ::std::string& SmsLinkData::phonenumber(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.phoneNumber)
  return phonenumber_.Get(index);
}
inline ::std::string* SmsLinkData::mutable_phonenumber(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SmsLinkData.phoneNumber)
  return phonenumber_.Mutable(index);
}
inline void SmsLinkData::set_phonenumber(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.phoneNumber)
  phonenumber_.Mutable(index)->assign(value);
}
inline void SmsLinkData::set_phonenumber(int index, const char* value) {
  phonenumber_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SmsLinkData.phoneNumber)
}
inline void SmsLinkData::set_phonenumber(int index, const char* value, size_t size) {
  phonenumber_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SmsLinkData.phoneNumber)
}
inline ::std::string* SmsLinkData::add_phonenumber() {
  return phonenumber_.Add();
}
inline void SmsLinkData::add_phonenumber(const ::std::string& value) {
  phonenumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.SmsLinkData.phoneNumber)
}
inline void SmsLinkData::add_phonenumber(const char* value) {
  phonenumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.SmsLinkData.phoneNumber)
}
inline void SmsLinkData::add_phonenumber(const char* value, size_t size) {
  phonenumber_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.SmsLinkData.phoneNumber)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmsLinkData::phonenumber() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.SmsLinkData.phoneNumber)
  return phonenumber_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmsLinkData::mutable_phonenumber() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.SmsLinkData.phoneNumber)
  return &phonenumber_;
}

// -------------------------------------------------------------------

// TvwallMissonData

// optional int64 sourcelCode = 1;
inline bool TvwallMissonData::has_sourcelcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TvwallMissonData::set_has_sourcelcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TvwallMissonData::clear_has_sourcelcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TvwallMissonData::clear_sourcelcode() {
  sourcelcode_ = GOOGLE_LONGLONG(0);
  clear_has_sourcelcode();
}
inline ::google::protobuf::int64 TvwallMissonData::sourcelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallMissonData.sourcelCode)
  return sourcelcode_;
}
inline void TvwallMissonData::set_sourcelcode(::google::protobuf::int64 value) {
  set_has_sourcelcode();
  sourcelcode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallMissonData.sourcelCode)
}

// optional int64 sourcelSeq = 2;
inline bool TvwallMissonData::has_sourcelseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TvwallMissonData::set_has_sourcelseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TvwallMissonData::clear_has_sourcelseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TvwallMissonData::clear_sourcelseq() {
  sourcelseq_ = GOOGLE_LONGLONG(0);
  clear_has_sourcelseq();
}
inline ::google::protobuf::int64 TvwallMissonData::sourcelseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallMissonData.sourcelSeq)
  return sourcelseq_;
}
inline void TvwallMissonData::set_sourcelseq(::google::protobuf::int64 value) {
  set_has_sourcelseq();
  sourcelseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallMissonData.sourcelSeq)
}

// optional int64 screenSeq = 3;
inline bool TvwallMissonData::has_screenseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TvwallMissonData::set_has_screenseq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TvwallMissonData::clear_has_screenseq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TvwallMissonData::clear_screenseq() {
  screenseq_ = GOOGLE_LONGLONG(0);
  clear_has_screenseq();
}
inline ::google::protobuf::int64 TvwallMissonData::screenseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallMissonData.screenSeq)
  return screenseq_;
}
inline void TvwallMissonData::set_screenseq(::google::protobuf::int64 value) {
  set_has_screenseq();
  screenseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallMissonData.screenSeq)
}

// optional int64 windowIndex = 4;
inline bool TvwallMissonData::has_windowindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TvwallMissonData::set_has_windowindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TvwallMissonData::clear_has_windowindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TvwallMissonData::clear_windowindex() {
  windowindex_ = GOOGLE_LONGLONG(0);
  clear_has_windowindex();
}
inline ::google::protobuf::int64 TvwallMissonData::windowindex() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallMissonData.windowIndex)
  return windowindex_;
}
inline void TvwallMissonData::set_windowindex(::google::protobuf::int64 value) {
  set_has_windowindex();
  windowindex_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallMissonData.windowIndex)
}

// optional int64 windowCount = 5;
inline bool TvwallMissonData::has_windowcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TvwallMissonData::set_has_windowcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TvwallMissonData::clear_has_windowcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TvwallMissonData::clear_windowcount() {
  windowcount_ = GOOGLE_LONGLONG(0);
  clear_has_windowcount();
}
inline ::google::protobuf::int64 TvwallMissonData::windowcount() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallMissonData.windowCount)
  return windowcount_;
}
inline void TvwallMissonData::set_windowcount(::google::protobuf::int64 value) {
  set_has_windowcount();
  windowcount_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallMissonData.windowCount)
}

// -------------------------------------------------------------------

// TvwallLinkData

// optional int64 id = 1 [default = -1];
inline bool TvwallLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TvwallLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TvwallLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TvwallLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 TvwallLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.id)
  return id_;
}
inline void TvwallLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool TvwallLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TvwallLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TvwallLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TvwallLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 TvwallLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.ruleId)
  return ruleid_;
}
inline void TvwallLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.ruleId)
}

// optional int64 planId = 3 [default = -1];
inline bool TvwallLinkData::has_planid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TvwallLinkData::set_has_planid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TvwallLinkData::clear_has_planid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TvwallLinkData::clear_planid() {
  planid_ = GOOGLE_LONGLONG(-1);
  clear_has_planid();
}
inline ::google::protobuf::int64 TvwallLinkData::planid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.planId)
  return planid_;
}
inline void TvwallLinkData::set_planid(::google::protobuf::int64 value) {
  set_has_planid();
  planid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.planId)
}

// optional int64 keepTime = 4 [default = 30];
inline bool TvwallLinkData::has_keeptime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TvwallLinkData::set_has_keeptime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TvwallLinkData::clear_has_keeptime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TvwallLinkData::clear_keeptime() {
  keeptime_ = GOOGLE_LONGLONG(30);
  clear_has_keeptime();
}
inline ::google::protobuf::int64 TvwallLinkData::keeptime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.keepTime)
  return keeptime_;
}
inline void TvwallLinkData::set_keeptime(::google::protobuf::int64 value) {
  set_has_keeptime();
  keeptime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.keepTime)
}

// repeated .com.arges.file.proto.TvwallMissonData misson = 5;
inline int TvwallLinkData::misson_size() const {
  return misson_.size();
}
inline void TvwallLinkData::clear_misson() {
  misson_.Clear();
}
inline const ::com::arges::file::proto::TvwallMissonData& TvwallLinkData::misson(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.misson)
  return misson_.Get(index);
}
inline ::com::arges::file::proto::TvwallMissonData* TvwallLinkData::mutable_misson(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.TvwallLinkData.misson)
  return misson_.Mutable(index);
}
inline ::com::arges::file::proto::TvwallMissonData* TvwallLinkData::add_misson() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.TvwallLinkData.misson)
  return misson_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallMissonData >&
TvwallLinkData::misson() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.TvwallLinkData.misson)
  return misson_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallMissonData >*
TvwallLinkData::mutable_misson() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.TvwallLinkData.misson)
  return &misson_;
}

// -------------------------------------------------------------------

// CapitureLinkData

// optional int64 id = 1 [default = -1];
inline bool CapitureLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapitureLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapitureLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapitureLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 CapitureLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.id)
  return id_;
}
inline void CapitureLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool CapitureLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapitureLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CapitureLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CapitureLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 CapitureLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.ruleId)
  return ruleid_;
}
inline void CapitureLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.ruleId)
}

// optional int32 status = 3 [default = 0];
inline bool CapitureLinkData::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapitureLinkData::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CapitureLinkData::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CapitureLinkData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 CapitureLinkData::status() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.status)
  return status_;
}
inline void CapitureLinkData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.status)
}

// optional bytes picture1 = 4 [default = ""];
inline bool CapitureLinkData::has_picture1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CapitureLinkData::set_has_picture1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CapitureLinkData::clear_has_picture1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CapitureLinkData::clear_picture1() {
  if (picture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture1_->clear();
  }
  clear_has_picture1();
}
inline const ::std::string& CapitureLinkData::picture1() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.picture1)
  return *picture1_;
}
inline void CapitureLinkData::set_picture1(const ::std::string& value) {
  set_has_picture1();
  if (picture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture1_ = new ::std::string;
  }
  picture1_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.picture1)
}
inline void CapitureLinkData::set_picture1(const char* value) {
  set_has_picture1();
  if (picture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture1_ = new ::std::string;
  }
  picture1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CapitureLinkData.picture1)
}
inline void CapitureLinkData::set_picture1(const void* value, size_t size) {
  set_has_picture1();
  if (picture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture1_ = new ::std::string;
  }
  picture1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CapitureLinkData.picture1)
}
inline ::std::string* CapitureLinkData::mutable_picture1() {
  set_has_picture1();
  if (picture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CapitureLinkData.picture1)
  return picture1_;
}
inline ::std::string* CapitureLinkData::release_picture1() {
  clear_has_picture1();
  if (picture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picture1_;
    picture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CapitureLinkData::set_allocated_picture1(::std::string* picture1) {
  if (picture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture1_;
  }
  if (picture1) {
    set_has_picture1();
    picture1_ = picture1;
  } else {
    clear_has_picture1();
    picture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CapitureLinkData.picture1)
}

// optional bytes picture2 = 5 [default = ""];
inline bool CapitureLinkData::has_picture2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CapitureLinkData::set_has_picture2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CapitureLinkData::clear_has_picture2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CapitureLinkData::clear_picture2() {
  if (picture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture2_->clear();
  }
  clear_has_picture2();
}
inline const ::std::string& CapitureLinkData::picture2() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.picture2)
  return *picture2_;
}
inline void CapitureLinkData::set_picture2(const ::std::string& value) {
  set_has_picture2();
  if (picture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture2_ = new ::std::string;
  }
  picture2_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.picture2)
}
inline void CapitureLinkData::set_picture2(const char* value) {
  set_has_picture2();
  if (picture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture2_ = new ::std::string;
  }
  picture2_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CapitureLinkData.picture2)
}
inline void CapitureLinkData::set_picture2(const void* value, size_t size) {
  set_has_picture2();
  if (picture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture2_ = new ::std::string;
  }
  picture2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CapitureLinkData.picture2)
}
inline ::std::string* CapitureLinkData::mutable_picture2() {
  set_has_picture2();
  if (picture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CapitureLinkData.picture2)
  return picture2_;
}
inline ::std::string* CapitureLinkData::release_picture2() {
  clear_has_picture2();
  if (picture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picture2_;
    picture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CapitureLinkData::set_allocated_picture2(::std::string* picture2) {
  if (picture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture2_;
  }
  if (picture2) {
    set_has_picture2();
    picture2_ = picture2;
  } else {
    clear_has_picture2();
    picture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CapitureLinkData.picture2)
}

// optional bytes picture3 = 6 [default = ""];
inline bool CapitureLinkData::has_picture3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CapitureLinkData::set_has_picture3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CapitureLinkData::clear_has_picture3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CapitureLinkData::clear_picture3() {
  if (picture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture3_->clear();
  }
  clear_has_picture3();
}
inline const ::std::string& CapitureLinkData::picture3() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CapitureLinkData.picture3)
  return *picture3_;
}
inline void CapitureLinkData::set_picture3(const ::std::string& value) {
  set_has_picture3();
  if (picture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture3_ = new ::std::string;
  }
  picture3_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CapitureLinkData.picture3)
}
inline void CapitureLinkData::set_picture3(const char* value) {
  set_has_picture3();
  if (picture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture3_ = new ::std::string;
  }
  picture3_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CapitureLinkData.picture3)
}
inline void CapitureLinkData::set_picture3(const void* value, size_t size) {
  set_has_picture3();
  if (picture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture3_ = new ::std::string;
  }
  picture3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CapitureLinkData.picture3)
}
inline ::std::string* CapitureLinkData::mutable_picture3() {
  set_has_picture3();
  if (picture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CapitureLinkData.picture3)
  return picture3_;
}
inline ::std::string* CapitureLinkData::release_picture3() {
  clear_has_picture3();
  if (picture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picture3_;
    picture3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CapitureLinkData::set_allocated_picture3(::std::string* picture3) {
  if (picture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture3_;
  }
  if (picture3) {
    set_has_picture3();
    picture3_ = picture3;
  } else {
    clear_has_picture3();
    picture3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CapitureLinkData.picture3)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK>() {
  return ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK>() {
  return ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActionLinkBean_2eproto__INCLUDED
