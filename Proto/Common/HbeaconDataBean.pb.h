// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HbeaconDataBean.proto

#ifndef PROTOBUF_HbeaconDataBean_2eproto__INCLUDED
#define PROTOBUF_HbeaconDataBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HbeaconDataBean_2eproto();
void protobuf_AssignDesc_HbeaconDataBean_2eproto();
void protobuf_ShutdownFile_HbeaconDataBean_2eproto();

class HbeaconData;
class Wrist;
class WristList;

// ===================================================================

class HbeaconData : public ::google::protobuf::Message {
 public:
  HbeaconData();
  virtual ~HbeaconData();

  HbeaconData(const HbeaconData& from);

  inline HbeaconData& operator=(const HbeaconData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HbeaconData& default_instance();

  void Swap(HbeaconData* other);

  // implements Message ----------------------------------------------

  HbeaconData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HbeaconData& from);
  void MergeFrom(const HbeaconData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string deviceCode = 1 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDeviceCodeFieldNumber = 1;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // repeated .com.arges.file.proto.Wrist wrists = 2;
  inline int wrists_size() const;
  inline void clear_wrists();
  static const int kWristsFieldNumber = 2;
  inline const ::com::arges::file::proto::Wrist& wrists(int index) const;
  inline ::com::arges::file::proto::Wrist* mutable_wrists(int index);
  inline ::com::arges::file::proto::Wrist* add_wrists();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
      wrists() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
      mutable_wrists();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.HbeaconData)
 private:
  inline void set_has_devicecode();
  inline void clear_has_devicecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devicecode_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist > wrists_;
  friend void  protobuf_AddDesc_HbeaconDataBean_2eproto();
  friend void protobuf_AssignDesc_HbeaconDataBean_2eproto();
  friend void protobuf_ShutdownFile_HbeaconDataBean_2eproto();

  void InitAsDefaultInstance();
  static HbeaconData* default_instance_;
};
// -------------------------------------------------------------------

class Wrist : public ::google::protobuf::Message {
 public:
  Wrist();
  virtual ~Wrist();

  Wrist(const Wrist& from);

  inline Wrist& operator=(const Wrist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrist& default_instance();

  void Swap(Wrist* other);

  // implements Message ----------------------------------------------

  Wrist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wrist& from);
  void MergeFrom(const Wrist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string scannerMac = 1 [default = ""];
  inline bool has_scannermac() const;
  inline void clear_scannermac();
  static const int kScannerMacFieldNumber = 1;
  inline const ::std::string& scannermac() const;
  inline void set_scannermac(const ::std::string& value);
  inline void set_scannermac(const char* value);
  inline void set_scannermac(const char* value, size_t size);
  inline ::std::string* mutable_scannermac();
  inline ::std::string* release_scannermac();
  inline void set_allocated_scannermac(::std::string* scannermac);

  // required string deviceMac = 2 [default = ""];
  inline bool has_devicemac() const;
  inline void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  inline const ::std::string& devicemac() const;
  inline void set_devicemac(const ::std::string& value);
  inline void set_devicemac(const char* value);
  inline void set_devicemac(const char* value, size_t size);
  inline ::std::string* mutable_devicemac();
  inline ::std::string* release_devicemac();
  inline void set_allocated_devicemac(::std::string* devicemac);

  // required uint64 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required int32 rssi = 4 [default = 0];
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRssiFieldNumber = 4;
  inline ::google::protobuf::int32 rssi() const;
  inline void set_rssi(::google::protobuf::int32 value);

  // required string userStatus = 5 [default = ""];
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserStatusFieldNumber = 5;
  inline const ::std::string& userstatus() const;
  inline void set_userstatus(const ::std::string& value);
  inline void set_userstatus(const char* value);
  inline void set_userstatus(const char* value, size_t size);
  inline ::std::string* mutable_userstatus();
  inline ::std::string* release_userstatus();
  inline void set_allocated_userstatus(::std::string* userstatus);

  // required string steps = 6 [default = ""];
  inline bool has_steps() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 6;
  inline const ::std::string& steps() const;
  inline void set_steps(const ::std::string& value);
  inline void set_steps(const char* value);
  inline void set_steps(const char* value, size_t size);
  inline ::std::string* mutable_steps();
  inline ::std::string* release_steps();
  inline void set_allocated_steps(::std::string* steps);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.Wrist)
 private:
  inline void set_has_scannermac();
  inline void clear_has_scannermac();
  inline void set_has_devicemac();
  inline void clear_has_devicemac();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rssi();
  inline void clear_has_rssi();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_steps();
  inline void clear_has_steps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scannermac_;
  ::std::string* devicemac_;
  ::google::protobuf::uint64 time_;
  ::std::string* userstatus_;
  ::std::string* steps_;
  ::google::protobuf::int32 rssi_;
  friend void  protobuf_AddDesc_HbeaconDataBean_2eproto();
  friend void protobuf_AssignDesc_HbeaconDataBean_2eproto();
  friend void protobuf_ShutdownFile_HbeaconDataBean_2eproto();

  void InitAsDefaultInstance();
  static Wrist* default_instance_;
};
// -------------------------------------------------------------------

class WristList : public ::google::protobuf::Message {
 public:
  WristList();
  virtual ~WristList();

  WristList(const WristList& from);

  inline WristList& operator=(const WristList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WristList& default_instance();

  void Swap(WristList* other);

  // implements Message ----------------------------------------------

  WristList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WristList& from);
  void MergeFrom(const WristList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.Wrist wrist = 1;
  inline int wrist_size() const;
  inline void clear_wrist();
  static const int kWristFieldNumber = 1;
  inline const ::com::arges::file::proto::Wrist& wrist(int index) const;
  inline ::com::arges::file::proto::Wrist* mutable_wrist(int index);
  inline ::com::arges::file::proto::Wrist* add_wrist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
      wrist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
      mutable_wrist();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.WristList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist > wrist_;
  friend void  protobuf_AddDesc_HbeaconDataBean_2eproto();
  friend void protobuf_AssignDesc_HbeaconDataBean_2eproto();
  friend void protobuf_ShutdownFile_HbeaconDataBean_2eproto();

  void InitAsDefaultInstance();
  static WristList* default_instance_;
};
// ===================================================================


// ===================================================================

// HbeaconData

// required string deviceCode = 1 [default = ""];
inline bool HbeaconData::has_devicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HbeaconData::set_has_devicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HbeaconData::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HbeaconData::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& HbeaconData::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HbeaconData.deviceCode)
  return *devicecode_;
}
inline void HbeaconData::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.HbeaconData.deviceCode)
}
inline void HbeaconData::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.HbeaconData.deviceCode)
}
inline void HbeaconData::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.HbeaconData.deviceCode)
}
inline ::std::string* HbeaconData::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HbeaconData.deviceCode)
  return devicecode_;
}
inline ::std::string* HbeaconData::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HbeaconData::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.HbeaconData.deviceCode)
}

// repeated .com.arges.file.proto.Wrist wrists = 2;
inline int HbeaconData::wrists_size() const {
  return wrists_.size();
}
inline void HbeaconData::clear_wrists() {
  wrists_.Clear();
}
inline const ::com::arges::file::proto::Wrist& HbeaconData::wrists(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.HbeaconData.wrists)
  return wrists_.Get(index);
}
inline ::com::arges::file::proto::Wrist* HbeaconData::mutable_wrists(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.HbeaconData.wrists)
  return wrists_.Mutable(index);
}
inline ::com::arges::file::proto::Wrist* HbeaconData::add_wrists() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.HbeaconData.wrists)
  return wrists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
HbeaconData::wrists() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.HbeaconData.wrists)
  return wrists_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
HbeaconData::mutable_wrists() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.HbeaconData.wrists)
  return &wrists_;
}

// -------------------------------------------------------------------

// Wrist

// required string scannerMac = 1 [default = ""];
inline bool Wrist::has_scannermac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wrist::set_has_scannermac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wrist::clear_has_scannermac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wrist::clear_scannermac() {
  if (scannermac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scannermac_->clear();
  }
  clear_has_scannermac();
}
inline const ::std::string& Wrist::scannermac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.scannerMac)
  return *scannermac_;
}
inline void Wrist::set_scannermac(const ::std::string& value) {
  set_has_scannermac();
  if (scannermac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scannermac_ = new ::std::string;
  }
  scannermac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.scannerMac)
}
inline void Wrist::set_scannermac(const char* value) {
  set_has_scannermac();
  if (scannermac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scannermac_ = new ::std::string;
  }
  scannermac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.Wrist.scannerMac)
}
inline void Wrist::set_scannermac(const char* value, size_t size) {
  set_has_scannermac();
  if (scannermac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scannermac_ = new ::std::string;
  }
  scannermac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.Wrist.scannerMac)
}
inline ::std::string* Wrist::mutable_scannermac() {
  set_has_scannermac();
  if (scannermac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scannermac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.Wrist.scannerMac)
  return scannermac_;
}
inline ::std::string* Wrist::release_scannermac() {
  clear_has_scannermac();
  if (scannermac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scannermac_;
    scannermac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrist::set_allocated_scannermac(::std::string* scannermac) {
  if (scannermac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scannermac_;
  }
  if (scannermac) {
    set_has_scannermac();
    scannermac_ = scannermac;
  } else {
    clear_has_scannermac();
    scannermac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.Wrist.scannerMac)
}

// required string deviceMac = 2 [default = ""];
inline bool Wrist::has_devicemac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wrist::set_has_devicemac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wrist::clear_has_devicemac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wrist::clear_devicemac() {
  if (devicemac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicemac_->clear();
  }
  clear_has_devicemac();
}
inline const ::std::string& Wrist::devicemac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.deviceMac)
  return *devicemac_;
}
inline void Wrist::set_devicemac(const ::std::string& value) {
  set_has_devicemac();
  if (devicemac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicemac_ = new ::std::string;
  }
  devicemac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.deviceMac)
}
inline void Wrist::set_devicemac(const char* value) {
  set_has_devicemac();
  if (devicemac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicemac_ = new ::std::string;
  }
  devicemac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.Wrist.deviceMac)
}
inline void Wrist::set_devicemac(const char* value, size_t size) {
  set_has_devicemac();
  if (devicemac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicemac_ = new ::std::string;
  }
  devicemac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.Wrist.deviceMac)
}
inline ::std::string* Wrist::mutable_devicemac() {
  set_has_devicemac();
  if (devicemac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicemac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.Wrist.deviceMac)
  return devicemac_;
}
inline ::std::string* Wrist::release_devicemac() {
  clear_has_devicemac();
  if (devicemac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicemac_;
    devicemac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrist::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicemac_;
  }
  if (devicemac) {
    set_has_devicemac();
    devicemac_ = devicemac;
  } else {
    clear_has_devicemac();
    devicemac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.Wrist.deviceMac)
}

// required uint64 time = 3 [default = 0];
inline bool Wrist::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wrist::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wrist::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wrist::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Wrist::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.time)
  return time_;
}
inline void Wrist::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.time)
}

// required int32 rssi = 4 [default = 0];
inline bool Wrist::has_rssi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Wrist::set_has_rssi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Wrist::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Wrist::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline ::google::protobuf::int32 Wrist::rssi() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.rssi)
  return rssi_;
}
inline void Wrist::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.rssi)
}

// required string userStatus = 5 [default = ""];
inline bool Wrist::has_userstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Wrist::set_has_userstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Wrist::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Wrist::clear_userstatus() {
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_->clear();
  }
  clear_has_userstatus();
}
inline const ::std::string& Wrist::userstatus() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.userStatus)
  return *userstatus_;
}
inline void Wrist::set_userstatus(const ::std::string& value) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.userStatus)
}
inline void Wrist::set_userstatus(const char* value) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.Wrist.userStatus)
}
inline void Wrist::set_userstatus(const char* value, size_t size) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.Wrist.userStatus)
}
inline ::std::string* Wrist::mutable_userstatus() {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.Wrist.userStatus)
  return userstatus_;
}
inline ::std::string* Wrist::release_userstatus() {
  clear_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userstatus_;
    userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrist::set_allocated_userstatus(::std::string* userstatus) {
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userstatus_;
  }
  if (userstatus) {
    set_has_userstatus();
    userstatus_ = userstatus;
  } else {
    clear_has_userstatus();
    userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.Wrist.userStatus)
}

// required string steps = 6 [default = ""];
inline bool Wrist::has_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Wrist::set_has_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Wrist::clear_has_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Wrist::clear_steps() {
  if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steps_->clear();
  }
  clear_has_steps();
}
inline const ::std::string& Wrist::steps() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.Wrist.steps)
  return *steps_;
}
inline void Wrist::set_steps(const ::std::string& value) {
  set_has_steps();
  if (steps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steps_ = new ::std::string;
  }
  steps_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.Wrist.steps)
}
inline void Wrist::set_steps(const char* value) {
  set_has_steps();
  if (steps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steps_ = new ::std::string;
  }
  steps_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.Wrist.steps)
}
inline void Wrist::set_steps(const char* value, size_t size) {
  set_has_steps();
  if (steps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steps_ = new ::std::string;
  }
  steps_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.Wrist.steps)
}
inline ::std::string* Wrist::mutable_steps() {
  set_has_steps();
  if (steps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steps_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.Wrist.steps)
  return steps_;
}
inline ::std::string* Wrist::release_steps() {
  clear_has_steps();
  if (steps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = steps_;
    steps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrist::set_allocated_steps(::std::string* steps) {
  if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steps_;
  }
  if (steps) {
    set_has_steps();
    steps_ = steps;
  } else {
    clear_has_steps();
    steps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.Wrist.steps)
}

// -------------------------------------------------------------------

// WristList

// repeated .com.arges.file.proto.Wrist wrist = 1;
inline int WristList::wrist_size() const {
  return wrist_.size();
}
inline void WristList::clear_wrist() {
  wrist_.Clear();
}
inline const ::com::arges::file::proto::Wrist& WristList::wrist(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.WristList.wrist)
  return wrist_.Get(index);
}
inline ::com::arges::file::proto::Wrist* WristList::mutable_wrist(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.WristList.wrist)
  return wrist_.Mutable(index);
}
inline ::com::arges::file::proto::Wrist* WristList::add_wrist() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.WristList.wrist)
  return wrist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >&
WristList::wrist() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.WristList.wrist)
  return wrist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::Wrist >*
WristList::mutable_wrist() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.WristList.wrist)
  return &wrist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HbeaconDataBean_2eproto__INCLUDED
