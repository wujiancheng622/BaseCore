// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActionLinkBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActionLinkBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PictureLinkMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureLinkMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoundLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoundLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmsLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmsLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TvwallLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TvwallLinkData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PICTURE_LINK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOOP_TYPE_OF_SOUND_LINK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AUTO_TYPE_OF_LIGHT_LINK_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActionLinkBean_2eproto() {
  protobuf_AddDesc_ActionLinkBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActionLinkBean.proto");
  GOOGLE_CHECK(file != NULL);
  PictureLinkMassage_descriptor_ = file->message_type(0);
  static const int PictureLinkMassage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, capture1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, capture2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, capture3_),
  };
  PictureLinkMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureLinkMassage_descriptor_,
      PictureLinkMassage::default_instance_,
      PictureLinkMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureLinkMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureLinkMassage));
  SoundLinkData_descriptor_ = file->message_type(1);
  static const int SoundLinkData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, isloop_),
  };
  SoundLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoundLinkData_descriptor_,
      SoundLinkData::default_instance_,
      SoundLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoundLinkData));
  LightLinkData_descriptor_ = file->message_type(2);
  static const int LightLinkData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, channelcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, staytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, devname_),
  };
  LightLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightLinkData_descriptor_,
      LightLinkData::default_instance_,
      LightLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightLinkData));
  VideoLinkData_descriptor_ = file->message_type(3);
  static const int VideoLinkData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, channelcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, staytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, prepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, devname_),
  };
  VideoLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoLinkData_descriptor_,
      VideoLinkData::default_instance_,
      VideoLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoLinkData));
  EmailLinkData_descriptor_ = file->message_type(4);
  static const int EmailLinkData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, content_),
  };
  EmailLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailLinkData_descriptor_,
      EmailLinkData::default_instance_,
      EmailLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailLinkData));
  RecordLinkData_descriptor_ = file->message_type(5);
  static const int RecordLinkData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, prerecordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, assistantstream_),
  };
  RecordLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordLinkData_descriptor_,
      RecordLinkData::default_instance_,
      RecordLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordLinkData));
  SmsLinkData_descriptor_ = file->message_type(6);
  static const int SmsLinkData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsLinkData, content_),
  };
  SmsLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmsLinkData_descriptor_,
      SmsLinkData::default_instance_,
      SmsLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmsLinkData));
  TvwallLinkData_descriptor_ = file->message_type(7);
  static const int TvwallLinkData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TvwallLinkData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TvwallLinkData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TvwallLinkData, planid_),
  };
  TvwallLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TvwallLinkData_descriptor_,
      TvwallLinkData::default_instance_,
      TvwallLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TvwallLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TvwallLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TvwallLinkData));
  REQUEST_TYPE_OF_PICTURE_LINK_descriptor_ = file->enum_type(0);
  LOOP_TYPE_OF_SOUND_LINK_descriptor_ = file->enum_type(1);
  AUTO_TYPE_OF_LIGHT_LINK_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActionLinkBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureLinkMassage_descriptor_, &PictureLinkMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoundLinkData_descriptor_, &SoundLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightLinkData_descriptor_, &LightLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoLinkData_descriptor_, &VideoLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailLinkData_descriptor_, &EmailLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordLinkData_descriptor_, &RecordLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmsLinkData_descriptor_, &SmsLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TvwallLinkData_descriptor_, &TvwallLinkData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActionLinkBean_2eproto() {
  delete PictureLinkMassage::default_instance_;
  delete PictureLinkMassage_reflection_;
  delete SoundLinkData::default_instance_;
  delete SoundLinkData_reflection_;
  delete LightLinkData::default_instance_;
  delete LightLinkData_reflection_;
  delete VideoLinkData::default_instance_;
  delete VideoLinkData_reflection_;
  delete EmailLinkData::default_instance_;
  delete EmailLinkData_reflection_;
  delete RecordLinkData::default_instance_;
  delete RecordLinkData_reflection_;
  delete SmsLinkData::default_instance_;
  delete SmsLinkData_reflection_;
  delete TvwallLinkData::default_instance_;
  delete TvwallLinkData_reflection_;
}

void protobuf_AddDesc_ActionLinkBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActionLinkBean.proto\022\024com.arges.file.p"
    "roto\032\025DevInfoListBean.proto\"\207\002\n\022PictureL"
    "inkMassage\022\014\n\002ip\030\001 \001(\t:\000\022\017\n\004port\030\002 \001(\005:\001"
    "0\022\017\n\005token\030\003 \001(\t:\000\022\027\n\013requestType\030\004 \001(\005:"
    "\002-1\022\024\n\ndevicecode\030\005 \001(\t:\000\022\022\n\010wristmac\030\006 "
    "\001(\t:\000\022\017\n\004time\030\007 \001(\004:\0010\0221\n\007devInfo\030\010 \001(\0132"
    " .com.arges.file.proto.DeviceInfo\022\022\n\010cap"
    "ture1\030\t \001(\t:\000\022\022\n\010capture2\030\n \001(\t:\000\022\022\n\010cap"
    "ture3\030\013 \001(\t:\000\"Y\n\rSoundLinkData\022\025\n\talarmT"
    "ype\030\001 \001(\003:\002-1\022\016\n\004name\030\002 \001(\t:\000\022\016\n\004file\030\003 "
    "\001(\t:\000\022\021\n\006isLoop\030\004 \001(\005:\0010\"\210\001\n\rLightLinkDa"
    "ta\022\016\n\002id\030\001 \001(\003:\002-1\022\022\n\006ruleId\030\002 \001(\003:\002-1\022\025"
    "\n\013channelCode\030\003 \001(\t:\000\022\023\n\010stayTime\030\004 \001(\003:"
    "\0010\022\024\n\010autoOpen\030\005 \001(\005:\002-1\022\021\n\007devName\030\006 \001("
    "\t:\000\"\206\001\n\rVideoLinkData\022\016\n\002id\030\001 \001(\003:\002-1\022\022\n"
    "\006ruleId\030\002 \001(\003:\002-1\022\025\n\013channelCode\030\003 \001(\t:\000"
    "\022\023\n\010stayTime\030\004 \001(\003:\0010\022\022\n\010prepoint\030\005 \001(\t:"
    "\000\022\021\n\007devName\030\006 \001(\t:\000\"Y\n\rEmailLinkData\022\016\n"
    "\002id\030\001 \001(\003:\002-1\022\022\n\006ruleId\030\002 \001(\003:\002-1\022\021\n\007sub"
    "ject\030\003 \001(\t:\000\022\021\n\007content\030\004 \001(\t:\000\"\202\001\n\016Reco"
    "rdLinkData\022\016\n\002id\030\001 \001(\003:\002-1\022\022\n\006ruleId\030\002 \001"
    "(\003:\002-1\022\025\n\nrecordTime\030\003 \001(\003:\0010\022\030\n\rpreReco"
    "rdTime\030\004 \001(\003:\0010\022\033\n\017assistantStream\030\005 \001(\005"
    ":\002-1\"D\n\013SmsLinkData\022\016\n\002id\030\001 \001(\003:\002-1\022\022\n\006r"
    "uleId\030\002 \001(\003:\002-1\022\021\n\007content\030\003 \001(\t:\000\"H\n\016Tv"
    "wallLinkData\022\016\n\002id\030\001 \001(\003:\002-1\022\022\n\006ruleId\030\002"
    " \001(\003:\002-1\022\022\n\006planId\030\003 \001(\003:\002-1*[\n\034REQUEST_"
    "TYPE_OF_PICTURE_LINK\022\035\n\031PICTURE_LINK_GET"
    "_DEV_INFO\020\001\022\034\n\030PICTURE_LINK_GET_PICTURE\020"
    "\002*Q\n\027LOOP_TYPE_OF_SOUND_LINK\022\034\n\030SOUND_LI"
    "NK_NOT_LOOP_PLAY\020\000\022\030\n\024SOUND_LINK_LOOP_PL"
    "AY\020\001*W\n\027AUTO_TYPE_OF_LIGHT_LINK\022\037\n\033LIGHT"
    "_LINK_IS_NOT_AUTO_OPEN\020\000\022\033\n\027LIGHT_LINK_I"
    "S_AUTO_OPEN\020\001", 1333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActionLinkBean.proto", &protobuf_RegisterTypes);
  PictureLinkMassage::default_instance_ = new PictureLinkMassage();
  SoundLinkData::default_instance_ = new SoundLinkData();
  LightLinkData::default_instance_ = new LightLinkData();
  VideoLinkData::default_instance_ = new VideoLinkData();
  EmailLinkData::default_instance_ = new EmailLinkData();
  RecordLinkData::default_instance_ = new RecordLinkData();
  SmsLinkData::default_instance_ = new SmsLinkData();
  TvwallLinkData::default_instance_ = new TvwallLinkData();
  PictureLinkMassage::default_instance_->InitAsDefaultInstance();
  SoundLinkData::default_instance_->InitAsDefaultInstance();
  LightLinkData::default_instance_->InitAsDefaultInstance();
  VideoLinkData::default_instance_->InitAsDefaultInstance();
  EmailLinkData::default_instance_->InitAsDefaultInstance();
  RecordLinkData::default_instance_->InitAsDefaultInstance();
  SmsLinkData::default_instance_->InitAsDefaultInstance();
  TvwallLinkData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActionLinkBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActionLinkBean_2eproto {
  StaticDescriptorInitializer_ActionLinkBean_2eproto() {
    protobuf_AddDesc_ActionLinkBean_2eproto();
  }
} static_descriptor_initializer_ActionLinkBean_2eproto_;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PICTURE_LINK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_PICTURE_LINK_descriptor_;
}
bool REQUEST_TYPE_OF_PICTURE_LINK_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOOP_TYPE_OF_SOUND_LINK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOOP_TYPE_OF_SOUND_LINK_descriptor_;
}
bool LOOP_TYPE_OF_SOUND_LINK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AUTO_TYPE_OF_LIGHT_LINK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUTO_TYPE_OF_LIGHT_LINK_descriptor_;
}
bool AUTO_TYPE_OF_LIGHT_LINK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PictureLinkMassage::kIpFieldNumber;
const int PictureLinkMassage::kPortFieldNumber;
const int PictureLinkMassage::kTokenFieldNumber;
const int PictureLinkMassage::kRequestTypeFieldNumber;
const int PictureLinkMassage::kDevicecodeFieldNumber;
const int PictureLinkMassage::kWristmacFieldNumber;
const int PictureLinkMassage::kTimeFieldNumber;
const int PictureLinkMassage::kDevInfoFieldNumber;
const int PictureLinkMassage::kCapture1FieldNumber;
const int PictureLinkMassage::kCapture2FieldNumber;
const int PictureLinkMassage::kCapture3FieldNumber;
#endif  // !_MSC_VER

PictureLinkMassage::PictureLinkMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.PictureLinkMassage)
}

void PictureLinkMassage::InitAsDefaultInstance() {
  devinfo_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

PictureLinkMassage::PictureLinkMassage(const PictureLinkMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.PictureLinkMassage)
}

void PictureLinkMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesttype_ = -1;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wristmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  devinfo_ = NULL;
  capture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capture3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureLinkMassage::~PictureLinkMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.PictureLinkMassage)
  SharedDtor();
}

void PictureLinkMassage::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (wristmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristmac_;
  }
  if (capture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture1_;
  }
  if (capture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture2_;
  }
  if (capture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture3_;
  }
  if (this != default_instance_) {
    delete devinfo_;
  }
}

void PictureLinkMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureLinkMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureLinkMassage_descriptor_;
}

const PictureLinkMassage& PictureLinkMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

PictureLinkMassage* PictureLinkMassage::default_instance_ = NULL;

PictureLinkMassage* PictureLinkMassage::New() const {
  return new PictureLinkMassage;
}

void PictureLinkMassage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    requesttype_ = -1;
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_wristmac()) {
      if (wristmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wristmac_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_capture1()) {
      if (capture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        capture1_->clear();
      }
    }
    if (has_capture2()) {
      if (capture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        capture2_->clear();
      }
    }
    if (has_capture3()) {
      if (capture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        capture3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureLinkMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.PictureLinkMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_requestType;
        break;
      }

      // optional int32 requestType = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_requestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devicecode;
        break;
      }

      // optional string devicecode = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_devicecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wristmac;
        break;
      }

      // optional string wristmac = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_wristmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac().data(), this->wristmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint64 time = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_devInfo;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_capture1;
        break;
      }

      // optional string capture1 = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_capture1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capture1().data(), this->capture1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "capture1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_capture2;
        break;
      }

      // optional string capture2 = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_capture2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capture2().data(), this->capture2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "capture2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_capture3;
        break;
      }

      // optional string capture3 = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_capture3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capture3().data(), this->capture3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "capture3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.PictureLinkMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.PictureLinkMassage)
  return false;
#undef DO_
}

void PictureLinkMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.PictureLinkMassage)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2 [default = 0];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string token = 3 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional int32 requestType = 4 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requesttype(), output);
  }

  // optional string devicecode = 5 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devicecode(), output);
  }

  // optional string wristmac = 6 [default = ""];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->wristmac(), output);
  }

  // optional uint64 time = 7 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->time(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 8;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->devinfo(), output);
  }

  // optional string capture1 = 9 [default = ""];
  if (has_capture1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture1().data(), this->capture1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->capture1(), output);
  }

  // optional string capture2 = 10 [default = ""];
  if (has_capture2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture2().data(), this->capture2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->capture2(), output);
  }

  // optional string capture3 = 11 [default = ""];
  if (has_capture3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture3().data(), this->capture3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->capture3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.PictureLinkMassage)
}

::google::protobuf::uint8* PictureLinkMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.PictureLinkMassage)
  // optional string ip = 1 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2 [default = 0];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string token = 3 [default = ""];
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional int32 requestType = 4 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requesttype(), target);
  }

  // optional string devicecode = 5 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicecode(), target);
  }

  // optional string wristmac = 6 [default = ""];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->wristmac(), target);
  }

  // optional uint64 time = 7 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->time(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devInfo = 8;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->devinfo(), target);
  }

  // optional string capture1 = 9 [default = ""];
  if (has_capture1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture1().data(), this->capture1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->capture1(), target);
  }

  // optional string capture2 = 10 [default = ""];
  if (has_capture2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture2().data(), this->capture2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->capture2(), target);
  }

  // optional string capture3 = 11 [default = ""];
  if (has_capture3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture3().data(), this->capture3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->capture3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.PictureLinkMassage)
  return target;
}

int PictureLinkMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string token = 3 [default = ""];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 requestType = 4 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional string devicecode = 5 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional string wristmac = 6 [default = ""];
    if (has_wristmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristmac());
    }

    // optional uint64 time = 7 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .com.arges.file.proto.DeviceInfo devInfo = 8;
    if (has_devinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string capture1 = 9 [default = ""];
    if (has_capture1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture1());
    }

    // optional string capture2 = 10 [default = ""];
    if (has_capture2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture2());
    }

    // optional string capture3 = 11 [default = ""];
    if (has_capture3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureLinkMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureLinkMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureLinkMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureLinkMassage::MergeFrom(const PictureLinkMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_wristmac()) {
      set_wristmac(from.wristmac());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capture1()) {
      set_capture1(from.capture1());
    }
    if (from.has_capture2()) {
      set_capture2(from.capture2());
    }
    if (from.has_capture3()) {
      set_capture3(from.capture3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureLinkMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureLinkMassage::CopyFrom(const PictureLinkMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureLinkMassage::IsInitialized() const {

  return true;
}

void PictureLinkMassage::Swap(PictureLinkMassage* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(devicecode_, other->devicecode_);
    std::swap(wristmac_, other->wristmac_);
    std::swap(time_, other->time_);
    std::swap(devinfo_, other->devinfo_);
    std::swap(capture1_, other->capture1_);
    std::swap(capture2_, other->capture2_);
    std::swap(capture3_, other->capture3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureLinkMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureLinkMassage_descriptor_;
  metadata.reflection = PictureLinkMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoundLinkData::kAlarmTypeFieldNumber;
const int SoundLinkData::kNameFieldNumber;
const int SoundLinkData::kFileFieldNumber;
const int SoundLinkData::kIsLoopFieldNumber;
#endif  // !_MSC_VER

SoundLinkData::SoundLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.SoundLinkData)
}

void SoundLinkData::InitAsDefaultInstance() {
}

SoundLinkData::SoundLinkData(const SoundLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.SoundLinkData)
}

void SoundLinkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alarmtype_ = GOOGLE_LONGLONG(-1);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isloop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoundLinkData::~SoundLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.SoundLinkData)
  SharedDtor();
}

void SoundLinkData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void SoundLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoundLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoundLinkData_descriptor_;
}

const SoundLinkData& SoundLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

SoundLinkData* SoundLinkData::default_instance_ = NULL;

SoundLinkData* SoundLinkData::New() const {
  return new SoundLinkData;
}

void SoundLinkData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    alarmtype_ = GOOGLE_LONGLONG(-1);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    isloop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoundLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.SoundLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 alarmType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // optional string file = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isLoop;
        break;
      }

      // optional int32 isLoop = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_isLoop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isloop_)));
          set_has_isloop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.SoundLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.SoundLinkData)
  return false;
#undef DO_
}

void SoundLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.SoundLinkData)
  // optional int64 alarmType = 1 [default = -1];
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->alarmtype(), output);
  }

  // optional string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string file = 3 [default = ""];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // optional int32 isLoop = 4 [default = 0];
  if (has_isloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isloop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.SoundLinkData)
}

::google::protobuf::uint8* SoundLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.SoundLinkData)
  // optional int64 alarmType = 1 [default = -1];
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->alarmtype(), target);
  }

  // optional string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string file = 3 [default = ""];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // optional int32 isLoop = 4 [default = 0];
  if (has_isloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isloop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.SoundLinkData)
  return target;
}

int SoundLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 alarmType = 1 [default = -1];
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alarmtype());
    }

    // optional string name = 2 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string file = 3 [default = ""];
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional int32 isLoop = 4 [default = 0];
    if (has_isloop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isloop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoundLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoundLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoundLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoundLinkData::MergeFrom(const SoundLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_isloop()) {
      set_isloop(from.isloop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoundLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundLinkData::CopyFrom(const SoundLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundLinkData::IsInitialized() const {

  return true;
}

void SoundLinkData::Swap(SoundLinkData* other) {
  if (other != this) {
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(name_, other->name_);
    std::swap(file_, other->file_);
    std::swap(isloop_, other->isloop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoundLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoundLinkData_descriptor_;
  metadata.reflection = SoundLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightLinkData::kIdFieldNumber;
const int LightLinkData::kRuleIdFieldNumber;
const int LightLinkData::kChannelCodeFieldNumber;
const int LightLinkData::kStayTimeFieldNumber;
const int LightLinkData::kAutoOpenFieldNumber;
const int LightLinkData::kDevNameFieldNumber;
#endif  // !_MSC_VER

LightLinkData::LightLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.LightLinkData)
}

void LightLinkData::InitAsDefaultInstance() {
}

LightLinkData::LightLinkData(const LightLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.LightLinkData)
}

void LightLinkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  staytime_ = GOOGLE_LONGLONG(0);
  autoopen_ = -1;
  devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightLinkData::~LightLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.LightLinkData)
  SharedDtor();
}

void LightLinkData::SharedDtor() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devname_;
  }
  if (this != default_instance_) {
  }
}

void LightLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightLinkData_descriptor_;
}

const LightLinkData& LightLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

LightLinkData* LightLinkData::default_instance_ = NULL;

LightLinkData* LightLinkData::New() const {
  return new LightLinkData;
}

void LightLinkData::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    if (has_channelcode()) {
      if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelcode_->clear();
      }
    }
    staytime_ = GOOGLE_LONGLONG(0);
    autoopen_ = -1;
    if (has_devname()) {
      if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.LightLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelCode;
        break;
      }

      // optional string channelCode = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_channelCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelcode().data(), this->channelcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stayTime;
        break;
      }

      // optional int64 stayTime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_stayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &staytime_)));
          set_has_staytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoOpen;
        break;
      }

      // optional int32 autoOpen = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_autoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_devName;
        break;
      }

      // optional string devName = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_devName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.LightLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.LightLinkData)
  return false;
#undef DO_
}

void LightLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.LightLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional string channelCode = 3 [default = ""];
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelcode(), output);
  }

  // optional int64 stayTime = 4 [default = 0];
  if (has_staytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->staytime(), output);
  }

  // optional int32 autoOpen = 5 [default = -1];
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->autoopen(), output);
  }

  // optional string devName = 6 [default = ""];
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->devname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.LightLinkData)
}

::google::protobuf::uint8* LightLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.LightLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional string channelCode = 3 [default = ""];
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelcode(), target);
  }

  // optional int64 stayTime = 4 [default = 0];
  if (has_staytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->staytime(), target);
  }

  // optional int32 autoOpen = 5 [default = -1];
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->autoopen(), target);
  }

  // optional string devName = 6 [default = ""];
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->devname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.LightLinkData)
  return target;
}

int LightLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional string channelCode = 3 [default = ""];
    if (has_channelcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelcode());
    }

    // optional int64 stayTime = 4 [default = 0];
    if (has_staytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->staytime());
    }

    // optional int32 autoOpen = 5 [default = -1];
    if (has_autoopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoopen());
    }

    // optional string devName = 6 [default = ""];
    if (has_devname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightLinkData::MergeFrom(const LightLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_channelcode()) {
      set_channelcode(from.channelcode());
    }
    if (from.has_staytime()) {
      set_staytime(from.staytime());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
    if (from.has_devname()) {
      set_devname(from.devname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightLinkData::CopyFrom(const LightLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightLinkData::IsInitialized() const {

  return true;
}

void LightLinkData::Swap(LightLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(channelcode_, other->channelcode_);
    std::swap(staytime_, other->staytime_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(devname_, other->devname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightLinkData_descriptor_;
  metadata.reflection = LightLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoLinkData::kIdFieldNumber;
const int VideoLinkData::kRuleIdFieldNumber;
const int VideoLinkData::kChannelCodeFieldNumber;
const int VideoLinkData::kStayTimeFieldNumber;
const int VideoLinkData::kPrepointFieldNumber;
const int VideoLinkData::kDevNameFieldNumber;
#endif  // !_MSC_VER

VideoLinkData::VideoLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.VideoLinkData)
}

void VideoLinkData::InitAsDefaultInstance() {
}

VideoLinkData::VideoLinkData(const VideoLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.VideoLinkData)
}

void VideoLinkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  staytime_ = GOOGLE_LONGLONG(0);
  prepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoLinkData::~VideoLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.VideoLinkData)
  SharedDtor();
}

void VideoLinkData::SharedDtor() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prepoint_;
  }
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devname_;
  }
  if (this != default_instance_) {
  }
}

void VideoLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoLinkData_descriptor_;
}

const VideoLinkData& VideoLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

VideoLinkData* VideoLinkData::default_instance_ = NULL;

VideoLinkData* VideoLinkData::New() const {
  return new VideoLinkData;
}

void VideoLinkData::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    if (has_channelcode()) {
      if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelcode_->clear();
      }
    }
    staytime_ = GOOGLE_LONGLONG(0);
    if (has_prepoint()) {
      if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prepoint_->clear();
      }
    }
    if (has_devname()) {
      if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.VideoLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelCode;
        break;
      }

      // optional string channelCode = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_channelCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelcode().data(), this->channelcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stayTime;
        break;
      }

      // optional int64 stayTime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_stayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &staytime_)));
          set_has_staytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_prepoint;
        break;
      }

      // optional string prepoint = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_prepoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prepoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prepoint().data(), this->prepoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prepoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_devName;
        break;
      }

      // optional string devName = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_devName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.VideoLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.VideoLinkData)
  return false;
#undef DO_
}

void VideoLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.VideoLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional string channelCode = 3 [default = ""];
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelcode(), output);
  }

  // optional int64 stayTime = 4 [default = 0];
  if (has_staytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->staytime(), output);
  }

  // optional string prepoint = 5 [default = ""];
  if (has_prepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prepoint().data(), this->prepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prepoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prepoint(), output);
  }

  // optional string devName = 6 [default = ""];
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->devname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.VideoLinkData)
}

::google::protobuf::uint8* VideoLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.VideoLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional string channelCode = 3 [default = ""];
  if (has_channelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelcode().data(), this->channelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelcode(), target);
  }

  // optional int64 stayTime = 4 [default = 0];
  if (has_staytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->staytime(), target);
  }

  // optional string prepoint = 5 [default = ""];
  if (has_prepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prepoint().data(), this->prepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prepoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prepoint(), target);
  }

  // optional string devName = 6 [default = ""];
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->devname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.VideoLinkData)
  return target;
}

int VideoLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional string channelCode = 3 [default = ""];
    if (has_channelcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelcode());
    }

    // optional int64 stayTime = 4 [default = 0];
    if (has_staytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->staytime());
    }

    // optional string prepoint = 5 [default = ""];
    if (has_prepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prepoint());
    }

    // optional string devName = 6 [default = ""];
    if (has_devname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoLinkData::MergeFrom(const VideoLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_channelcode()) {
      set_channelcode(from.channelcode());
    }
    if (from.has_staytime()) {
      set_staytime(from.staytime());
    }
    if (from.has_prepoint()) {
      set_prepoint(from.prepoint());
    }
    if (from.has_devname()) {
      set_devname(from.devname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoLinkData::CopyFrom(const VideoLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoLinkData::IsInitialized() const {

  return true;
}

void VideoLinkData::Swap(VideoLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(channelcode_, other->channelcode_);
    std::swap(staytime_, other->staytime_);
    std::swap(prepoint_, other->prepoint_);
    std::swap(devname_, other->devname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoLinkData_descriptor_;
  metadata.reflection = VideoLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailLinkData::kIdFieldNumber;
const int EmailLinkData::kRuleIdFieldNumber;
const int EmailLinkData::kSubjectFieldNumber;
const int EmailLinkData::kContentFieldNumber;
#endif  // !_MSC_VER

EmailLinkData::EmailLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.EmailLinkData)
}

void EmailLinkData::InitAsDefaultInstance() {
}

EmailLinkData::EmailLinkData(const EmailLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.EmailLinkData)
}

void EmailLinkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailLinkData::~EmailLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.EmailLinkData)
  SharedDtor();
}

void EmailLinkData::SharedDtor() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void EmailLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailLinkData_descriptor_;
}

const EmailLinkData& EmailLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

EmailLinkData* EmailLinkData::default_instance_ = NULL;

EmailLinkData* EmailLinkData::New() const {
  return new EmailLinkData;
}

void EmailLinkData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.EmailLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subject;
        break;
      }

      // optional string subject = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.EmailLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.EmailLinkData)
  return false;
#undef DO_
}

void EmailLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.EmailLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional string subject = 3 [default = ""];
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subject(), output);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.EmailLinkData)
}

::google::protobuf::uint8* EmailLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.EmailLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional string subject = 3 [default = ""];
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // optional string content = 4 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.EmailLinkData)
  return target;
}

int EmailLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional string subject = 3 [default = ""];
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string content = 4 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailLinkData::MergeFrom(const EmailLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailLinkData::CopyFrom(const EmailLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailLinkData::IsInitialized() const {

  return true;
}

void EmailLinkData::Swap(EmailLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailLinkData_descriptor_;
  metadata.reflection = EmailLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordLinkData::kIdFieldNumber;
const int RecordLinkData::kRuleIdFieldNumber;
const int RecordLinkData::kRecordTimeFieldNumber;
const int RecordLinkData::kPreRecordTimeFieldNumber;
const int RecordLinkData::kAssistantStreamFieldNumber;
#endif  // !_MSC_VER

RecordLinkData::RecordLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RecordLinkData)
}

void RecordLinkData::InitAsDefaultInstance() {
}

RecordLinkData::RecordLinkData(const RecordLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RecordLinkData)
}

void RecordLinkData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  recordtime_ = GOOGLE_LONGLONG(0);
  prerecordtime_ = GOOGLE_LONGLONG(0);
  assistantstream_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordLinkData::~RecordLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RecordLinkData)
  SharedDtor();
}

void RecordLinkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordLinkData_descriptor_;
}

const RecordLinkData& RecordLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

RecordLinkData* RecordLinkData::default_instance_ = NULL;

RecordLinkData* RecordLinkData::New() const {
  return new RecordLinkData;
}

void RecordLinkData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecordLinkData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(recordtime_, prerecordtime_);
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    assistantstream_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RecordLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recordTime;
        break;
      }

      // optional int64 recordTime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_recordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_preRecordTime;
        break;
      }

      // optional int64 preRecordTime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_preRecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prerecordtime_)));
          set_has_prerecordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_assistantStream;
        break;
      }

      // optional int32 assistantStream = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_assistantStream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistantstream_)));
          set_has_assistantstream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RecordLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RecordLinkData)
  return false;
#undef DO_
}

void RecordLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RecordLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional int64 recordTime = 3 [default = 0];
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recordtime(), output);
  }

  // optional int64 preRecordTime = 4 [default = 0];
  if (has_prerecordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->prerecordtime(), output);
  }

  // optional int32 assistantStream = 5 [default = -1];
  if (has_assistantstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->assistantstream(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RecordLinkData)
}

::google::protobuf::uint8* RecordLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RecordLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional int64 recordTime = 3 [default = 0];
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recordtime(), target);
  }

  // optional int64 preRecordTime = 4 [default = 0];
  if (has_prerecordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->prerecordtime(), target);
  }

  // optional int32 assistantStream = 5 [default = -1];
  if (has_assistantstream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->assistantstream(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RecordLinkData)
  return target;
}

int RecordLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional int64 recordTime = 3 [default = 0];
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordtime());
    }

    // optional int64 preRecordTime = 4 [default = 0];
    if (has_prerecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prerecordtime());
    }

    // optional int32 assistantStream = 5 [default = -1];
    if (has_assistantstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistantstream());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordLinkData::MergeFrom(const RecordLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_prerecordtime()) {
      set_prerecordtime(from.prerecordtime());
    }
    if (from.has_assistantstream()) {
      set_assistantstream(from.assistantstream());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordLinkData::CopyFrom(const RecordLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordLinkData::IsInitialized() const {

  return true;
}

void RecordLinkData::Swap(RecordLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(prerecordtime_, other->prerecordtime_);
    std::swap(assistantstream_, other->assistantstream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordLinkData_descriptor_;
  metadata.reflection = RecordLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmsLinkData::kIdFieldNumber;
const int SmsLinkData::kRuleIdFieldNumber;
const int SmsLinkData::kContentFieldNumber;
#endif  // !_MSC_VER

SmsLinkData::SmsLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.SmsLinkData)
}

void SmsLinkData::InitAsDefaultInstance() {
}

SmsLinkData::SmsLinkData(const SmsLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.SmsLinkData)
}

void SmsLinkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmsLinkData::~SmsLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.SmsLinkData)
  SharedDtor();
}

void SmsLinkData::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SmsLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmsLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsLinkData_descriptor_;
}

const SmsLinkData& SmsLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

SmsLinkData* SmsLinkData::default_instance_ = NULL;

SmsLinkData* SmsLinkData::New() const {
  return new SmsLinkData;
}

void SmsLinkData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmsLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.SmsLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.SmsLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.SmsLinkData)
  return false;
#undef DO_
}

void SmsLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.SmsLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional string content = 3 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.SmsLinkData)
}

::google::protobuf::uint8* SmsLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.SmsLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional string content = 3 [default = ""];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.SmsLinkData)
  return target;
}

int SmsLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional string content = 3 [default = ""];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmsLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmsLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmsLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmsLinkData::MergeFrom(const SmsLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmsLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsLinkData::CopyFrom(const SmsLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsLinkData::IsInitialized() const {

  return true;
}

void SmsLinkData::Swap(SmsLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmsLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmsLinkData_descriptor_;
  metadata.reflection = SmsLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TvwallLinkData::kIdFieldNumber;
const int TvwallLinkData::kRuleIdFieldNumber;
const int TvwallLinkData::kPlanIdFieldNumber;
#endif  // !_MSC_VER

TvwallLinkData::TvwallLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.TvwallLinkData)
}

void TvwallLinkData::InitAsDefaultInstance() {
}

TvwallLinkData::TvwallLinkData(const TvwallLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.TvwallLinkData)
}

void TvwallLinkData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ruleid_ = GOOGLE_LONGLONG(-1);
  planid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TvwallLinkData::~TvwallLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.TvwallLinkData)
  SharedDtor();
}

void TvwallLinkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TvwallLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TvwallLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TvwallLinkData_descriptor_;
}

const TvwallLinkData& TvwallLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionLinkBean_2eproto();
  return *default_instance_;
}

TvwallLinkData* TvwallLinkData::default_instance_ = NULL;

TvwallLinkData* TvwallLinkData::New() const {
  return new TvwallLinkData;
}

void TvwallLinkData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(-1);
    ruleid_ = GOOGLE_LONGLONG(-1);
    planid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TvwallLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.TvwallLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ruleId;
        break;
      }

      // optional int64 ruleId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_planId;
        break;
      }

      // optional int64 planId = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_planId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &planid_)));
          set_has_planid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.TvwallLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.TvwallLinkData)
  return false;
#undef DO_
}

void TvwallLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.TvwallLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ruleid(), output);
  }

  // optional int64 planId = 3 [default = -1];
  if (has_planid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->planid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.TvwallLinkData)
}

::google::protobuf::uint8* TvwallLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.TvwallLinkData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 ruleId = 2 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ruleid(), target);
  }

  // optional int64 planId = 3 [default = -1];
  if (has_planid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->planid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.TvwallLinkData)
  return target;
}

int TvwallLinkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ruleId = 2 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional int64 planId = 3 [default = -1];
    if (has_planid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->planid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TvwallLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TvwallLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TvwallLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TvwallLinkData::MergeFrom(const TvwallLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_planid()) {
      set_planid(from.planid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TvwallLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TvwallLinkData::CopyFrom(const TvwallLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TvwallLinkData::IsInitialized() const {

  return true;
}

void TvwallLinkData::Swap(TvwallLinkData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(planid_, other->planid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TvwallLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TvwallLinkData_descriptor_;
  metadata.reflection = TvwallLinkData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
