// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DevInfoListBean.proto

#ifndef PROTOBUF_DevInfoListBean_2eproto__INCLUDED
#define PROTOBUF_DevInfoListBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DevInfoListBean_2eproto();
void protobuf_AssignDesc_DevInfoListBean_2eproto();
void protobuf_ShutdownFile_DevInfoListBean_2eproto();

class DeviceInfo;
class EncodeChnnelInfo;
class AlarmInChannelInfo;
class ReqDeviceOpr;
class ReportDeviceStatus;
class ReportDeviceStatus_ChannelStat;
class ReqEncodeChannelInfo;
class RspEncodeChannelInfo;
class AlarmChannelMassage;
class DeviceInfoList;
class ReqDeviceInfo;
class RspDeviceInfo;

enum ONLIEN_STAT_OF_DEVICE {
  DEVICE_IS_ON_LINE = 1,
  DEVICE_IS_OFF_LINE = 2,
  DEVICE_IS_WAIT_DISTRIBUTE_FOR_DMS = 3
};
bool ONLIEN_STAT_OF_DEVICE_IsValid(int value);
const ONLIEN_STAT_OF_DEVICE ONLIEN_STAT_OF_DEVICE_MIN = DEVICE_IS_ON_LINE;
const ONLIEN_STAT_OF_DEVICE ONLIEN_STAT_OF_DEVICE_MAX = DEVICE_IS_WAIT_DISTRIBUTE_FOR_DMS;
const int ONLIEN_STAT_OF_DEVICE_ARRAYSIZE = ONLIEN_STAT_OF_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ONLIEN_STAT_OF_DEVICE_descriptor();
inline const ::std::string& ONLIEN_STAT_OF_DEVICE_Name(ONLIEN_STAT_OF_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ONLIEN_STAT_OF_DEVICE_descriptor(), value);
}
inline bool ONLIEN_STAT_OF_DEVICE_Parse(
    const ::std::string& name, ONLIEN_STAT_OF_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ONLIEN_STAT_OF_DEVICE>(
    ONLIEN_STAT_OF_DEVICE_descriptor(), name, value);
}
enum LOGIN_TYPE_OF_DEVICE {
  LOGIN_TYPE_OF_DAHUA_PRIVATE_PROTOCOL = 1,
  LOGIN_TYPE_OF_INITIATIVE_REGISTER_FOR_DAHUA = 6,
  LOGIN_TYPE_OF_ARGES_PRIVATE_PROTOCAL = 7,
  LOGIN_TYPE_OF_ONVIF = 9,
  LOGIN_TYPE_OF_GB28181 = 10
};
bool LOGIN_TYPE_OF_DEVICE_IsValid(int value);
const LOGIN_TYPE_OF_DEVICE LOGIN_TYPE_OF_DEVICE_MIN = LOGIN_TYPE_OF_DAHUA_PRIVATE_PROTOCOL;
const LOGIN_TYPE_OF_DEVICE LOGIN_TYPE_OF_DEVICE_MAX = LOGIN_TYPE_OF_GB28181;
const int LOGIN_TYPE_OF_DEVICE_ARRAYSIZE = LOGIN_TYPE_OF_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOGIN_TYPE_OF_DEVICE_descriptor();
inline const ::std::string& LOGIN_TYPE_OF_DEVICE_Name(LOGIN_TYPE_OF_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOGIN_TYPE_OF_DEVICE_descriptor(), value);
}
inline bool LOGIN_TYPE_OF_DEVICE_Parse(
    const ::std::string& name, LOGIN_TYPE_OF_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOGIN_TYPE_OF_DEVICE>(
    LOGIN_TYPE_OF_DEVICE_descriptor(), name, value);
}
enum CATEGORY_TYPE_OF_DEVICE {
  CATEGORY_TYPE_OF_INTELLIGENT_DEVICE = 18,
  CATEGORY_TYPE_OF_ALARM_HOST = 3,
  CATEGORY_TYPE_OF_RING_DEVICE = 9
};
bool CATEGORY_TYPE_OF_DEVICE_IsValid(int value);
const CATEGORY_TYPE_OF_DEVICE CATEGORY_TYPE_OF_DEVICE_MIN = CATEGORY_TYPE_OF_ALARM_HOST;
const CATEGORY_TYPE_OF_DEVICE CATEGORY_TYPE_OF_DEVICE_MAX = CATEGORY_TYPE_OF_INTELLIGENT_DEVICE;
const int CATEGORY_TYPE_OF_DEVICE_ARRAYSIZE = CATEGORY_TYPE_OF_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CATEGORY_TYPE_OF_DEVICE_descriptor();
inline const ::std::string& CATEGORY_TYPE_OF_DEVICE_Name(CATEGORY_TYPE_OF_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CATEGORY_TYPE_OF_DEVICE_descriptor(), value);
}
inline bool CATEGORY_TYPE_OF_DEVICE_Parse(
    const ::std::string& name, CATEGORY_TYPE_OF_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CATEGORY_TYPE_OF_DEVICE>(
    CATEGORY_TYPE_OF_DEVICE_descriptor(), name, value);
}
enum MODEL_TYPE_OF_INTELLIGENT_DEVICE {
  INTELLIGENT_DEVICE_OF_BBOX = 1
};
bool MODEL_TYPE_OF_INTELLIGENT_DEVICE_IsValid(int value);
const MODEL_TYPE_OF_INTELLIGENT_DEVICE MODEL_TYPE_OF_INTELLIGENT_DEVICE_MIN = INTELLIGENT_DEVICE_OF_BBOX;
const MODEL_TYPE_OF_INTELLIGENT_DEVICE MODEL_TYPE_OF_INTELLIGENT_DEVICE_MAX = INTELLIGENT_DEVICE_OF_BBOX;
const int MODEL_TYPE_OF_INTELLIGENT_DEVICE_ARRAYSIZE = MODEL_TYPE_OF_INTELLIGENT_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor();
inline const ::std::string& MODEL_TYPE_OF_INTELLIGENT_DEVICE_Name(MODEL_TYPE_OF_INTELLIGENT_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor(), value);
}
inline bool MODEL_TYPE_OF_INTELLIGENT_DEVICE_Parse(
    const ::std::string& name, MODEL_TYPE_OF_INTELLIGENT_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MODEL_TYPE_OF_INTELLIGENT_DEVICE>(
    MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor(), name, value);
}
enum OPRATION_TYPE_OF_DEVICE_DO {
  PTZ_WAVER = 1,
  PTZ_ROTATE = 2,
  PTZ_FOCAL = 3,
  PTZ_APERTURE = 4,
  PTZ_STOP = 5,
  PTZ_LEFT = 6,
  PTZ_TOP = 7,
  PTZ_RIGHT = 8,
  PTZ_BOTTOM = 9,
  PTZ_TOPLEFT = 10,
  PTZ_TOPRIGHT = 11,
  PTZ_BOTTOMLEFT = 12,
  PTZ_BOTTOMRIGHT = 13
};
bool OPRATION_TYPE_OF_DEVICE_DO_IsValid(int value);
const OPRATION_TYPE_OF_DEVICE_DO OPRATION_TYPE_OF_DEVICE_DO_MIN = PTZ_WAVER;
const OPRATION_TYPE_OF_DEVICE_DO OPRATION_TYPE_OF_DEVICE_DO_MAX = PTZ_BOTTOMRIGHT;
const int OPRATION_TYPE_OF_DEVICE_DO_ARRAYSIZE = OPRATION_TYPE_OF_DEVICE_DO_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DO_descriptor();
inline const ::std::string& OPRATION_TYPE_OF_DEVICE_DO_Name(OPRATION_TYPE_OF_DEVICE_DO value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPRATION_TYPE_OF_DEVICE_DO_descriptor(), value);
}
inline bool OPRATION_TYPE_OF_DEVICE_DO_Parse(
    const ::std::string& name, OPRATION_TYPE_OF_DEVICE_DO* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPRATION_TYPE_OF_DEVICE_DO>(
    OPRATION_TYPE_OF_DEVICE_DO_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_DEVICE_CONTROL {
  DEVICE_CONTROL_REQUEST = 1,
  DEVICE_CONTROL_GET_DEVICE_INFO = 2,
  DEVICE_CONTROL_RSP_DEVICE_INFO = 3
};
bool REQUEST_TYPE_OF_DEVICE_CONTROL_IsValid(int value);
const REQUEST_TYPE_OF_DEVICE_CONTROL REQUEST_TYPE_OF_DEVICE_CONTROL_MIN = DEVICE_CONTROL_REQUEST;
const REQUEST_TYPE_OF_DEVICE_CONTROL REQUEST_TYPE_OF_DEVICE_CONTROL_MAX = DEVICE_CONTROL_RSP_DEVICE_INFO;
const int REQUEST_TYPE_OF_DEVICE_CONTROL_ARRAYSIZE = REQUEST_TYPE_OF_DEVICE_CONTROL_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_DEVICE_CONTROL_Name(REQUEST_TYPE_OF_DEVICE_CONTROL value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_DEVICE_CONTROL_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_DEVICE_CONTROL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_DEVICE_CONTROL>(
    REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor(), name, value);
}
enum RESULT_TYPE_OF_DEVICE_CONTROL {
  DEVICE_CONTROL_IS_OK = 1,
  DEVICE_CONTROL_GET_DEVICE_INFO_IS_TRUE = 2,
  DEVICE_CONTROL_GET_DEVICE_INFO_ERROR = 3
};
bool RESULT_TYPE_OF_DEVICE_CONTROL_IsValid(int value);
const RESULT_TYPE_OF_DEVICE_CONTROL RESULT_TYPE_OF_DEVICE_CONTROL_MIN = DEVICE_CONTROL_IS_OK;
const RESULT_TYPE_OF_DEVICE_CONTROL RESULT_TYPE_OF_DEVICE_CONTROL_MAX = DEVICE_CONTROL_GET_DEVICE_INFO_ERROR;
const int RESULT_TYPE_OF_DEVICE_CONTROL_ARRAYSIZE = RESULT_TYPE_OF_DEVICE_CONTROL_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_CONTROL_descriptor();
inline const ::std::string& RESULT_TYPE_OF_DEVICE_CONTROL_Name(RESULT_TYPE_OF_DEVICE_CONTROL value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_DEVICE_CONTROL_descriptor(), value);
}
inline bool RESULT_TYPE_OF_DEVICE_CONTROL_Parse(
    const ::std::string& name, RESULT_TYPE_OF_DEVICE_CONTROL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_DEVICE_CONTROL>(
    RESULT_TYPE_OF_DEVICE_CONTROL_descriptor(), name, value);
}
enum STAT_TYPE_OF_DEVICE {
  DEVICE_IS_ONLINE = 1,
  DEVICE_IS_OFFLINE = 2
};
bool STAT_TYPE_OF_DEVICE_IsValid(int value);
const STAT_TYPE_OF_DEVICE STAT_TYPE_OF_DEVICE_MIN = DEVICE_IS_ONLINE;
const STAT_TYPE_OF_DEVICE STAT_TYPE_OF_DEVICE_MAX = DEVICE_IS_OFFLINE;
const int STAT_TYPE_OF_DEVICE_ARRAYSIZE = STAT_TYPE_OF_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* STAT_TYPE_OF_DEVICE_descriptor();
inline const ::std::string& STAT_TYPE_OF_DEVICE_Name(STAT_TYPE_OF_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    STAT_TYPE_OF_DEVICE_descriptor(), value);
}
inline bool STAT_TYPE_OF_DEVICE_Parse(
    const ::std::string& name, STAT_TYPE_OF_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STAT_TYPE_OF_DEVICE>(
    STAT_TYPE_OF_DEVICE_descriptor(), name, value);
}
enum OPRATION_TYPE_OF_CHANNEL_INFO {
  ENCODE_CHANNEL_GET_ALL = 1,
  ENCODE_CHANNEL_GET_GEGION_ALL = 2,
  ENCODE_CHANNEL_GET_BY_REGION = 3
};
bool OPRATION_TYPE_OF_CHANNEL_INFO_IsValid(int value);
const OPRATION_TYPE_OF_CHANNEL_INFO OPRATION_TYPE_OF_CHANNEL_INFO_MIN = ENCODE_CHANNEL_GET_ALL;
const OPRATION_TYPE_OF_CHANNEL_INFO OPRATION_TYPE_OF_CHANNEL_INFO_MAX = ENCODE_CHANNEL_GET_BY_REGION;
const int OPRATION_TYPE_OF_CHANNEL_INFO_ARRAYSIZE = OPRATION_TYPE_OF_CHANNEL_INFO_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_CHANNEL_INFO_descriptor();
inline const ::std::string& OPRATION_TYPE_OF_CHANNEL_INFO_Name(OPRATION_TYPE_OF_CHANNEL_INFO value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPRATION_TYPE_OF_CHANNEL_INFO_descriptor(), value);
}
inline bool OPRATION_TYPE_OF_CHANNEL_INFO_Parse(
    const ::std::string& name, OPRATION_TYPE_OF_CHANNEL_INFO* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPRATION_TYPE_OF_CHANNEL_INFO>(
    OPRATION_TYPE_OF_CHANNEL_INFO_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_ALARM_CHANNEL {
  ALARM_CHANNEL_REQUEST_GET_BY_REGION_CODE = 1
};
bool REQUEST_TYPE_OF_ALARM_CHANNEL_IsValid(int value);
const REQUEST_TYPE_OF_ALARM_CHANNEL REQUEST_TYPE_OF_ALARM_CHANNEL_MIN = ALARM_CHANNEL_REQUEST_GET_BY_REGION_CODE;
const REQUEST_TYPE_OF_ALARM_CHANNEL REQUEST_TYPE_OF_ALARM_CHANNEL_MAX = ALARM_CHANNEL_REQUEST_GET_BY_REGION_CODE;
const int REQUEST_TYPE_OF_ALARM_CHANNEL_ARRAYSIZE = REQUEST_TYPE_OF_ALARM_CHANNEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_ALARM_CHANNEL_Name(REQUEST_TYPE_OF_ALARM_CHANNEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_ALARM_CHANNEL_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_ALARM_CHANNEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_ALARM_CHANNEL>(
    REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor(), name, value);
}
enum OPRATION_TYPE_OF_DEVICE {
  DEVICE_INFO_GET_ALL = 1,
  DEVICE_INFO_GET_BY_REGION_ALL = 2,
  DEVICE_INFO_GET_BY_REGION = 3,
  DEVICE_INFO_GET_BY_IDS = 4,
  DEVICE_ADD = 5,
  DEVICE_INFO_MODIFY = 6,
  DEVICE_DELETE = 7,
  DEVICE_INFO_GET_BY_CHANNEL_CODE = 8,
  DEVICE_INFO_GET_BY_CODES = 9,
  DEVICE_UPDATE_DMS_INFO = 10
};
bool OPRATION_TYPE_OF_DEVICE_IsValid(int value);
const OPRATION_TYPE_OF_DEVICE OPRATION_TYPE_OF_DEVICE_MIN = DEVICE_INFO_GET_ALL;
const OPRATION_TYPE_OF_DEVICE OPRATION_TYPE_OF_DEVICE_MAX = DEVICE_UPDATE_DMS_INFO;
const int OPRATION_TYPE_OF_DEVICE_ARRAYSIZE = OPRATION_TYPE_OF_DEVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_descriptor();
inline const ::std::string& OPRATION_TYPE_OF_DEVICE_Name(OPRATION_TYPE_OF_DEVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPRATION_TYPE_OF_DEVICE_descriptor(), value);
}
inline bool OPRATION_TYPE_OF_DEVICE_Parse(
    const ::std::string& name, OPRATION_TYPE_OF_DEVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPRATION_TYPE_OF_DEVICE>(
    OPRATION_TYPE_OF_DEVICE_descriptor(), name, value);
}
enum RESULT_TYPE_OF_DEVICE_INFO_REQUEST {
  DEVICE_RESPONSE_IS_OK = 1,
  DEVICE_RESPONSE_IS_ERROR = 2
};
bool RESULT_TYPE_OF_DEVICE_INFO_REQUEST_IsValid(int value);
const RESULT_TYPE_OF_DEVICE_INFO_REQUEST RESULT_TYPE_OF_DEVICE_INFO_REQUEST_MIN = DEVICE_RESPONSE_IS_OK;
const RESULT_TYPE_OF_DEVICE_INFO_REQUEST RESULT_TYPE_OF_DEVICE_INFO_REQUEST_MAX = DEVICE_RESPONSE_IS_ERROR;
const int RESULT_TYPE_OF_DEVICE_INFO_REQUEST_ARRAYSIZE = RESULT_TYPE_OF_DEVICE_INFO_REQUEST_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor();
inline const ::std::string& RESULT_TYPE_OF_DEVICE_INFO_REQUEST_Name(RESULT_TYPE_OF_DEVICE_INFO_REQUEST value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor(), value);
}
inline bool RESULT_TYPE_OF_DEVICE_INFO_REQUEST_Parse(
    const ::std::string& name, RESULT_TYPE_OF_DEVICE_INFO_REQUEST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_DEVICE_INFO_REQUEST>(
    RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor(), name, value);
}
// ===================================================================

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string keyId = 1 [default = ""];
  inline bool has_keyid() const;
  inline void clear_keyid();
  static const int kKeyIdFieldNumber = 1;
  inline const ::std::string& keyid() const;
  inline void set_keyid(const ::std::string& value);
  inline void set_keyid(const char* value);
  inline void set_keyid(const char* value, size_t size);
  inline ::std::string* mutable_keyid();
  inline ::std::string* release_keyid();
  inline void set_allocated_keyid(::std::string* keyid);

  // optional string devId = 2 [default = ""];
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 2;
  inline const ::std::string& devid() const;
  inline void set_devid(const ::std::string& value);
  inline void set_devid(const char* value);
  inline void set_devid(const char* value, size_t size);
  inline ::std::string* mutable_devid();
  inline ::std::string* release_devid();
  inline void set_allocated_devid(::std::string* devid);

  // optional string provider = 3 [default = ""];
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline const ::std::string& provider() const;
  inline void set_provider(const ::std::string& value);
  inline void set_provider(const char* value);
  inline void set_provider(const char* value, size_t size);
  inline ::std::string* mutable_provider();
  inline ::std::string* release_provider();
  inline void set_allocated_provider(::std::string* provider);

  // optional string model = 4 [default = ""];
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string devIp = 5 [default = ""];
  inline bool has_devip() const;
  inline void clear_devip();
  static const int kDevIpFieldNumber = 5;
  inline const ::std::string& devip() const;
  inline void set_devip(const ::std::string& value);
  inline void set_devip(const char* value);
  inline void set_devip(const char* value, size_t size);
  inline ::std::string* mutable_devip();
  inline ::std::string* release_devip();
  inline void set_allocated_devip(::std::string* devip);

  // optional int32 devPort = 6 [default = -1];
  inline bool has_devport() const;
  inline void clear_devport();
  static const int kDevPortFieldNumber = 6;
  inline ::google::protobuf::int32 devport() const;
  inline void set_devport(::google::protobuf::int32 value);

  // optional string userName = 7 [default = ""];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 7;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string userPsw = 8 [default = ""];
  inline bool has_userpsw() const;
  inline void clear_userpsw();
  static const int kUserPswFieldNumber = 8;
  inline const ::std::string& userpsw() const;
  inline void set_userpsw(const ::std::string& value);
  inline void set_userpsw(const char* value);
  inline void set_userpsw(const char* value, size_t size);
  inline ::std::string* mutable_userpsw();
  inline ::std::string* release_userpsw();
  inline void set_allocated_userpsw(::std::string* userpsw);

  // optional int32 streamType = 9 [default = -1];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 9;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // optional int32 devType = 10 [default = -1];
  inline bool has_devtype() const;
  inline void clear_devtype();
  static const int kDevTypeFieldNumber = 10;
  inline ::google::protobuf::int32 devtype() const;
  inline void set_devtype(::google::protobuf::int32 value);

  // optional int32 proxyPort = 11 [default = 0];
  inline bool has_proxyport() const;
  inline void clear_proxyport();
  static const int kProxyPortFieldNumber = 11;
  inline ::google::protobuf::int32 proxyport() const;
  inline void set_proxyport(::google::protobuf::int32 value);

  // optional string registerId = 12 [default = ""];
  inline bool has_registerid() const;
  inline void clear_registerid();
  static const int kRegisterIdFieldNumber = 12;
  inline const ::std::string& registerid() const;
  inline void set_registerid(const ::std::string& value);
  inline void set_registerid(const char* value);
  inline void set_registerid(const char* value, size_t size);
  inline ::std::string* mutable_registerid();
  inline ::std::string* release_registerid();
  inline void set_allocated_registerid(::std::string* registerid);

  // optional string deviceThird = 13 [default = ""];
  inline bool has_devicethird() const;
  inline void clear_devicethird();
  static const int kDeviceThirdFieldNumber = 13;
  inline const ::std::string& devicethird() const;
  inline void set_devicethird(const ::std::string& value);
  inline void set_devicethird(const char* value);
  inline void set_devicethird(const char* value, size_t size);
  inline ::std::string* mutable_devicethird();
  inline ::std::string* release_devicethird();
  inline void set_allocated_devicethird(::std::string* devicethird);

  // optional int32 streamMode = 14 [default = -1];
  inline bool has_streammode() const;
  inline void clear_streammode();
  static const int kStreamModeFieldNumber = 14;
  inline ::google::protobuf::int32 streammode() const;
  inline void set_streammode(::google::protobuf::int32 value);

  // optional int32 channelNum = 15 [default = -1];
  inline bool has_channelnum() const;
  inline void clear_channelnum();
  static const int kChannelNumFieldNumber = 15;
  inline ::google::protobuf::int32 channelnum() const;
  inline void set_channelnum(::google::protobuf::int32 value);

  // optional int32 loginType = 16 [default = -1];
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLoginTypeFieldNumber = 16;
  inline ::google::protobuf::int32 logintype() const;
  inline void set_logintype(::google::protobuf::int32 value);

  // optional int32 combineStatus = 17 [default = -1];
  inline bool has_combinestatus() const;
  inline void clear_combinestatus();
  static const int kCombineStatusFieldNumber = 17;
  inline ::google::protobuf::int32 combinestatus() const;
  inline void set_combinestatus(::google::protobuf::int32 value);

  // optional string name = 18 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 18;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string regId = 19 [default = ""];
  inline bool has_regid() const;
  inline void clear_regid();
  static const int kRegIdFieldNumber = 19;
  inline const ::std::string& regid() const;
  inline void set_regid(const ::std::string& value);
  inline void set_regid(const char* value);
  inline void set_regid(const char* value, size_t size);
  inline ::std::string* mutable_regid();
  inline ::std::string* release_regid();
  inline void set_allocated_regid(::std::string* regid);

  // optional string describe = 20 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 20;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional int32 mountMode = 21 [default = -1];
  inline bool has_mountmode() const;
  inline void clear_mountmode();
  static const int kMountModeFieldNumber = 21;
  inline ::google::protobuf::int32 mountmode() const;
  inline void set_mountmode(::google::protobuf::int32 value);

  // optional string serviceCode = 22 [default = ""];
  inline bool has_servicecode() const;
  inline void clear_servicecode();
  static const int kServiceCodeFieldNumber = 22;
  inline const ::std::string& servicecode() const;
  inline void set_servicecode(const ::std::string& value);
  inline void set_servicecode(const char* value);
  inline void set_servicecode(const char* value, size_t size);
  inline ::std::string* mutable_servicecode();
  inline ::std::string* release_servicecode();
  inline void set_allocated_servicecode(::std::string* servicecode);

  // optional string upDeviceCode = 23 [default = ""];
  inline bool has_updevicecode() const;
  inline void clear_updevicecode();
  static const int kUpDeviceCodeFieldNumber = 23;
  inline const ::std::string& updevicecode() const;
  inline void set_updevicecode(const ::std::string& value);
  inline void set_updevicecode(const char* value);
  inline void set_updevicecode(const char* value, size_t size);
  inline ::std::string* mutable_updevicecode();
  inline ::std::string* release_updevicecode();
  inline void set_allocated_updevicecode(::std::string* updevicecode);

  // optional int32 devCategory = 24 [default = -1];
  inline bool has_devcategory() const;
  inline void clear_devcategory();
  static const int kDevCategoryFieldNumber = 24;
  inline ::google::protobuf::int32 devcategory() const;
  inline void set_devcategory(::google::protobuf::int32 value);

  // optional string proxyIp = 25 [default = ""];
  inline bool has_proxyip() const;
  inline void clear_proxyip();
  static const int kProxyIpFieldNumber = 25;
  inline const ::std::string& proxyip() const;
  inline void set_proxyip(const ::std::string& value);
  inline void set_proxyip(const char* value);
  inline void set_proxyip(const char* value, size_t size);
  inline ::std::string* mutable_proxyip();
  inline ::std::string* release_proxyip();
  inline void set_allocated_proxyip(::std::string* proxyip);

  // optional string proxyServiceCode = 26 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 26;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional string deviceSn = 27 [default = ""];
  inline bool has_devicesn() const;
  inline void clear_devicesn();
  static const int kDeviceSnFieldNumber = 27;
  inline const ::std::string& devicesn() const;
  inline void set_devicesn(const ::std::string& value);
  inline void set_devicesn(const char* value);
  inline void set_devicesn(const char* value, size_t size);
  inline ::std::string* mutable_devicesn();
  inline ::std::string* release_devicesn();
  inline void set_allocated_devicesn(::std::string* devicesn);

  // optional string cascadeDevCode = 29 [default = ""];
  inline bool has_cascadedevcode() const;
  inline void clear_cascadedevcode();
  static const int kCascadeDevCodeFieldNumber = 29;
  inline const ::std::string& cascadedevcode() const;
  inline void set_cascadedevcode(const ::std::string& value);
  inline void set_cascadedevcode(const char* value);
  inline void set_cascadedevcode(const char* value, size_t size);
  inline ::std::string* mutable_cascadedevcode();
  inline ::std::string* release_cascadedevcode();
  inline void set_allocated_cascadedevcode(::std::string* cascadedevcode);

  // optional int32 isOnlie = 30 [default = -1];
  inline bool has_isonlie() const;
  inline void clear_isonlie();
  static const int kIsOnlieFieldNumber = 30;
  inline ::google::protobuf::int32 isonlie() const;
  inline void set_isonlie(::google::protobuf::int32 value);

  // optional string cascadeDevDomain = 31 [default = ""];
  inline bool has_cascadedevdomain() const;
  inline void clear_cascadedevdomain();
  static const int kCascadeDevDomainFieldNumber = 31;
  inline const ::std::string& cascadedevdomain() const;
  inline void set_cascadedevdomain(const ::std::string& value);
  inline void set_cascadedevdomain(const char* value);
  inline void set_cascadedevdomain(const char* value, size_t size);
  inline ::std::string* mutable_cascadedevdomain();
  inline ::std::string* release_cascadedevdomain();
  inline void set_allocated_cascadedevdomain(::std::string* cascadedevdomain);

  // optional string devDomain = 32 [default = ""];
  inline bool has_devdomain() const;
  inline void clear_devdomain();
  static const int kDevDomainFieldNumber = 32;
  inline const ::std::string& devdomain() const;
  inline void set_devdomain(const ::std::string& value);
  inline void set_devdomain(const char* value);
  inline void set_devdomain(const char* value, size_t size);
  inline ::std::string* mutable_devdomain();
  inline ::std::string* release_devdomain();
  inline void set_allocated_devdomain(::std::string* devdomain);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceInfo)
 private:
  inline void set_has_keyid();
  inline void clear_has_keyid();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_devip();
  inline void clear_has_devip();
  inline void set_has_devport();
  inline void clear_has_devport();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpsw();
  inline void clear_has_userpsw();
  inline void set_has_streamtype();
  inline void clear_has_streamtype();
  inline void set_has_devtype();
  inline void clear_has_devtype();
  inline void set_has_proxyport();
  inline void clear_has_proxyport();
  inline void set_has_registerid();
  inline void clear_has_registerid();
  inline void set_has_devicethird();
  inline void clear_has_devicethird();
  inline void set_has_streammode();
  inline void clear_has_streammode();
  inline void set_has_channelnum();
  inline void clear_has_channelnum();
  inline void set_has_logintype();
  inline void clear_has_logintype();
  inline void set_has_combinestatus();
  inline void clear_has_combinestatus();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_regid();
  inline void clear_has_regid();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_mountmode();
  inline void clear_has_mountmode();
  inline void set_has_servicecode();
  inline void clear_has_servicecode();
  inline void set_has_updevicecode();
  inline void clear_has_updevicecode();
  inline void set_has_devcategory();
  inline void clear_has_devcategory();
  inline void set_has_proxyip();
  inline void clear_has_proxyip();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_devicesn();
  inline void clear_has_devicesn();
  inline void set_has_cascadedevcode();
  inline void clear_has_cascadedevcode();
  inline void set_has_isonlie();
  inline void clear_has_isonlie();
  inline void set_has_cascadedevdomain();
  inline void clear_has_cascadedevdomain();
  inline void set_has_devdomain();
  inline void clear_has_devdomain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* keyid_;
  ::std::string* devid_;
  ::std::string* provider_;
  ::std::string* model_;
  ::std::string* devip_;
  ::std::string* username_;
  ::google::protobuf::int32 devport_;
  ::google::protobuf::int32 streamtype_;
  ::std::string* userpsw_;
  ::google::protobuf::int32 devtype_;
  ::google::protobuf::int32 proxyport_;
  ::std::string* registerid_;
  ::std::string* devicethird_;
  ::google::protobuf::int32 streammode_;
  ::google::protobuf::int32 channelnum_;
  ::google::protobuf::int32 logintype_;
  ::google::protobuf::int32 combinestatus_;
  ::std::string* name_;
  ::std::string* regid_;
  ::std::string* describe_;
  ::std::string* servicecode_;
  ::google::protobuf::int32 mountmode_;
  ::google::protobuf::int32 devcategory_;
  ::std::string* updevicecode_;
  ::std::string* proxyip_;
  ::std::string* proxyservicecode_;
  ::std::string* devicesn_;
  ::std::string* cascadedevcode_;
  ::std::string* cascadedevdomain_;
  ::std::string* devdomain_;
  ::google::protobuf::int32 isonlie_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class EncodeChnnelInfo : public ::google::protobuf::Message {
 public:
  EncodeChnnelInfo();
  virtual ~EncodeChnnelInfo();

  EncodeChnnelInfo(const EncodeChnnelInfo& from);

  inline EncodeChnnelInfo& operator=(const EncodeChnnelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodeChnnelInfo& default_instance();

  void Swap(EncodeChnnelInfo* other);

  // implements Message ----------------------------------------------

  EncodeChnnelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncodeChnnelInfo& from);
  void MergeFrom(const EncodeChnnelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string name = 3 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string describe = 4 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 4;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional string devCode = 5 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 5;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional int32 channelSeq = 6 [default = -1];
  inline bool has_channelseq() const;
  inline void clear_channelseq();
  static const int kChannelSeqFieldNumber = 6;
  inline ::google::protobuf::int32 channelseq() const;
  inline void set_channelseq(::google::protobuf::int32 value);

  // optional int32 unitSeq = 7 [default = -1];
  inline bool has_unitseq() const;
  inline void clear_unitseq();
  static const int kUnitSeqFieldNumber = 7;
  inline ::google::protobuf::int32 unitseq() const;
  inline void set_unitseq(::google::protobuf::int32 value);

  // optional string type = 8 [default = ""];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string cameraType = 9 [default = ""];
  inline bool has_cameratype() const;
  inline void clear_cameratype();
  static const int kCameraTypeFieldNumber = 9;
  inline const ::std::string& cameratype() const;
  inline void set_cameratype(const ::std::string& value);
  inline void set_cameratype(const char* value);
  inline void set_cameratype(const char* value, size_t size);
  inline ::std::string* mutable_cameratype();
  inline ::std::string* release_cameratype();
  inline void set_allocated_cameratype(::std::string* cameratype);

  // optional string cameraFunction = 10 [default = ""];
  inline bool has_camerafunction() const;
  inline void clear_camerafunction();
  static const int kCameraFunctionFieldNumber = 10;
  inline const ::std::string& camerafunction() const;
  inline void set_camerafunction(const ::std::string& value);
  inline void set_camerafunction(const char* value);
  inline void set_camerafunction(const char* value, size_t size);
  inline ::std::string* mutable_camerafunction();
  inline ::std::string* release_camerafunction();
  inline void set_allocated_camerafunction(::std::string* camerafunction);

  // optional string gps_x = 11 [default = ""];
  inline bool has_gps_x() const;
  inline void clear_gps_x();
  static const int kGpsXFieldNumber = 11;
  inline const ::std::string& gps_x() const;
  inline void set_gps_x(const ::std::string& value);
  inline void set_gps_x(const char* value);
  inline void set_gps_x(const char* value, size_t size);
  inline ::std::string* mutable_gps_x();
  inline ::std::string* release_gps_x();
  inline void set_allocated_gps_x(::std::string* gps_x);

  // optional string gps_y = 12 [default = ""];
  inline bool has_gps_y() const;
  inline void clear_gps_y();
  static const int kGpsYFieldNumber = 12;
  inline const ::std::string& gps_y() const;
  inline void set_gps_y(const ::std::string& value);
  inline void set_gps_y(const char* value);
  inline void set_gps_y(const char* value, size_t size);
  inline ::std::string* mutable_gps_y();
  inline ::std::string* release_gps_y();
  inline void set_allocated_gps_y(::std::string* gps_y);

  // optional int64 mapId = 13 [default = -1];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 13;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int64 domainId = 14 [default = -1];
  inline bool has_domainid() const;
  inline void clear_domainid();
  static const int kDomainIdFieldNumber = 14;
  inline ::google::protobuf::int64 domainid() const;
  inline void set_domainid(::google::protobuf::int64 value);

  // optional string memo = 15 [default = ""];
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 15;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional int32 stat = 16 [default = -1];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 16;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // optional string multicastIp = 17 [default = ""];
  inline bool has_multicastip() const;
  inline void clear_multicastip();
  static const int kMulticastIpFieldNumber = 17;
  inline const ::std::string& multicastip() const;
  inline void set_multicastip(const ::std::string& value);
  inline void set_multicastip(const char* value);
  inline void set_multicastip(const char* value, size_t size);
  inline ::std::string* mutable_multicastip();
  inline ::std::string* release_multicastip();
  inline void set_allocated_multicastip(::std::string* multicastip);

  // optional int32 multicastPort = 18 [default = -1];
  inline bool has_multicastport() const;
  inline void clear_multicastport();
  static const int kMulticastPortFieldNumber = 18;
  inline ::google::protobuf::int32 multicastport() const;
  inline void set_multicastport(::google::protobuf::int32 value);

  // optional string ipcIp = 19 [default = ""];
  inline bool has_ipcip() const;
  inline void clear_ipcip();
  static const int kIpcIpFieldNumber = 19;
  inline const ::std::string& ipcip() const;
  inline void set_ipcip(const ::std::string& value);
  inline void set_ipcip(const char* value);
  inline void set_ipcip(const char* value, size_t size);
  inline ::std::string* mutable_ipcip();
  inline ::std::string* release_ipcip();
  inline void set_allocated_ipcip(::std::string* ipcip);

  // optional int32 iconDirection = 20 [default = -1];
  inline bool has_icondirection() const;
  inline void clear_icondirection();
  static const int kIconDirectionFieldNumber = 20;
  inline ::google::protobuf::int32 icondirection() const;
  inline void set_icondirection(::google::protobuf::int32 value);

  // optional string regionCode = 21 [default = ""];
  inline bool has_regioncode() const;
  inline void clear_regioncode();
  static const int kRegionCodeFieldNumber = 21;
  inline const ::std::string& regioncode() const;
  inline void set_regioncode(const ::std::string& value);
  inline void set_regioncode(const char* value);
  inline void set_regioncode(const char* value, size_t size);
  inline ::std::string* mutable_regioncode();
  inline ::std::string* release_regioncode();
  inline void set_allocated_regioncode(::std::string* regioncode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.EncodeChnnelInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_channelseq();
  inline void clear_has_channelseq();
  inline void set_has_unitseq();
  inline void clear_has_unitseq();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cameratype();
  inline void clear_has_cameratype();
  inline void set_has_camerafunction();
  inline void clear_has_camerafunction();
  inline void set_has_gps_x();
  inline void clear_has_gps_x();
  inline void set_has_gps_y();
  inline void clear_has_gps_y();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_domainid();
  inline void clear_has_domainid();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_multicastip();
  inline void clear_has_multicastip();
  inline void set_has_multicastport();
  inline void clear_has_multicastport();
  inline void set_has_ipcip();
  inline void clear_has_ipcip();
  inline void set_has_icondirection();
  inline void clear_has_icondirection();
  inline void set_has_regioncode();
  inline void clear_has_regioncode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* channelid_;
  ::std::string* name_;
  ::std::string* describe_;
  ::std::string* devcode_;
  ::google::protobuf::int32 channelseq_;
  ::google::protobuf::int32 unitseq_;
  ::std::string* type_;
  ::std::string* cameratype_;
  ::std::string* camerafunction_;
  ::std::string* gps_x_;
  ::std::string* gps_y_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int64 domainid_;
  ::std::string* memo_;
  ::std::string* multicastip_;
  ::google::protobuf::int32 stat_;
  ::google::protobuf::int32 multicastport_;
  ::std::string* ipcip_;
  ::std::string* regioncode_;
  ::google::protobuf::int32 icondirection_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static EncodeChnnelInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlarmInChannelInfo : public ::google::protobuf::Message {
 public:
  AlarmInChannelInfo();
  virtual ~AlarmInChannelInfo();

  AlarmInChannelInfo(const AlarmInChannelInfo& from);

  inline AlarmInChannelInfo& operator=(const AlarmInChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmInChannelInfo& default_instance();

  void Swap(AlarmInChannelInfo* other);

  // implements Message ----------------------------------------------

  AlarmInChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmInChannelInfo& from);
  void MergeFrom(const AlarmInChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string devCode = 2 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 2;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional int32 unitSeq = 3 [default = -1];
  inline bool has_unitseq() const;
  inline void clear_unitseq();
  static const int kUnitSeqFieldNumber = 3;
  inline ::google::protobuf::int32 unitseq() const;
  inline void set_unitseq(::google::protobuf::int32 value);

  // optional int32 channelSeq = 4 [default = -1];
  inline bool has_channelseq() const;
  inline void clear_channelseq();
  static const int kChannelSeqFieldNumber = 4;
  inline ::google::protobuf::int32 channelseq() const;
  inline void set_channelseq(::google::protobuf::int32 value);

  // optional string channelName = 5 [default = ""];
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 5;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // optional string alarmType = 6 [default = ""];
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 6;
  inline const ::std::string& alarmtype() const;
  inline void set_alarmtype(const ::std::string& value);
  inline void set_alarmtype(const char* value);
  inline void set_alarmtype(const char* value, size_t size);
  inline ::std::string* mutable_alarmtype();
  inline ::std::string* release_alarmtype();
  inline void set_allocated_alarmtype(::std::string* alarmtype);

  // optional string alarmGrade = 7 [default = ""];
  inline bool has_alarmgrade() const;
  inline void clear_alarmgrade();
  static const int kAlarmGradeFieldNumber = 7;
  inline const ::std::string& alarmgrade() const;
  inline void set_alarmgrade(const ::std::string& value);
  inline void set_alarmgrade(const char* value);
  inline void set_alarmgrade(const char* value, size_t size);
  inline ::std::string* mutable_alarmgrade();
  inline ::std::string* release_alarmgrade();
  inline void set_allocated_alarmgrade(::std::string* alarmgrade);

  // optional string gps_x = 8 [default = ""];
  inline bool has_gps_x() const;
  inline void clear_gps_x();
  static const int kGpsXFieldNumber = 8;
  inline const ::std::string& gps_x() const;
  inline void set_gps_x(const ::std::string& value);
  inline void set_gps_x(const char* value);
  inline void set_gps_x(const char* value, size_t size);
  inline ::std::string* mutable_gps_x();
  inline ::std::string* release_gps_x();
  inline void set_allocated_gps_x(::std::string* gps_x);

  // optional string gps_y = 9 [default = ""];
  inline bool has_gps_y() const;
  inline void clear_gps_y();
  static const int kGpsYFieldNumber = 9;
  inline const ::std::string& gps_y() const;
  inline void set_gps_y(const ::std::string& value);
  inline void set_gps_y(const char* value);
  inline void set_gps_y(const char* value, size_t size);
  inline ::std::string* mutable_gps_y();
  inline ::std::string* release_gps_y();
  inline void set_allocated_gps_y(::std::string* gps_y);

  // optional int64 mapId = 10 [default = -1];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 10;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int64 domainId = 11 [default = -1];
  inline bool has_domainid() const;
  inline void clear_domainid();
  static const int kDomainIdFieldNumber = 11;
  inline ::google::protobuf::int64 domainid() const;
  inline void set_domainid(::google::protobuf::int64 value);

  // optional string memo = 12 [default = ""];
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 12;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional int32 state = 13 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 13;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmInChannelInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_unitseq();
  inline void clear_has_unitseq();
  inline void set_has_channelseq();
  inline void clear_has_channelseq();
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_alarmgrade();
  inline void clear_has_alarmgrade();
  inline void set_has_gps_x();
  inline void clear_has_gps_x();
  inline void set_has_gps_y();
  inline void clear_has_gps_y();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_domainid();
  inline void clear_has_domainid();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* devcode_;
  ::google::protobuf::int32 unitseq_;
  ::google::protobuf::int32 channelseq_;
  ::std::string* channelname_;
  ::std::string* alarmtype_;
  ::std::string* alarmgrade_;
  ::std::string* gps_x_;
  ::std::string* gps_y_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int64 domainid_;
  ::std::string* memo_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmInChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqDeviceOpr : public ::google::protobuf::Message {
 public:
  ReqDeviceOpr();
  virtual ~ReqDeviceOpr();

  ReqDeviceOpr(const ReqDeviceOpr& from);

  inline ReqDeviceOpr& operator=(const ReqDeviceOpr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDeviceOpr& default_instance();

  void Swap(ReqDeviceOpr* other);

  // implements Message ----------------------------------------------

  ReqDeviceOpr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDeviceOpr& from);
  void MergeFrom(const ReqDeviceOpr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devCode = 1 [default = ""];
  inline bool has_devcode() const;
  inline void clear_devcode();
  static const int kDevCodeFieldNumber = 1;
  inline const ::std::string& devcode() const;
  inline void set_devcode(const ::std::string& value);
  inline void set_devcode(const char* value);
  inline void set_devcode(const char* value, size_t size);
  inline ::std::string* mutable_devcode();
  inline ::std::string* release_devcode();
  inline void set_allocated_devcode(::std::string* devcode);

  // optional string channelId = 2 [default = ""];
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional int32 devType = 3 [default = -1];
  inline bool has_devtype() const;
  inline void clear_devtype();
  static const int kDevTypeFieldNumber = 3;
  inline ::google::protobuf::int32 devtype() const;
  inline void set_devtype(::google::protobuf::int32 value);

  // optional int32 mountType = 4 [default = -1];
  inline bool has_mounttype() const;
  inline void clear_mounttype();
  static const int kMountTypeFieldNumber = 4;
  inline ::google::protobuf::int32 mounttype() const;
  inline void set_mounttype(::google::protobuf::int32 value);

  // optional string serviceId = 5 [default = ""];
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIdFieldNumber = 5;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // optional string upDeviceCode = 6 [default = ""];
  inline bool has_updevicecode() const;
  inline void clear_updevicecode();
  static const int kUpDeviceCodeFieldNumber = 6;
  inline const ::std::string& updevicecode() const;
  inline void set_updevicecode(const ::std::string& value);
  inline void set_updevicecode(const char* value);
  inline void set_updevicecode(const char* value, size_t size);
  inline ::std::string* mutable_updevicecode();
  inline ::std::string* release_updevicecode();
  inline void set_allocated_updevicecode(::std::string* updevicecode);

  // optional int32 doType = 7 [default = -1];
  inline bool has_dotype() const;
  inline void clear_dotype();
  static const int kDoTypeFieldNumber = 7;
  inline ::google::protobuf::int32 dotype() const;
  inline void set_dotype(::google::protobuf::int32 value);

  // optional int64 stepWith = 8 [default = -1];
  inline bool has_stepwith() const;
  inline void clear_stepwith();
  static const int kStepWithFieldNumber = 8;
  inline ::google::protobuf::int64 stepwith() const;
  inline void set_stepwith(::google::protobuf::int64 value);

  // optional int64 stepHight = 9 [default = -1];
  inline bool has_stephight() const;
  inline void clear_stephight();
  static const int kStepHightFieldNumber = 9;
  inline ::google::protobuf::int64 stephight() const;
  inline void set_stephight(::google::protobuf::int64 value);

  // optional string cascadeDevDomain = 10 [default = ""];
  inline bool has_cascadedevdomain() const;
  inline void clear_cascadedevdomain();
  static const int kCascadeDevDomainFieldNumber = 10;
  inline const ::std::string& cascadedevdomain() const;
  inline void set_cascadedevdomain(const ::std::string& value);
  inline void set_cascadedevdomain(const char* value);
  inline void set_cascadedevdomain(const char* value, size_t size);
  inline ::std::string* mutable_cascadedevdomain();
  inline ::std::string* release_cascadedevdomain();
  inline void set_allocated_cascadedevdomain(::std::string* cascadedevdomain);

  // optional int32 reqestType = 11 [default = -1];
  inline bool has_reqesttype() const;
  inline void clear_reqesttype();
  static const int kReqestTypeFieldNumber = 11;
  inline ::google::protobuf::int32 reqesttype() const;
  inline void set_reqesttype(::google::protobuf::int32 value);

  // optional string proxyIp = 12 [default = ""];
  inline bool has_proxyip() const;
  inline void clear_proxyip();
  static const int kProxyIpFieldNumber = 12;
  inline const ::std::string& proxyip() const;
  inline void set_proxyip(const ::std::string& value);
  inline void set_proxyip(const char* value);
  inline void set_proxyip(const char* value, size_t size);
  inline ::std::string* mutable_proxyip();
  inline ::std::string* release_proxyip();
  inline void set_allocated_proxyip(::std::string* proxyip);

  // optional int32 proxyPort = 13 [default = 0];
  inline bool has_proxyport() const;
  inline void clear_proxyport();
  static const int kProxyPortFieldNumber = 13;
  inline ::google::protobuf::int32 proxyport() const;
  inline void set_proxyport(::google::protobuf::int32 value);

  // optional string proxyServiceCode = 14 [default = ""];
  inline bool has_proxyservicecode() const;
  inline void clear_proxyservicecode();
  static const int kProxyServiceCodeFieldNumber = 14;
  inline const ::std::string& proxyservicecode() const;
  inline void set_proxyservicecode(const ::std::string& value);
  inline void set_proxyservicecode(const char* value);
  inline void set_proxyservicecode(const char* value, size_t size);
  inline ::std::string* mutable_proxyservicecode();
  inline ::std::string* release_proxyservicecode();
  inline void set_allocated_proxyservicecode(::std::string* proxyservicecode);

  // optional int32 result = 15 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 15;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string resultDescirbe = 16 [default = ""];
  inline bool has_resultdescirbe() const;
  inline void clear_resultdescirbe();
  static const int kResultDescirbeFieldNumber = 16;
  inline const ::std::string& resultdescirbe() const;
  inline void set_resultdescirbe(const ::std::string& value);
  inline void set_resultdescirbe(const char* value);
  inline void set_resultdescirbe(const char* value, size_t size);
  inline ::std::string* mutable_resultdescirbe();
  inline ::std::string* release_resultdescirbe();
  inline void set_allocated_resultdescirbe(::std::string* resultdescirbe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDeviceOpr)
 private:
  inline void set_has_devcode();
  inline void clear_has_devcode();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_devtype();
  inline void clear_has_devtype();
  inline void set_has_mounttype();
  inline void clear_has_mounttype();
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_updevicecode();
  inline void clear_has_updevicecode();
  inline void set_has_dotype();
  inline void clear_has_dotype();
  inline void set_has_stepwith();
  inline void clear_has_stepwith();
  inline void set_has_stephight();
  inline void clear_has_stephight();
  inline void set_has_cascadedevdomain();
  inline void clear_has_cascadedevdomain();
  inline void set_has_reqesttype();
  inline void clear_has_reqesttype();
  inline void set_has_proxyip();
  inline void clear_has_proxyip();
  inline void set_has_proxyport();
  inline void clear_has_proxyport();
  inline void set_has_proxyservicecode();
  inline void clear_has_proxyservicecode();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescirbe();
  inline void clear_has_resultdescirbe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* devcode_;
  ::std::string* channelid_;
  ::google::protobuf::int32 devtype_;
  ::google::protobuf::int32 mounttype_;
  ::std::string* serviceid_;
  ::std::string* updevicecode_;
  ::google::protobuf::int64 stepwith_;
  ::google::protobuf::int64 stephight_;
  ::google::protobuf::int32 dotype_;
  ::google::protobuf::int32 reqesttype_;
  ::std::string* cascadedevdomain_;
  ::std::string* proxyip_;
  ::std::string* proxyservicecode_;
  ::google::protobuf::int32 proxyport_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescirbe_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDeviceOpr* default_instance_;
};
// -------------------------------------------------------------------

class ReportDeviceStatus_ChannelStat : public ::google::protobuf::Message {
 public:
  ReportDeviceStatus_ChannelStat();
  virtual ~ReportDeviceStatus_ChannelStat();

  ReportDeviceStatus_ChannelStat(const ReportDeviceStatus_ChannelStat& from);

  inline ReportDeviceStatus_ChannelStat& operator=(const ReportDeviceStatus_ChannelStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDeviceStatus_ChannelStat& default_instance();

  void Swap(ReportDeviceStatus_ChannelStat* other);

  // implements Message ----------------------------------------------

  ReportDeviceStatus_ChannelStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDeviceStatus_ChannelStat& from);
  void MergeFrom(const ReportDeviceStatus_ChannelStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional int32 seq = 2 [default = -1];
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // optional int32 stat = 3 [default = -1];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 3;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportDeviceStatus.ChannelStat)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 stat_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReportDeviceStatus_ChannelStat* default_instance_;
};
// -------------------------------------------------------------------

class ReportDeviceStatus : public ::google::protobuf::Message {
 public:
  ReportDeviceStatus();
  virtual ~ReportDeviceStatus();

  ReportDeviceStatus(const ReportDeviceStatus& from);

  inline ReportDeviceStatus& operator=(const ReportDeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDeviceStatus& default_instance();

  void Swap(ReportDeviceStatus* other);

  // implements Message ----------------------------------------------

  ReportDeviceStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDeviceStatus& from);
  void MergeFrom(const ReportDeviceStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReportDeviceStatus_ChannelStat ChannelStat;

  // accessors -------------------------------------------------------

  // optional string code = 1 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional int32 stat = 2 [default = -1];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 2;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline const ::com::arges::file::proto::ReportDeviceStatus_ChannelStat& channels(int index) const;
  inline ::com::arges::file::proto::ReportDeviceStatus_ChannelStat* mutable_channels(int index);
  inline ::com::arges::file::proto::ReportDeviceStatus_ChannelStat* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportDeviceStatus_ChannelStat >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportDeviceStatus_ChannelStat >*
      mutable_channels();

  // optional string cascadeDevDomain = 4 [default = ""];
  inline bool has_cascadedevdomain() const;
  inline void clear_cascadedevdomain();
  static const int kCascadeDevDomainFieldNumber = 4;
  inline const ::std::string& cascadedevdomain() const;
  inline void set_cascadedevdomain(const ::std::string& value);
  inline void set_cascadedevdomain(const char* value);
  inline void set_cascadedevdomain(const char* value, size_t size);
  inline ::std::string* mutable_cascadedevdomain();
  inline ::std::string* release_cascadedevdomain();
  inline void set_allocated_cascadedevdomain(::std::string* cascadedevdomain);

  // optional string devIp = 5 [default = ""];
  inline bool has_devip() const;
  inline void clear_devip();
  static const int kDevIpFieldNumber = 5;
  inline const ::std::string& devip() const;
  inline void set_devip(const ::std::string& value);
  inline void set_devip(const char* value);
  inline void set_devip(const char* value, size_t size);
  inline ::std::string* mutable_devip();
  inline ::std::string* release_devip();
  inline void set_allocated_devip(::std::string* devip);

  // optional int32 devPort = 6 [default = 0];
  inline bool has_devport() const;
  inline void clear_devport();
  static const int kDevPortFieldNumber = 6;
  inline ::google::protobuf::int32 devport() const;
  inline void set_devport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReportDeviceStatus)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_cascadedevdomain();
  inline void clear_has_cascadedevdomain();
  inline void set_has_devip();
  inline void clear_has_devip();
  inline void set_has_devport();
  inline void clear_has_devport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportDeviceStatus_ChannelStat > channels_;
  ::std::string* cascadedevdomain_;
  ::google::protobuf::int32 stat_;
  ::google::protobuf::int32 devport_;
  ::std::string* devip_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReportDeviceStatus* default_instance_;
};
// -------------------------------------------------------------------

class ReqEncodeChannelInfo : public ::google::protobuf::Message {
 public:
  ReqEncodeChannelInfo();
  virtual ~ReqEncodeChannelInfo();

  ReqEncodeChannelInfo(const ReqEncodeChannelInfo& from);

  inline ReqEncodeChannelInfo& operator=(const ReqEncodeChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEncodeChannelInfo& default_instance();

  void Swap(ReqEncodeChannelInfo* other);

  // implements Message ----------------------------------------------

  ReqEncodeChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEncodeChannelInfo& from);
  void MergeFrom(const ReqEncodeChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string channelId = 1;
  inline int channelid_size() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channelid(int index) const;
  inline ::std::string* mutable_channelid(int index);
  inline void set_channelid(int index, const ::std::string& value);
  inline void set_channelid(int index, const char* value);
  inline void set_channelid(int index, const char* value, size_t size);
  inline ::std::string* add_channelid();
  inline void add_channelid(const ::std::string& value);
  inline void add_channelid(const char* value);
  inline void add_channelid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channelid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channelid();

  // repeated string regionCode = 2;
  inline int regioncode_size() const;
  inline void clear_regioncode();
  static const int kRegionCodeFieldNumber = 2;
  inline const ::std::string& regioncode(int index) const;
  inline ::std::string* mutable_regioncode(int index);
  inline void set_regioncode(int index, const ::std::string& value);
  inline void set_regioncode(int index, const char* value);
  inline void set_regioncode(int index, const char* value, size_t size);
  inline ::std::string* add_regioncode();
  inline void add_regioncode(const ::std::string& value);
  inline void add_regioncode(const char* value);
  inline void add_regioncode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& regioncode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regioncode();

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqEncodeChannelInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channelid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regioncode_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqEncodeChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspEncodeChannelInfo : public ::google::protobuf::Message {
 public:
  RspEncodeChannelInfo();
  virtual ~RspEncodeChannelInfo();

  RspEncodeChannelInfo(const RspEncodeChannelInfo& from);

  inline RspEncodeChannelInfo& operator=(const RspEncodeChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspEncodeChannelInfo& default_instance();

  void Swap(RspEncodeChannelInfo* other);

  // implements Message ----------------------------------------------

  RspEncodeChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspEncodeChannelInfo& from);
  void MergeFrom(const RspEncodeChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescirbe = 3;
  inline bool has_resultdescirbe() const;
  inline void clear_resultdescirbe();
  static const int kResultDescirbeFieldNumber = 3;
  inline const ::std::string& resultdescirbe() const;
  inline void set_resultdescirbe(const ::std::string& value);
  inline void set_resultdescirbe(const char* value);
  inline void set_resultdescirbe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescirbe();
  inline ::std::string* release_resultdescirbe();
  inline void set_allocated_resultdescirbe(::std::string* resultdescirbe);

  // repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::com::arges::file::proto::EncodeChnnelInfo& infos(int index) const;
  inline ::com::arges::file::proto::EncodeChnnelInfo* mutable_infos(int index);
  inline ::com::arges::file::proto::EncodeChnnelInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspEncodeChannelInfo)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescirbe();
  inline void clear_has_resultdescirbe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescirbe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo > infos_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static RspEncodeChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlarmChannelMassage : public ::google::protobuf::Message {
 public:
  AlarmChannelMassage();
  virtual ~AlarmChannelMassage();

  AlarmChannelMassage(const AlarmChannelMassage& from);

  inline AlarmChannelMassage& operator=(const AlarmChannelMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmChannelMassage& default_instance();

  void Swap(AlarmChannelMassage* other);

  // implements Message ----------------------------------------------

  AlarmChannelMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmChannelMassage& from);
  void MergeFrom(const AlarmChannelMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescirbe = 3;
  inline bool has_resultdescirbe() const;
  inline void clear_resultdescirbe();
  static const int kResultDescirbeFieldNumber = 3;
  inline const ::std::string& resultdescirbe() const;
  inline void set_resultdescirbe(const ::std::string& value);
  inline void set_resultdescirbe(const char* value);
  inline void set_resultdescirbe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescirbe();
  inline ::std::string* release_resultdescirbe();
  inline void set_allocated_resultdescirbe(::std::string* resultdescirbe);

  // repeated .com.arges.file.proto.AlarmInChannelInfo channels = 4;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 4;
  inline const ::com::arges::file::proto::AlarmInChannelInfo& channels(int index) const;
  inline ::com::arges::file::proto::AlarmInChannelInfo* mutable_channels(int index);
  inline ::com::arges::file::proto::AlarmInChannelInfo* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmInChannelInfo >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmInChannelInfo >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmChannelMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescirbe();
  inline void clear_has_resultdescirbe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescirbe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmInChannelInfo > channels_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmChannelMassage* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfoList : public ::google::protobuf::Message {
 public:
  DeviceInfoList();
  virtual ~DeviceInfoList();

  DeviceInfoList(const DeviceInfoList& from);

  inline DeviceInfoList& operator=(const DeviceInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoList& default_instance();

  void Swap(DeviceInfoList* other);

  // implements Message ----------------------------------------------

  DeviceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfoList& from);
  void MergeFrom(const DeviceInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
  inline int deviceinfo_size() const;
  inline void clear_deviceinfo();
  static const int kDeviceinfoFieldNumber = 1;
  inline const ::com::arges::file::proto::DeviceInfo& deviceinfo(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_deviceinfo(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_deviceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      deviceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_deviceinfo();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.DeviceInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > deviceinfo_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfoList* default_instance_;
};
// -------------------------------------------------------------------

class ReqDeviceInfo : public ::google::protobuf::Message {
 public:
  ReqDeviceInfo();
  virtual ~ReqDeviceInfo();

  ReqDeviceInfo(const ReqDeviceInfo& from);

  inline ReqDeviceInfo& operator=(const ReqDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDeviceInfo& default_instance();

  void Swap(ReqDeviceInfo* other);

  // implements Message ----------------------------------------------

  ReqDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDeviceInfo& from);
  void MergeFrom(const ReqDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated string deviceId = 2;
  inline int deviceid_size() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  inline const ::std::string& deviceid(int index) const;
  inline ::std::string* mutable_deviceid(int index);
  inline void set_deviceid(int index, const ::std::string& value);
  inline void set_deviceid(int index, const char* value);
  inline void set_deviceid(int index, const char* value, size_t size);
  inline ::std::string* add_deviceid();
  inline void add_deviceid(const ::std::string& value);
  inline void add_deviceid(const char* value);
  inline void add_deviceid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deviceid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deviceid();

  // repeated string regionCode = 3;
  inline int regioncode_size() const;
  inline void clear_regioncode();
  static const int kRegionCodeFieldNumber = 3;
  inline const ::std::string& regioncode(int index) const;
  inline ::std::string* mutable_regioncode(int index);
  inline void set_regioncode(int index, const ::std::string& value);
  inline void set_regioncode(int index, const char* value);
  inline void set_regioncode(int index, const char* value, size_t size);
  inline ::std::string* add_regioncode();
  inline void add_regioncode(const ::std::string& value);
  inline void add_regioncode(const char* value);
  inline void add_regioncode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& regioncode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regioncode();

  // optional string channelCode = 4;
  inline bool has_channelcode() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 4;
  inline const ::std::string& channelcode() const;
  inline void set_channelcode(const ::std::string& value);
  inline void set_channelcode(const char* value);
  inline void set_channelcode(const char* value, size_t size);
  inline ::std::string* mutable_channelcode();
  inline ::std::string* release_channelcode();
  inline void set_allocated_channelcode(::std::string* channelcode);

  // optional string serviceCode = 5;
  inline bool has_servicecode() const;
  inline void clear_servicecode();
  static const int kServiceCodeFieldNumber = 5;
  inline const ::std::string& servicecode() const;
  inline void set_servicecode(const ::std::string& value);
  inline void set_servicecode(const char* value);
  inline void set_servicecode(const char* value, size_t size);
  inline ::std::string* mutable_servicecode();
  inline ::std::string* release_servicecode();
  inline void set_allocated_servicecode(::std::string* servicecode);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqDeviceInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_channelcode();
  inline void clear_has_channelcode();
  inline void set_has_servicecode();
  inline void clear_has_servicecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deviceid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regioncode_;
  ::std::string* channelcode_;
  ::std::string* servicecode_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static ReqDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspDeviceInfo : public ::google::protobuf::Message {
 public:
  RspDeviceInfo();
  virtual ~RspDeviceInfo();

  RspDeviceInfo(const RspDeviceInfo& from);

  inline RspDeviceInfo& operator=(const RspDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspDeviceInfo& default_instance();

  void Swap(RspDeviceInfo* other);

  // implements Message ----------------------------------------------

  RspDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspDeviceInfo& from);
  void MergeFrom(const RspDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.DeviceInfo devs = 2;
  inline int devs_size() const;
  inline void clear_devs();
  static const int kDevsFieldNumber = 2;
  inline const ::com::arges::file::proto::DeviceInfo& devs(int index) const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devs(int index);
  inline ::com::arges::file::proto::DeviceInfo* add_devs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
      devs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
      mutable_devs();

  // optional int32 result = 3 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescirbe = 4 [default = ""];
  inline bool has_resultdescirbe() const;
  inline void clear_resultdescirbe();
  static const int kResultDescirbeFieldNumber = 4;
  inline const ::std::string& resultdescirbe() const;
  inline void set_resultdescirbe(const ::std::string& value);
  inline void set_resultdescirbe(const char* value);
  inline void set_resultdescirbe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescirbe();
  inline ::std::string* release_resultdescirbe();
  inline void set_allocated_resultdescirbe(::std::string* resultdescirbe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspDeviceInfo)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescirbe();
  inline void clear_has_resultdescirbe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo > devs_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescirbe_;
  friend void  protobuf_AddDesc_DevInfoListBean_2eproto();
  friend void protobuf_AssignDesc_DevInfoListBean_2eproto();
  friend void protobuf_ShutdownFile_DevInfoListBean_2eproto();

  void InitAsDefaultInstance();
  static RspDeviceInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceInfo

// optional string keyId = 1 [default = ""];
inline bool DeviceInfo::has_keyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_keyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_keyid() {
  if (keyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyid_->clear();
  }
  clear_has_keyid();
}
inline const ::std::string& DeviceInfo::keyid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.keyId)
  return *keyid_;
}
inline void DeviceInfo::set_keyid(const ::std::string& value) {
  set_has_keyid();
  if (keyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.keyId)
}
inline void DeviceInfo::set_keyid(const char* value) {
  set_has_keyid();
  if (keyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.keyId)
}
inline void DeviceInfo::set_keyid(const char* value, size_t size) {
  set_has_keyid();
  if (keyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyid_ = new ::std::string;
  }
  keyid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.keyId)
}
inline ::std::string* DeviceInfo::mutable_keyid() {
  set_has_keyid();
  if (keyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.keyId)
  return keyid_;
}
inline ::std::string* DeviceInfo::release_keyid() {
  clear_has_keyid();
  if (keyid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keyid_;
    keyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_keyid(::std::string* keyid) {
  if (keyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyid_;
  }
  if (keyid) {
    set_has_keyid();
    keyid_ = keyid;
  } else {
    clear_has_keyid();
    keyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.keyId)
}

// optional string devId = 2 [default = ""];
inline bool DeviceInfo::has_devid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_devid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_devid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_devid() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_->clear();
  }
  clear_has_devid();
}
inline const ::std::string& DeviceInfo::devid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devId)
  return *devid_;
}
inline void DeviceInfo::set_devid(const ::std::string& value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devId)
}
inline void DeviceInfo::set_devid(const char* value) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.devId)
}
inline void DeviceInfo::set_devid(const char* value, size_t size) {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  devid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.devId)
}
inline ::std::string* DeviceInfo::mutable_devid() {
  set_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.devId)
  return devid_;
}
inline ::std::string* DeviceInfo::release_devid() {
  clear_has_devid();
  if (devid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devid_;
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devid(::std::string* devid) {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (devid) {
    set_has_devid();
    devid_ = devid;
  } else {
    clear_has_devid();
    devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.devId)
}

// optional string provider = 3 [default = ""];
inline bool DeviceInfo::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_provider() {
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_->clear();
  }
  clear_has_provider();
}
inline const ::std::string& DeviceInfo::provider() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.provider)
  return *provider_;
}
inline void DeviceInfo::set_provider(const ::std::string& value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.provider)
}
inline void DeviceInfo::set_provider(const char* value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.provider)
}
inline void DeviceInfo::set_provider(const char* value, size_t size) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  provider_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.provider)
}
inline ::std::string* DeviceInfo::mutable_provider() {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provider_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.provider)
  return provider_;
}
inline ::std::string* DeviceInfo::release_provider() {
  clear_has_provider();
  if (provider_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = provider_;
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_provider(::std::string* provider) {
  if (provider_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provider_;
  }
  if (provider) {
    set_has_provider();
    provider_ = provider;
  } else {
    clear_has_provider();
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.provider)
}

// optional string model = 4 [default = ""];
inline bool DeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.model)
  return *model_;
}
inline void DeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.model)
}
inline ::std::string* DeviceInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.model)
  return model_;
}
inline ::std::string* DeviceInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.model)
}

// optional string devIp = 5 [default = ""];
inline bool DeviceInfo::has_devip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfo::set_has_devip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceInfo::clear_has_devip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceInfo::clear_devip() {
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_->clear();
  }
  clear_has_devip();
}
inline const ::std::string& DeviceInfo::devip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devIp)
  return *devip_;
}
inline void DeviceInfo::set_devip(const ::std::string& value) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devIp)
}
inline void DeviceInfo::set_devip(const char* value) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.devIp)
}
inline void DeviceInfo::set_devip(const char* value, size_t size) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.devIp)
}
inline ::std::string* DeviceInfo::mutable_devip() {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.devIp)
  return devip_;
}
inline ::std::string* DeviceInfo::release_devip() {
  clear_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devip_;
    devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devip(::std::string* devip) {
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devip_;
  }
  if (devip) {
    set_has_devip();
    devip_ = devip;
  } else {
    clear_has_devip();
    devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.devIp)
}

// optional int32 devPort = 6 [default = -1];
inline bool DeviceInfo::has_devport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceInfo::set_has_devport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceInfo::clear_has_devport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceInfo::clear_devport() {
  devport_ = -1;
  clear_has_devport();
}
inline ::google::protobuf::int32 DeviceInfo::devport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devPort)
  return devport_;
}
inline void DeviceInfo::set_devport(::google::protobuf::int32 value) {
  set_has_devport();
  devport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devPort)
}

// optional string userName = 7 [default = ""];
inline bool DeviceInfo::has_username() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceInfo::set_has_username() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& DeviceInfo::username() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.userName)
  return *username_;
}
inline void DeviceInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.userName)
}
inline void DeviceInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.userName)
}
inline void DeviceInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.userName)
}
inline ::std::string* DeviceInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.userName)
  return username_;
}
inline ::std::string* DeviceInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.userName)
}

// optional string userPsw = 8 [default = ""];
inline bool DeviceInfo::has_userpsw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceInfo::set_has_userpsw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceInfo::clear_has_userpsw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceInfo::clear_userpsw() {
  if (userpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userpsw_->clear();
  }
  clear_has_userpsw();
}
inline const ::std::string& DeviceInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.userPsw)
  return *userpsw_;
}
inline void DeviceInfo::set_userpsw(const ::std::string& value) {
  set_has_userpsw();
  if (userpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.userPsw)
}
inline void DeviceInfo::set_userpsw(const char* value) {
  set_has_userpsw();
  if (userpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.userPsw)
}
inline void DeviceInfo::set_userpsw(const char* value, size_t size) {
  set_has_userpsw();
  if (userpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userpsw_ = new ::std::string;
  }
  userpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.userPsw)
}
inline ::std::string* DeviceInfo::mutable_userpsw() {
  set_has_userpsw();
  if (userpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.userPsw)
  return userpsw_;
}
inline ::std::string* DeviceInfo::release_userpsw() {
  clear_has_userpsw();
  if (userpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userpsw_;
    userpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_userpsw(::std::string* userpsw) {
  if (userpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userpsw_;
  }
  if (userpsw) {
    set_has_userpsw();
    userpsw_ = userpsw;
  } else {
    clear_has_userpsw();
    userpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.userPsw)
}

// optional int32 streamType = 9 [default = -1];
inline bool DeviceInfo::has_streamtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceInfo::set_has_streamtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceInfo::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceInfo::clear_streamtype() {
  streamtype_ = -1;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 DeviceInfo::streamtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.streamType)
  return streamtype_;
}
inline void DeviceInfo::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.streamType)
}

// optional int32 devType = 10 [default = -1];
inline bool DeviceInfo::has_devtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceInfo::set_has_devtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeviceInfo::clear_has_devtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeviceInfo::clear_devtype() {
  devtype_ = -1;
  clear_has_devtype();
}
inline ::google::protobuf::int32 DeviceInfo::devtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devType)
  return devtype_;
}
inline void DeviceInfo::set_devtype(::google::protobuf::int32 value) {
  set_has_devtype();
  devtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devType)
}

// optional int32 proxyPort = 11 [default = 0];
inline bool DeviceInfo::has_proxyport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceInfo::set_has_proxyport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DeviceInfo::clear_has_proxyport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DeviceInfo::clear_proxyport() {
  proxyport_ = 0;
  clear_has_proxyport();
}
inline ::google::protobuf::int32 DeviceInfo::proxyport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.proxyPort)
  return proxyport_;
}
inline void DeviceInfo::set_proxyport(::google::protobuf::int32 value) {
  set_has_proxyport();
  proxyport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.proxyPort)
}

// optional string registerId = 12 [default = ""];
inline bool DeviceInfo::has_registerid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceInfo::set_has_registerid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DeviceInfo::clear_has_registerid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DeviceInfo::clear_registerid() {
  if (registerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerid_->clear();
  }
  clear_has_registerid();
}
inline const ::std::string& DeviceInfo::registerid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.registerId)
  return *registerid_;
}
inline void DeviceInfo::set_registerid(const ::std::string& value) {
  set_has_registerid();
  if (registerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.registerId)
}
inline void DeviceInfo::set_registerid(const char* value) {
  set_has_registerid();
  if (registerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.registerId)
}
inline void DeviceInfo::set_registerid(const char* value, size_t size) {
  set_has_registerid();
  if (registerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerid_ = new ::std::string;
  }
  registerid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.registerId)
}
inline ::std::string* DeviceInfo::mutable_registerid() {
  set_has_registerid();
  if (registerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.registerId)
  return registerid_;
}
inline ::std::string* DeviceInfo::release_registerid() {
  clear_has_registerid();
  if (registerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = registerid_;
    registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_registerid(::std::string* registerid) {
  if (registerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registerid_;
  }
  if (registerid) {
    set_has_registerid();
    registerid_ = registerid;
  } else {
    clear_has_registerid();
    registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.registerId)
}

// optional string deviceThird = 13 [default = ""];
inline bool DeviceInfo::has_devicethird() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceInfo::set_has_devicethird() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DeviceInfo::clear_has_devicethird() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DeviceInfo::clear_devicethird() {
  if (devicethird_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicethird_->clear();
  }
  clear_has_devicethird();
}
inline const ::std::string& DeviceInfo::devicethird() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.deviceThird)
  return *devicethird_;
}
inline void DeviceInfo::set_devicethird(const ::std::string& value) {
  set_has_devicethird();
  if (devicethird_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline void DeviceInfo::set_devicethird(const char* value) {
  set_has_devicethird();
  if (devicethird_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline void DeviceInfo::set_devicethird(const char* value, size_t size) {
  set_has_devicethird();
  if (devicethird_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicethird_ = new ::std::string;
  }
  devicethird_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.deviceThird)
}
inline ::std::string* DeviceInfo::mutable_devicethird() {
  set_has_devicethird();
  if (devicethird_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicethird_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.deviceThird)
  return devicethird_;
}
inline ::std::string* DeviceInfo::release_devicethird() {
  clear_has_devicethird();
  if (devicethird_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicethird_;
    devicethird_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devicethird(::std::string* devicethird) {
  if (devicethird_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicethird_;
  }
  if (devicethird) {
    set_has_devicethird();
    devicethird_ = devicethird;
  } else {
    clear_has_devicethird();
    devicethird_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.deviceThird)
}

// optional int32 streamMode = 14 [default = -1];
inline bool DeviceInfo::has_streammode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeviceInfo::set_has_streammode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DeviceInfo::clear_has_streammode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DeviceInfo::clear_streammode() {
  streammode_ = -1;
  clear_has_streammode();
}
inline ::google::protobuf::int32 DeviceInfo::streammode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.streamMode)
  return streammode_;
}
inline void DeviceInfo::set_streammode(::google::protobuf::int32 value) {
  set_has_streammode();
  streammode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.streamMode)
}

// optional int32 channelNum = 15 [default = -1];
inline bool DeviceInfo::has_channelnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DeviceInfo::set_has_channelnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DeviceInfo::clear_has_channelnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DeviceInfo::clear_channelnum() {
  channelnum_ = -1;
  clear_has_channelnum();
}
inline ::google::protobuf::int32 DeviceInfo::channelnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.channelNum)
  return channelnum_;
}
inline void DeviceInfo::set_channelnum(::google::protobuf::int32 value) {
  set_has_channelnum();
  channelnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.channelNum)
}

// optional int32 loginType = 16 [default = -1];
inline bool DeviceInfo::has_logintype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DeviceInfo::set_has_logintype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DeviceInfo::clear_has_logintype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DeviceInfo::clear_logintype() {
  logintype_ = -1;
  clear_has_logintype();
}
inline ::google::protobuf::int32 DeviceInfo::logintype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.loginType)
  return logintype_;
}
inline void DeviceInfo::set_logintype(::google::protobuf::int32 value) {
  set_has_logintype();
  logintype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.loginType)
}

// optional int32 combineStatus = 17 [default = -1];
inline bool DeviceInfo::has_combinestatus() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DeviceInfo::set_has_combinestatus() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DeviceInfo::clear_has_combinestatus() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DeviceInfo::clear_combinestatus() {
  combinestatus_ = -1;
  clear_has_combinestatus();
}
inline ::google::protobuf::int32 DeviceInfo::combinestatus() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.combineStatus)
  return combinestatus_;
}
inline void DeviceInfo::set_combinestatus(::google::protobuf::int32 value) {
  set_has_combinestatus();
  combinestatus_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.combineStatus)
}

// optional string name = 18 [default = ""];
inline bool DeviceInfo::has_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DeviceInfo::set_has_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DeviceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DeviceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.name)
  return *name_;
}
inline void DeviceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.name)
}
inline void DeviceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.name)
}
inline void DeviceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.name)
}
inline ::std::string* DeviceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.name)
  return name_;
}
inline ::std::string* DeviceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.name)
}

// optional string regId = 19 [default = ""];
inline bool DeviceInfo::has_regid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DeviceInfo::set_has_regid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DeviceInfo::clear_has_regid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DeviceInfo::clear_regid() {
  if (regid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regid_->clear();
  }
  clear_has_regid();
}
inline const ::std::string& DeviceInfo::regid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.regId)
  return *regid_;
}
inline void DeviceInfo::set_regid(const ::std::string& value) {
  set_has_regid();
  if (regid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regid_ = new ::std::string;
  }
  regid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.regId)
}
inline void DeviceInfo::set_regid(const char* value) {
  set_has_regid();
  if (regid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regid_ = new ::std::string;
  }
  regid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.regId)
}
inline void DeviceInfo::set_regid(const char* value, size_t size) {
  set_has_regid();
  if (regid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regid_ = new ::std::string;
  }
  regid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.regId)
}
inline ::std::string* DeviceInfo::mutable_regid() {
  set_has_regid();
  if (regid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.regId)
  return regid_;
}
inline ::std::string* DeviceInfo::release_regid() {
  clear_has_regid();
  if (regid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = regid_;
    regid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_regid(::std::string* regid) {
  if (regid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regid_;
  }
  if (regid) {
    set_has_regid();
    regid_ = regid;
  } else {
    clear_has_regid();
    regid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.regId)
}

// optional string describe = 20 [default = ""];
inline bool DeviceInfo::has_describe() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DeviceInfo::set_has_describe() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DeviceInfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DeviceInfo::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& DeviceInfo::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.describe)
  return *describe_;
}
inline void DeviceInfo::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.describe)
}
inline void DeviceInfo::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.describe)
}
inline void DeviceInfo::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.describe)
}
inline ::std::string* DeviceInfo::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.describe)
  return describe_;
}
inline ::std::string* DeviceInfo::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.describe)
}

// optional int32 mountMode = 21 [default = -1];
inline bool DeviceInfo::has_mountmode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DeviceInfo::set_has_mountmode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DeviceInfo::clear_has_mountmode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DeviceInfo::clear_mountmode() {
  mountmode_ = -1;
  clear_has_mountmode();
}
inline ::google::protobuf::int32 DeviceInfo::mountmode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.mountMode)
  return mountmode_;
}
inline void DeviceInfo::set_mountmode(::google::protobuf::int32 value) {
  set_has_mountmode();
  mountmode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.mountMode)
}

// optional string serviceCode = 22 [default = ""];
inline bool DeviceInfo::has_servicecode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DeviceInfo::set_has_servicecode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DeviceInfo::clear_has_servicecode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DeviceInfo::clear_servicecode() {
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_->clear();
  }
  clear_has_servicecode();
}
inline const ::std::string& DeviceInfo::servicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.serviceCode)
  return *servicecode_;
}
inline void DeviceInfo::set_servicecode(const ::std::string& value) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.serviceCode)
}
inline void DeviceInfo::set_servicecode(const char* value) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.serviceCode)
}
inline void DeviceInfo::set_servicecode(const char* value, size_t size) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.serviceCode)
}
inline ::std::string* DeviceInfo::mutable_servicecode() {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.serviceCode)
  return servicecode_;
}
inline ::std::string* DeviceInfo::release_servicecode() {
  clear_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicecode_;
    servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_servicecode(::std::string* servicecode) {
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicecode_;
  }
  if (servicecode) {
    set_has_servicecode();
    servicecode_ = servicecode;
  } else {
    clear_has_servicecode();
    servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.serviceCode)
}

// optional string upDeviceCode = 23 [default = ""];
inline bool DeviceInfo::has_updevicecode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DeviceInfo::set_has_updevicecode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DeviceInfo::clear_has_updevicecode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DeviceInfo::clear_updevicecode() {
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_->clear();
  }
  clear_has_updevicecode();
}
inline const ::std::string& DeviceInfo::updevicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.upDeviceCode)
  return *updevicecode_;
}
inline void DeviceInfo::set_updevicecode(const ::std::string& value) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.upDeviceCode)
}
inline void DeviceInfo::set_updevicecode(const char* value) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.upDeviceCode)
}
inline void DeviceInfo::set_updevicecode(const char* value, size_t size) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.upDeviceCode)
}
inline ::std::string* DeviceInfo::mutable_updevicecode() {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.upDeviceCode)
  return updevicecode_;
}
inline ::std::string* DeviceInfo::release_updevicecode() {
  clear_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updevicecode_;
    updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_updevicecode(::std::string* updevicecode) {
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevicecode_;
  }
  if (updevicecode) {
    set_has_updevicecode();
    updevicecode_ = updevicecode;
  } else {
    clear_has_updevicecode();
    updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.upDeviceCode)
}

// optional int32 devCategory = 24 [default = -1];
inline bool DeviceInfo::has_devcategory() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DeviceInfo::set_has_devcategory() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DeviceInfo::clear_has_devcategory() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DeviceInfo::clear_devcategory() {
  devcategory_ = -1;
  clear_has_devcategory();
}
inline ::google::protobuf::int32 DeviceInfo::devcategory() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devCategory)
  return devcategory_;
}
inline void DeviceInfo::set_devcategory(::google::protobuf::int32 value) {
  set_has_devcategory();
  devcategory_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devCategory)
}

// optional string proxyIp = 25 [default = ""];
inline bool DeviceInfo::has_proxyip() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DeviceInfo::set_has_proxyip() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DeviceInfo::clear_has_proxyip() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DeviceInfo::clear_proxyip() {
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_->clear();
  }
  clear_has_proxyip();
}
inline const ::std::string& DeviceInfo::proxyip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.proxyIp)
  return *proxyip_;
}
inline void DeviceInfo::set_proxyip(const ::std::string& value) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.proxyIp)
}
inline void DeviceInfo::set_proxyip(const char* value) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.proxyIp)
}
inline void DeviceInfo::set_proxyip(const char* value, size_t size) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.proxyIp)
}
inline ::std::string* DeviceInfo::mutable_proxyip() {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.proxyIp)
  return proxyip_;
}
inline ::std::string* DeviceInfo::release_proxyip() {
  clear_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyip_;
    proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_proxyip(::std::string* proxyip) {
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyip_;
  }
  if (proxyip) {
    set_has_proxyip();
    proxyip_ = proxyip;
  } else {
    clear_has_proxyip();
    proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.proxyIp)
}

// optional string proxyServiceCode = 26 [default = ""];
inline bool DeviceInfo::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DeviceInfo::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DeviceInfo::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DeviceInfo::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& DeviceInfo::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.proxyServiceCode)
  return *proxyservicecode_;
}
inline void DeviceInfo::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.proxyServiceCode)
}
inline void DeviceInfo::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.proxyServiceCode)
}
inline void DeviceInfo::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.proxyServiceCode)
}
inline ::std::string* DeviceInfo::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* DeviceInfo::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.proxyServiceCode)
}

// optional string deviceSn = 27 [default = ""];
inline bool DeviceInfo::has_devicesn() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DeviceInfo::set_has_devicesn() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DeviceInfo::clear_has_devicesn() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DeviceInfo::clear_devicesn() {
  if (devicesn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicesn_->clear();
  }
  clear_has_devicesn();
}
inline const ::std::string& DeviceInfo::devicesn() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.deviceSn)
  return *devicesn_;
}
inline void DeviceInfo::set_devicesn(const ::std::string& value) {
  set_has_devicesn();
  if (devicesn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicesn_ = new ::std::string;
  }
  devicesn_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.deviceSn)
}
inline void DeviceInfo::set_devicesn(const char* value) {
  set_has_devicesn();
  if (devicesn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicesn_ = new ::std::string;
  }
  devicesn_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.deviceSn)
}
inline void DeviceInfo::set_devicesn(const char* value, size_t size) {
  set_has_devicesn();
  if (devicesn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicesn_ = new ::std::string;
  }
  devicesn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.deviceSn)
}
inline ::std::string* DeviceInfo::mutable_devicesn() {
  set_has_devicesn();
  if (devicesn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicesn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.deviceSn)
  return devicesn_;
}
inline ::std::string* DeviceInfo::release_devicesn() {
  clear_has_devicesn();
  if (devicesn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicesn_;
    devicesn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devicesn(::std::string* devicesn) {
  if (devicesn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicesn_;
  }
  if (devicesn) {
    set_has_devicesn();
    devicesn_ = devicesn;
  } else {
    clear_has_devicesn();
    devicesn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.deviceSn)
}

// optional string cascadeDevCode = 29 [default = ""];
inline bool DeviceInfo::has_cascadedevcode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DeviceInfo::set_has_cascadedevcode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DeviceInfo::clear_has_cascadedevcode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DeviceInfo::clear_cascadedevcode() {
  if (cascadedevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevcode_->clear();
  }
  clear_has_cascadedevcode();
}
inline const ::std::string& DeviceInfo::cascadedevcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.cascadeDevCode)
  return *cascadedevcode_;
}
inline void DeviceInfo::set_cascadedevcode(const ::std::string& value) {
  set_has_cascadedevcode();
  if (cascadedevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevcode_ = new ::std::string;
  }
  cascadedevcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.cascadeDevCode)
}
inline void DeviceInfo::set_cascadedevcode(const char* value) {
  set_has_cascadedevcode();
  if (cascadedevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevcode_ = new ::std::string;
  }
  cascadedevcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.cascadeDevCode)
}
inline void DeviceInfo::set_cascadedevcode(const char* value, size_t size) {
  set_has_cascadedevcode();
  if (cascadedevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevcode_ = new ::std::string;
  }
  cascadedevcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.cascadeDevCode)
}
inline ::std::string* DeviceInfo::mutable_cascadedevcode() {
  set_has_cascadedevcode();
  if (cascadedevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.cascadeDevCode)
  return cascadedevcode_;
}
inline ::std::string* DeviceInfo::release_cascadedevcode() {
  clear_has_cascadedevcode();
  if (cascadedevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cascadedevcode_;
    cascadedevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_cascadedevcode(::std::string* cascadedevcode) {
  if (cascadedevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevcode_;
  }
  if (cascadedevcode) {
    set_has_cascadedevcode();
    cascadedevcode_ = cascadedevcode;
  } else {
    clear_has_cascadedevcode();
    cascadedevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.cascadeDevCode)
}

// optional int32 isOnlie = 30 [default = -1];
inline bool DeviceInfo::has_isonlie() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DeviceInfo::set_has_isonlie() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DeviceInfo::clear_has_isonlie() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DeviceInfo::clear_isonlie() {
  isonlie_ = -1;
  clear_has_isonlie();
}
inline ::google::protobuf::int32 DeviceInfo::isonlie() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.isOnlie)
  return isonlie_;
}
inline void DeviceInfo::set_isonlie(::google::protobuf::int32 value) {
  set_has_isonlie();
  isonlie_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.isOnlie)
}

// optional string cascadeDevDomain = 31 [default = ""];
inline bool DeviceInfo::has_cascadedevdomain() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DeviceInfo::set_has_cascadedevdomain() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DeviceInfo::clear_has_cascadedevdomain() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DeviceInfo::clear_cascadedevdomain() {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_->clear();
  }
  clear_has_cascadedevdomain();
}
inline const ::std::string& DeviceInfo::cascadedevdomain() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
  return *cascadedevdomain_;
}
inline void DeviceInfo::set_cascadedevdomain(const ::std::string& value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
}
inline void DeviceInfo::set_cascadedevdomain(const char* value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
}
inline void DeviceInfo::set_cascadedevdomain(const char* value, size_t size) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
}
inline ::std::string* DeviceInfo::mutable_cascadedevdomain() {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
  return cascadedevdomain_;
}
inline ::std::string* DeviceInfo::release_cascadedevdomain() {
  clear_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cascadedevdomain_;
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_cascadedevdomain(::std::string* cascadedevdomain) {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (cascadedevdomain) {
    set_has_cascadedevdomain();
    cascadedevdomain_ = cascadedevdomain;
  } else {
    clear_has_cascadedevdomain();
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.cascadeDevDomain)
}

// optional string devDomain = 32 [default = ""];
inline bool DeviceInfo::has_devdomain() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DeviceInfo::set_has_devdomain() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DeviceInfo::clear_has_devdomain() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DeviceInfo::clear_devdomain() {
  if (devdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devdomain_->clear();
  }
  clear_has_devdomain();
}
inline const ::std::string& DeviceInfo::devdomain() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfo.devDomain)
  return *devdomain_;
}
inline void DeviceInfo::set_devdomain(const ::std::string& value) {
  set_has_devdomain();
  if (devdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devdomain_ = new ::std::string;
  }
  devdomain_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.DeviceInfo.devDomain)
}
inline void DeviceInfo::set_devdomain(const char* value) {
  set_has_devdomain();
  if (devdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devdomain_ = new ::std::string;
  }
  devdomain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.DeviceInfo.devDomain)
}
inline void DeviceInfo::set_devdomain(const char* value, size_t size) {
  set_has_devdomain();
  if (devdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devdomain_ = new ::std::string;
  }
  devdomain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.DeviceInfo.devDomain)
}
inline ::std::string* DeviceInfo::mutable_devdomain() {
  set_has_devdomain();
  if (devdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devdomain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfo.devDomain)
  return devdomain_;
}
inline ::std::string* DeviceInfo::release_devdomain() {
  clear_has_devdomain();
  if (devdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devdomain_;
    devdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_devdomain(::std::string* devdomain) {
  if (devdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devdomain_;
  }
  if (devdomain) {
    set_has_devdomain();
    devdomain_ = devdomain;
  } else {
    clear_has_devdomain();
    devdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.DeviceInfo.devDomain)
}

// -------------------------------------------------------------------

// EncodeChnnelInfo

// optional int64 id = 1 [default = -1];
inline bool EncodeChnnelInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncodeChnnelInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncodeChnnelInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncodeChnnelInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 EncodeChnnelInfo::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.id)
  return id_;
}
inline void EncodeChnnelInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.id)
}

// optional string channelId = 2 [default = ""];
inline bool EncodeChnnelInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncodeChnnelInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncodeChnnelInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncodeChnnelInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& EncodeChnnelInfo::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.channelId)
  return *channelid_;
}
inline void EncodeChnnelInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.channelId)
}
inline void EncodeChnnelInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.channelId)
}
inline void EncodeChnnelInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.channelId)
}
inline ::std::string* EncodeChnnelInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.channelId)
  return channelid_;
}
inline ::std::string* EncodeChnnelInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.channelId)
}

// optional string name = 3 [default = ""];
inline bool EncodeChnnelInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncodeChnnelInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EncodeChnnelInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EncodeChnnelInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EncodeChnnelInfo::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.name)
  return *name_;
}
inline void EncodeChnnelInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.name)
}
inline void EncodeChnnelInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.name)
}
inline void EncodeChnnelInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.name)
}
inline ::std::string* EncodeChnnelInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.name)
  return name_;
}
inline ::std::string* EncodeChnnelInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.name)
}

// optional string describe = 4 [default = ""];
inline bool EncodeChnnelInfo::has_describe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EncodeChnnelInfo::set_has_describe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EncodeChnnelInfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EncodeChnnelInfo::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& EncodeChnnelInfo::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.describe)
  return *describe_;
}
inline void EncodeChnnelInfo::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.describe)
}
inline void EncodeChnnelInfo::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.describe)
}
inline void EncodeChnnelInfo::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.describe)
}
inline ::std::string* EncodeChnnelInfo::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.describe)
  return describe_;
}
inline ::std::string* EncodeChnnelInfo::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.describe)
}

// optional string devCode = 5 [default = ""];
inline bool EncodeChnnelInfo::has_devcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EncodeChnnelInfo::set_has_devcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EncodeChnnelInfo::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EncodeChnnelInfo::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& EncodeChnnelInfo::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.devCode)
  return *devcode_;
}
inline void EncodeChnnelInfo::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.devCode)
}
inline void EncodeChnnelInfo::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.devCode)
}
inline void EncodeChnnelInfo::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.devCode)
}
inline ::std::string* EncodeChnnelInfo::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.devCode)
  return devcode_;
}
inline ::std::string* EncodeChnnelInfo::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.devCode)
}

// optional int32 channelSeq = 6 [default = -1];
inline bool EncodeChnnelInfo::has_channelseq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EncodeChnnelInfo::set_has_channelseq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EncodeChnnelInfo::clear_has_channelseq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EncodeChnnelInfo::clear_channelseq() {
  channelseq_ = -1;
  clear_has_channelseq();
}
inline ::google::protobuf::int32 EncodeChnnelInfo::channelseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.channelSeq)
  return channelseq_;
}
inline void EncodeChnnelInfo::set_channelseq(::google::protobuf::int32 value) {
  set_has_channelseq();
  channelseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.channelSeq)
}

// optional int32 unitSeq = 7 [default = -1];
inline bool EncodeChnnelInfo::has_unitseq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EncodeChnnelInfo::set_has_unitseq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EncodeChnnelInfo::clear_has_unitseq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EncodeChnnelInfo::clear_unitseq() {
  unitseq_ = -1;
  clear_has_unitseq();
}
inline ::google::protobuf::int32 EncodeChnnelInfo::unitseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.unitSeq)
  return unitseq_;
}
inline void EncodeChnnelInfo::set_unitseq(::google::protobuf::int32 value) {
  set_has_unitseq();
  unitseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.unitSeq)
}

// optional string type = 8 [default = ""];
inline bool EncodeChnnelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EncodeChnnelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EncodeChnnelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EncodeChnnelInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& EncodeChnnelInfo::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.type)
  return *type_;
}
inline void EncodeChnnelInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.type)
}
inline void EncodeChnnelInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.type)
}
inline void EncodeChnnelInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.type)
}
inline ::std::string* EncodeChnnelInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.type)
  return type_;
}
inline ::std::string* EncodeChnnelInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.type)
}

// optional string cameraType = 9 [default = ""];
inline bool EncodeChnnelInfo::has_cameratype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EncodeChnnelInfo::set_has_cameratype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EncodeChnnelInfo::clear_has_cameratype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EncodeChnnelInfo::clear_cameratype() {
  if (cameratype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameratype_->clear();
  }
  clear_has_cameratype();
}
inline const ::std::string& EncodeChnnelInfo::cameratype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.cameraType)
  return *cameratype_;
}
inline void EncodeChnnelInfo::set_cameratype(const ::std::string& value) {
  set_has_cameratype();
  if (cameratype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameratype_ = new ::std::string;
  }
  cameratype_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.cameraType)
}
inline void EncodeChnnelInfo::set_cameratype(const char* value) {
  set_has_cameratype();
  if (cameratype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameratype_ = new ::std::string;
  }
  cameratype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.cameraType)
}
inline void EncodeChnnelInfo::set_cameratype(const char* value, size_t size) {
  set_has_cameratype();
  if (cameratype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameratype_ = new ::std::string;
  }
  cameratype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.cameraType)
}
inline ::std::string* EncodeChnnelInfo::mutable_cameratype() {
  set_has_cameratype();
  if (cameratype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameratype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.cameraType)
  return cameratype_;
}
inline ::std::string* EncodeChnnelInfo::release_cameratype() {
  clear_has_cameratype();
  if (cameratype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cameratype_;
    cameratype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_cameratype(::std::string* cameratype) {
  if (cameratype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cameratype_;
  }
  if (cameratype) {
    set_has_cameratype();
    cameratype_ = cameratype;
  } else {
    clear_has_cameratype();
    cameratype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.cameraType)
}

// optional string cameraFunction = 10 [default = ""];
inline bool EncodeChnnelInfo::has_camerafunction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EncodeChnnelInfo::set_has_camerafunction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EncodeChnnelInfo::clear_has_camerafunction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EncodeChnnelInfo::clear_camerafunction() {
  if (camerafunction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerafunction_->clear();
  }
  clear_has_camerafunction();
}
inline const ::std::string& EncodeChnnelInfo::camerafunction() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
  return *camerafunction_;
}
inline void EncodeChnnelInfo::set_camerafunction(const ::std::string& value) {
  set_has_camerafunction();
  if (camerafunction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerafunction_ = new ::std::string;
  }
  camerafunction_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
}
inline void EncodeChnnelInfo::set_camerafunction(const char* value) {
  set_has_camerafunction();
  if (camerafunction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerafunction_ = new ::std::string;
  }
  camerafunction_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
}
inline void EncodeChnnelInfo::set_camerafunction(const char* value, size_t size) {
  set_has_camerafunction();
  if (camerafunction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerafunction_ = new ::std::string;
  }
  camerafunction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
}
inline ::std::string* EncodeChnnelInfo::mutable_camerafunction() {
  set_has_camerafunction();
  if (camerafunction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerafunction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
  return camerafunction_;
}
inline ::std::string* EncodeChnnelInfo::release_camerafunction() {
  clear_has_camerafunction();
  if (camerafunction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camerafunction_;
    camerafunction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_camerafunction(::std::string* camerafunction) {
  if (camerafunction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camerafunction_;
  }
  if (camerafunction) {
    set_has_camerafunction();
    camerafunction_ = camerafunction;
  } else {
    clear_has_camerafunction();
    camerafunction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.cameraFunction)
}

// optional string gps_x = 11 [default = ""];
inline bool EncodeChnnelInfo::has_gps_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EncodeChnnelInfo::set_has_gps_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EncodeChnnelInfo::clear_has_gps_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EncodeChnnelInfo::clear_gps_x() {
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_->clear();
  }
  clear_has_gps_x();
}
inline const ::std::string& EncodeChnnelInfo::gps_x() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.gps_x)
  return *gps_x_;
}
inline void EncodeChnnelInfo::set_gps_x(const ::std::string& value) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.gps_x)
}
inline void EncodeChnnelInfo::set_gps_x(const char* value) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.gps_x)
}
inline void EncodeChnnelInfo::set_gps_x(const char* value, size_t size) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.gps_x)
}
inline ::std::string* EncodeChnnelInfo::mutable_gps_x() {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.gps_x)
  return gps_x_;
}
inline ::std::string* EncodeChnnelInfo::release_gps_x() {
  clear_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gps_x_;
    gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_gps_x(::std::string* gps_x) {
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_x_;
  }
  if (gps_x) {
    set_has_gps_x();
    gps_x_ = gps_x;
  } else {
    clear_has_gps_x();
    gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.gps_x)
}

// optional string gps_y = 12 [default = ""];
inline bool EncodeChnnelInfo::has_gps_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EncodeChnnelInfo::set_has_gps_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EncodeChnnelInfo::clear_has_gps_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EncodeChnnelInfo::clear_gps_y() {
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_->clear();
  }
  clear_has_gps_y();
}
inline const ::std::string& EncodeChnnelInfo::gps_y() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.gps_y)
  return *gps_y_;
}
inline void EncodeChnnelInfo::set_gps_y(const ::std::string& value) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.gps_y)
}
inline void EncodeChnnelInfo::set_gps_y(const char* value) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.gps_y)
}
inline void EncodeChnnelInfo::set_gps_y(const char* value, size_t size) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.gps_y)
}
inline ::std::string* EncodeChnnelInfo::mutable_gps_y() {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.gps_y)
  return gps_y_;
}
inline ::std::string* EncodeChnnelInfo::release_gps_y() {
  clear_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gps_y_;
    gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_gps_y(::std::string* gps_y) {
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_y_;
  }
  if (gps_y) {
    set_has_gps_y();
    gps_y_ = gps_y;
  } else {
    clear_has_gps_y();
    gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.gps_y)
}

// optional int64 mapId = 13 [default = -1];
inline bool EncodeChnnelInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EncodeChnnelInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EncodeChnnelInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EncodeChnnelInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(-1);
  clear_has_mapid();
}
inline ::google::protobuf::int64 EncodeChnnelInfo::mapid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.mapId)
  return mapid_;
}
inline void EncodeChnnelInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.mapId)
}

// optional int64 domainId = 14 [default = -1];
inline bool EncodeChnnelInfo::has_domainid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EncodeChnnelInfo::set_has_domainid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EncodeChnnelInfo::clear_has_domainid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EncodeChnnelInfo::clear_domainid() {
  domainid_ = GOOGLE_LONGLONG(-1);
  clear_has_domainid();
}
inline ::google::protobuf::int64 EncodeChnnelInfo::domainid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.domainId)
  return domainid_;
}
inline void EncodeChnnelInfo::set_domainid(::google::protobuf::int64 value) {
  set_has_domainid();
  domainid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.domainId)
}

// optional string memo = 15 [default = ""];
inline bool EncodeChnnelInfo::has_memo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EncodeChnnelInfo::set_has_memo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EncodeChnnelInfo::clear_has_memo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EncodeChnnelInfo::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& EncodeChnnelInfo::memo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.memo)
  return *memo_;
}
inline void EncodeChnnelInfo::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.memo)
}
inline void EncodeChnnelInfo::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.memo)
}
inline void EncodeChnnelInfo::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.memo)
}
inline ::std::string* EncodeChnnelInfo::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.memo)
  return memo_;
}
inline ::std::string* EncodeChnnelInfo::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.memo)
}

// optional int32 stat = 16 [default = -1];
inline bool EncodeChnnelInfo::has_stat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EncodeChnnelInfo::set_has_stat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EncodeChnnelInfo::clear_has_stat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EncodeChnnelInfo::clear_stat() {
  stat_ = -1;
  clear_has_stat();
}
inline ::google::protobuf::int32 EncodeChnnelInfo::stat() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.stat)
  return stat_;
}
inline void EncodeChnnelInfo::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.stat)
}

// optional string multicastIp = 17 [default = ""];
inline bool EncodeChnnelInfo::has_multicastip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EncodeChnnelInfo::set_has_multicastip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EncodeChnnelInfo::clear_has_multicastip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EncodeChnnelInfo::clear_multicastip() {
  if (multicastip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    multicastip_->clear();
  }
  clear_has_multicastip();
}
inline const ::std::string& EncodeChnnelInfo::multicastip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
  return *multicastip_;
}
inline void EncodeChnnelInfo::set_multicastip(const ::std::string& value) {
  set_has_multicastip();
  if (multicastip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    multicastip_ = new ::std::string;
  }
  multicastip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
}
inline void EncodeChnnelInfo::set_multicastip(const char* value) {
  set_has_multicastip();
  if (multicastip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    multicastip_ = new ::std::string;
  }
  multicastip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
}
inline void EncodeChnnelInfo::set_multicastip(const char* value, size_t size) {
  set_has_multicastip();
  if (multicastip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    multicastip_ = new ::std::string;
  }
  multicastip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
}
inline ::std::string* EncodeChnnelInfo::mutable_multicastip() {
  set_has_multicastip();
  if (multicastip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    multicastip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
  return multicastip_;
}
inline ::std::string* EncodeChnnelInfo::release_multicastip() {
  clear_has_multicastip();
  if (multicastip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = multicastip_;
    multicastip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_multicastip(::std::string* multicastip) {
  if (multicastip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete multicastip_;
  }
  if (multicastip) {
    set_has_multicastip();
    multicastip_ = multicastip;
  } else {
    clear_has_multicastip();
    multicastip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.multicastIp)
}

// optional int32 multicastPort = 18 [default = -1];
inline bool EncodeChnnelInfo::has_multicastport() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EncodeChnnelInfo::set_has_multicastport() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EncodeChnnelInfo::clear_has_multicastport() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EncodeChnnelInfo::clear_multicastport() {
  multicastport_ = -1;
  clear_has_multicastport();
}
inline ::google::protobuf::int32 EncodeChnnelInfo::multicastport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.multicastPort)
  return multicastport_;
}
inline void EncodeChnnelInfo::set_multicastport(::google::protobuf::int32 value) {
  set_has_multicastport();
  multicastport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.multicastPort)
}

// optional string ipcIp = 19 [default = ""];
inline bool EncodeChnnelInfo::has_ipcip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EncodeChnnelInfo::set_has_ipcip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EncodeChnnelInfo::clear_has_ipcip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EncodeChnnelInfo::clear_ipcip() {
  if (ipcip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipcip_->clear();
  }
  clear_has_ipcip();
}
inline const ::std::string& EncodeChnnelInfo::ipcip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
  return *ipcip_;
}
inline void EncodeChnnelInfo::set_ipcip(const ::std::string& value) {
  set_has_ipcip();
  if (ipcip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipcip_ = new ::std::string;
  }
  ipcip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
}
inline void EncodeChnnelInfo::set_ipcip(const char* value) {
  set_has_ipcip();
  if (ipcip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipcip_ = new ::std::string;
  }
  ipcip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
}
inline void EncodeChnnelInfo::set_ipcip(const char* value, size_t size) {
  set_has_ipcip();
  if (ipcip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipcip_ = new ::std::string;
  }
  ipcip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
}
inline ::std::string* EncodeChnnelInfo::mutable_ipcip() {
  set_has_ipcip();
  if (ipcip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipcip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
  return ipcip_;
}
inline ::std::string* EncodeChnnelInfo::release_ipcip() {
  clear_has_ipcip();
  if (ipcip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipcip_;
    ipcip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_ipcip(::std::string* ipcip) {
  if (ipcip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipcip_;
  }
  if (ipcip) {
    set_has_ipcip();
    ipcip_ = ipcip;
  } else {
    clear_has_ipcip();
    ipcip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.ipcIp)
}

// optional int32 iconDirection = 20 [default = -1];
inline bool EncodeChnnelInfo::has_icondirection() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EncodeChnnelInfo::set_has_icondirection() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EncodeChnnelInfo::clear_has_icondirection() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EncodeChnnelInfo::clear_icondirection() {
  icondirection_ = -1;
  clear_has_icondirection();
}
inline ::google::protobuf::int32 EncodeChnnelInfo::icondirection() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.iconDirection)
  return icondirection_;
}
inline void EncodeChnnelInfo::set_icondirection(::google::protobuf::int32 value) {
  set_has_icondirection();
  icondirection_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.iconDirection)
}

// optional string regionCode = 21 [default = ""];
inline bool EncodeChnnelInfo::has_regioncode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EncodeChnnelInfo::set_has_regioncode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EncodeChnnelInfo::clear_has_regioncode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EncodeChnnelInfo::clear_regioncode() {
  if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncode_->clear();
  }
  clear_has_regioncode();
}
inline const ::std::string& EncodeChnnelInfo::regioncode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EncodeChnnelInfo.regionCode)
  return *regioncode_;
}
inline void EncodeChnnelInfo::set_regioncode(const ::std::string& value) {
  set_has_regioncode();
  if (regioncode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncode_ = new ::std::string;
  }
  regioncode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EncodeChnnelInfo.regionCode)
}
inline void EncodeChnnelInfo::set_regioncode(const char* value) {
  set_has_regioncode();
  if (regioncode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncode_ = new ::std::string;
  }
  regioncode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EncodeChnnelInfo.regionCode)
}
inline void EncodeChnnelInfo::set_regioncode(const char* value, size_t size) {
  set_has_regioncode();
  if (regioncode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncode_ = new ::std::string;
  }
  regioncode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EncodeChnnelInfo.regionCode)
}
inline ::std::string* EncodeChnnelInfo::mutable_regioncode() {
  set_has_regioncode();
  if (regioncode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EncodeChnnelInfo.regionCode)
  return regioncode_;
}
inline ::std::string* EncodeChnnelInfo::release_regioncode() {
  clear_has_regioncode();
  if (regioncode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = regioncode_;
    regioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncodeChnnelInfo::set_allocated_regioncode(::std::string* regioncode) {
  if (regioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regioncode_;
  }
  if (regioncode) {
    set_has_regioncode();
    regioncode_ = regioncode;
  } else {
    clear_has_regioncode();
    regioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EncodeChnnelInfo.regionCode)
}

// -------------------------------------------------------------------

// AlarmInChannelInfo

// optional int64 id = 1 [default = -1];
inline bool AlarmInChannelInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmInChannelInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmInChannelInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmInChannelInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 AlarmInChannelInfo::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.id)
  return id_;
}
inline void AlarmInChannelInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.id)
}

// optional string devCode = 2 [default = ""];
inline bool AlarmInChannelInfo::has_devcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmInChannelInfo::set_has_devcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmInChannelInfo::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmInChannelInfo::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& AlarmInChannelInfo::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.devCode)
  return *devcode_;
}
inline void AlarmInChannelInfo::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.devCode)
}
inline void AlarmInChannelInfo::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.devCode)
}
inline void AlarmInChannelInfo::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.devCode)
}
inline ::std::string* AlarmInChannelInfo::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.devCode)
  return devcode_;
}
inline ::std::string* AlarmInChannelInfo::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.devCode)
}

// optional int32 unitSeq = 3 [default = -1];
inline bool AlarmInChannelInfo::has_unitseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmInChannelInfo::set_has_unitseq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmInChannelInfo::clear_has_unitseq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmInChannelInfo::clear_unitseq() {
  unitseq_ = -1;
  clear_has_unitseq();
}
inline ::google::protobuf::int32 AlarmInChannelInfo::unitseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.unitSeq)
  return unitseq_;
}
inline void AlarmInChannelInfo::set_unitseq(::google::protobuf::int32 value) {
  set_has_unitseq();
  unitseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.unitSeq)
}

// optional int32 channelSeq = 4 [default = -1];
inline bool AlarmInChannelInfo::has_channelseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmInChannelInfo::set_has_channelseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmInChannelInfo::clear_has_channelseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmInChannelInfo::clear_channelseq() {
  channelseq_ = -1;
  clear_has_channelseq();
}
inline ::google::protobuf::int32 AlarmInChannelInfo::channelseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.channelSeq)
  return channelseq_;
}
inline void AlarmInChannelInfo::set_channelseq(::google::protobuf::int32 value) {
  set_has_channelseq();
  channelseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.channelSeq)
}

// optional string channelName = 5 [default = ""];
inline bool AlarmInChannelInfo::has_channelname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmInChannelInfo::set_has_channelname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmInChannelInfo::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmInChannelInfo::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& AlarmInChannelInfo::channelname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.channelName)
  return *channelname_;
}
inline void AlarmInChannelInfo::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.channelName)
}
inline void AlarmInChannelInfo::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.channelName)
}
inline void AlarmInChannelInfo::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.channelName)
}
inline ::std::string* AlarmInChannelInfo::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.channelName)
  return channelname_;
}
inline ::std::string* AlarmInChannelInfo::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.channelName)
}

// optional string alarmType = 6 [default = ""];
inline bool AlarmInChannelInfo::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmInChannelInfo::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmInChannelInfo::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmInChannelInfo::clear_alarmtype() {
  if (alarmtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmtype_->clear();
  }
  clear_has_alarmtype();
}
inline const ::std::string& AlarmInChannelInfo::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.alarmType)
  return *alarmtype_;
}
inline void AlarmInChannelInfo::set_alarmtype(const ::std::string& value) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.alarmType)
}
inline void AlarmInChannelInfo::set_alarmtype(const char* value) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.alarmType)
}
inline void AlarmInChannelInfo::set_alarmtype(const char* value, size_t size) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.alarmType)
}
inline ::std::string* AlarmInChannelInfo::mutable_alarmtype() {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.alarmType)
  return alarmtype_;
}
inline ::std::string* AlarmInChannelInfo::release_alarmtype() {
  clear_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarmtype_;
    alarmtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_alarmtype(::std::string* alarmtype) {
  if (alarmtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmtype_;
  }
  if (alarmtype) {
    set_has_alarmtype();
    alarmtype_ = alarmtype;
  } else {
    clear_has_alarmtype();
    alarmtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.alarmType)
}

// optional string alarmGrade = 7 [default = ""];
inline bool AlarmInChannelInfo::has_alarmgrade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlarmInChannelInfo::set_has_alarmgrade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlarmInChannelInfo::clear_has_alarmgrade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlarmInChannelInfo::clear_alarmgrade() {
  if (alarmgrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmgrade_->clear();
  }
  clear_has_alarmgrade();
}
inline const ::std::string& AlarmInChannelInfo::alarmgrade() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
  return *alarmgrade_;
}
inline void AlarmInChannelInfo::set_alarmgrade(const ::std::string& value) {
  set_has_alarmgrade();
  if (alarmgrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmgrade_ = new ::std::string;
  }
  alarmgrade_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
}
inline void AlarmInChannelInfo::set_alarmgrade(const char* value) {
  set_has_alarmgrade();
  if (alarmgrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmgrade_ = new ::std::string;
  }
  alarmgrade_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
}
inline void AlarmInChannelInfo::set_alarmgrade(const char* value, size_t size) {
  set_has_alarmgrade();
  if (alarmgrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmgrade_ = new ::std::string;
  }
  alarmgrade_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
}
inline ::std::string* AlarmInChannelInfo::mutable_alarmgrade() {
  set_has_alarmgrade();
  if (alarmgrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmgrade_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
  return alarmgrade_;
}
inline ::std::string* AlarmInChannelInfo::release_alarmgrade() {
  clear_has_alarmgrade();
  if (alarmgrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarmgrade_;
    alarmgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_alarmgrade(::std::string* alarmgrade) {
  if (alarmgrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmgrade_;
  }
  if (alarmgrade) {
    set_has_alarmgrade();
    alarmgrade_ = alarmgrade;
  } else {
    clear_has_alarmgrade();
    alarmgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.alarmGrade)
}

// optional string gps_x = 8 [default = ""];
inline bool AlarmInChannelInfo::has_gps_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlarmInChannelInfo::set_has_gps_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlarmInChannelInfo::clear_has_gps_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlarmInChannelInfo::clear_gps_x() {
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_->clear();
  }
  clear_has_gps_x();
}
inline const ::std::string& AlarmInChannelInfo::gps_x() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.gps_x)
  return *gps_x_;
}
inline void AlarmInChannelInfo::set_gps_x(const ::std::string& value) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.gps_x)
}
inline void AlarmInChannelInfo::set_gps_x(const char* value) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.gps_x)
}
inline void AlarmInChannelInfo::set_gps_x(const char* value, size_t size) {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  gps_x_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.gps_x)
}
inline ::std::string* AlarmInChannelInfo::mutable_gps_x() {
  set_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_x_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.gps_x)
  return gps_x_;
}
inline ::std::string* AlarmInChannelInfo::release_gps_x() {
  clear_has_gps_x();
  if (gps_x_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gps_x_;
    gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_gps_x(::std::string* gps_x) {
  if (gps_x_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_x_;
  }
  if (gps_x) {
    set_has_gps_x();
    gps_x_ = gps_x;
  } else {
    clear_has_gps_x();
    gps_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.gps_x)
}

// optional string gps_y = 9 [default = ""];
inline bool AlarmInChannelInfo::has_gps_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlarmInChannelInfo::set_has_gps_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlarmInChannelInfo::clear_has_gps_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlarmInChannelInfo::clear_gps_y() {
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_->clear();
  }
  clear_has_gps_y();
}
inline const ::std::string& AlarmInChannelInfo::gps_y() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.gps_y)
  return *gps_y_;
}
inline void AlarmInChannelInfo::set_gps_y(const ::std::string& value) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.gps_y)
}
inline void AlarmInChannelInfo::set_gps_y(const char* value) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.gps_y)
}
inline void AlarmInChannelInfo::set_gps_y(const char* value, size_t size) {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  gps_y_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.gps_y)
}
inline ::std::string* AlarmInChannelInfo::mutable_gps_y() {
  set_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gps_y_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.gps_y)
  return gps_y_;
}
inline ::std::string* AlarmInChannelInfo::release_gps_y() {
  clear_has_gps_y();
  if (gps_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gps_y_;
    gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_gps_y(::std::string* gps_y) {
  if (gps_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_y_;
  }
  if (gps_y) {
    set_has_gps_y();
    gps_y_ = gps_y;
  } else {
    clear_has_gps_y();
    gps_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.gps_y)
}

// optional int64 mapId = 10 [default = -1];
inline bool AlarmInChannelInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AlarmInChannelInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AlarmInChannelInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AlarmInChannelInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(-1);
  clear_has_mapid();
}
inline ::google::protobuf::int64 AlarmInChannelInfo::mapid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.mapId)
  return mapid_;
}
inline void AlarmInChannelInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.mapId)
}

// optional int64 domainId = 11 [default = -1];
inline bool AlarmInChannelInfo::has_domainid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AlarmInChannelInfo::set_has_domainid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AlarmInChannelInfo::clear_has_domainid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AlarmInChannelInfo::clear_domainid() {
  domainid_ = GOOGLE_LONGLONG(-1);
  clear_has_domainid();
}
inline ::google::protobuf::int64 AlarmInChannelInfo::domainid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.domainId)
  return domainid_;
}
inline void AlarmInChannelInfo::set_domainid(::google::protobuf::int64 value) {
  set_has_domainid();
  domainid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.domainId)
}

// optional string memo = 12 [default = ""];
inline bool AlarmInChannelInfo::has_memo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AlarmInChannelInfo::set_has_memo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AlarmInChannelInfo::clear_has_memo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AlarmInChannelInfo::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& AlarmInChannelInfo::memo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.memo)
  return *memo_;
}
inline void AlarmInChannelInfo::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.memo)
}
inline void AlarmInChannelInfo::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmInChannelInfo.memo)
}
inline void AlarmInChannelInfo::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmInChannelInfo.memo)
}
inline ::std::string* AlarmInChannelInfo::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmInChannelInfo.memo)
  return memo_;
}
inline ::std::string* AlarmInChannelInfo::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInChannelInfo::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmInChannelInfo.memo)
}

// optional int32 state = 13 [default = -1];
inline bool AlarmInChannelInfo::has_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AlarmInChannelInfo::set_has_state() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AlarmInChannelInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AlarmInChannelInfo::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 AlarmInChannelInfo::state() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmInChannelInfo.state)
  return state_;
}
inline void AlarmInChannelInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmInChannelInfo.state)
}

// -------------------------------------------------------------------

// ReqDeviceOpr

// optional string devCode = 1 [default = ""];
inline bool ReqDeviceOpr::has_devcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDeviceOpr::set_has_devcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDeviceOpr::clear_has_devcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDeviceOpr::clear_devcode() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_->clear();
  }
  clear_has_devcode();
}
inline const ::std::string& ReqDeviceOpr::devcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.devCode)
  return *devcode_;
}
inline void ReqDeviceOpr::set_devcode(const ::std::string& value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.devCode)
}
inline void ReqDeviceOpr::set_devcode(const char* value) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.devCode)
}
inline void ReqDeviceOpr::set_devcode(const char* value, size_t size) {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  devcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.devCode)
}
inline ::std::string* ReqDeviceOpr::mutable_devcode() {
  set_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.devCode)
  return devcode_;
}
inline ::std::string* ReqDeviceOpr::release_devcode() {
  clear_has_devcode();
  if (devcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devcode_;
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_devcode(::std::string* devcode) {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (devcode) {
    set_has_devcode();
    devcode_ = devcode;
  } else {
    clear_has_devcode();
    devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.devCode)
}

// optional string channelId = 2 [default = ""];
inline bool ReqDeviceOpr::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDeviceOpr::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDeviceOpr::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDeviceOpr::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& ReqDeviceOpr::channelid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.channelId)
  return *channelid_;
}
inline void ReqDeviceOpr::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.channelId)
}
inline void ReqDeviceOpr::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.channelId)
}
inline void ReqDeviceOpr::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.channelId)
}
inline ::std::string* ReqDeviceOpr::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.channelId)
  return channelid_;
}
inline ::std::string* ReqDeviceOpr::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.channelId)
}

// optional int32 devType = 3 [default = -1];
inline bool ReqDeviceOpr::has_devtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqDeviceOpr::set_has_devtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqDeviceOpr::clear_has_devtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqDeviceOpr::clear_devtype() {
  devtype_ = -1;
  clear_has_devtype();
}
inline ::google::protobuf::int32 ReqDeviceOpr::devtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.devType)
  return devtype_;
}
inline void ReqDeviceOpr::set_devtype(::google::protobuf::int32 value) {
  set_has_devtype();
  devtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.devType)
}

// optional int32 mountType = 4 [default = -1];
inline bool ReqDeviceOpr::has_mounttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqDeviceOpr::set_has_mounttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqDeviceOpr::clear_has_mounttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqDeviceOpr::clear_mounttype() {
  mounttype_ = -1;
  clear_has_mounttype();
}
inline ::google::protobuf::int32 ReqDeviceOpr::mounttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.mountType)
  return mounttype_;
}
inline void ReqDeviceOpr::set_mounttype(::google::protobuf::int32 value) {
  set_has_mounttype();
  mounttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.mountType)
}

// optional string serviceId = 5 [default = ""];
inline bool ReqDeviceOpr::has_serviceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqDeviceOpr::set_has_serviceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqDeviceOpr::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqDeviceOpr::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& ReqDeviceOpr::serviceid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.serviceId)
  return *serviceid_;
}
inline void ReqDeviceOpr::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.serviceId)
}
inline void ReqDeviceOpr::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.serviceId)
}
inline void ReqDeviceOpr::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.serviceId)
}
inline ::std::string* ReqDeviceOpr::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.serviceId)
  return serviceid_;
}
inline ::std::string* ReqDeviceOpr::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.serviceId)
}

// optional string upDeviceCode = 6 [default = ""];
inline bool ReqDeviceOpr::has_updevicecode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqDeviceOpr::set_has_updevicecode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqDeviceOpr::clear_has_updevicecode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqDeviceOpr::clear_updevicecode() {
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_->clear();
  }
  clear_has_updevicecode();
}
inline const ::std::string& ReqDeviceOpr::updevicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
  return *updevicecode_;
}
inline void ReqDeviceOpr::set_updevicecode(const ::std::string& value) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
}
inline void ReqDeviceOpr::set_updevicecode(const char* value) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
}
inline void ReqDeviceOpr::set_updevicecode(const char* value, size_t size) {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  updevicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
}
inline ::std::string* ReqDeviceOpr::mutable_updevicecode() {
  set_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updevicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
  return updevicecode_;
}
inline ::std::string* ReqDeviceOpr::release_updevicecode() {
  clear_has_updevicecode();
  if (updevicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updevicecode_;
    updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_updevicecode(::std::string* updevicecode) {
  if (updevicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevicecode_;
  }
  if (updevicecode) {
    set_has_updevicecode();
    updevicecode_ = updevicecode;
  } else {
    clear_has_updevicecode();
    updevicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.upDeviceCode)
}

// optional int32 doType = 7 [default = -1];
inline bool ReqDeviceOpr::has_dotype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqDeviceOpr::set_has_dotype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqDeviceOpr::clear_has_dotype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqDeviceOpr::clear_dotype() {
  dotype_ = -1;
  clear_has_dotype();
}
inline ::google::protobuf::int32 ReqDeviceOpr::dotype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.doType)
  return dotype_;
}
inline void ReqDeviceOpr::set_dotype(::google::protobuf::int32 value) {
  set_has_dotype();
  dotype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.doType)
}

// optional int64 stepWith = 8 [default = -1];
inline bool ReqDeviceOpr::has_stepwith() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqDeviceOpr::set_has_stepwith() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqDeviceOpr::clear_has_stepwith() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqDeviceOpr::clear_stepwith() {
  stepwith_ = GOOGLE_LONGLONG(-1);
  clear_has_stepwith();
}
inline ::google::protobuf::int64 ReqDeviceOpr::stepwith() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.stepWith)
  return stepwith_;
}
inline void ReqDeviceOpr::set_stepwith(::google::protobuf::int64 value) {
  set_has_stepwith();
  stepwith_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.stepWith)
}

// optional int64 stepHight = 9 [default = -1];
inline bool ReqDeviceOpr::has_stephight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqDeviceOpr::set_has_stephight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqDeviceOpr::clear_has_stephight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqDeviceOpr::clear_stephight() {
  stephight_ = GOOGLE_LONGLONG(-1);
  clear_has_stephight();
}
inline ::google::protobuf::int64 ReqDeviceOpr::stephight() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.stepHight)
  return stephight_;
}
inline void ReqDeviceOpr::set_stephight(::google::protobuf::int64 value) {
  set_has_stephight();
  stephight_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.stepHight)
}

// optional string cascadeDevDomain = 10 [default = ""];
inline bool ReqDeviceOpr::has_cascadedevdomain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqDeviceOpr::set_has_cascadedevdomain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqDeviceOpr::clear_has_cascadedevdomain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqDeviceOpr::clear_cascadedevdomain() {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_->clear();
  }
  clear_has_cascadedevdomain();
}
inline const ::std::string& ReqDeviceOpr::cascadedevdomain() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
  return *cascadedevdomain_;
}
inline void ReqDeviceOpr::set_cascadedevdomain(const ::std::string& value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
}
inline void ReqDeviceOpr::set_cascadedevdomain(const char* value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
}
inline void ReqDeviceOpr::set_cascadedevdomain(const char* value, size_t size) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
}
inline ::std::string* ReqDeviceOpr::mutable_cascadedevdomain() {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
  return cascadedevdomain_;
}
inline ::std::string* ReqDeviceOpr::release_cascadedevdomain() {
  clear_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cascadedevdomain_;
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_cascadedevdomain(::std::string* cascadedevdomain) {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (cascadedevdomain) {
    set_has_cascadedevdomain();
    cascadedevdomain_ = cascadedevdomain;
  } else {
    clear_has_cascadedevdomain();
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.cascadeDevDomain)
}

// optional int32 reqestType = 11 [default = -1];
inline bool ReqDeviceOpr::has_reqesttype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqDeviceOpr::set_has_reqesttype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqDeviceOpr::clear_has_reqesttype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqDeviceOpr::clear_reqesttype() {
  reqesttype_ = -1;
  clear_has_reqesttype();
}
inline ::google::protobuf::int32 ReqDeviceOpr::reqesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.reqestType)
  return reqesttype_;
}
inline void ReqDeviceOpr::set_reqesttype(::google::protobuf::int32 value) {
  set_has_reqesttype();
  reqesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.reqestType)
}

// optional string proxyIp = 12 [default = ""];
inline bool ReqDeviceOpr::has_proxyip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqDeviceOpr::set_has_proxyip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqDeviceOpr::clear_has_proxyip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqDeviceOpr::clear_proxyip() {
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_->clear();
  }
  clear_has_proxyip();
}
inline const ::std::string& ReqDeviceOpr::proxyip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.proxyIp)
  return *proxyip_;
}
inline void ReqDeviceOpr::set_proxyip(const ::std::string& value) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.proxyIp)
}
inline void ReqDeviceOpr::set_proxyip(const char* value) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.proxyIp)
}
inline void ReqDeviceOpr::set_proxyip(const char* value, size_t size) {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  proxyip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.proxyIp)
}
inline ::std::string* ReqDeviceOpr::mutable_proxyip() {
  set_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.proxyIp)
  return proxyip_;
}
inline ::std::string* ReqDeviceOpr::release_proxyip() {
  clear_has_proxyip();
  if (proxyip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyip_;
    proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_proxyip(::std::string* proxyip) {
  if (proxyip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyip_;
  }
  if (proxyip) {
    set_has_proxyip();
    proxyip_ = proxyip;
  } else {
    clear_has_proxyip();
    proxyip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.proxyIp)
}

// optional int32 proxyPort = 13 [default = 0];
inline bool ReqDeviceOpr::has_proxyport() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReqDeviceOpr::set_has_proxyport() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReqDeviceOpr::clear_has_proxyport() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReqDeviceOpr::clear_proxyport() {
  proxyport_ = 0;
  clear_has_proxyport();
}
inline ::google::protobuf::int32 ReqDeviceOpr::proxyport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.proxyPort)
  return proxyport_;
}
inline void ReqDeviceOpr::set_proxyport(::google::protobuf::int32 value) {
  set_has_proxyport();
  proxyport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.proxyPort)
}

// optional string proxyServiceCode = 14 [default = ""];
inline bool ReqDeviceOpr::has_proxyservicecode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReqDeviceOpr::set_has_proxyservicecode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReqDeviceOpr::clear_has_proxyservicecode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReqDeviceOpr::clear_proxyservicecode() {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_->clear();
  }
  clear_has_proxyservicecode();
}
inline const ::std::string& ReqDeviceOpr::proxyservicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
  return *proxyservicecode_;
}
inline void ReqDeviceOpr::set_proxyservicecode(const ::std::string& value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
}
inline void ReqDeviceOpr::set_proxyservicecode(const char* value) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
}
inline void ReqDeviceOpr::set_proxyservicecode(const char* value, size_t size) {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  proxyservicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
}
inline ::std::string* ReqDeviceOpr::mutable_proxyservicecode() {
  set_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyservicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
  return proxyservicecode_;
}
inline ::std::string* ReqDeviceOpr::release_proxyservicecode() {
  clear_has_proxyservicecode();
  if (proxyservicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyservicecode_;
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_proxyservicecode(::std::string* proxyservicecode) {
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (proxyservicecode) {
    set_has_proxyservicecode();
    proxyservicecode_ = proxyservicecode;
  } else {
    clear_has_proxyservicecode();
    proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.proxyServiceCode)
}

// optional int32 result = 15 [default = -1];
inline bool ReqDeviceOpr::has_result() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReqDeviceOpr::set_has_result() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReqDeviceOpr::clear_has_result() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReqDeviceOpr::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ReqDeviceOpr::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.result)
  return result_;
}
inline void ReqDeviceOpr::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.result)
}

// optional string resultDescirbe = 16 [default = ""];
inline bool ReqDeviceOpr::has_resultdescirbe() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReqDeviceOpr::set_has_resultdescirbe() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ReqDeviceOpr::clear_has_resultdescirbe() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ReqDeviceOpr::clear_resultdescirbe() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_->clear();
  }
  clear_has_resultdescirbe();
}
inline const ::std::string& ReqDeviceOpr::resultdescirbe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
  return *resultdescirbe_;
}
inline void ReqDeviceOpr::set_resultdescirbe(const ::std::string& value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
}
inline void ReqDeviceOpr::set_resultdescirbe(const char* value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
}
inline void ReqDeviceOpr::set_resultdescirbe(const char* value, size_t size) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
}
inline ::std::string* ReqDeviceOpr::mutable_resultdescirbe() {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
  return resultdescirbe_;
}
inline ::std::string* ReqDeviceOpr::release_resultdescirbe() {
  clear_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescirbe_;
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceOpr::set_allocated_resultdescirbe(::std::string* resultdescirbe) {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (resultdescirbe) {
    set_has_resultdescirbe();
    resultdescirbe_ = resultdescirbe;
  } else {
    clear_has_resultdescirbe();
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceOpr.resultDescirbe)
}

// -------------------------------------------------------------------

// ReportDeviceStatus_ChannelStat

// optional string code = 1 [default = ""];
inline bool ReportDeviceStatus_ChannelStat::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDeviceStatus_ChannelStat::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDeviceStatus_ChannelStat::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDeviceStatus_ChannelStat::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& ReportDeviceStatus_ChannelStat::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
  return *code_;
}
inline void ReportDeviceStatus_ChannelStat::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
}
inline void ReportDeviceStatus_ChannelStat::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
}
inline void ReportDeviceStatus_ChannelStat::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
}
inline ::std::string* ReportDeviceStatus_ChannelStat::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
  return code_;
}
inline ::std::string* ReportDeviceStatus_ChannelStat::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportDeviceStatus_ChannelStat::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportDeviceStatus.ChannelStat.code)
}

// optional int32 seq = 2 [default = -1];
inline bool ReportDeviceStatus_ChannelStat::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportDeviceStatus_ChannelStat::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportDeviceStatus_ChannelStat::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportDeviceStatus_ChannelStat::clear_seq() {
  seq_ = -1;
  clear_has_seq();
}
inline ::google::protobuf::int32 ReportDeviceStatus_ChannelStat::seq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.ChannelStat.seq)
  return seq_;
}
inline void ReportDeviceStatus_ChannelStat::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.ChannelStat.seq)
}

// optional int32 stat = 3 [default = -1];
inline bool ReportDeviceStatus_ChannelStat::has_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportDeviceStatus_ChannelStat::set_has_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportDeviceStatus_ChannelStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportDeviceStatus_ChannelStat::clear_stat() {
  stat_ = -1;
  clear_has_stat();
}
inline ::google::protobuf::int32 ReportDeviceStatus_ChannelStat::stat() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.ChannelStat.stat)
  return stat_;
}
inline void ReportDeviceStatus_ChannelStat::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.ChannelStat.stat)
}

// -------------------------------------------------------------------

// ReportDeviceStatus

// optional string code = 1 [default = ""];
inline bool ReportDeviceStatus::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDeviceStatus::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDeviceStatus::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDeviceStatus::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& ReportDeviceStatus::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.code)
  return *code_;
}
inline void ReportDeviceStatus::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.code)
}
inline void ReportDeviceStatus::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportDeviceStatus.code)
}
inline void ReportDeviceStatus::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportDeviceStatus.code)
}
inline ::std::string* ReportDeviceStatus::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportDeviceStatus.code)
  return code_;
}
inline ::std::string* ReportDeviceStatus::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportDeviceStatus::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportDeviceStatus.code)
}

// optional int32 stat = 2 [default = -1];
inline bool ReportDeviceStatus::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportDeviceStatus::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportDeviceStatus::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportDeviceStatus::clear_stat() {
  stat_ = -1;
  clear_has_stat();
}
inline ::google::protobuf::int32 ReportDeviceStatus::stat() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.stat)
  return stat_;
}
inline void ReportDeviceStatus::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.stat)
}

// repeated .com.arges.file.proto.ReportDeviceStatus.ChannelStat channels = 3;
inline int ReportDeviceStatus::channels_size() const {
  return channels_.size();
}
inline void ReportDeviceStatus::clear_channels() {
  channels_.Clear();
}
inline const ::com::arges::file::proto::ReportDeviceStatus_ChannelStat& ReportDeviceStatus::channels(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.channels)
  return channels_.Get(index);
}
inline ::com::arges::file::proto::ReportDeviceStatus_ChannelStat* ReportDeviceStatus::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportDeviceStatus.channels)
  return channels_.Mutable(index);
}
inline ::com::arges::file::proto::ReportDeviceStatus_ChannelStat* ReportDeviceStatus::add_channels() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReportDeviceStatus.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportDeviceStatus_ChannelStat >&
ReportDeviceStatus::channels() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReportDeviceStatus.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ReportDeviceStatus_ChannelStat >*
ReportDeviceStatus::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReportDeviceStatus.channels)
  return &channels_;
}

// optional string cascadeDevDomain = 4 [default = ""];
inline bool ReportDeviceStatus::has_cascadedevdomain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportDeviceStatus::set_has_cascadedevdomain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportDeviceStatus::clear_has_cascadedevdomain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportDeviceStatus::clear_cascadedevdomain() {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_->clear();
  }
  clear_has_cascadedevdomain();
}
inline const ::std::string& ReportDeviceStatus::cascadedevdomain() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
  return *cascadedevdomain_;
}
inline void ReportDeviceStatus::set_cascadedevdomain(const ::std::string& value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
}
inline void ReportDeviceStatus::set_cascadedevdomain(const char* value) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
}
inline void ReportDeviceStatus::set_cascadedevdomain(const char* value, size_t size) {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  cascadedevdomain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
}
inline ::std::string* ReportDeviceStatus::mutable_cascadedevdomain() {
  set_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cascadedevdomain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
  return cascadedevdomain_;
}
inline ::std::string* ReportDeviceStatus::release_cascadedevdomain() {
  clear_has_cascadedevdomain();
  if (cascadedevdomain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cascadedevdomain_;
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportDeviceStatus::set_allocated_cascadedevdomain(::std::string* cascadedevdomain) {
  if (cascadedevdomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cascadedevdomain_;
  }
  if (cascadedevdomain) {
    set_has_cascadedevdomain();
    cascadedevdomain_ = cascadedevdomain;
  } else {
    clear_has_cascadedevdomain();
    cascadedevdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportDeviceStatus.cascadeDevDomain)
}

// optional string devIp = 5 [default = ""];
inline bool ReportDeviceStatus::has_devip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportDeviceStatus::set_has_devip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportDeviceStatus::clear_has_devip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportDeviceStatus::clear_devip() {
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_->clear();
  }
  clear_has_devip();
}
inline const ::std::string& ReportDeviceStatus::devip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.devIp)
  return *devip_;
}
inline void ReportDeviceStatus::set_devip(const ::std::string& value) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.devIp)
}
inline void ReportDeviceStatus::set_devip(const char* value) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReportDeviceStatus.devIp)
}
inline void ReportDeviceStatus::set_devip(const char* value, size_t size) {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  devip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReportDeviceStatus.devIp)
}
inline ::std::string* ReportDeviceStatus::mutable_devip() {
  set_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReportDeviceStatus.devIp)
  return devip_;
}
inline ::std::string* ReportDeviceStatus::release_devip() {
  clear_has_devip();
  if (devip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devip_;
    devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportDeviceStatus::set_allocated_devip(::std::string* devip) {
  if (devip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devip_;
  }
  if (devip) {
    set_has_devip();
    devip_ = devip;
  } else {
    clear_has_devip();
    devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReportDeviceStatus.devIp)
}

// optional int32 devPort = 6 [default = 0];
inline bool ReportDeviceStatus::has_devport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportDeviceStatus::set_has_devport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportDeviceStatus::clear_has_devport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportDeviceStatus::clear_devport() {
  devport_ = 0;
  clear_has_devport();
}
inline ::google::protobuf::int32 ReportDeviceStatus::devport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReportDeviceStatus.devPort)
  return devport_;
}
inline void ReportDeviceStatus::set_devport(::google::protobuf::int32 value) {
  set_has_devport();
  devport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReportDeviceStatus.devPort)
}

// -------------------------------------------------------------------

// ReqEncodeChannelInfo

// repeated string channelId = 1;
inline int ReqEncodeChannelInfo::channelid_size() const {
  return channelid_.size();
}
inline void ReqEncodeChannelInfo::clear_channelid() {
  channelid_.Clear();
}
inline const ::std::string& ReqEncodeChannelInfo::channelid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
  return channelid_.Get(index);
}
inline ::std::string* ReqEncodeChannelInfo::mutable_channelid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
  return channelid_.Mutable(index);
}
inline void ReqEncodeChannelInfo::set_channelid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
  channelid_.Mutable(index)->assign(value);
}
inline void ReqEncodeChannelInfo::set_channelid(int index, const char* value) {
  channelid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
}
inline void ReqEncodeChannelInfo::set_channelid(int index, const char* value, size_t size) {
  channelid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
}
inline ::std::string* ReqEncodeChannelInfo::add_channelid() {
  return channelid_.Add();
}
inline void ReqEncodeChannelInfo::add_channelid(const ::std::string& value) {
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
}
inline void ReqEncodeChannelInfo::add_channelid(const char* value) {
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
}
inline void ReqEncodeChannelInfo::add_channelid(const char* value, size_t size) {
  channelid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqEncodeChannelInfo::channelid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
  return channelid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqEncodeChannelInfo::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqEncodeChannelInfo.channelId)
  return &channelid_;
}

// repeated string regionCode = 2;
inline int ReqEncodeChannelInfo::regioncode_size() const {
  return regioncode_.size();
}
inline void ReqEncodeChannelInfo::clear_regioncode() {
  regioncode_.Clear();
}
inline const ::std::string& ReqEncodeChannelInfo::regioncode(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
  return regioncode_.Get(index);
}
inline ::std::string* ReqEncodeChannelInfo::mutable_regioncode(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
  return regioncode_.Mutable(index);
}
inline void ReqEncodeChannelInfo::set_regioncode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
  regioncode_.Mutable(index)->assign(value);
}
inline void ReqEncodeChannelInfo::set_regioncode(int index, const char* value) {
  regioncode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
}
inline void ReqEncodeChannelInfo::set_regioncode(int index, const char* value, size_t size) {
  regioncode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
}
inline ::std::string* ReqEncodeChannelInfo::add_regioncode() {
  return regioncode_.Add();
}
inline void ReqEncodeChannelInfo::add_regioncode(const ::std::string& value) {
  regioncode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
}
inline void ReqEncodeChannelInfo::add_regioncode(const char* value) {
  regioncode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
}
inline void ReqEncodeChannelInfo::add_regioncode(const char* value, size_t size) {
  regioncode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqEncodeChannelInfo::regioncode() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
  return regioncode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqEncodeChannelInfo::mutable_regioncode() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqEncodeChannelInfo.regionCode)
  return &regioncode_;
}

// optional int32 type = 3;
inline bool ReqEncodeChannelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqEncodeChannelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqEncodeChannelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqEncodeChannelInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqEncodeChannelInfo::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqEncodeChannelInfo.type)
  return type_;
}
inline void ReqEncodeChannelInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqEncodeChannelInfo.type)
}

// -------------------------------------------------------------------

// RspEncodeChannelInfo

// optional int32 requestType = 1;
inline bool RspEncodeChannelInfo::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspEncodeChannelInfo::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspEncodeChannelInfo::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspEncodeChannelInfo::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 RspEncodeChannelInfo::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspEncodeChannelInfo.requestType)
  return requesttype_;
}
inline void RspEncodeChannelInfo::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspEncodeChannelInfo.requestType)
}

// optional int32 result = 2;
inline bool RspEncodeChannelInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspEncodeChannelInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspEncodeChannelInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspEncodeChannelInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspEncodeChannelInfo::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspEncodeChannelInfo.result)
  return result_;
}
inline void RspEncodeChannelInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspEncodeChannelInfo.result)
}

// optional bytes resultDescirbe = 3;
inline bool RspEncodeChannelInfo::has_resultdescirbe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspEncodeChannelInfo::set_has_resultdescirbe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspEncodeChannelInfo::clear_has_resultdescirbe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspEncodeChannelInfo::clear_resultdescirbe() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_->clear();
  }
  clear_has_resultdescirbe();
}
inline const ::std::string& RspEncodeChannelInfo::resultdescirbe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
  return *resultdescirbe_;
}
inline void RspEncodeChannelInfo::set_resultdescirbe(const ::std::string& value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
}
inline void RspEncodeChannelInfo::set_resultdescirbe(const char* value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
}
inline void RspEncodeChannelInfo::set_resultdescirbe(const void* value, size_t size) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
}
inline ::std::string* RspEncodeChannelInfo::mutable_resultdescirbe() {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
  return resultdescirbe_;
}
inline ::std::string* RspEncodeChannelInfo::release_resultdescirbe() {
  clear_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescirbe_;
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspEncodeChannelInfo::set_allocated_resultdescirbe(::std::string* resultdescirbe) {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (resultdescirbe) {
    set_has_resultdescirbe();
    resultdescirbe_ = resultdescirbe;
  } else {
    clear_has_resultdescirbe();
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspEncodeChannelInfo.resultDescirbe)
}

// repeated .com.arges.file.proto.EncodeChnnelInfo infos = 4;
inline int RspEncodeChannelInfo::infos_size() const {
  return infos_.size();
}
inline void RspEncodeChannelInfo::clear_infos() {
  infos_.Clear();
}
inline const ::com::arges::file::proto::EncodeChnnelInfo& RspEncodeChannelInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspEncodeChannelInfo.infos)
  return infos_.Get(index);
}
inline ::com::arges::file::proto::EncodeChnnelInfo* RspEncodeChannelInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspEncodeChannelInfo.infos)
  return infos_.Mutable(index);
}
inline ::com::arges::file::proto::EncodeChnnelInfo* RspEncodeChannelInfo::add_infos() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspEncodeChannelInfo.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >&
RspEncodeChannelInfo::infos() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspEncodeChannelInfo.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EncodeChnnelInfo >*
RspEncodeChannelInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspEncodeChannelInfo.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// AlarmChannelMassage

// optional int32 requestType = 1;
inline bool AlarmChannelMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmChannelMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmChannelMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmChannelMassage::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 AlarmChannelMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmChannelMassage.requestType)
  return requesttype_;
}
inline void AlarmChannelMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmChannelMassage.requestType)
}

// optional int32 result = 2;
inline bool AlarmChannelMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmChannelMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmChannelMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmChannelMassage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AlarmChannelMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmChannelMassage.result)
  return result_;
}
inline void AlarmChannelMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmChannelMassage.result)
}

// optional bytes resultDescirbe = 3;
inline bool AlarmChannelMassage::has_resultdescirbe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmChannelMassage::set_has_resultdescirbe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmChannelMassage::clear_has_resultdescirbe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmChannelMassage::clear_resultdescirbe() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_->clear();
  }
  clear_has_resultdescirbe();
}
inline const ::std::string& AlarmChannelMassage::resultdescirbe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
  return *resultdescirbe_;
}
inline void AlarmChannelMassage::set_resultdescirbe(const ::std::string& value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
}
inline void AlarmChannelMassage::set_resultdescirbe(const char* value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
}
inline void AlarmChannelMassage::set_resultdescirbe(const void* value, size_t size) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
}
inline ::std::string* AlarmChannelMassage::mutable_resultdescirbe() {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
  return resultdescirbe_;
}
inline ::std::string* AlarmChannelMassage::release_resultdescirbe() {
  clear_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescirbe_;
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmChannelMassage::set_allocated_resultdescirbe(::std::string* resultdescirbe) {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (resultdescirbe) {
    set_has_resultdescirbe();
    resultdescirbe_ = resultdescirbe;
  } else {
    clear_has_resultdescirbe();
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmChannelMassage.resultDescirbe)
}

// repeated .com.arges.file.proto.AlarmInChannelInfo channels = 4;
inline int AlarmChannelMassage::channels_size() const {
  return channels_.size();
}
inline void AlarmChannelMassage::clear_channels() {
  channels_.Clear();
}
inline const ::com::arges::file::proto::AlarmInChannelInfo& AlarmChannelMassage::channels(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmChannelMassage.channels)
  return channels_.Get(index);
}
inline ::com::arges::file::proto::AlarmInChannelInfo* AlarmChannelMassage::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmChannelMassage.channels)
  return channels_.Mutable(index);
}
inline ::com::arges::file::proto::AlarmInChannelInfo* AlarmChannelMassage::add_channels() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmChannelMassage.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmInChannelInfo >&
AlarmChannelMassage::channels() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmChannelMassage.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmInChannelInfo >*
AlarmChannelMassage::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmChannelMassage.channels)
  return &channels_;
}

// -------------------------------------------------------------------

// DeviceInfoList

// repeated .com.arges.file.proto.DeviceInfo deviceinfo = 1;
inline int DeviceInfoList::deviceinfo_size() const {
  return deviceinfo_.size();
}
inline void DeviceInfoList::clear_deviceinfo() {
  deviceinfo_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& DeviceInfoList::deviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* DeviceInfoList::mutable_deviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* DeviceInfoList::add_deviceinfo() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
DeviceInfoList::deviceinfo() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return deviceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
DeviceInfoList::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.DeviceInfoList.deviceinfo)
  return &deviceinfo_;
}

// -------------------------------------------------------------------

// ReqDeviceInfo

// optional int32 type = 1 [default = -1];
inline bool ReqDeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDeviceInfo::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqDeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfo.type)
  return type_;
}
inline void ReqDeviceInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfo.type)
}

// repeated string deviceId = 2;
inline int ReqDeviceInfo::deviceid_size() const {
  return deviceid_.size();
}
inline void ReqDeviceInfo::clear_deviceid() {
  deviceid_.Clear();
}
inline const ::std::string& ReqDeviceInfo::deviceid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfo.deviceId)
  return deviceid_.Get(index);
}
inline ::std::string* ReqDeviceInfo::mutable_deviceid(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceInfo.deviceId)
  return deviceid_.Mutable(index);
}
inline void ReqDeviceInfo::set_deviceid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfo.deviceId)
  deviceid_.Mutable(index)->assign(value);
}
inline void ReqDeviceInfo::set_deviceid(int index, const char* value) {
  deviceid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceInfo.deviceId)
}
inline void ReqDeviceInfo::set_deviceid(int index, const char* value, size_t size) {
  deviceid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceInfo.deviceId)
}
inline ::std::string* ReqDeviceInfo::add_deviceid() {
  return deviceid_.Add();
}
inline void ReqDeviceInfo::add_deviceid(const ::std::string& value) {
  deviceid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqDeviceInfo.deviceId)
}
inline void ReqDeviceInfo::add_deviceid(const char* value) {
  deviceid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqDeviceInfo.deviceId)
}
inline void ReqDeviceInfo::add_deviceid(const char* value, size_t size) {
  deviceid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqDeviceInfo.deviceId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqDeviceInfo.deviceId)
  return deviceid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqDeviceInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqDeviceInfo.deviceId)
  return &deviceid_;
}

// repeated string regionCode = 3;
inline int ReqDeviceInfo::regioncode_size() const {
  return regioncode_.size();
}
inline void ReqDeviceInfo::clear_regioncode() {
  regioncode_.Clear();
}
inline const ::std::string& ReqDeviceInfo::regioncode(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfo.regionCode)
  return regioncode_.Get(index);
}
inline ::std::string* ReqDeviceInfo::mutable_regioncode(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceInfo.regionCode)
  return regioncode_.Mutable(index);
}
inline void ReqDeviceInfo::set_regioncode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfo.regionCode)
  regioncode_.Mutable(index)->assign(value);
}
inline void ReqDeviceInfo::set_regioncode(int index, const char* value) {
  regioncode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceInfo.regionCode)
}
inline void ReqDeviceInfo::set_regioncode(int index, const char* value, size_t size) {
  regioncode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceInfo.regionCode)
}
inline ::std::string* ReqDeviceInfo::add_regioncode() {
  return regioncode_.Add();
}
inline void ReqDeviceInfo::add_regioncode(const ::std::string& value) {
  regioncode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqDeviceInfo.regionCode)
}
inline void ReqDeviceInfo::add_regioncode(const char* value) {
  regioncode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqDeviceInfo.regionCode)
}
inline void ReqDeviceInfo::add_regioncode(const char* value, size_t size) {
  regioncode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqDeviceInfo.regionCode)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqDeviceInfo::regioncode() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqDeviceInfo.regionCode)
  return regioncode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqDeviceInfo::mutable_regioncode() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqDeviceInfo.regionCode)
  return &regioncode_;
}

// optional string channelCode = 4;
inline bool ReqDeviceInfo::has_channelcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqDeviceInfo::set_has_channelcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqDeviceInfo::clear_has_channelcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqDeviceInfo::clear_channelcode() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_->clear();
  }
  clear_has_channelcode();
}
inline const ::std::string& ReqDeviceInfo::channelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfo.channelCode)
  return *channelcode_;
}
inline void ReqDeviceInfo::set_channelcode(const ::std::string& value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfo.channelCode)
}
inline void ReqDeviceInfo::set_channelcode(const char* value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceInfo.channelCode)
}
inline void ReqDeviceInfo::set_channelcode(const char* value, size_t size) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceInfo.channelCode)
}
inline ::std::string* ReqDeviceInfo::mutable_channelcode() {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceInfo.channelCode)
  return channelcode_;
}
inline ::std::string* ReqDeviceInfo::release_channelcode() {
  clear_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelcode_;
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceInfo::set_allocated_channelcode(::std::string* channelcode) {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (channelcode) {
    set_has_channelcode();
    channelcode_ = channelcode;
  } else {
    clear_has_channelcode();
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceInfo.channelCode)
}

// optional string serviceCode = 5;
inline bool ReqDeviceInfo::has_servicecode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqDeviceInfo::set_has_servicecode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqDeviceInfo::clear_has_servicecode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqDeviceInfo::clear_servicecode() {
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_->clear();
  }
  clear_has_servicecode();
}
inline const ::std::string& ReqDeviceInfo::servicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqDeviceInfo.serviceCode)
  return *servicecode_;
}
inline void ReqDeviceInfo::set_servicecode(const ::std::string& value) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqDeviceInfo.serviceCode)
}
inline void ReqDeviceInfo::set_servicecode(const char* value) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqDeviceInfo.serviceCode)
}
inline void ReqDeviceInfo::set_servicecode(const char* value, size_t size) {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  servicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqDeviceInfo.serviceCode)
}
inline ::std::string* ReqDeviceInfo::mutable_servicecode() {
  set_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqDeviceInfo.serviceCode)
  return servicecode_;
}
inline ::std::string* ReqDeviceInfo::release_servicecode() {
  clear_has_servicecode();
  if (servicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicecode_;
    servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqDeviceInfo::set_allocated_servicecode(::std::string* servicecode) {
  if (servicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicecode_;
  }
  if (servicecode) {
    set_has_servicecode();
    servicecode_ = servicecode;
  } else {
    clear_has_servicecode();
    servicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqDeviceInfo.serviceCode)
}

// -------------------------------------------------------------------

// RspDeviceInfo

// optional int32 requestType = 1;
inline bool RspDeviceInfo::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspDeviceInfo::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspDeviceInfo::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspDeviceInfo::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 RspDeviceInfo::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfo.requestType)
  return requesttype_;
}
inline void RspDeviceInfo::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfo.requestType)
}

// repeated .com.arges.file.proto.DeviceInfo devs = 2;
inline int RspDeviceInfo::devs_size() const {
  return devs_.size();
}
inline void RspDeviceInfo::clear_devs() {
  devs_.Clear();
}
inline const ::com::arges::file::proto::DeviceInfo& RspDeviceInfo::devs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfo.devs)
  return devs_.Get(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceInfo::mutable_devs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDeviceInfo.devs)
  return devs_.Mutable(index);
}
inline ::com::arges::file::proto::DeviceInfo* RspDeviceInfo::add_devs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspDeviceInfo.devs)
  return devs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >&
RspDeviceInfo::devs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspDeviceInfo.devs)
  return devs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::DeviceInfo >*
RspDeviceInfo::mutable_devs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspDeviceInfo.devs)
  return &devs_;
}

// optional int32 result = 3 [default = -1];
inline bool RspDeviceInfo::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspDeviceInfo::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspDeviceInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspDeviceInfo::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspDeviceInfo::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfo.result)
  return result_;
}
inline void RspDeviceInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfo.result)
}

// optional bytes resultDescirbe = 4 [default = ""];
inline bool RspDeviceInfo::has_resultdescirbe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspDeviceInfo::set_has_resultdescirbe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspDeviceInfo::clear_has_resultdescirbe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspDeviceInfo::clear_resultdescirbe() {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_->clear();
  }
  clear_has_resultdescirbe();
}
inline const ::std::string& RspDeviceInfo::resultdescirbe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
  return *resultdescirbe_;
}
inline void RspDeviceInfo::set_resultdescirbe(const ::std::string& value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
}
inline void RspDeviceInfo::set_resultdescirbe(const char* value) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
}
inline void RspDeviceInfo::set_resultdescirbe(const void* value, size_t size) {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  resultdescirbe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
}
inline ::std::string* RspDeviceInfo::mutable_resultdescirbe() {
  set_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescirbe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
  return resultdescirbe_;
}
inline ::std::string* RspDeviceInfo::release_resultdescirbe() {
  clear_has_resultdescirbe();
  if (resultdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescirbe_;
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspDeviceInfo::set_allocated_resultdescirbe(::std::string* resultdescirbe) {
  if (resultdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescirbe_;
  }
  if (resultdescirbe) {
    set_has_resultdescirbe();
    resultdescirbe_ = resultdescirbe;
  } else {
    clear_has_resultdescirbe();
    resultdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspDeviceInfo.resultDescirbe)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::ONLIEN_STAT_OF_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::ONLIEN_STAT_OF_DEVICE>() {
  return ::com::arges::file::proto::ONLIEN_STAT_OF_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::LOGIN_TYPE_OF_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::LOGIN_TYPE_OF_DEVICE>() {
  return ::com::arges::file::proto::LOGIN_TYPE_OF_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::CATEGORY_TYPE_OF_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::CATEGORY_TYPE_OF_DEVICE>() {
  return ::com::arges::file::proto::CATEGORY_TYPE_OF_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::MODEL_TYPE_OF_INTELLIGENT_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::MODEL_TYPE_OF_INTELLIGENT_DEVICE>() {
  return ::com::arges::file::proto::MODEL_TYPE_OF_INTELLIGENT_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DO> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DO>() {
  return ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_DO_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_DEVICE_CONTROL> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_DEVICE_CONTROL>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_DEVICE_CONTROL_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_CONTROL> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_CONTROL>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_CONTROL_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::STAT_TYPE_OF_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::STAT_TYPE_OF_DEVICE>() {
  return ::com::arges::file::proto::STAT_TYPE_OF_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::OPRATION_TYPE_OF_CHANNEL_INFO> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::OPRATION_TYPE_OF_CHANNEL_INFO>() {
  return ::com::arges::file::proto::OPRATION_TYPE_OF_CHANNEL_INFO_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_CHANNEL> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_CHANNEL>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_CHANNEL_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE>() {
  return ::com::arges::file::proto::OPRATION_TYPE_OF_DEVICE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_INFO_REQUEST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_INFO_REQUEST>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_DEVICE_INFO_REQUEST_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DevInfoListBean_2eproto__INCLUDED
