// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlarmBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AlarmBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ActionLinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionLinkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmSrcDevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmSrcDevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmTypeMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmTypeMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionTypeMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionTypeMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmPlanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmPlanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmRuleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmRuleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmPlanMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmPlanMassage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DEVICE_TYPE_OF_ALARM_SROUCE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* USING_STAT_OF_ALARM_PLAN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* USER_TYPE_OF_ALARM_PLAN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_PLAN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_PLAN_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AlarmBean_2eproto() {
  protobuf_AddDesc_AlarmBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AlarmBean.proto");
  GOOGLE_CHECK(file != NULL);
  ActionLinkData_descriptor_ = file->message_type(0);
  static const int ActionLinkData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, sounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, videos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, sms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, tvwalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, emails_),
  };
  ActionLinkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionLinkData_descriptor_,
      ActionLinkData::default_instance_,
      ActionLinkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLinkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionLinkData));
  AlarmSrcDevInfo_descriptor_ = file->message_type(1);
  static const int AlarmSrcDevInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmSrcDevInfo, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmSrcDevInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmSrcDevInfo, nodetype_),
  };
  AlarmSrcDevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmSrcDevInfo_descriptor_,
      AlarmSrcDevInfo::default_instance_,
      AlarmSrcDevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmSrcDevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmSrcDevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmSrcDevInfo));
  AlarmTypeData_descriptor_ = file->message_type(2);
  static const int AlarmTypeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeData, describe_),
  };
  AlarmTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmTypeData_descriptor_,
      AlarmTypeData::default_instance_,
      AlarmTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmTypeData));
  AlarmTypeMassage_descriptor_ = file->message_type(3);
  static const int AlarmTypeMassage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, alarmtypes_),
  };
  AlarmTypeMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmTypeMassage_descriptor_,
      AlarmTypeMassage::default_instance_,
      AlarmTypeMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmTypeMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmTypeMassage));
  ActionTypeData_descriptor_ = file->message_type(4);
  static const int ActionTypeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeData, describe_),
  };
  ActionTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionTypeData_descriptor_,
      ActionTypeData::default_instance_,
      ActionTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionTypeData));
  ActionTypeMassage_descriptor_ = file->message_type(5);
  static const int ActionTypeMassage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, actionstypes_),
  };
  ActionTypeMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionTypeMassage_descriptor_,
      ActionTypeMassage::default_instance_,
      ActionTypeMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTypeMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionTypeMassage));
  AlarmData_descriptor_ = file->message_type(6);
  static const int AlarmData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, srcdevcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, srcdevchannelseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, alarmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, alarmdescirbe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, raisudusttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, alarmnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, currentalarmdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, action_),
  };
  AlarmData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmData_descriptor_,
      AlarmData::default_instance_,
      AlarmData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmData));
  AlarmMassage_descriptor_ = file->message_type(7);
  static const int AlarmMassage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, alarm_),
  };
  AlarmMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmMassage_descriptor_,
      AlarmMassage::default_instance_,
      AlarmMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmMassage));
  AlarmPlanData_descriptor_ = file->message_type(8);
  static const int AlarmPlanData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, timetemplateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, alarms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, sounds_),
  };
  AlarmPlanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmPlanData_descriptor_,
      AlarmPlanData::default_instance_,
      AlarmPlanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmPlanData));
  AlarmRuleData_descriptor_ = file->message_type(9);
  static const int AlarmRuleData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, planid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, rulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, ruledescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, srcdevs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, action_),
  };
  AlarmRuleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmRuleData_descriptor_,
      AlarmRuleData::default_instance_,
      AlarmRuleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRuleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmRuleData));
  AlarmPlanMassage_descriptor_ = file->message_type(10);
  static const int AlarmPlanMassage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, plan_),
  };
  AlarmPlanMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmPlanMassage_descriptor_,
      AlarmPlanMassage::default_instance_,
      AlarmPlanMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmPlanMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmPlanMassage));
  DEVICE_TYPE_OF_ALARM_SROUCE_descriptor_ = file->enum_type(0);
  RESULT_TYPE_OF_ALARM_descriptor_ = file->enum_type(1);
  REQUEST_TYPE_OF_ALARM_TYPE_descriptor_ = file->enum_type(2);
  RESULT_TYPE_OF_ALARM_TYPE_descriptor_ = file->enum_type(3);
  REQUEST_TYPE_OF_ACTION_TYPE_descriptor_ = file->enum_type(4);
  RESULT_TYPE_OF_ACTION_TYPE_descriptor_ = file->enum_type(5);
  USING_STAT_OF_ALARM_PLAN_descriptor_ = file->enum_type(6);
  USER_TYPE_OF_ALARM_PLAN_descriptor_ = file->enum_type(7);
  RESULT_TYPE_OF_ALARM_PLAN_descriptor_ = file->enum_type(8);
  REQUEST_TYPE_OF_ALARM_PLAN_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AlarmBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionLinkData_descriptor_, &ActionLinkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmSrcDevInfo_descriptor_, &AlarmSrcDevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmTypeData_descriptor_, &AlarmTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmTypeMassage_descriptor_, &AlarmTypeMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionTypeData_descriptor_, &ActionTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionTypeMassage_descriptor_, &ActionTypeMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmData_descriptor_, &AlarmData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmMassage_descriptor_, &AlarmMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmPlanData_descriptor_, &AlarmPlanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmRuleData_descriptor_, &AlarmRuleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmPlanMassage_descriptor_, &AlarmPlanMassage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AlarmBean_2eproto() {
  delete ActionLinkData::default_instance_;
  delete ActionLinkData_reflection_;
  delete AlarmSrcDevInfo::default_instance_;
  delete AlarmSrcDevInfo_reflection_;
  delete AlarmTypeData::default_instance_;
  delete AlarmTypeData_reflection_;
  delete AlarmTypeMassage::default_instance_;
  delete AlarmTypeMassage_reflection_;
  delete ActionTypeData::default_instance_;
  delete ActionTypeData_reflection_;
  delete ActionTypeMassage::default_instance_;
  delete ActionTypeMassage_reflection_;
  delete AlarmData::default_instance_;
  delete AlarmData_reflection_;
  delete AlarmMassage::default_instance_;
  delete AlarmMassage_reflection_;
  delete AlarmPlanData::default_instance_;
  delete AlarmPlanData_reflection_;
  delete AlarmRuleData::default_instance_;
  delete AlarmRuleData_reflection_;
  delete AlarmPlanMassage::default_instance_;
  delete AlarmPlanMassage_reflection_;
}

void protobuf_AddDesc_AlarmBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::com::arges::file::proto::protobuf_AddDesc_ActionLinkBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017AlarmBean.proto\022\024com.arges.file.proto\032"
    "\025DevInfoListBean.proto\032\024ActionLinkBean.p"
    "roto\"\202\003\n\016ActionLinkData\0223\n\006sounds\030\001 \003(\0132"
    "#.com.arges.file.proto.SoundLinkData\0223\n\006"
    "lights\030\002 \003(\0132#.com.arges.file.proto.Ligh"
    "tLinkData\0223\n\006videos\030\003 \003(\0132#.com.arges.fi"
    "le.proto.VideoLinkData\0225\n\007records\030\004 \003(\0132"
    "$.com.arges.file.proto.RecordLinkData\022.\n"
    "\003sms\030\005 \003(\0132!.com.arges.file.proto.SmsLin"
    "kData\0225\n\007tvwalls\030\006 \003(\0132$.com.arges.file."
    "proto.TvwallLinkData\0223\n\006emails\030\007 \003(\0132#.c"
    "om.arges.file.proto.EmailLinkData\"K\n\017Ala"
    "rmSrcDevInfo\022\022\n\006ruleId\030\001 \001(\003:\002-1\022\016\n\004code"
    "\030\002 \001(\t:\000\022\024\n\010nodeType\030\003 \001(\005:\002-1\"E\n\rAlarmT"
    "ypeData\022\016\n\002id\030\001 \001(\003:\002-1\022\020\n\004type\030\002 \001(\005:\002-"
    "1\022\022\n\010describe\030\003 \001(\014:\000\"\222\001\n\020AlarmTypeMassa"
    "ge\022\027\n\013requestType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 "
    "\001(\005:\002-1\022\030\n\016resultDescribe\030\003 \001(\014:\000\0227\n\nala"
    "rmTypes\030\004 \003(\0132#.com.arges.file.proto.Ala"
    "rmTypeData\"F\n\016ActionTypeData\022\016\n\002id\030\001 \001(\003"
    ":\002-1\022\020\n\004type\030\002 \001(\005:\002-1\022\022\n\010describe\030\003 \001(\014"
    ":\000\"\226\001\n\021ActionTypeMassage\022\027\n\013requestType\030"
    "\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1\022\030\n\016resultD"
    "escribe\030\003 \001(\014:\000\022:\n\014actionsTypes\030\004 \003(\0132$."
    "com.arges.file.proto.ActionTypeData\"\246\002\n\t"
    "AlarmData\022\024\n\nsrcDevCode\030\001 \001(\t:\000\022\034\n\020srcDe"
    "vChannelSeq\030\002 \001(\005:\002-1\022\021\n\talarmType\030\003 \001(\005"
    "\022\023\n\talarmName\030\004 \001(\t:\000\022\027\n\ralarmDescirbe\030\005"
    " \001(\014:\000\022\031\n\rraisuDustType\030\006 \001(\005:\002-1\022\030\n\010ala"
    "rmNum\030\007 \001(\002:\006100000\0229\n\017currentAlarmDev\030\010"
    " \001(\0132 .com.arges.file.proto.DeviceInfo\0224"
    "\n\006action\030\t \001(\0132$.com.arges.file.proto.Ac"
    "tionLinkData\"\200\001\n\014AlarmMassage\022\022\n\006result\030"
    "\001 \001(\005:\002-1\022\030\n\016resultDescribe\030\002 \001(\014:\000\022\022\n\006u"
    "serId\030\003 \001(\003:\002-1\022.\n\005alarm\030\004 \001(\0132\037.com.arg"
    "es.file.proto.AlarmData\"\204\002\n\rAlarmPlanDat"
    "a\022\014\n\002id\030\001 \001(\t:\000\022\022\n\006userId\030\002 \001(\003:\002-1\022\024\n\010u"
    "serType\030\003 \001(\005:\002-1\022\016\n\004name\030\004 \001(\t:\000\022\032\n\016tim"
    "eTemplateId\030\005 \001(\003:\002-1\022\021\n\005state\030\006 \001(\005:\002-1"
    "\022\022\n\010describe\030\007 \001(\014:\000\0223\n\006alarms\030\010 \003(\0132#.c"
    "om.arges.file.proto.AlarmRuleData\0223\n\006sou"
    "nds\030\t \003(\0132#.com.arges.file.proto.SoundLi"
    "nkData\"\367\001\n\rAlarmRuleData\022\022\n\006ruleId\030\001 \001(\003"
    ":\002-1\022\022\n\006planId\030\002 \001(\003:\002-1\022\021\n\talarmType\030\003 "
    "\003(\003\022\022\n\010ruleName\030\004 \001(\t:\000\022\026\n\014ruleDescribe\030"
    "\005 \001(\014:\000\022\021\n\005state\030\007 \001(\005:\002-1\0226\n\007srcDevs\030\010 "
    "\003(\0132%.com.arges.file.proto.AlarmSrcDevIn"
    "fo\0224\n\006action\030\t \001(\0132$.com.arges.file.prot"
    "o.ActionLinkData\"\250\001\n\020AlarmPlanMassage\022\027\n"
    "\013requestType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002"
    "-1\022\030\n\016resultDescribe\030\003 \001(\014:\000\022\n\n\002id\030\004 \003(\t"
    "\022\016\n\004name\030\005 \001(\t:\000\0221\n\004plan\030\006 \003(\0132#.com.arg"
    "es.file.proto.AlarmPlanData*\256\001\n\033DEVICE_T"
    "YPE_OF_ALARM_SROUCE\022!\n\035ALARM_DEVICE_SOUR"
    "CE_IS_DEVICE\020\001\022 \n\034ALARM_DEVICE_SOURCE_IS"
    "_VIDEO\020\002\022\"\n\036ALARM_DEVICE_SOURCE_IS_ALARM"
    "IN\020\003\022&\n\"ALARM_DEVICE_SOURCE_IS_INTELLIGE"
    "NT\020\004*;\n\024RESULT_TYPE_OF_ALARM\022\017\n\013ALARM_IS"
    "_OK\020\001\022\022\n\016ALARM_IS_ERROR\020\002*4\n\032REQUEST_TYP"
    "E_OF_ALARM_TYPE\022\026\n\022ALARM_TYPE_GET_ALL\020\001*"
    "X\n\031RESULT_TYPE_OF_ALARM_TYPE\022\033\n\027ALARM_TY"
    "PE_RESULT_IS_OK\020\001\022\036\n\032ALARM_TYPE_RESULT_I"
    "S_ERROR\020\002*6\n\033REQUEST_TYPE_OF_ACTION_TYPE"
    "\022\027\n\023ACTION_TYPE_GET_ALL\020\001*[\n\032RESULT_TYPE"
    "_OF_ACTION_TYPE\022\034\n\030ACTION_TYPE_RESULT_IS"
    "_OK\020\001\022\037\n\033ACTION_TYPE_RESULT_IS_ERROR\020\002*d"
    "\n\030USING_STAT_OF_ALARM_PLAN\022\027\n\023ALARM_PLAN"
    "_IS_START\020\001\022\026\n\022ALARM_PLAN_IS_STOP\020\002\022\027\n\023A"
    "LARM_PLAN_IS_PAUSE\020\003*W\n\027USER_TYPE_OF_ALA"
    "RM_PLAN\022\032\n\026ALARM_PLAN_WEST_IN_WEB\020\001\022 \n\034A"
    "LARM_PLAN_WEST_IN_CS_CLIENT\020\002*X\n\031RESULT_"
    "TYPE_OF_ALARM_PLAN\022\033\n\027ALARM_PLAN_IS_CONF"
    "IG_OK\020\001\022\036\n\032ALARM_PLAN_IS_CONFIG_ERROR\020\002*"
    "\221\001\n\032REQUEST_TYPE_OF_ALARM_PLAN\022\026\n\022ALARM_"
    "PLAN_GET_ALL\020\001\022\022\n\016ALARM_PLAN_ADD\020\002\022\025\n\021AL"
    "ARM_PLAN_UPDATE\020\003\022\025\n\021ALARM_PLAN_DELETE\020\004"
    "\022\031\n\025ALARM_PLAN_GET_BY_IDS\020\006", 3067);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AlarmBean.proto", &protobuf_RegisterTypes);
  ActionLinkData::default_instance_ = new ActionLinkData();
  AlarmSrcDevInfo::default_instance_ = new AlarmSrcDevInfo();
  AlarmTypeData::default_instance_ = new AlarmTypeData();
  AlarmTypeMassage::default_instance_ = new AlarmTypeMassage();
  ActionTypeData::default_instance_ = new ActionTypeData();
  ActionTypeMassage::default_instance_ = new ActionTypeMassage();
  AlarmData::default_instance_ = new AlarmData();
  AlarmMassage::default_instance_ = new AlarmMassage();
  AlarmPlanData::default_instance_ = new AlarmPlanData();
  AlarmRuleData::default_instance_ = new AlarmRuleData();
  AlarmPlanMassage::default_instance_ = new AlarmPlanMassage();
  ActionLinkData::default_instance_->InitAsDefaultInstance();
  AlarmSrcDevInfo::default_instance_->InitAsDefaultInstance();
  AlarmTypeData::default_instance_->InitAsDefaultInstance();
  AlarmTypeMassage::default_instance_->InitAsDefaultInstance();
  ActionTypeData::default_instance_->InitAsDefaultInstance();
  ActionTypeMassage::default_instance_->InitAsDefaultInstance();
  AlarmData::default_instance_->InitAsDefaultInstance();
  AlarmMassage::default_instance_->InitAsDefaultInstance();
  AlarmPlanData::default_instance_->InitAsDefaultInstance();
  AlarmRuleData::default_instance_->InitAsDefaultInstance();
  AlarmPlanMassage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AlarmBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AlarmBean_2eproto {
  StaticDescriptorInitializer_AlarmBean_2eproto() {
    protobuf_AddDesc_AlarmBean_2eproto();
  }
} static_descriptor_initializer_AlarmBean_2eproto_;
const ::google::protobuf::EnumDescriptor* DEVICE_TYPE_OF_ALARM_SROUCE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEVICE_TYPE_OF_ALARM_SROUCE_descriptor_;
}
bool DEVICE_TYPE_OF_ALARM_SROUCE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_ALARM_descriptor_;
}
bool RESULT_TYPE_OF_ALARM_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_ALARM_TYPE_descriptor_;
}
bool REQUEST_TYPE_OF_ALARM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_ALARM_TYPE_descriptor_;
}
bool RESULT_TYPE_OF_ALARM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_ACTION_TYPE_descriptor_;
}
bool REQUEST_TYPE_OF_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_ACTION_TYPE_descriptor_;
}
bool RESULT_TYPE_OF_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* USING_STAT_OF_ALARM_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USING_STAT_OF_ALARM_PLAN_descriptor_;
}
bool USING_STAT_OF_ALARM_PLAN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* USER_TYPE_OF_ALARM_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USER_TYPE_OF_ALARM_PLAN_descriptor_;
}
bool USER_TYPE_OF_ALARM_PLAN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_ALARM_PLAN_descriptor_;
}
bool RESULT_TYPE_OF_ALARM_PLAN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_PLAN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_ALARM_PLAN_descriptor_;
}
bool REQUEST_TYPE_OF_ALARM_PLAN_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ActionLinkData::kSoundsFieldNumber;
const int ActionLinkData::kLightsFieldNumber;
const int ActionLinkData::kVideosFieldNumber;
const int ActionLinkData::kRecordsFieldNumber;
const int ActionLinkData::kSmsFieldNumber;
const int ActionLinkData::kTvwallsFieldNumber;
const int ActionLinkData::kEmailsFieldNumber;
#endif  // !_MSC_VER

ActionLinkData::ActionLinkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ActionLinkData)
}

void ActionLinkData::InitAsDefaultInstance() {
}

ActionLinkData::ActionLinkData(const ActionLinkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ActionLinkData)
}

void ActionLinkData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionLinkData::~ActionLinkData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ActionLinkData)
  SharedDtor();
}

void ActionLinkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionLinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionLinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionLinkData_descriptor_;
}

const ActionLinkData& ActionLinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

ActionLinkData* ActionLinkData::default_instance_ = NULL;

ActionLinkData* ActionLinkData::New() const {
  return new ActionLinkData;
}

void ActionLinkData::Clear() {
  sounds_.Clear();
  lights_.Clear();
  videos_.Clear();
  records_.Clear();
  sms_.Clear();
  tvwalls_.Clear();
  emails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionLinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ActionLinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.SoundLinkData sounds = 1;
      case 1: {
        if (tag == 10) {
         parse_sounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sounds;
        if (input->ExpectTag(18)) goto parse_lights;
        break;
      }

      // repeated .com.arges.file.proto.LightLinkData lights = 2;
      case 2: {
        if (tag == 18) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lights;
        if (input->ExpectTag(26)) goto parse_videos;
        break;
      }

      // repeated .com.arges.file.proto.VideoLinkData videos = 3;
      case 3: {
        if (tag == 26) {
         parse_videos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_videos;
        if (input->ExpectTag(34)) goto parse_records;
        break;
      }

      // repeated .com.arges.file.proto.RecordLinkData records = 4;
      case 4: {
        if (tag == 34) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_records;
        if (input->ExpectTag(42)) goto parse_sms;
        break;
      }

      // repeated .com.arges.file.proto.SmsLinkData sms = 5;
      case 5: {
        if (tag == 42) {
         parse_sms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sms;
        if (input->ExpectTag(50)) goto parse_tvwalls;
        break;
      }

      // repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
      case 6: {
        if (tag == 50) {
         parse_tvwalls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tvwalls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tvwalls;
        if (input->ExpectTag(58)) goto parse_emails;
        break;
      }

      // repeated .com.arges.file.proto.EmailLinkData emails = 7;
      case 7: {
        if (tag == 58) {
         parse_emails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_emails;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ActionLinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ActionLinkData)
  return false;
#undef DO_
}

void ActionLinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ActionLinkData)
  // repeated .com.arges.file.proto.SoundLinkData sounds = 1;
  for (int i = 0; i < this->sounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sounds(i), output);
  }

  // repeated .com.arges.file.proto.LightLinkData lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lights(i), output);
  }

  // repeated .com.arges.file.proto.VideoLinkData videos = 3;
  for (int i = 0; i < this->videos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->videos(i), output);
  }

  // repeated .com.arges.file.proto.RecordLinkData records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // repeated .com.arges.file.proto.SmsLinkData sms = 5;
  for (int i = 0; i < this->sms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sms(i), output);
  }

  // repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
  for (int i = 0; i < this->tvwalls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tvwalls(i), output);
  }

  // repeated .com.arges.file.proto.EmailLinkData emails = 7;
  for (int i = 0; i < this->emails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ActionLinkData)
}

::google::protobuf::uint8* ActionLinkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ActionLinkData)
  // repeated .com.arges.file.proto.SoundLinkData sounds = 1;
  for (int i = 0; i < this->sounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sounds(i), target);
  }

  // repeated .com.arges.file.proto.LightLinkData lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lights(i), target);
  }

  // repeated .com.arges.file.proto.VideoLinkData videos = 3;
  for (int i = 0; i < this->videos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->videos(i), target);
  }

  // repeated .com.arges.file.proto.RecordLinkData records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // repeated .com.arges.file.proto.SmsLinkData sms = 5;
  for (int i = 0; i < this->sms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sms(i), target);
  }

  // repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
  for (int i = 0; i < this->tvwalls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tvwalls(i), target);
  }

  // repeated .com.arges.file.proto.EmailLinkData emails = 7;
  for (int i = 0; i < this->emails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->emails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ActionLinkData)
  return target;
}

int ActionLinkData::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.SoundLinkData sounds = 1;
  total_size += 1 * this->sounds_size();
  for (int i = 0; i < this->sounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sounds(i));
  }

  // repeated .com.arges.file.proto.LightLinkData lights = 2;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }

  // repeated .com.arges.file.proto.VideoLinkData videos = 3;
  total_size += 1 * this->videos_size();
  for (int i = 0; i < this->videos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videos(i));
  }

  // repeated .com.arges.file.proto.RecordLinkData records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated .com.arges.file.proto.SmsLinkData sms = 5;
  total_size += 1 * this->sms_size();
  for (int i = 0; i < this->sms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sms(i));
  }

  // repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
  total_size += 1 * this->tvwalls_size();
  for (int i = 0; i < this->tvwalls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tvwalls(i));
  }

  // repeated .com.arges.file.proto.EmailLinkData emails = 7;
  total_size += 1 * this->emails_size();
  for (int i = 0; i < this->emails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionLinkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionLinkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionLinkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionLinkData::MergeFrom(const ActionLinkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sounds_.MergeFrom(from.sounds_);
  lights_.MergeFrom(from.lights_);
  videos_.MergeFrom(from.videos_);
  records_.MergeFrom(from.records_);
  sms_.MergeFrom(from.sms_);
  tvwalls_.MergeFrom(from.tvwalls_);
  emails_.MergeFrom(from.emails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionLinkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionLinkData::CopyFrom(const ActionLinkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionLinkData::IsInitialized() const {

  return true;
}

void ActionLinkData::Swap(ActionLinkData* other) {
  if (other != this) {
    sounds_.Swap(&other->sounds_);
    lights_.Swap(&other->lights_);
    videos_.Swap(&other->videos_);
    records_.Swap(&other->records_);
    sms_.Swap(&other->sms_);
    tvwalls_.Swap(&other->tvwalls_);
    emails_.Swap(&other->emails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionLinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionLinkData_descriptor_;
  metadata.reflection = ActionLinkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmSrcDevInfo::kRuleIdFieldNumber;
const int AlarmSrcDevInfo::kCodeFieldNumber;
const int AlarmSrcDevInfo::kNodeTypeFieldNumber;
#endif  // !_MSC_VER

AlarmSrcDevInfo::AlarmSrcDevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmSrcDevInfo)
}

void AlarmSrcDevInfo::InitAsDefaultInstance() {
}

AlarmSrcDevInfo::AlarmSrcDevInfo(const AlarmSrcDevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmSrcDevInfo)
}

void AlarmSrcDevInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ruleid_ = GOOGLE_LONGLONG(-1);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmSrcDevInfo::~AlarmSrcDevInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmSrcDevInfo)
  SharedDtor();
}

void AlarmSrcDevInfo::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void AlarmSrcDevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmSrcDevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmSrcDevInfo_descriptor_;
}

const AlarmSrcDevInfo& AlarmSrcDevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmSrcDevInfo* AlarmSrcDevInfo::default_instance_ = NULL;

AlarmSrcDevInfo* AlarmSrcDevInfo::New() const {
  return new AlarmSrcDevInfo;
}

void AlarmSrcDevInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    ruleid_ = GOOGLE_LONGLONG(-1);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    nodetype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmSrcDevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmSrcDevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ruleId = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nodeType;
        break;
      }

      // optional int32 nodeType = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_nodeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodetype_)));
          set_has_nodetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmSrcDevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmSrcDevInfo)
  return false;
#undef DO_
}

void AlarmSrcDevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmSrcDevInfo)
  // optional int64 ruleId = 1 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ruleid(), output);
  }

  // optional string code = 2 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional int32 nodeType = 3 [default = -1];
  if (has_nodetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nodetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmSrcDevInfo)
}

::google::protobuf::uint8* AlarmSrcDevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmSrcDevInfo)
  // optional int64 ruleId = 1 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ruleid(), target);
  }

  // optional string code = 2 [default = ""];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional int32 nodeType = 3 [default = -1];
  if (has_nodetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nodetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmSrcDevInfo)
  return target;
}

int AlarmSrcDevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ruleId = 1 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional string code = 2 [default = ""];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 nodeType = 3 [default = -1];
    if (has_nodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmSrcDevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmSrcDevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmSrcDevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmSrcDevInfo::MergeFrom(const AlarmSrcDevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_nodetype()) {
      set_nodetype(from.nodetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmSrcDevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmSrcDevInfo::CopyFrom(const AlarmSrcDevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmSrcDevInfo::IsInitialized() const {

  return true;
}

void AlarmSrcDevInfo::Swap(AlarmSrcDevInfo* other) {
  if (other != this) {
    std::swap(ruleid_, other->ruleid_);
    std::swap(code_, other->code_);
    std::swap(nodetype_, other->nodetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmSrcDevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmSrcDevInfo_descriptor_;
  metadata.reflection = AlarmSrcDevInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmTypeData::kIdFieldNumber;
const int AlarmTypeData::kTypeFieldNumber;
const int AlarmTypeData::kDescribeFieldNumber;
#endif  // !_MSC_VER

AlarmTypeData::AlarmTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmTypeData)
}

void AlarmTypeData::InitAsDefaultInstance() {
}

AlarmTypeData::AlarmTypeData(const AlarmTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmTypeData)
}

void AlarmTypeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  type_ = -1;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmTypeData::~AlarmTypeData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmTypeData)
  SharedDtor();
}

void AlarmTypeData::SharedDtor() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void AlarmTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmTypeData_descriptor_;
}

const AlarmTypeData& AlarmTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmTypeData* AlarmTypeData::default_instance_ = NULL;

AlarmTypeData* AlarmTypeData::New() const {
  return new AlarmTypeData;
}

void AlarmTypeData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(-1);
    type_ = -1;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_describe;
        break;
      }

      // optional bytes describe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmTypeData)
  return false;
#undef DO_
}

void AlarmTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmTypeData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bytes describe = 3 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->describe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmTypeData)
}

::google::protobuf::uint8* AlarmTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmTypeData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bytes describe = 3 [default = ""];
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->describe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmTypeData)
  return target;
}

int AlarmTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes describe = 3 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmTypeData::MergeFrom(const AlarmTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmTypeData::CopyFrom(const AlarmTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmTypeData::IsInitialized() const {

  return true;
}

void AlarmTypeData::Swap(AlarmTypeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmTypeData_descriptor_;
  metadata.reflection = AlarmTypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmTypeMassage::kRequestTypeFieldNumber;
const int AlarmTypeMassage::kResultFieldNumber;
const int AlarmTypeMassage::kResultDescribeFieldNumber;
const int AlarmTypeMassage::kAlarmTypesFieldNumber;
#endif  // !_MSC_VER

AlarmTypeMassage::AlarmTypeMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmTypeMassage)
}

void AlarmTypeMassage::InitAsDefaultInstance() {
}

AlarmTypeMassage::AlarmTypeMassage(const AlarmTypeMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmTypeMassage)
}

void AlarmTypeMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmTypeMassage::~AlarmTypeMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmTypeMassage)
  SharedDtor();
}

void AlarmTypeMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
  }
}

void AlarmTypeMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmTypeMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmTypeMassage_descriptor_;
}

const AlarmTypeMassage& AlarmTypeMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmTypeMassage* AlarmTypeMassage::default_instance_ = NULL;

AlarmTypeMassage* AlarmTypeMassage::New() const {
  return new AlarmTypeMassage;
}

void AlarmTypeMassage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
  }
  alarmtypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmTypeMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmTypeMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alarmTypes;
        break;
      }

      // repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
      case 4: {
        if (tag == 34) {
         parse_alarmTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarmtypes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alarmTypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmTypeMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmTypeMassage)
  return false;
#undef DO_
}

void AlarmTypeMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmTypeMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
  for (int i = 0; i < this->alarmtypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alarmtypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmTypeMassage)
}

::google::protobuf::uint8* AlarmTypeMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmTypeMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
  for (int i = 0; i < this->alarmtypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alarmtypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmTypeMassage)
  return target;
}

int AlarmTypeMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

  }
  // repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
  total_size += 1 * this->alarmtypes_size();
  for (int i = 0; i < this->alarmtypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarmtypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmTypeMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmTypeMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmTypeMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmTypeMassage::MergeFrom(const AlarmTypeMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  alarmtypes_.MergeFrom(from.alarmtypes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmTypeMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmTypeMassage::CopyFrom(const AlarmTypeMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmTypeMassage::IsInitialized() const {

  return true;
}

void AlarmTypeMassage::Swap(AlarmTypeMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    alarmtypes_.Swap(&other->alarmtypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmTypeMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmTypeMassage_descriptor_;
  metadata.reflection = AlarmTypeMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionTypeData::kIdFieldNumber;
const int ActionTypeData::kTypeFieldNumber;
const int ActionTypeData::kDescribeFieldNumber;
#endif  // !_MSC_VER

ActionTypeData::ActionTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ActionTypeData)
}

void ActionTypeData::InitAsDefaultInstance() {
}

ActionTypeData::ActionTypeData(const ActionTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ActionTypeData)
}

void ActionTypeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  type_ = -1;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionTypeData::~ActionTypeData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ActionTypeData)
  SharedDtor();
}

void ActionTypeData::SharedDtor() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void ActionTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionTypeData_descriptor_;
}

const ActionTypeData& ActionTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

ActionTypeData* ActionTypeData::default_instance_ = NULL;

ActionTypeData* ActionTypeData::New() const {
  return new ActionTypeData;
}

void ActionTypeData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(-1);
    type_ = -1;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ActionTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_describe;
        break;
      }

      // optional bytes describe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ActionTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ActionTypeData)
  return false;
#undef DO_
}

void ActionTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ActionTypeData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bytes describe = 3 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->describe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ActionTypeData)
}

::google::protobuf::uint8* ActionTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ActionTypeData)
  // optional int64 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bytes describe = 3 [default = ""];
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->describe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ActionTypeData)
  return target;
}

int ActionTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes describe = 3 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionTypeData::MergeFrom(const ActionTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTypeData::CopyFrom(const ActionTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTypeData::IsInitialized() const {

  return true;
}

void ActionTypeData::Swap(ActionTypeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionTypeData_descriptor_;
  metadata.reflection = ActionTypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionTypeMassage::kRequestTypeFieldNumber;
const int ActionTypeMassage::kResultFieldNumber;
const int ActionTypeMassage::kResultDescribeFieldNumber;
const int ActionTypeMassage::kActionsTypesFieldNumber;
#endif  // !_MSC_VER

ActionTypeMassage::ActionTypeMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ActionTypeMassage)
}

void ActionTypeMassage::InitAsDefaultInstance() {
}

ActionTypeMassage::ActionTypeMassage(const ActionTypeMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ActionTypeMassage)
}

void ActionTypeMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionTypeMassage::~ActionTypeMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ActionTypeMassage)
  SharedDtor();
}

void ActionTypeMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
  }
}

void ActionTypeMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionTypeMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionTypeMassage_descriptor_;
}

const ActionTypeMassage& ActionTypeMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

ActionTypeMassage* ActionTypeMassage::default_instance_ = NULL;

ActionTypeMassage* ActionTypeMassage::New() const {
  return new ActionTypeMassage;
}

void ActionTypeMassage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
  }
  actionstypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionTypeMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ActionTypeMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actionsTypes;
        break;
      }

      // repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
      case 4: {
        if (tag == 34) {
         parse_actionsTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionstypes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actionsTypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ActionTypeMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ActionTypeMassage)
  return false;
#undef DO_
}

void ActionTypeMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ActionTypeMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
  for (int i = 0; i < this->actionstypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actionstypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ActionTypeMassage)
}

::google::protobuf::uint8* ActionTypeMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ActionTypeMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
  for (int i = 0; i < this->actionstypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actionstypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ActionTypeMassage)
  return target;
}

int ActionTypeMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

  }
  // repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
  total_size += 1 * this->actionstypes_size();
  for (int i = 0; i < this->actionstypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionstypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionTypeMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionTypeMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionTypeMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionTypeMassage::MergeFrom(const ActionTypeMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  actionstypes_.MergeFrom(from.actionstypes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionTypeMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTypeMassage::CopyFrom(const ActionTypeMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTypeMassage::IsInitialized() const {

  return true;
}

void ActionTypeMassage::Swap(ActionTypeMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    actionstypes_.Swap(&other->actionstypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionTypeMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionTypeMassage_descriptor_;
  metadata.reflection = ActionTypeMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmData::kSrcDevCodeFieldNumber;
const int AlarmData::kSrcDevChannelSeqFieldNumber;
const int AlarmData::kAlarmTypeFieldNumber;
const int AlarmData::kAlarmNameFieldNumber;
const int AlarmData::kAlarmDescirbeFieldNumber;
const int AlarmData::kRaisuDustTypeFieldNumber;
const int AlarmData::kAlarmNumFieldNumber;
const int AlarmData::kCurrentAlarmDevFieldNumber;
const int AlarmData::kActionFieldNumber;
#endif  // !_MSC_VER

AlarmData::AlarmData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmData)
}

void AlarmData::InitAsDefaultInstance() {
  currentalarmdev_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
  action_ = const_cast< ::com::arges::file::proto::ActionLinkData*>(&::com::arges::file::proto::ActionLinkData::default_instance());
}

AlarmData::AlarmData(const AlarmData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmData)
}

void AlarmData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcdevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcdevchannelseq_ = -1;
  alarmtype_ = 0;
  alarmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alarmdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raisudusttype_ = -1;
  alarmnum_ = 100000;
  currentalarmdev_ = NULL;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmData::~AlarmData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmData)
  SharedDtor();
}

void AlarmData::SharedDtor() {
  if (srcdevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srcdevcode_;
  }
  if (alarmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmname_;
  }
  if (alarmdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmdescirbe_;
  }
  if (this != default_instance_) {
    delete currentalarmdev_;
    delete action_;
  }
}

void AlarmData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmData_descriptor_;
}

const AlarmData& AlarmData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmData* AlarmData::default_instance_ = NULL;

AlarmData* AlarmData::New() const {
  return new AlarmData;
}

void AlarmData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_srcdevcode()) {
      if (srcdevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        srcdevcode_->clear();
      }
    }
    srcdevchannelseq_ = -1;
    alarmtype_ = 0;
    if (has_alarmname()) {
      if (alarmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarmname_->clear();
      }
    }
    if (has_alarmdescirbe()) {
      if (alarmdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarmdescirbe_->clear();
      }
    }
    raisudusttype_ = -1;
    alarmnum_ = 100000;
    if (has_currentalarmdev()) {
      if (currentalarmdev_ != NULL) currentalarmdev_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  if (has_action()) {
    if (action_ != NULL) action_->::com::arges::file::proto::ActionLinkData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string srcDevCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcdevcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srcdevcode().data(), this->srcdevcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "srcdevcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_srcDevChannelSeq;
        break;
      }

      // optional int32 srcDevChannelSeq = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_srcDevChannelSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcdevchannelseq_)));
          set_has_srcdevchannelseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarmType;
        break;
      }

      // optional int32 alarmType = 3;
      case 3: {
        if (tag == 24) {
         parse_alarmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alarmName;
        break;
      }

      // optional string alarmName = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_alarmName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alarmname().data(), this->alarmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alarmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alarmDescirbe;
        break;
      }

      // optional bytes alarmDescirbe = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_alarmDescirbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alarmdescirbe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_raisuDustType;
        break;
      }

      // optional int32 raisuDustType = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_raisuDustType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raisudusttype_)));
          set_has_raisudusttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_alarmNum;
        break;
      }

      // optional float alarmNum = 7 [default = 100000];
      case 7: {
        if (tag == 61) {
         parse_alarmNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmnum_)));
          set_has_alarmnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_currentAlarmDev;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
      case 8: {
        if (tag == 66) {
         parse_currentAlarmDev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentalarmdev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_action;
        break;
      }

      // optional .com.arges.file.proto.ActionLinkData action = 9;
      case 9: {
        if (tag == 74) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmData)
  return false;
#undef DO_
}

void AlarmData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmData)
  // optional string srcDevCode = 1 [default = ""];
  if (has_srcdevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcdevcode().data(), this->srcdevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcdevcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->srcdevcode(), output);
  }

  // optional int32 srcDevChannelSeq = 2 [default = -1];
  if (has_srcdevchannelseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srcdevchannelseq(), output);
  }

  // optional int32 alarmType = 3;
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alarmtype(), output);
  }

  // optional string alarmName = 4 [default = ""];
  if (has_alarmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmname().data(), this->alarmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alarmname(), output);
  }

  // optional bytes alarmDescirbe = 5 [default = ""];
  if (has_alarmdescirbe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->alarmdescirbe(), output);
  }

  // optional int32 raisuDustType = 6 [default = -1];
  if (has_raisudusttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->raisudusttype(), output);
  }

  // optional float alarmNum = 7 [default = 100000];
  if (has_alarmnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->alarmnum(), output);
  }

  // optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
  if (has_currentalarmdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->currentalarmdev(), output);
  }

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmData)
}

::google::protobuf::uint8* AlarmData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmData)
  // optional string srcDevCode = 1 [default = ""];
  if (has_srcdevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcdevcode().data(), this->srcdevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcdevcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->srcdevcode(), target);
  }

  // optional int32 srcDevChannelSeq = 2 [default = -1];
  if (has_srcdevchannelseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srcdevchannelseq(), target);
  }

  // optional int32 alarmType = 3;
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alarmtype(), target);
  }

  // optional string alarmName = 4 [default = ""];
  if (has_alarmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmname().data(), this->alarmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alarmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alarmname(), target);
  }

  // optional bytes alarmDescirbe = 5 [default = ""];
  if (has_alarmdescirbe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->alarmdescirbe(), target);
  }

  // optional int32 raisuDustType = 6 [default = -1];
  if (has_raisudusttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->raisudusttype(), target);
  }

  // optional float alarmNum = 7 [default = 100000];
  if (has_alarmnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->alarmnum(), target);
  }

  // optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
  if (has_currentalarmdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->currentalarmdev(), target);
  }

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmData)
  return target;
}

int AlarmData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string srcDevCode = 1 [default = ""];
    if (has_srcdevcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcdevcode());
    }

    // optional int32 srcDevChannelSeq = 2 [default = -1];
    if (has_srcdevchannelseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcdevchannelseq());
    }

    // optional int32 alarmType = 3;
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmtype());
    }

    // optional string alarmName = 4 [default = ""];
    if (has_alarmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmname());
    }

    // optional bytes alarmDescirbe = 5 [default = ""];
    if (has_alarmdescirbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alarmdescirbe());
    }

    // optional int32 raisuDustType = 6 [default = -1];
    if (has_raisudusttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raisudusttype());
    }

    // optional float alarmNum = 7 [default = 100000];
    if (has_alarmnum()) {
      total_size += 1 + 4;
    }

    // optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
    if (has_currentalarmdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentalarmdev());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.arges.file.proto.ActionLinkData action = 9;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmData::MergeFrom(const AlarmData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcdevcode()) {
      set_srcdevcode(from.srcdevcode());
    }
    if (from.has_srcdevchannelseq()) {
      set_srcdevchannelseq(from.srcdevchannelseq());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_alarmname()) {
      set_alarmname(from.alarmname());
    }
    if (from.has_alarmdescirbe()) {
      set_alarmdescirbe(from.alarmdescirbe());
    }
    if (from.has_raisudusttype()) {
      set_raisudusttype(from.raisudusttype());
    }
    if (from.has_alarmnum()) {
      set_alarmnum(from.alarmnum());
    }
    if (from.has_currentalarmdev()) {
      mutable_currentalarmdev()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.currentalarmdev());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_action()) {
      mutable_action()->::com::arges::file::proto::ActionLinkData::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmData::CopyFrom(const AlarmData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmData::IsInitialized() const {

  return true;
}

void AlarmData::Swap(AlarmData* other) {
  if (other != this) {
    std::swap(srcdevcode_, other->srcdevcode_);
    std::swap(srcdevchannelseq_, other->srcdevchannelseq_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(alarmname_, other->alarmname_);
    std::swap(alarmdescirbe_, other->alarmdescirbe_);
    std::swap(raisudusttype_, other->raisudusttype_);
    std::swap(alarmnum_, other->alarmnum_);
    std::swap(currentalarmdev_, other->currentalarmdev_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmData_descriptor_;
  metadata.reflection = AlarmData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmMassage::kResultFieldNumber;
const int AlarmMassage::kResultDescribeFieldNumber;
const int AlarmMassage::kUserIdFieldNumber;
const int AlarmMassage::kAlarmFieldNumber;
#endif  // !_MSC_VER

AlarmMassage::AlarmMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmMassage)
}

void AlarmMassage::InitAsDefaultInstance() {
  alarm_ = const_cast< ::com::arges::file::proto::AlarmData*>(&::com::arges::file::proto::AlarmData::default_instance());
}

AlarmMassage::AlarmMassage(const AlarmMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmMassage)
}

void AlarmMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
  alarm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmMassage::~AlarmMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmMassage)
  SharedDtor();
}

void AlarmMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
    delete alarm_;
  }
}

void AlarmMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmMassage_descriptor_;
}

const AlarmMassage& AlarmMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmMassage* AlarmMassage::default_instance_ = NULL;

AlarmMassage* AlarmMassage::New() const {
  return new AlarmMassage;
}

void AlarmMassage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(-1);
    if (has_alarm()) {
      if (alarm_ != NULL) alarm_->::com::arges::file::proto::AlarmData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userId;
        break;
      }

      // optional int64 userId = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alarm;
        break;
      }

      // optional .com.arges.file.proto.AlarmData alarm = 4;
      case 4: {
        if (tag == 34) {
         parse_alarm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmMassage)
  return false;
#undef DO_
}

void AlarmMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmMassage)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bytes resultDescribe = 2 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->resultdescribe(), output);
  }

  // optional int64 userId = 3 [default = -1];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }

  // optional .com.arges.file.proto.AlarmData alarm = 4;
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alarm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmMassage)
}

::google::protobuf::uint8* AlarmMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmMassage)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bytes resultDescribe = 2 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resultdescribe(), target);
  }

  // optional int64 userId = 3 [default = -1];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }

  // optional .com.arges.file.proto.AlarmData alarm = 4;
  if (has_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alarm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmMassage)
  return target;
}

int AlarmMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 2 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional int64 userId = 3 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional .com.arges.file.proto.AlarmData alarm = 4;
    if (has_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmMassage::MergeFrom(const AlarmMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_alarm()) {
      mutable_alarm()->::com::arges::file::proto::AlarmData::MergeFrom(from.alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMassage::CopyFrom(const AlarmMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMassage::IsInitialized() const {

  return true;
}

void AlarmMassage::Swap(AlarmMassage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(userid_, other->userid_);
    std::swap(alarm_, other->alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmMassage_descriptor_;
  metadata.reflection = AlarmMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmPlanData::kIdFieldNumber;
const int AlarmPlanData::kUserIdFieldNumber;
const int AlarmPlanData::kUserTypeFieldNumber;
const int AlarmPlanData::kNameFieldNumber;
const int AlarmPlanData::kTimeTemplateIdFieldNumber;
const int AlarmPlanData::kStateFieldNumber;
const int AlarmPlanData::kDescribeFieldNumber;
const int AlarmPlanData::kAlarmsFieldNumber;
const int AlarmPlanData::kSoundsFieldNumber;
#endif  // !_MSC_VER

AlarmPlanData::AlarmPlanData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmPlanData)
}

void AlarmPlanData::InitAsDefaultInstance() {
}

AlarmPlanData::AlarmPlanData(const AlarmPlanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmPlanData)
}

void AlarmPlanData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
  usertype_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timetemplateid_ = GOOGLE_LONGLONG(-1);
  state_ = -1;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmPlanData::~AlarmPlanData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmPlanData)
  SharedDtor();
}

void AlarmPlanData::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void AlarmPlanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmPlanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmPlanData_descriptor_;
}

const AlarmPlanData& AlarmPlanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmPlanData* AlarmPlanData::default_instance_ = NULL;

AlarmPlanData* AlarmPlanData::New() const {
  return new AlarmPlanData;
}

void AlarmPlanData::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(-1);
    usertype_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    timetemplateid_ = GOOGLE_LONGLONG(-1);
    state_ = -1;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
  }
  alarms_.Clear();
  sounds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmPlanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmPlanData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int64 userId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userType;
        break;
      }

      // optional int32 userType = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_userType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timeTemplateId;
        break;
      }

      // optional int64 timeTemplateId = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_timeTemplateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timetemplateid_)));
          set_has_timetemplateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_describe;
        break;
      }

      // optional bytes describe = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_alarms;
        break;
      }

      // repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
      case 8: {
        if (tag == 66) {
         parse_alarms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_alarms;
        if (input->ExpectTag(74)) goto parse_sounds;
        break;
      }

      // repeated .com.arges.file.proto.SoundLinkData sounds = 9;
      case 9: {
        if (tag == 74) {
         parse_sounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sounds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmPlanData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmPlanData)
  return false;
#undef DO_
}

void AlarmPlanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmPlanData)
  // optional string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 userId = 2 [default = -1];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // optional int32 userType = 3 [default = -1];
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usertype(), output);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional int64 timeTemplateId = 5 [default = -1];
  if (has_timetemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timetemplateid(), output);
  }

  // optional int32 state = 6 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional bytes describe = 7 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->describe(), output);
  }

  // repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
  for (int i = 0; i < this->alarms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->alarms(i), output);
  }

  // repeated .com.arges.file.proto.SoundLinkData sounds = 9;
  for (int i = 0; i < this->sounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sounds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmPlanData)
}

::google::protobuf::uint8* AlarmPlanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmPlanData)
  // optional string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int64 userId = 2 [default = -1];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // optional int32 userType = 3 [default = -1];
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usertype(), target);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int64 timeTemplateId = 5 [default = -1];
  if (has_timetemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timetemplateid(), target);
  }

  // optional int32 state = 6 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional bytes describe = 7 [default = ""];
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->describe(), target);
  }

  // repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
  for (int i = 0; i < this->alarms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->alarms(i), target);
  }

  // repeated .com.arges.file.proto.SoundLinkData sounds = 9;
  for (int i = 0; i < this->sounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sounds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmPlanData)
  return target;
}

int AlarmPlanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 userId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional int32 userType = 3 [default = -1];
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }

    // optional string name = 4 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 timeTemplateId = 5 [default = -1];
    if (has_timetemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timetemplateid());
    }

    // optional int32 state = 6 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional bytes describe = 7 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

  }
  // repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
  total_size += 1 * this->alarms_size();
  for (int i = 0; i < this->alarms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarms(i));
  }

  // repeated .com.arges.file.proto.SoundLinkData sounds = 9;
  total_size += 1 * this->sounds_size();
  for (int i = 0; i < this->sounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sounds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmPlanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmPlanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmPlanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmPlanData::MergeFrom(const AlarmPlanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  alarms_.MergeFrom(from.alarms_);
  sounds_.MergeFrom(from.sounds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_timetemplateid()) {
      set_timetemplateid(from.timetemplateid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmPlanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmPlanData::CopyFrom(const AlarmPlanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmPlanData::IsInitialized() const {

  return true;
}

void AlarmPlanData::Swap(AlarmPlanData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(usertype_, other->usertype_);
    std::swap(name_, other->name_);
    std::swap(timetemplateid_, other->timetemplateid_);
    std::swap(state_, other->state_);
    std::swap(describe_, other->describe_);
    alarms_.Swap(&other->alarms_);
    sounds_.Swap(&other->sounds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmPlanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmPlanData_descriptor_;
  metadata.reflection = AlarmPlanData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmRuleData::kRuleIdFieldNumber;
const int AlarmRuleData::kPlanIdFieldNumber;
const int AlarmRuleData::kAlarmTypeFieldNumber;
const int AlarmRuleData::kRuleNameFieldNumber;
const int AlarmRuleData::kRuleDescribeFieldNumber;
const int AlarmRuleData::kStateFieldNumber;
const int AlarmRuleData::kSrcDevsFieldNumber;
const int AlarmRuleData::kActionFieldNumber;
#endif  // !_MSC_VER

AlarmRuleData::AlarmRuleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmRuleData)
}

void AlarmRuleData::InitAsDefaultInstance() {
  action_ = const_cast< ::com::arges::file::proto::ActionLinkData*>(&::com::arges::file::proto::ActionLinkData::default_instance());
}

AlarmRuleData::AlarmRuleData(const AlarmRuleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmRuleData)
}

void AlarmRuleData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ruleid_ = GOOGLE_LONGLONG(-1);
  planid_ = GOOGLE_LONGLONG(-1);
  rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ruledescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = -1;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmRuleData::~AlarmRuleData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmRuleData)
  SharedDtor();
}

void AlarmRuleData::SharedDtor() {
  if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rulename_;
  }
  if (ruledescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ruledescribe_;
  }
  if (this != default_instance_) {
    delete action_;
  }
}

void AlarmRuleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmRuleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmRuleData_descriptor_;
}

const AlarmRuleData& AlarmRuleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmRuleData* AlarmRuleData::default_instance_ = NULL;

AlarmRuleData* AlarmRuleData::New() const {
  return new AlarmRuleData;
}

void AlarmRuleData::Clear() {
  if (_has_bits_[0 / 32] & 187) {
    ruleid_ = GOOGLE_LONGLONG(-1);
    planid_ = GOOGLE_LONGLONG(-1);
    if (has_rulename()) {
      if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rulename_->clear();
      }
    }
    if (has_ruledescribe()) {
      if (ruledescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ruledescribe_->clear();
      }
    }
    state_ = -1;
    if (has_action()) {
      if (action_ != NULL) action_->::com::arges::file::proto::ActionLinkData::Clear();
    }
  }
  alarmtype_.Clear();
  srcdevs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmRuleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmRuleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ruleId = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_planId;
        break;
      }

      // optional int64 planId = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_planId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &planid_)));
          set_has_planid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarmType;
        break;
      }

      // repeated int64 alarmType = 3;
      case 3: {
        if (tag == 24) {
         parse_alarmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_alarmtype())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_alarmtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarmType;
        if (input->ExpectTag(34)) goto parse_ruleName;
        break;
      }

      // optional string ruleName = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_ruleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rulename().data(), this->rulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rulename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ruleDescribe;
        break;
      }

      // optional bytes ruleDescribe = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_ruleDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ruledescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_srcDevs;
        break;
      }

      // repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
      case 8: {
        if (tag == 66) {
         parse_srcDevs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcdevs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_srcDevs;
        if (input->ExpectTag(74)) goto parse_action;
        break;
      }

      // optional .com.arges.file.proto.ActionLinkData action = 9;
      case 9: {
        if (tag == 74) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmRuleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmRuleData)
  return false;
#undef DO_
}

void AlarmRuleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmRuleData)
  // optional int64 ruleId = 1 [default = -1];
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ruleid(), output);
  }

  // optional int64 planId = 2 [default = -1];
  if (has_planid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->planid(), output);
  }

  // repeated int64 alarmType = 3;
  for (int i = 0; i < this->alarmtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->alarmtype(i), output);
  }

  // optional string ruleName = 4 [default = ""];
  if (has_rulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rulename().data(), this->rulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rulename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rulename(), output);
  }

  // optional bytes ruleDescribe = 5 [default = ""];
  if (has_ruledescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ruledescribe(), output);
  }

  // optional int32 state = 7 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
  for (int i = 0; i < this->srcdevs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->srcdevs(i), output);
  }

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmRuleData)
}

::google::protobuf::uint8* AlarmRuleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmRuleData)
  // optional int64 ruleId = 1 [default = -1];
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ruleid(), target);
  }

  // optional int64 planId = 2 [default = -1];
  if (has_planid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->planid(), target);
  }

  // repeated int64 alarmType = 3;
  for (int i = 0; i < this->alarmtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->alarmtype(i), target);
  }

  // optional string ruleName = 4 [default = ""];
  if (has_rulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rulename().data(), this->rulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rulename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rulename(), target);
  }

  // optional bytes ruleDescribe = 5 [default = ""];
  if (has_ruledescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ruledescribe(), target);
  }

  // optional int32 state = 7 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
  for (int i = 0; i < this->srcdevs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->srcdevs(i), target);
  }

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmRuleData)
  return target;
}

int AlarmRuleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ruleId = 1 [default = -1];
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ruleid());
    }

    // optional int64 planId = 2 [default = -1];
    if (has_planid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->planid());
    }

    // optional string ruleName = 4 [default = ""];
    if (has_rulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rulename());
    }

    // optional bytes ruleDescribe = 5 [default = ""];
    if (has_ruledescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ruledescribe());
    }

    // optional int32 state = 7 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .com.arges.file.proto.ActionLinkData action = 9;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  // repeated int64 alarmType = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->alarmtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->alarmtype(i));
    }
    total_size += 1 * this->alarmtype_size() + data_size;
  }

  // repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
  total_size += 1 * this->srcdevs_size();
  for (int i = 0; i < this->srcdevs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcdevs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmRuleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmRuleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmRuleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmRuleData::MergeFrom(const AlarmRuleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  alarmtype_.MergeFrom(from.alarmtype_);
  srcdevs_.MergeFrom(from.srcdevs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_planid()) {
      set_planid(from.planid());
    }
    if (from.has_rulename()) {
      set_rulename(from.rulename());
    }
    if (from.has_ruledescribe()) {
      set_ruledescribe(from.ruledescribe());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_action()) {
      mutable_action()->::com::arges::file::proto::ActionLinkData::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmRuleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmRuleData::CopyFrom(const AlarmRuleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmRuleData::IsInitialized() const {

  return true;
}

void AlarmRuleData::Swap(AlarmRuleData* other) {
  if (other != this) {
    std::swap(ruleid_, other->ruleid_);
    std::swap(planid_, other->planid_);
    alarmtype_.Swap(&other->alarmtype_);
    std::swap(rulename_, other->rulename_);
    std::swap(ruledescribe_, other->ruledescribe_);
    std::swap(state_, other->state_);
    srcdevs_.Swap(&other->srcdevs_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmRuleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmRuleData_descriptor_;
  metadata.reflection = AlarmRuleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmPlanMassage::kRequestTypeFieldNumber;
const int AlarmPlanMassage::kResultFieldNumber;
const int AlarmPlanMassage::kResultDescribeFieldNumber;
const int AlarmPlanMassage::kIdFieldNumber;
const int AlarmPlanMassage::kNameFieldNumber;
const int AlarmPlanMassage::kPlanFieldNumber;
#endif  // !_MSC_VER

AlarmPlanMassage::AlarmPlanMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.AlarmPlanMassage)
}

void AlarmPlanMassage::InitAsDefaultInstance() {
}

AlarmPlanMassage::AlarmPlanMassage(const AlarmPlanMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.AlarmPlanMassage)
}

void AlarmPlanMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmPlanMassage::~AlarmPlanMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.AlarmPlanMassage)
  SharedDtor();
}

void AlarmPlanMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AlarmPlanMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmPlanMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmPlanMassage_descriptor_;
}

const AlarmPlanMassage& AlarmPlanMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmBean_2eproto();
  return *default_instance_;
}

AlarmPlanMassage* AlarmPlanMassage::default_instance_ = NULL;

AlarmPlanMassage* AlarmPlanMassage::New() const {
  return new AlarmPlanMassage;
}

void AlarmPlanMassage::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  id_.Clear();
  plan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmPlanMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.AlarmPlanMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // repeated string id = 4;
      case 4: {
        if (tag == 34) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_plan;
        break;
      }

      // repeated .com.arges.file.proto.AlarmPlanData plan = 6;
      case 6: {
        if (tag == 50) {
         parse_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_plan;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.AlarmPlanMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.AlarmPlanMassage)
  return false;
#undef DO_
}

void AlarmPlanMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.AlarmPlanMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated string id = 4;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(i), output);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // repeated .com.arges.file.proto.AlarmPlanData plan = 6;
  for (int i = 0; i < this->plan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->plan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.AlarmPlanMassage)
}

::google::protobuf::uint8* AlarmPlanMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.AlarmPlanMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated string id = 4;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->id(i), target);
  }

  // optional string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // repeated .com.arges.file.proto.AlarmPlanData plan = 6;
  for (int i = 0; i < this->plan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->plan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.AlarmPlanMassage)
  return target;
}

int AlarmPlanMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string id = 4;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  // repeated .com.arges.file.proto.AlarmPlanData plan = 6;
  total_size += 1 * this->plan_size();
  for (int i = 0; i < this->plan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmPlanMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmPlanMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmPlanMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmPlanMassage::MergeFrom(const AlarmPlanMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  plan_.MergeFrom(from.plan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmPlanMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmPlanMassage::CopyFrom(const AlarmPlanMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmPlanMassage::IsInitialized() const {

  return true;
}

void AlarmPlanMassage::Swap(AlarmPlanMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    id_.Swap(&other->id_);
    std::swap(name_, other->name_);
    plan_.Swap(&other->plan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmPlanMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmPlanMassage_descriptor_;
  metadata.reflection = AlarmPlanMassage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
