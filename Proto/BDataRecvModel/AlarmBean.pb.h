// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlarmBean.proto

#ifndef PROTOBUF_AlarmBean_2eproto__INCLUDED
#define PROTOBUF_AlarmBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
#include "ActionLinkBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AlarmBean_2eproto();
void protobuf_AssignDesc_AlarmBean_2eproto();
void protobuf_ShutdownFile_AlarmBean_2eproto();

class ActionLinkData;
class AlarmSrcDevInfo;
class AlarmTypeData;
class AlarmTypeMassage;
class ActionTypeData;
class ActionTypeMassage;
class AlarmData;
class AlarmMassage;
class AlarmPlanData;
class AlarmRuleData;
class AlarmPlanMassage;

enum DEVICE_TYPE_OF_ALARM_SROUCE {
  ALARM_DEVICE_SOURCE_IS_DEVICE = 1,
  ALARM_DEVICE_SOURCE_IS_VIDEO = 2,
  ALARM_DEVICE_SOURCE_IS_ALARMIN = 3,
  ALARM_DEVICE_SOURCE_IS_INTELLIGENT = 4
};
bool DEVICE_TYPE_OF_ALARM_SROUCE_IsValid(int value);
const DEVICE_TYPE_OF_ALARM_SROUCE DEVICE_TYPE_OF_ALARM_SROUCE_MIN = ALARM_DEVICE_SOURCE_IS_DEVICE;
const DEVICE_TYPE_OF_ALARM_SROUCE DEVICE_TYPE_OF_ALARM_SROUCE_MAX = ALARM_DEVICE_SOURCE_IS_INTELLIGENT;
const int DEVICE_TYPE_OF_ALARM_SROUCE_ARRAYSIZE = DEVICE_TYPE_OF_ALARM_SROUCE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DEVICE_TYPE_OF_ALARM_SROUCE_descriptor();
inline const ::std::string& DEVICE_TYPE_OF_ALARM_SROUCE_Name(DEVICE_TYPE_OF_ALARM_SROUCE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DEVICE_TYPE_OF_ALARM_SROUCE_descriptor(), value);
}
inline bool DEVICE_TYPE_OF_ALARM_SROUCE_Parse(
    const ::std::string& name, DEVICE_TYPE_OF_ALARM_SROUCE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DEVICE_TYPE_OF_ALARM_SROUCE>(
    DEVICE_TYPE_OF_ALARM_SROUCE_descriptor(), name, value);
}
enum RESULT_TYPE_OF_ALARM {
  ALARM_IS_OK = 1,
  ALARM_IS_ERROR = 2
};
bool RESULT_TYPE_OF_ALARM_IsValid(int value);
const RESULT_TYPE_OF_ALARM RESULT_TYPE_OF_ALARM_MIN = ALARM_IS_OK;
const RESULT_TYPE_OF_ALARM RESULT_TYPE_OF_ALARM_MAX = ALARM_IS_ERROR;
const int RESULT_TYPE_OF_ALARM_ARRAYSIZE = RESULT_TYPE_OF_ALARM_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_descriptor();
inline const ::std::string& RESULT_TYPE_OF_ALARM_Name(RESULT_TYPE_OF_ALARM value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_ALARM_descriptor(), value);
}
inline bool RESULT_TYPE_OF_ALARM_Parse(
    const ::std::string& name, RESULT_TYPE_OF_ALARM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_ALARM>(
    RESULT_TYPE_OF_ALARM_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_ALARM_TYPE {
  ALARM_TYPE_GET_ALL = 1
};
bool REQUEST_TYPE_OF_ALARM_TYPE_IsValid(int value);
const REQUEST_TYPE_OF_ALARM_TYPE REQUEST_TYPE_OF_ALARM_TYPE_MIN = ALARM_TYPE_GET_ALL;
const REQUEST_TYPE_OF_ALARM_TYPE REQUEST_TYPE_OF_ALARM_TYPE_MAX = ALARM_TYPE_GET_ALL;
const int REQUEST_TYPE_OF_ALARM_TYPE_ARRAYSIZE = REQUEST_TYPE_OF_ALARM_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_TYPE_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_ALARM_TYPE_Name(REQUEST_TYPE_OF_ALARM_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_ALARM_TYPE_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_ALARM_TYPE_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_ALARM_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_ALARM_TYPE>(
    REQUEST_TYPE_OF_ALARM_TYPE_descriptor(), name, value);
}
enum RESULT_TYPE_OF_ALARM_TYPE {
  ALARM_TYPE_RESULT_IS_OK = 1,
  ALARM_TYPE_RESULT_IS_ERROR = 2
};
bool RESULT_TYPE_OF_ALARM_TYPE_IsValid(int value);
const RESULT_TYPE_OF_ALARM_TYPE RESULT_TYPE_OF_ALARM_TYPE_MIN = ALARM_TYPE_RESULT_IS_OK;
const RESULT_TYPE_OF_ALARM_TYPE RESULT_TYPE_OF_ALARM_TYPE_MAX = ALARM_TYPE_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_ALARM_TYPE_ARRAYSIZE = RESULT_TYPE_OF_ALARM_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_TYPE_descriptor();
inline const ::std::string& RESULT_TYPE_OF_ALARM_TYPE_Name(RESULT_TYPE_OF_ALARM_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_ALARM_TYPE_descriptor(), value);
}
inline bool RESULT_TYPE_OF_ALARM_TYPE_Parse(
    const ::std::string& name, RESULT_TYPE_OF_ALARM_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_ALARM_TYPE>(
    RESULT_TYPE_OF_ALARM_TYPE_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_ACTION_TYPE {
  ACTION_TYPE_GET_ALL = 1
};
bool REQUEST_TYPE_OF_ACTION_TYPE_IsValid(int value);
const REQUEST_TYPE_OF_ACTION_TYPE REQUEST_TYPE_OF_ACTION_TYPE_MIN = ACTION_TYPE_GET_ALL;
const REQUEST_TYPE_OF_ACTION_TYPE REQUEST_TYPE_OF_ACTION_TYPE_MAX = ACTION_TYPE_GET_ALL;
const int REQUEST_TYPE_OF_ACTION_TYPE_ARRAYSIZE = REQUEST_TYPE_OF_ACTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ACTION_TYPE_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_ACTION_TYPE_Name(REQUEST_TYPE_OF_ACTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_ACTION_TYPE_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_ACTION_TYPE_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_ACTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_ACTION_TYPE>(
    REQUEST_TYPE_OF_ACTION_TYPE_descriptor(), name, value);
}
enum RESULT_TYPE_OF_ACTION_TYPE {
  ACTION_TYPE_RESULT_IS_OK = 1,
  ACTION_TYPE_RESULT_IS_ERROR = 2
};
bool RESULT_TYPE_OF_ACTION_TYPE_IsValid(int value);
const RESULT_TYPE_OF_ACTION_TYPE RESULT_TYPE_OF_ACTION_TYPE_MIN = ACTION_TYPE_RESULT_IS_OK;
const RESULT_TYPE_OF_ACTION_TYPE RESULT_TYPE_OF_ACTION_TYPE_MAX = ACTION_TYPE_RESULT_IS_ERROR;
const int RESULT_TYPE_OF_ACTION_TYPE_ARRAYSIZE = RESULT_TYPE_OF_ACTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ACTION_TYPE_descriptor();
inline const ::std::string& RESULT_TYPE_OF_ACTION_TYPE_Name(RESULT_TYPE_OF_ACTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_ACTION_TYPE_descriptor(), value);
}
inline bool RESULT_TYPE_OF_ACTION_TYPE_Parse(
    const ::std::string& name, RESULT_TYPE_OF_ACTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_ACTION_TYPE>(
    RESULT_TYPE_OF_ACTION_TYPE_descriptor(), name, value);
}
enum USING_STAT_OF_ALARM_PLAN {
  ALARM_PLAN_IS_START = 1,
  ALARM_PLAN_IS_STOP = 2,
  ALARM_PLAN_IS_PAUSE = 3
};
bool USING_STAT_OF_ALARM_PLAN_IsValid(int value);
const USING_STAT_OF_ALARM_PLAN USING_STAT_OF_ALARM_PLAN_MIN = ALARM_PLAN_IS_START;
const USING_STAT_OF_ALARM_PLAN USING_STAT_OF_ALARM_PLAN_MAX = ALARM_PLAN_IS_PAUSE;
const int USING_STAT_OF_ALARM_PLAN_ARRAYSIZE = USING_STAT_OF_ALARM_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* USING_STAT_OF_ALARM_PLAN_descriptor();
inline const ::std::string& USING_STAT_OF_ALARM_PLAN_Name(USING_STAT_OF_ALARM_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    USING_STAT_OF_ALARM_PLAN_descriptor(), value);
}
inline bool USING_STAT_OF_ALARM_PLAN_Parse(
    const ::std::string& name, USING_STAT_OF_ALARM_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<USING_STAT_OF_ALARM_PLAN>(
    USING_STAT_OF_ALARM_PLAN_descriptor(), name, value);
}
enum USER_TYPE_OF_ALARM_PLAN {
  ALARM_PLAN_WEST_IN_WEB = 1,
  ALARM_PLAN_WEST_IN_CS_CLIENT = 2
};
bool USER_TYPE_OF_ALARM_PLAN_IsValid(int value);
const USER_TYPE_OF_ALARM_PLAN USER_TYPE_OF_ALARM_PLAN_MIN = ALARM_PLAN_WEST_IN_WEB;
const USER_TYPE_OF_ALARM_PLAN USER_TYPE_OF_ALARM_PLAN_MAX = ALARM_PLAN_WEST_IN_CS_CLIENT;
const int USER_TYPE_OF_ALARM_PLAN_ARRAYSIZE = USER_TYPE_OF_ALARM_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* USER_TYPE_OF_ALARM_PLAN_descriptor();
inline const ::std::string& USER_TYPE_OF_ALARM_PLAN_Name(USER_TYPE_OF_ALARM_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    USER_TYPE_OF_ALARM_PLAN_descriptor(), value);
}
inline bool USER_TYPE_OF_ALARM_PLAN_Parse(
    const ::std::string& name, USER_TYPE_OF_ALARM_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<USER_TYPE_OF_ALARM_PLAN>(
    USER_TYPE_OF_ALARM_PLAN_descriptor(), name, value);
}
enum RESULT_TYPE_OF_ALARM_PLAN {
  ALARM_PLAN_IS_CONFIG_OK = 1,
  ALARM_PLAN_IS_CONFIG_ERROR = 2
};
bool RESULT_TYPE_OF_ALARM_PLAN_IsValid(int value);
const RESULT_TYPE_OF_ALARM_PLAN RESULT_TYPE_OF_ALARM_PLAN_MIN = ALARM_PLAN_IS_CONFIG_OK;
const RESULT_TYPE_OF_ALARM_PLAN RESULT_TYPE_OF_ALARM_PLAN_MAX = ALARM_PLAN_IS_CONFIG_ERROR;
const int RESULT_TYPE_OF_ALARM_PLAN_ARRAYSIZE = RESULT_TYPE_OF_ALARM_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_ALARM_PLAN_descriptor();
inline const ::std::string& RESULT_TYPE_OF_ALARM_PLAN_Name(RESULT_TYPE_OF_ALARM_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESULT_TYPE_OF_ALARM_PLAN_descriptor(), value);
}
inline bool RESULT_TYPE_OF_ALARM_PLAN_Parse(
    const ::std::string& name, RESULT_TYPE_OF_ALARM_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESULT_TYPE_OF_ALARM_PLAN>(
    RESULT_TYPE_OF_ALARM_PLAN_descriptor(), name, value);
}
enum REQUEST_TYPE_OF_ALARM_PLAN {
  ALARM_PLAN_GET_ALL = 1,
  ALARM_PLAN_ADD = 2,
  ALARM_PLAN_UPDATE = 3,
  ALARM_PLAN_DELETE = 4,
  ALARM_PLAN_GET_BY_IDS = 6
};
bool REQUEST_TYPE_OF_ALARM_PLAN_IsValid(int value);
const REQUEST_TYPE_OF_ALARM_PLAN REQUEST_TYPE_OF_ALARM_PLAN_MIN = ALARM_PLAN_GET_ALL;
const REQUEST_TYPE_OF_ALARM_PLAN REQUEST_TYPE_OF_ALARM_PLAN_MAX = ALARM_PLAN_GET_BY_IDS;
const int REQUEST_TYPE_OF_ALARM_PLAN_ARRAYSIZE = REQUEST_TYPE_OF_ALARM_PLAN_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_ALARM_PLAN_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_ALARM_PLAN_Name(REQUEST_TYPE_OF_ALARM_PLAN value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_ALARM_PLAN_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_ALARM_PLAN_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_ALARM_PLAN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_ALARM_PLAN>(
    REQUEST_TYPE_OF_ALARM_PLAN_descriptor(), name, value);
}
// ===================================================================

class ActionLinkData : public ::google::protobuf::Message {
 public:
  ActionLinkData();
  virtual ~ActionLinkData();

  ActionLinkData(const ActionLinkData& from);

  inline ActionLinkData& operator=(const ActionLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionLinkData& default_instance();

  void Swap(ActionLinkData* other);

  // implements Message ----------------------------------------------

  ActionLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionLinkData& from);
  void MergeFrom(const ActionLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.SoundLinkData sounds = 1;
  inline int sounds_size() const;
  inline void clear_sounds();
  static const int kSoundsFieldNumber = 1;
  inline const ::com::arges::file::proto::SoundLinkData& sounds(int index) const;
  inline ::com::arges::file::proto::SoundLinkData* mutable_sounds(int index);
  inline ::com::arges::file::proto::SoundLinkData* add_sounds();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >&
      sounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >*
      mutable_sounds();

  // repeated .com.arges.file.proto.LightLinkData lights = 2;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 2;
  inline const ::com::arges::file::proto::LightLinkData& lights(int index) const;
  inline ::com::arges::file::proto::LightLinkData* mutable_lights(int index);
  inline ::com::arges::file::proto::LightLinkData* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::LightLinkData >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::LightLinkData >*
      mutable_lights();

  // repeated .com.arges.file.proto.VideoLinkData videos = 3;
  inline int videos_size() const;
  inline void clear_videos();
  static const int kVideosFieldNumber = 3;
  inline const ::com::arges::file::proto::VideoLinkData& videos(int index) const;
  inline ::com::arges::file::proto::VideoLinkData* mutable_videos(int index);
  inline ::com::arges::file::proto::VideoLinkData* add_videos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoLinkData >&
      videos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoLinkData >*
      mutable_videos();

  // repeated .com.arges.file.proto.RecordLinkData records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::com::arges::file::proto::RecordLinkData& records(int index) const;
  inline ::com::arges::file::proto::RecordLinkData* mutable_records(int index);
  inline ::com::arges::file::proto::RecordLinkData* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordLinkData >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordLinkData >*
      mutable_records();

  // repeated .com.arges.file.proto.SmsLinkData sms = 5;
  inline int sms_size() const;
  inline void clear_sms();
  static const int kSmsFieldNumber = 5;
  inline const ::com::arges::file::proto::SmsLinkData& sms(int index) const;
  inline ::com::arges::file::proto::SmsLinkData* mutable_sms(int index);
  inline ::com::arges::file::proto::SmsLinkData* add_sms();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SmsLinkData >&
      sms() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SmsLinkData >*
      mutable_sms();

  // repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
  inline int tvwalls_size() const;
  inline void clear_tvwalls();
  static const int kTvwallsFieldNumber = 6;
  inline const ::com::arges::file::proto::TvwallLinkData& tvwalls(int index) const;
  inline ::com::arges::file::proto::TvwallLinkData* mutable_tvwalls(int index);
  inline ::com::arges::file::proto::TvwallLinkData* add_tvwalls();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallLinkData >&
      tvwalls() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallLinkData >*
      mutable_tvwalls();

  // repeated .com.arges.file.proto.EmailLinkData emails = 7;
  inline int emails_size() const;
  inline void clear_emails();
  static const int kEmailsFieldNumber = 7;
  inline const ::com::arges::file::proto::EmailLinkData& emails(int index) const;
  inline ::com::arges::file::proto::EmailLinkData* mutable_emails(int index);
  inline ::com::arges::file::proto::EmailLinkData* add_emails();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EmailLinkData >&
      emails() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EmailLinkData >*
      mutable_emails();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ActionLinkData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData > sounds_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::LightLinkData > lights_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoLinkData > videos_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordLinkData > records_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SmsLinkData > sms_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallLinkData > tvwalls_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EmailLinkData > emails_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static ActionLinkData* default_instance_;
};
// -------------------------------------------------------------------

class AlarmSrcDevInfo : public ::google::protobuf::Message {
 public:
  AlarmSrcDevInfo();
  virtual ~AlarmSrcDevInfo();

  AlarmSrcDevInfo(const AlarmSrcDevInfo& from);

  inline AlarmSrcDevInfo& operator=(const AlarmSrcDevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmSrcDevInfo& default_instance();

  void Swap(AlarmSrcDevInfo* other);

  // implements Message ----------------------------------------------

  AlarmSrcDevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmSrcDevInfo& from);
  void MergeFrom(const AlarmSrcDevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ruleId = 1 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 1;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string code = 2 [default = ""];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional int32 nodeType = 3 [default = -1];
  inline bool has_nodetype() const;
  inline void clear_nodetype();
  static const int kNodeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 nodetype() const;
  inline void set_nodetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmSrcDevInfo)
 private:
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_nodetype();
  inline void clear_has_nodetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* code_;
  ::google::protobuf::int32 nodetype_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmSrcDevInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlarmTypeData : public ::google::protobuf::Message {
 public:
  AlarmTypeData();
  virtual ~AlarmTypeData();

  AlarmTypeData(const AlarmTypeData& from);

  inline AlarmTypeData& operator=(const AlarmTypeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmTypeData& default_instance();

  void Swap(AlarmTypeData* other);

  // implements Message ----------------------------------------------

  AlarmTypeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmTypeData& from);
  void MergeFrom(const AlarmTypeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes describe = 3 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 3;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const void* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmTypeData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_describe();
  inline void clear_has_describe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* describe_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmTypeData* default_instance_;
};
// -------------------------------------------------------------------

class AlarmTypeMassage : public ::google::protobuf::Message {
 public:
  AlarmTypeMassage();
  virtual ~AlarmTypeMassage();

  AlarmTypeMassage(const AlarmTypeMassage& from);

  inline AlarmTypeMassage& operator=(const AlarmTypeMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmTypeMassage& default_instance();

  void Swap(AlarmTypeMassage* other);

  // implements Message ----------------------------------------------

  AlarmTypeMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmTypeMassage& from);
  void MergeFrom(const AlarmTypeMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
  inline int alarmtypes_size() const;
  inline void clear_alarmtypes();
  static const int kAlarmTypesFieldNumber = 4;
  inline const ::com::arges::file::proto::AlarmTypeData& alarmtypes(int index) const;
  inline ::com::arges::file::proto::AlarmTypeData* mutable_alarmtypes(int index);
  inline ::com::arges::file::proto::AlarmTypeData* add_alarmtypes();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmTypeData >&
      alarmtypes() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmTypeData >*
      mutable_alarmtypes();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmTypeMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmTypeData > alarmtypes_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmTypeMassage* default_instance_;
};
// -------------------------------------------------------------------

class ActionTypeData : public ::google::protobuf::Message {
 public:
  ActionTypeData();
  virtual ~ActionTypeData();

  ActionTypeData(const ActionTypeData& from);

  inline ActionTypeData& operator=(const ActionTypeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTypeData& default_instance();

  void Swap(ActionTypeData* other);

  // implements Message ----------------------------------------------

  ActionTypeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTypeData& from);
  void MergeFrom(const ActionTypeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes describe = 3 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 3;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const void* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ActionTypeData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_describe();
  inline void clear_has_describe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* describe_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static ActionTypeData* default_instance_;
};
// -------------------------------------------------------------------

class ActionTypeMassage : public ::google::protobuf::Message {
 public:
  ActionTypeMassage();
  virtual ~ActionTypeMassage();

  ActionTypeMassage(const ActionTypeMassage& from);

  inline ActionTypeMassage& operator=(const ActionTypeMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTypeMassage& default_instance();

  void Swap(ActionTypeMassage* other);

  // implements Message ----------------------------------------------

  ActionTypeMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTypeMassage& from);
  void MergeFrom(const ActionTypeMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
  inline int actionstypes_size() const;
  inline void clear_actionstypes();
  static const int kActionsTypesFieldNumber = 4;
  inline const ::com::arges::file::proto::ActionTypeData& actionstypes(int index) const;
  inline ::com::arges::file::proto::ActionTypeData* mutable_actionstypes(int index);
  inline ::com::arges::file::proto::ActionTypeData* add_actionstypes();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ActionTypeData >&
      actionstypes() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ActionTypeData >*
      mutable_actionstypes();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ActionTypeMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ActionTypeData > actionstypes_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static ActionTypeMassage* default_instance_;
};
// -------------------------------------------------------------------

class AlarmData : public ::google::protobuf::Message {
 public:
  AlarmData();
  virtual ~AlarmData();

  AlarmData(const AlarmData& from);

  inline AlarmData& operator=(const AlarmData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmData& default_instance();

  void Swap(AlarmData* other);

  // implements Message ----------------------------------------------

  AlarmData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmData& from);
  void MergeFrom(const AlarmData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string srcDevCode = 1 [default = ""];
  inline bool has_srcdevcode() const;
  inline void clear_srcdevcode();
  static const int kSrcDevCodeFieldNumber = 1;
  inline const ::std::string& srcdevcode() const;
  inline void set_srcdevcode(const ::std::string& value);
  inline void set_srcdevcode(const char* value);
  inline void set_srcdevcode(const char* value, size_t size);
  inline ::std::string* mutable_srcdevcode();
  inline ::std::string* release_srcdevcode();
  inline void set_allocated_srcdevcode(::std::string* srcdevcode);

  // optional int32 srcDevChannelSeq = 2 [default = -1];
  inline bool has_srcdevchannelseq() const;
  inline void clear_srcdevchannelseq();
  static const int kSrcDevChannelSeqFieldNumber = 2;
  inline ::google::protobuf::int32 srcdevchannelseq() const;
  inline void set_srcdevchannelseq(::google::protobuf::int32 value);

  // optional int32 alarmType = 3;
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  inline ::google::protobuf::int32 alarmtype() const;
  inline void set_alarmtype(::google::protobuf::int32 value);

  // optional string alarmName = 4 [default = ""];
  inline bool has_alarmname() const;
  inline void clear_alarmname();
  static const int kAlarmNameFieldNumber = 4;
  inline const ::std::string& alarmname() const;
  inline void set_alarmname(const ::std::string& value);
  inline void set_alarmname(const char* value);
  inline void set_alarmname(const char* value, size_t size);
  inline ::std::string* mutable_alarmname();
  inline ::std::string* release_alarmname();
  inline void set_allocated_alarmname(::std::string* alarmname);

  // optional bytes alarmDescirbe = 5 [default = ""];
  inline bool has_alarmdescirbe() const;
  inline void clear_alarmdescirbe();
  static const int kAlarmDescirbeFieldNumber = 5;
  inline const ::std::string& alarmdescirbe() const;
  inline void set_alarmdescirbe(const ::std::string& value);
  inline void set_alarmdescirbe(const char* value);
  inline void set_alarmdescirbe(const void* value, size_t size);
  inline ::std::string* mutable_alarmdescirbe();
  inline ::std::string* release_alarmdescirbe();
  inline void set_allocated_alarmdescirbe(::std::string* alarmdescirbe);

  // optional int32 raisuDustType = 6 [default = -1];
  inline bool has_raisudusttype() const;
  inline void clear_raisudusttype();
  static const int kRaisuDustTypeFieldNumber = 6;
  inline ::google::protobuf::int32 raisudusttype() const;
  inline void set_raisudusttype(::google::protobuf::int32 value);

  // optional float alarmNum = 7 [default = 100000];
  inline bool has_alarmnum() const;
  inline void clear_alarmnum();
  static const int kAlarmNumFieldNumber = 7;
  inline float alarmnum() const;
  inline void set_alarmnum(float value);

  // optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
  inline bool has_currentalarmdev() const;
  inline void clear_currentalarmdev();
  static const int kCurrentAlarmDevFieldNumber = 8;
  inline const ::com::arges::file::proto::DeviceInfo& currentalarmdev() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_currentalarmdev();
  inline ::com::arges::file::proto::DeviceInfo* release_currentalarmdev();
  inline void set_allocated_currentalarmdev(::com::arges::file::proto::DeviceInfo* currentalarmdev);

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 9;
  inline const ::com::arges::file::proto::ActionLinkData& action() const;
  inline ::com::arges::file::proto::ActionLinkData* mutable_action();
  inline ::com::arges::file::proto::ActionLinkData* release_action();
  inline void set_allocated_action(::com::arges::file::proto::ActionLinkData* action);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmData)
 private:
  inline void set_has_srcdevcode();
  inline void clear_has_srcdevcode();
  inline void set_has_srcdevchannelseq();
  inline void clear_has_srcdevchannelseq();
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_alarmname();
  inline void clear_has_alarmname();
  inline void set_has_alarmdescirbe();
  inline void clear_has_alarmdescirbe();
  inline void set_has_raisudusttype();
  inline void clear_has_raisudusttype();
  inline void set_has_alarmnum();
  inline void clear_has_alarmnum();
  inline void set_has_currentalarmdev();
  inline void clear_has_currentalarmdev();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* srcdevcode_;
  ::google::protobuf::int32 srcdevchannelseq_;
  ::google::protobuf::int32 alarmtype_;
  ::std::string* alarmname_;
  ::std::string* alarmdescirbe_;
  ::google::protobuf::int32 raisudusttype_;
  float alarmnum_;
  ::com::arges::file::proto::DeviceInfo* currentalarmdev_;
  ::com::arges::file::proto::ActionLinkData* action_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmData* default_instance_;
};
// -------------------------------------------------------------------

class AlarmMassage : public ::google::protobuf::Message {
 public:
  AlarmMassage();
  virtual ~AlarmMassage();

  AlarmMassage(const AlarmMassage& from);

  inline AlarmMassage& operator=(const AlarmMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmMassage& default_instance();

  void Swap(AlarmMassage* other);

  // implements Message ----------------------------------------------

  AlarmMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmMassage& from);
  void MergeFrom(const AlarmMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 2 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 2;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // optional int64 userId = 3 [default = -1];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional .com.arges.file.proto.AlarmData alarm = 4;
  inline bool has_alarm() const;
  inline void clear_alarm();
  static const int kAlarmFieldNumber = 4;
  inline const ::com::arges::file::proto::AlarmData& alarm() const;
  inline ::com::arges::file::proto::AlarmData* mutable_alarm();
  inline ::com::arges::file::proto::AlarmData* release_alarm();
  inline void set_allocated_alarm(::com::arges::file::proto::AlarmData* alarm);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmMassage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_alarm();
  inline void clear_has_alarm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resultdescribe_;
  ::google::protobuf::int64 userid_;
  ::com::arges::file::proto::AlarmData* alarm_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmMassage* default_instance_;
};
// -------------------------------------------------------------------

class AlarmPlanData : public ::google::protobuf::Message {
 public:
  AlarmPlanData();
  virtual ~AlarmPlanData();

  AlarmPlanData(const AlarmPlanData& from);

  inline AlarmPlanData& operator=(const AlarmPlanData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmPlanData& default_instance();

  void Swap(AlarmPlanData* other);

  // implements Message ----------------------------------------------

  AlarmPlanData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmPlanData& from);
  void MergeFrom(const AlarmPlanData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int64 userId = 2 [default = -1];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional int32 userType = 3 [default = -1];
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 3;
  inline ::google::protobuf::int32 usertype() const;
  inline void set_usertype(::google::protobuf::int32 value);

  // optional string name = 4 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 timeTemplateId = 5 [default = -1];
  inline bool has_timetemplateid() const;
  inline void clear_timetemplateid();
  static const int kTimeTemplateIdFieldNumber = 5;
  inline ::google::protobuf::int64 timetemplateid() const;
  inline void set_timetemplateid(::google::protobuf::int64 value);

  // optional int32 state = 6 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional bytes describe = 7 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 7;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const void* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
  inline int alarms_size() const;
  inline void clear_alarms();
  static const int kAlarmsFieldNumber = 8;
  inline const ::com::arges::file::proto::AlarmRuleData& alarms(int index) const;
  inline ::com::arges::file::proto::AlarmRuleData* mutable_alarms(int index);
  inline ::com::arges::file::proto::AlarmRuleData* add_alarms();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmRuleData >&
      alarms() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmRuleData >*
      mutable_alarms();

  // repeated .com.arges.file.proto.SoundLinkData sounds = 9;
  inline int sounds_size() const;
  inline void clear_sounds();
  static const int kSoundsFieldNumber = 9;
  inline const ::com::arges::file::proto::SoundLinkData& sounds(int index) const;
  inline ::com::arges::file::proto::SoundLinkData* mutable_sounds(int index);
  inline ::com::arges::file::proto::SoundLinkData* add_sounds();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >&
      sounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >*
      mutable_sounds();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmPlanData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_timetemplateid();
  inline void clear_has_timetemplateid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_describe();
  inline void clear_has_describe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int64 userid_;
  ::std::string* name_;
  ::google::protobuf::int32 usertype_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 timetemplateid_;
  ::std::string* describe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmRuleData > alarms_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData > sounds_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmPlanData* default_instance_;
};
// -------------------------------------------------------------------

class AlarmRuleData : public ::google::protobuf::Message {
 public:
  AlarmRuleData();
  virtual ~AlarmRuleData();

  AlarmRuleData(const AlarmRuleData& from);

  inline AlarmRuleData& operator=(const AlarmRuleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmRuleData& default_instance();

  void Swap(AlarmRuleData* other);

  // implements Message ----------------------------------------------

  AlarmRuleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmRuleData& from);
  void MergeFrom(const AlarmRuleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ruleId = 1 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 1;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int64 planId = 2 [default = -1];
  inline bool has_planid() const;
  inline void clear_planid();
  static const int kPlanIdFieldNumber = 2;
  inline ::google::protobuf::int64 planid() const;
  inline void set_planid(::google::protobuf::int64 value);

  // repeated int64 alarmType = 3;
  inline int alarmtype_size() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  inline ::google::protobuf::int64 alarmtype(int index) const;
  inline void set_alarmtype(int index, ::google::protobuf::int64 value);
  inline void add_alarmtype(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      alarmtype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_alarmtype();

  // optional string ruleName = 4 [default = ""];
  inline bool has_rulename() const;
  inline void clear_rulename();
  static const int kRuleNameFieldNumber = 4;
  inline const ::std::string& rulename() const;
  inline void set_rulename(const ::std::string& value);
  inline void set_rulename(const char* value);
  inline void set_rulename(const char* value, size_t size);
  inline ::std::string* mutable_rulename();
  inline ::std::string* release_rulename();
  inline void set_allocated_rulename(::std::string* rulename);

  // optional bytes ruleDescribe = 5 [default = ""];
  inline bool has_ruledescribe() const;
  inline void clear_ruledescribe();
  static const int kRuleDescribeFieldNumber = 5;
  inline const ::std::string& ruledescribe() const;
  inline void set_ruledescribe(const ::std::string& value);
  inline void set_ruledescribe(const char* value);
  inline void set_ruledescribe(const void* value, size_t size);
  inline ::std::string* mutable_ruledescribe();
  inline ::std::string* release_ruledescribe();
  inline void set_allocated_ruledescribe(::std::string* ruledescribe);

  // optional int32 state = 7 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
  inline int srcdevs_size() const;
  inline void clear_srcdevs();
  static const int kSrcDevsFieldNumber = 8;
  inline const ::com::arges::file::proto::AlarmSrcDevInfo& srcdevs(int index) const;
  inline ::com::arges::file::proto::AlarmSrcDevInfo* mutable_srcdevs(int index);
  inline ::com::arges::file::proto::AlarmSrcDevInfo* add_srcdevs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmSrcDevInfo >&
      srcdevs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmSrcDevInfo >*
      mutable_srcdevs();

  // optional .com.arges.file.proto.ActionLinkData action = 9;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 9;
  inline const ::com::arges::file::proto::ActionLinkData& action() const;
  inline ::com::arges::file::proto::ActionLinkData* mutable_action();
  inline ::com::arges::file::proto::ActionLinkData* release_action();
  inline void set_allocated_action(::com::arges::file::proto::ActionLinkData* action);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmRuleData)
 private:
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_planid();
  inline void clear_has_planid();
  inline void set_has_rulename();
  inline void clear_has_rulename();
  inline void set_has_ruledescribe();
  inline void clear_has_ruledescribe();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ruleid_;
  ::google::protobuf::int64 planid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > alarmtype_;
  ::std::string* rulename_;
  ::std::string* ruledescribe_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmSrcDevInfo > srcdevs_;
  ::com::arges::file::proto::ActionLinkData* action_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmRuleData* default_instance_;
};
// -------------------------------------------------------------------

class AlarmPlanMassage : public ::google::protobuf::Message {
 public:
  AlarmPlanMassage();
  virtual ~AlarmPlanMassage();

  AlarmPlanMassage(const AlarmPlanMassage& from);

  inline AlarmPlanMassage& operator=(const AlarmPlanMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmPlanMassage& default_instance();

  void Swap(AlarmPlanMassage* other);

  // implements Message ----------------------------------------------

  AlarmPlanMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlarmPlanMassage& from);
  void MergeFrom(const AlarmPlanMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional int32 result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes resultDescribe = 3 [default = ""];
  inline bool has_resultdescribe() const;
  inline void clear_resultdescribe();
  static const int kResultDescribeFieldNumber = 3;
  inline const ::std::string& resultdescribe() const;
  inline void set_resultdescribe(const ::std::string& value);
  inline void set_resultdescribe(const char* value);
  inline void set_resultdescribe(const void* value, size_t size);
  inline ::std::string* mutable_resultdescribe();
  inline ::std::string* release_resultdescribe();
  inline void set_allocated_resultdescribe(::std::string* resultdescribe);

  // repeated string id = 4;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline const ::std::string& id(int index) const;
  inline ::std::string* mutable_id(int index);
  inline void set_id(int index, const ::std::string& value);
  inline void set_id(int index, const char* value);
  inline void set_id(int index, const char* value, size_t size);
  inline ::std::string* add_id();
  inline void add_id(const ::std::string& value);
  inline void add_id(const char* value);
  inline void add_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // optional string name = 5 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .com.arges.file.proto.AlarmPlanData plan = 6;
  inline int plan_size() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 6;
  inline const ::com::arges::file::proto::AlarmPlanData& plan(int index) const;
  inline ::com::arges::file::proto::AlarmPlanData* mutable_plan(int index);
  inline ::com::arges::file::proto::AlarmPlanData* add_plan();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmPlanData >&
      plan() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmPlanData >*
      mutable_plan();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.AlarmPlanMassage)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdescribe();
  inline void clear_has_resultdescribe();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 requesttype_;
  ::google::protobuf::int32 result_;
  ::std::string* resultdescribe_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmPlanData > plan_;
  friend void  protobuf_AddDesc_AlarmBean_2eproto();
  friend void protobuf_AssignDesc_AlarmBean_2eproto();
  friend void protobuf_ShutdownFile_AlarmBean_2eproto();

  void InitAsDefaultInstance();
  static AlarmPlanMassage* default_instance_;
};
// ===================================================================


// ===================================================================

// ActionLinkData

// repeated .com.arges.file.proto.SoundLinkData sounds = 1;
inline int ActionLinkData::sounds_size() const {
  return sounds_.size();
}
inline void ActionLinkData::clear_sounds() {
  sounds_.Clear();
}
inline const ::com::arges::file::proto::SoundLinkData& ActionLinkData::sounds(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.sounds)
  return sounds_.Get(index);
}
inline ::com::arges::file::proto::SoundLinkData* ActionLinkData::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.sounds)
  return sounds_.Mutable(index);
}
inline ::com::arges::file::proto::SoundLinkData* ActionLinkData::add_sounds() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.sounds)
  return sounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >&
ActionLinkData::sounds() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.sounds)
  return sounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >*
ActionLinkData::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.sounds)
  return &sounds_;
}

// repeated .com.arges.file.proto.LightLinkData lights = 2;
inline int ActionLinkData::lights_size() const {
  return lights_.size();
}
inline void ActionLinkData::clear_lights() {
  lights_.Clear();
}
inline const ::com::arges::file::proto::LightLinkData& ActionLinkData::lights(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.lights)
  return lights_.Get(index);
}
inline ::com::arges::file::proto::LightLinkData* ActionLinkData::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.lights)
  return lights_.Mutable(index);
}
inline ::com::arges::file::proto::LightLinkData* ActionLinkData::add_lights() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.lights)
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::LightLinkData >&
ActionLinkData::lights() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.lights)
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::LightLinkData >*
ActionLinkData::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.lights)
  return &lights_;
}

// repeated .com.arges.file.proto.VideoLinkData videos = 3;
inline int ActionLinkData::videos_size() const {
  return videos_.size();
}
inline void ActionLinkData::clear_videos() {
  videos_.Clear();
}
inline const ::com::arges::file::proto::VideoLinkData& ActionLinkData::videos(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.videos)
  return videos_.Get(index);
}
inline ::com::arges::file::proto::VideoLinkData* ActionLinkData::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.videos)
  return videos_.Mutable(index);
}
inline ::com::arges::file::proto::VideoLinkData* ActionLinkData::add_videos() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.videos)
  return videos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoLinkData >&
ActionLinkData::videos() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.videos)
  return videos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::VideoLinkData >*
ActionLinkData::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.videos)
  return &videos_;
}

// repeated .com.arges.file.proto.RecordLinkData records = 4;
inline int ActionLinkData::records_size() const {
  return records_.size();
}
inline void ActionLinkData::clear_records() {
  records_.Clear();
}
inline const ::com::arges::file::proto::RecordLinkData& ActionLinkData::records(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.records)
  return records_.Get(index);
}
inline ::com::arges::file::proto::RecordLinkData* ActionLinkData::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.records)
  return records_.Mutable(index);
}
inline ::com::arges::file::proto::RecordLinkData* ActionLinkData::add_records() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordLinkData >&
ActionLinkData::records() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RecordLinkData >*
ActionLinkData::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.records)
  return &records_;
}

// repeated .com.arges.file.proto.SmsLinkData sms = 5;
inline int ActionLinkData::sms_size() const {
  return sms_.size();
}
inline void ActionLinkData::clear_sms() {
  sms_.Clear();
}
inline const ::com::arges::file::proto::SmsLinkData& ActionLinkData::sms(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.sms)
  return sms_.Get(index);
}
inline ::com::arges::file::proto::SmsLinkData* ActionLinkData::mutable_sms(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.sms)
  return sms_.Mutable(index);
}
inline ::com::arges::file::proto::SmsLinkData* ActionLinkData::add_sms() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.sms)
  return sms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SmsLinkData >&
ActionLinkData::sms() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.sms)
  return sms_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SmsLinkData >*
ActionLinkData::mutable_sms() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.sms)
  return &sms_;
}

// repeated .com.arges.file.proto.TvwallLinkData tvwalls = 6;
inline int ActionLinkData::tvwalls_size() const {
  return tvwalls_.size();
}
inline void ActionLinkData::clear_tvwalls() {
  tvwalls_.Clear();
}
inline const ::com::arges::file::proto::TvwallLinkData& ActionLinkData::tvwalls(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.tvwalls)
  return tvwalls_.Get(index);
}
inline ::com::arges::file::proto::TvwallLinkData* ActionLinkData::mutable_tvwalls(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.tvwalls)
  return tvwalls_.Mutable(index);
}
inline ::com::arges::file::proto::TvwallLinkData* ActionLinkData::add_tvwalls() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.tvwalls)
  return tvwalls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallLinkData >&
ActionLinkData::tvwalls() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.tvwalls)
  return tvwalls_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::TvwallLinkData >*
ActionLinkData::mutable_tvwalls() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.tvwalls)
  return &tvwalls_;
}

// repeated .com.arges.file.proto.EmailLinkData emails = 7;
inline int ActionLinkData::emails_size() const {
  return emails_.size();
}
inline void ActionLinkData::clear_emails() {
  emails_.Clear();
}
inline const ::com::arges::file::proto::EmailLinkData& ActionLinkData::emails(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionLinkData.emails)
  return emails_.Get(index);
}
inline ::com::arges::file::proto::EmailLinkData* ActionLinkData::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionLinkData.emails)
  return emails_.Mutable(index);
}
inline ::com::arges::file::proto::EmailLinkData* ActionLinkData::add_emails() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionLinkData.emails)
  return emails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EmailLinkData >&
ActionLinkData::emails() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionLinkData.emails)
  return emails_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::EmailLinkData >*
ActionLinkData::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionLinkData.emails)
  return &emails_;
}

// -------------------------------------------------------------------

// AlarmSrcDevInfo

// optional int64 ruleId = 1 [default = -1];
inline bool AlarmSrcDevInfo::has_ruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmSrcDevInfo::set_has_ruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmSrcDevInfo::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmSrcDevInfo::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 AlarmSrcDevInfo::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmSrcDevInfo.ruleId)
  return ruleid_;
}
inline void AlarmSrcDevInfo::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmSrcDevInfo.ruleId)
}

// optional string code = 2 [default = ""];
inline bool AlarmSrcDevInfo::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmSrcDevInfo::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmSrcDevInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmSrcDevInfo::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& AlarmSrcDevInfo::code() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmSrcDevInfo.code)
  return *code_;
}
inline void AlarmSrcDevInfo::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmSrcDevInfo.code)
}
inline void AlarmSrcDevInfo::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmSrcDevInfo.code)
}
inline void AlarmSrcDevInfo::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmSrcDevInfo.code)
}
inline ::std::string* AlarmSrcDevInfo::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmSrcDevInfo.code)
  return code_;
}
inline ::std::string* AlarmSrcDevInfo::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmSrcDevInfo::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmSrcDevInfo.code)
}

// optional int32 nodeType = 3 [default = -1];
inline bool AlarmSrcDevInfo::has_nodetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmSrcDevInfo::set_has_nodetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmSrcDevInfo::clear_has_nodetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmSrcDevInfo::clear_nodetype() {
  nodetype_ = -1;
  clear_has_nodetype();
}
inline ::google::protobuf::int32 AlarmSrcDevInfo::nodetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmSrcDevInfo.nodeType)
  return nodetype_;
}
inline void AlarmSrcDevInfo::set_nodetype(::google::protobuf::int32 value) {
  set_has_nodetype();
  nodetype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmSrcDevInfo.nodeType)
}

// -------------------------------------------------------------------

// AlarmTypeData

// optional int64 id = 1 [default = -1];
inline bool AlarmTypeData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmTypeData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmTypeData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmTypeData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 AlarmTypeData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeData.id)
  return id_;
}
inline void AlarmTypeData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeData.id)
}

// optional int32 type = 2 [default = -1];
inline bool AlarmTypeData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmTypeData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmTypeData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmTypeData::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 AlarmTypeData::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeData.type)
  return type_;
}
inline void AlarmTypeData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeData.type)
}

// optional bytes describe = 3 [default = ""];
inline bool AlarmTypeData::has_describe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmTypeData::set_has_describe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmTypeData::clear_has_describe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmTypeData::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& AlarmTypeData::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeData.describe)
  return *describe_;
}
inline void AlarmTypeData::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeData.describe)
}
inline void AlarmTypeData::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmTypeData.describe)
}
inline void AlarmTypeData::set_describe(const void* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmTypeData.describe)
}
inline ::std::string* AlarmTypeData::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmTypeData.describe)
  return describe_;
}
inline ::std::string* AlarmTypeData::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmTypeData::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmTypeData.describe)
}

// -------------------------------------------------------------------

// AlarmTypeMassage

// optional int32 requestType = 1 [default = -1];
inline bool AlarmTypeMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmTypeMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmTypeMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmTypeMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 AlarmTypeMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeMassage.requestType)
  return requesttype_;
}
inline void AlarmTypeMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool AlarmTypeMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmTypeMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmTypeMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmTypeMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AlarmTypeMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeMassage.result)
  return result_;
}
inline void AlarmTypeMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeMassage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool AlarmTypeMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmTypeMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmTypeMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmTypeMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& AlarmTypeMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
  return *resultdescribe_;
}
inline void AlarmTypeMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
}
inline void AlarmTypeMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
}
inline void AlarmTypeMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
}
inline ::std::string* AlarmTypeMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* AlarmTypeMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmTypeMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmTypeMassage.resultDescribe)
}

// repeated .com.arges.file.proto.AlarmTypeData alarmTypes = 4;
inline int AlarmTypeMassage::alarmtypes_size() const {
  return alarmtypes_.size();
}
inline void AlarmTypeMassage::clear_alarmtypes() {
  alarmtypes_.Clear();
}
inline const ::com::arges::file::proto::AlarmTypeData& AlarmTypeMassage::alarmtypes(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmTypeMassage.alarmTypes)
  return alarmtypes_.Get(index);
}
inline ::com::arges::file::proto::AlarmTypeData* AlarmTypeMassage::mutable_alarmtypes(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmTypeMassage.alarmTypes)
  return alarmtypes_.Mutable(index);
}
inline ::com::arges::file::proto::AlarmTypeData* AlarmTypeMassage::add_alarmtypes() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmTypeMassage.alarmTypes)
  return alarmtypes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmTypeData >&
AlarmTypeMassage::alarmtypes() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmTypeMassage.alarmTypes)
  return alarmtypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmTypeData >*
AlarmTypeMassage::mutable_alarmtypes() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmTypeMassage.alarmTypes)
  return &alarmtypes_;
}

// -------------------------------------------------------------------

// ActionTypeData

// optional int64 id = 1 [default = -1];
inline bool ActionTypeData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionTypeData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionTypeData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionTypeData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 ActionTypeData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeData.id)
  return id_;
}
inline void ActionTypeData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeData.id)
}

// optional int32 type = 2 [default = -1];
inline bool ActionTypeData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionTypeData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionTypeData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionTypeData::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 ActionTypeData::type() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeData.type)
  return type_;
}
inline void ActionTypeData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeData.type)
}

// optional bytes describe = 3 [default = ""];
inline bool ActionTypeData::has_describe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionTypeData::set_has_describe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionTypeData::clear_has_describe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionTypeData::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& ActionTypeData::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeData.describe)
  return *describe_;
}
inline void ActionTypeData::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeData.describe)
}
inline void ActionTypeData::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ActionTypeData.describe)
}
inline void ActionTypeData::set_describe(const void* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ActionTypeData.describe)
}
inline ::std::string* ActionTypeData::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionTypeData.describe)
  return describe_;
}
inline ::std::string* ActionTypeData::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActionTypeData::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ActionTypeData.describe)
}

// -------------------------------------------------------------------

// ActionTypeMassage

// optional int32 requestType = 1 [default = -1];
inline bool ActionTypeMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionTypeMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionTypeMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionTypeMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 ActionTypeMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeMassage.requestType)
  return requesttype_;
}
inline void ActionTypeMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool ActionTypeMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionTypeMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionTypeMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionTypeMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ActionTypeMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeMassage.result)
  return result_;
}
inline void ActionTypeMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeMassage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool ActionTypeMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionTypeMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionTypeMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionTypeMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& ActionTypeMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeMassage.resultDescribe)
  return *resultdescribe_;
}
inline void ActionTypeMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ActionTypeMassage.resultDescribe)
}
inline void ActionTypeMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ActionTypeMassage.resultDescribe)
}
inline void ActionTypeMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ActionTypeMassage.resultDescribe)
}
inline ::std::string* ActionTypeMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionTypeMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* ActionTypeMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActionTypeMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ActionTypeMassage.resultDescribe)
}

// repeated .com.arges.file.proto.ActionTypeData actionsTypes = 4;
inline int ActionTypeMassage::actionstypes_size() const {
  return actionstypes_.size();
}
inline void ActionTypeMassage::clear_actionstypes() {
  actionstypes_.Clear();
}
inline const ::com::arges::file::proto::ActionTypeData& ActionTypeMassage::actionstypes(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ActionTypeMassage.actionsTypes)
  return actionstypes_.Get(index);
}
inline ::com::arges::file::proto::ActionTypeData* ActionTypeMassage::mutable_actionstypes(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ActionTypeMassage.actionsTypes)
  return actionstypes_.Mutable(index);
}
inline ::com::arges::file::proto::ActionTypeData* ActionTypeMassage::add_actionstypes() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ActionTypeMassage.actionsTypes)
  return actionstypes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ActionTypeData >&
ActionTypeMassage::actionstypes() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ActionTypeMassage.actionsTypes)
  return actionstypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ActionTypeData >*
ActionTypeMassage::mutable_actionstypes() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ActionTypeMassage.actionsTypes)
  return &actionstypes_;
}

// -------------------------------------------------------------------

// AlarmData

// optional string srcDevCode = 1 [default = ""];
inline bool AlarmData::has_srcdevcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmData::set_has_srcdevcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmData::clear_has_srcdevcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmData::clear_srcdevcode() {
  if (srcdevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srcdevcode_->clear();
  }
  clear_has_srcdevcode();
}
inline const ::std::string& AlarmData::srcdevcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.srcDevCode)
  return *srcdevcode_;
}
inline void AlarmData::set_srcdevcode(const ::std::string& value) {
  set_has_srcdevcode();
  if (srcdevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srcdevcode_ = new ::std::string;
  }
  srcdevcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.srcDevCode)
}
inline void AlarmData::set_srcdevcode(const char* value) {
  set_has_srcdevcode();
  if (srcdevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srcdevcode_ = new ::std::string;
  }
  srcdevcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmData.srcDevCode)
}
inline void AlarmData::set_srcdevcode(const char* value, size_t size) {
  set_has_srcdevcode();
  if (srcdevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srcdevcode_ = new ::std::string;
  }
  srcdevcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmData.srcDevCode)
}
inline ::std::string* AlarmData::mutable_srcdevcode() {
  set_has_srcdevcode();
  if (srcdevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srcdevcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmData.srcDevCode)
  return srcdevcode_;
}
inline ::std::string* AlarmData::release_srcdevcode() {
  clear_has_srcdevcode();
  if (srcdevcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srcdevcode_;
    srcdevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmData::set_allocated_srcdevcode(::std::string* srcdevcode) {
  if (srcdevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srcdevcode_;
  }
  if (srcdevcode) {
    set_has_srcdevcode();
    srcdevcode_ = srcdevcode;
  } else {
    clear_has_srcdevcode();
    srcdevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmData.srcDevCode)
}

// optional int32 srcDevChannelSeq = 2 [default = -1];
inline bool AlarmData::has_srcdevchannelseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmData::set_has_srcdevchannelseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmData::clear_has_srcdevchannelseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmData::clear_srcdevchannelseq() {
  srcdevchannelseq_ = -1;
  clear_has_srcdevchannelseq();
}
inline ::google::protobuf::int32 AlarmData::srcdevchannelseq() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.srcDevChannelSeq)
  return srcdevchannelseq_;
}
inline void AlarmData::set_srcdevchannelseq(::google::protobuf::int32 value) {
  set_has_srcdevchannelseq();
  srcdevchannelseq_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.srcDevChannelSeq)
}

// optional int32 alarmType = 3;
inline bool AlarmData::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmData::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmData::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmData::clear_alarmtype() {
  alarmtype_ = 0;
  clear_has_alarmtype();
}
inline ::google::protobuf::int32 AlarmData::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.alarmType)
  return alarmtype_;
}
inline void AlarmData::set_alarmtype(::google::protobuf::int32 value) {
  set_has_alarmtype();
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.alarmType)
}

// optional string alarmName = 4 [default = ""];
inline bool AlarmData::has_alarmname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmData::set_has_alarmname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmData::clear_has_alarmname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmData::clear_alarmname() {
  if (alarmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_->clear();
  }
  clear_has_alarmname();
}
inline const ::std::string& AlarmData::alarmname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.alarmName)
  return *alarmname_;
}
inline void AlarmData::set_alarmname(const ::std::string& value) {
  set_has_alarmname();
  if (alarmname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.alarmName)
}
inline void AlarmData::set_alarmname(const char* value) {
  set_has_alarmname();
  if (alarmname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmData.alarmName)
}
inline void AlarmData::set_alarmname(const char* value, size_t size) {
  set_has_alarmname();
  if (alarmname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmData.alarmName)
}
inline ::std::string* AlarmData::mutable_alarmname() {
  set_has_alarmname();
  if (alarmname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmData.alarmName)
  return alarmname_;
}
inline ::std::string* AlarmData::release_alarmname() {
  clear_has_alarmname();
  if (alarmname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarmname_;
    alarmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmData::set_allocated_alarmname(::std::string* alarmname) {
  if (alarmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmname_;
  }
  if (alarmname) {
    set_has_alarmname();
    alarmname_ = alarmname;
  } else {
    clear_has_alarmname();
    alarmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmData.alarmName)
}

// optional bytes alarmDescirbe = 5 [default = ""];
inline bool AlarmData::has_alarmdescirbe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmData::set_has_alarmdescirbe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmData::clear_has_alarmdescirbe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmData::clear_alarmdescirbe() {
  if (alarmdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmdescirbe_->clear();
  }
  clear_has_alarmdescirbe();
}
inline const ::std::string& AlarmData::alarmdescirbe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.alarmDescirbe)
  return *alarmdescirbe_;
}
inline void AlarmData::set_alarmdescirbe(const ::std::string& value) {
  set_has_alarmdescirbe();
  if (alarmdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmdescirbe_ = new ::std::string;
  }
  alarmdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.alarmDescirbe)
}
inline void AlarmData::set_alarmdescirbe(const char* value) {
  set_has_alarmdescirbe();
  if (alarmdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmdescirbe_ = new ::std::string;
  }
  alarmdescirbe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmData.alarmDescirbe)
}
inline void AlarmData::set_alarmdescirbe(const void* value, size_t size) {
  set_has_alarmdescirbe();
  if (alarmdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmdescirbe_ = new ::std::string;
  }
  alarmdescirbe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmData.alarmDescirbe)
}
inline ::std::string* AlarmData::mutable_alarmdescirbe() {
  set_has_alarmdescirbe();
  if (alarmdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmdescirbe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmData.alarmDescirbe)
  return alarmdescirbe_;
}
inline ::std::string* AlarmData::release_alarmdescirbe() {
  clear_has_alarmdescirbe();
  if (alarmdescirbe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarmdescirbe_;
    alarmdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmData::set_allocated_alarmdescirbe(::std::string* alarmdescirbe) {
  if (alarmdescirbe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmdescirbe_;
  }
  if (alarmdescirbe) {
    set_has_alarmdescirbe();
    alarmdescirbe_ = alarmdescirbe;
  } else {
    clear_has_alarmdescirbe();
    alarmdescirbe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmData.alarmDescirbe)
}

// optional int32 raisuDustType = 6 [default = -1];
inline bool AlarmData::has_raisudusttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmData::set_has_raisudusttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmData::clear_has_raisudusttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmData::clear_raisudusttype() {
  raisudusttype_ = -1;
  clear_has_raisudusttype();
}
inline ::google::protobuf::int32 AlarmData::raisudusttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.raisuDustType)
  return raisudusttype_;
}
inline void AlarmData::set_raisudusttype(::google::protobuf::int32 value) {
  set_has_raisudusttype();
  raisudusttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.raisuDustType)
}

// optional float alarmNum = 7 [default = 100000];
inline bool AlarmData::has_alarmnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlarmData::set_has_alarmnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlarmData::clear_has_alarmnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlarmData::clear_alarmnum() {
  alarmnum_ = 100000;
  clear_has_alarmnum();
}
inline float AlarmData::alarmnum() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.alarmNum)
  return alarmnum_;
}
inline void AlarmData::set_alarmnum(float value) {
  set_has_alarmnum();
  alarmnum_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmData.alarmNum)
}

// optional .com.arges.file.proto.DeviceInfo currentAlarmDev = 8;
inline bool AlarmData::has_currentalarmdev() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlarmData::set_has_currentalarmdev() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlarmData::clear_has_currentalarmdev() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlarmData::clear_currentalarmdev() {
  if (currentalarmdev_ != NULL) currentalarmdev_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_currentalarmdev();
}
inline const ::com::arges::file::proto::DeviceInfo& AlarmData::currentalarmdev() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.currentAlarmDev)
  return currentalarmdev_ != NULL ? *currentalarmdev_ : *default_instance_->currentalarmdev_;
}
inline ::com::arges::file::proto::DeviceInfo* AlarmData::mutable_currentalarmdev() {
  set_has_currentalarmdev();
  if (currentalarmdev_ == NULL) currentalarmdev_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmData.currentAlarmDev)
  return currentalarmdev_;
}
inline ::com::arges::file::proto::DeviceInfo* AlarmData::release_currentalarmdev() {
  clear_has_currentalarmdev();
  ::com::arges::file::proto::DeviceInfo* temp = currentalarmdev_;
  currentalarmdev_ = NULL;
  return temp;
}
inline void AlarmData::set_allocated_currentalarmdev(::com::arges::file::proto::DeviceInfo* currentalarmdev) {
  delete currentalarmdev_;
  currentalarmdev_ = currentalarmdev;
  if (currentalarmdev) {
    set_has_currentalarmdev();
  } else {
    clear_has_currentalarmdev();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmData.currentAlarmDev)
}

// optional .com.arges.file.proto.ActionLinkData action = 9;
inline bool AlarmData::has_action() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlarmData::set_has_action() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlarmData::clear_has_action() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlarmData::clear_action() {
  if (action_ != NULL) action_->::com::arges::file::proto::ActionLinkData::Clear();
  clear_has_action();
}
inline const ::com::arges::file::proto::ActionLinkData& AlarmData::action() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmData.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::com::arges::file::proto::ActionLinkData* AlarmData::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::com::arges::file::proto::ActionLinkData;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmData.action)
  return action_;
}
inline ::com::arges::file::proto::ActionLinkData* AlarmData::release_action() {
  clear_has_action();
  ::com::arges::file::proto::ActionLinkData* temp = action_;
  action_ = NULL;
  return temp;
}
inline void AlarmData::set_allocated_action(::com::arges::file::proto::ActionLinkData* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmData.action)
}

// -------------------------------------------------------------------

// AlarmMassage

// optional int32 result = 1 [default = -1];
inline bool AlarmMassage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmMassage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AlarmMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmMassage.result)
  return result_;
}
inline void AlarmMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmMassage.result)
}

// optional bytes resultDescribe = 2 [default = ""];
inline bool AlarmMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& AlarmMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmMassage.resultDescribe)
  return *resultdescribe_;
}
inline void AlarmMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmMassage.resultDescribe)
}
inline void AlarmMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmMassage.resultDescribe)
}
inline void AlarmMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmMassage.resultDescribe)
}
inline ::std::string* AlarmMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* AlarmMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmMassage.resultDescribe)
}

// optional int64 userId = 3 [default = -1];
inline bool AlarmMassage::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmMassage::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmMassage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmMassage::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 AlarmMassage::userid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmMassage.userId)
  return userid_;
}
inline void AlarmMassage::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmMassage.userId)
}

// optional .com.arges.file.proto.AlarmData alarm = 4;
inline bool AlarmMassage::has_alarm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmMassage::set_has_alarm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmMassage::clear_has_alarm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmMassage::clear_alarm() {
  if (alarm_ != NULL) alarm_->::com::arges::file::proto::AlarmData::Clear();
  clear_has_alarm();
}
inline const ::com::arges::file::proto::AlarmData& AlarmMassage::alarm() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmMassage.alarm)
  return alarm_ != NULL ? *alarm_ : *default_instance_->alarm_;
}
inline ::com::arges::file::proto::AlarmData* AlarmMassage::mutable_alarm() {
  set_has_alarm();
  if (alarm_ == NULL) alarm_ = new ::com::arges::file::proto::AlarmData;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmMassage.alarm)
  return alarm_;
}
inline ::com::arges::file::proto::AlarmData* AlarmMassage::release_alarm() {
  clear_has_alarm();
  ::com::arges::file::proto::AlarmData* temp = alarm_;
  alarm_ = NULL;
  return temp;
}
inline void AlarmMassage::set_allocated_alarm(::com::arges::file::proto::AlarmData* alarm) {
  delete alarm_;
  alarm_ = alarm;
  if (alarm) {
    set_has_alarm();
  } else {
    clear_has_alarm();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmMassage.alarm)
}

// -------------------------------------------------------------------

// AlarmPlanData

// optional string id = 1 [default = ""];
inline bool AlarmPlanData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmPlanData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmPlanData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmPlanData::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AlarmPlanData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.id)
  return *id_;
}
inline void AlarmPlanData::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.id)
}
inline void AlarmPlanData::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanData.id)
}
inline void AlarmPlanData::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanData.id)
}
inline ::std::string* AlarmPlanData::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanData.id)
  return id_;
}
inline ::std::string* AlarmPlanData::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmPlanData::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmPlanData.id)
}

// optional int64 userId = 2 [default = -1];
inline bool AlarmPlanData::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmPlanData::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmPlanData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmPlanData::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 AlarmPlanData::userid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.userId)
  return userid_;
}
inline void AlarmPlanData::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.userId)
}

// optional int32 userType = 3 [default = -1];
inline bool AlarmPlanData::has_usertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmPlanData::set_has_usertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmPlanData::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmPlanData::clear_usertype() {
  usertype_ = -1;
  clear_has_usertype();
}
inline ::google::protobuf::int32 AlarmPlanData::usertype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.userType)
  return usertype_;
}
inline void AlarmPlanData::set_usertype(::google::protobuf::int32 value) {
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.userType)
}

// optional string name = 4 [default = ""];
inline bool AlarmPlanData::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmPlanData::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmPlanData::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmPlanData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AlarmPlanData::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.name)
  return *name_;
}
inline void AlarmPlanData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.name)
}
inline void AlarmPlanData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanData.name)
}
inline void AlarmPlanData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanData.name)
}
inline ::std::string* AlarmPlanData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanData.name)
  return name_;
}
inline ::std::string* AlarmPlanData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmPlanData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmPlanData.name)
}

// optional int64 timeTemplateId = 5 [default = -1];
inline bool AlarmPlanData::has_timetemplateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmPlanData::set_has_timetemplateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmPlanData::clear_has_timetemplateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmPlanData::clear_timetemplateid() {
  timetemplateid_ = GOOGLE_LONGLONG(-1);
  clear_has_timetemplateid();
}
inline ::google::protobuf::int64 AlarmPlanData::timetemplateid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.timeTemplateId)
  return timetemplateid_;
}
inline void AlarmPlanData::set_timetemplateid(::google::protobuf::int64 value) {
  set_has_timetemplateid();
  timetemplateid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.timeTemplateId)
}

// optional int32 state = 6 [default = -1];
inline bool AlarmPlanData::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmPlanData::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmPlanData::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmPlanData::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 AlarmPlanData::state() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.state)
  return state_;
}
inline void AlarmPlanData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.state)
}

// optional bytes describe = 7 [default = ""];
inline bool AlarmPlanData::has_describe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlarmPlanData::set_has_describe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlarmPlanData::clear_has_describe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlarmPlanData::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& AlarmPlanData::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.describe)
  return *describe_;
}
inline void AlarmPlanData::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanData.describe)
}
inline void AlarmPlanData::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanData.describe)
}
inline void AlarmPlanData::set_describe(const void* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanData.describe)
}
inline ::std::string* AlarmPlanData::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanData.describe)
  return describe_;
}
inline ::std::string* AlarmPlanData::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmPlanData::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmPlanData.describe)
}

// repeated .com.arges.file.proto.AlarmRuleData alarms = 8;
inline int AlarmPlanData::alarms_size() const {
  return alarms_.size();
}
inline void AlarmPlanData::clear_alarms() {
  alarms_.Clear();
}
inline const ::com::arges::file::proto::AlarmRuleData& AlarmPlanData::alarms(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.alarms)
  return alarms_.Get(index);
}
inline ::com::arges::file::proto::AlarmRuleData* AlarmPlanData::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanData.alarms)
  return alarms_.Mutable(index);
}
inline ::com::arges::file::proto::AlarmRuleData* AlarmPlanData::add_alarms() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmPlanData.alarms)
  return alarms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmRuleData >&
AlarmPlanData::alarms() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmPlanData.alarms)
  return alarms_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmRuleData >*
AlarmPlanData::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmPlanData.alarms)
  return &alarms_;
}

// repeated .com.arges.file.proto.SoundLinkData sounds = 9;
inline int AlarmPlanData::sounds_size() const {
  return sounds_.size();
}
inline void AlarmPlanData::clear_sounds() {
  sounds_.Clear();
}
inline const ::com::arges::file::proto::SoundLinkData& AlarmPlanData::sounds(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanData.sounds)
  return sounds_.Get(index);
}
inline ::com::arges::file::proto::SoundLinkData* AlarmPlanData::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanData.sounds)
  return sounds_.Mutable(index);
}
inline ::com::arges::file::proto::SoundLinkData* AlarmPlanData::add_sounds() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmPlanData.sounds)
  return sounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >&
AlarmPlanData::sounds() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmPlanData.sounds)
  return sounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::SoundLinkData >*
AlarmPlanData::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmPlanData.sounds)
  return &sounds_;
}

// -------------------------------------------------------------------

// AlarmRuleData

// optional int64 ruleId = 1 [default = -1];
inline bool AlarmRuleData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmRuleData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmRuleData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmRuleData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 AlarmRuleData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.ruleId)
  return ruleid_;
}
inline void AlarmRuleData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.ruleId)
}

// optional int64 planId = 2 [default = -1];
inline bool AlarmRuleData::has_planid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmRuleData::set_has_planid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmRuleData::clear_has_planid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmRuleData::clear_planid() {
  planid_ = GOOGLE_LONGLONG(-1);
  clear_has_planid();
}
inline ::google::protobuf::int64 AlarmRuleData::planid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.planId)
  return planid_;
}
inline void AlarmRuleData::set_planid(::google::protobuf::int64 value) {
  set_has_planid();
  planid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.planId)
}

// repeated int64 alarmType = 3;
inline int AlarmRuleData::alarmtype_size() const {
  return alarmtype_.size();
}
inline void AlarmRuleData::clear_alarmtype() {
  alarmtype_.Clear();
}
inline ::google::protobuf::int64 AlarmRuleData::alarmtype(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.alarmType)
  return alarmtype_.Get(index);
}
inline void AlarmRuleData::set_alarmtype(int index, ::google::protobuf::int64 value) {
  alarmtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.alarmType)
}
inline void AlarmRuleData::add_alarmtype(::google::protobuf::int64 value) {
  alarmtype_.Add(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmRuleData.alarmType)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AlarmRuleData::alarmtype() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmRuleData.alarmType)
  return alarmtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AlarmRuleData::mutable_alarmtype() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmRuleData.alarmType)
  return &alarmtype_;
}

// optional string ruleName = 4 [default = ""];
inline bool AlarmRuleData::has_rulename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmRuleData::set_has_rulename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmRuleData::clear_has_rulename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmRuleData::clear_rulename() {
  if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_->clear();
  }
  clear_has_rulename();
}
inline const ::std::string& AlarmRuleData::rulename() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.ruleName)
  return *rulename_;
}
inline void AlarmRuleData::set_rulename(const ::std::string& value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.ruleName)
}
inline void AlarmRuleData::set_rulename(const char* value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmRuleData.ruleName)
}
inline void AlarmRuleData::set_rulename(const char* value, size_t size) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmRuleData.ruleName)
}
inline ::std::string* AlarmRuleData::mutable_rulename() {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmRuleData.ruleName)
  return rulename_;
}
inline ::std::string* AlarmRuleData::release_rulename() {
  clear_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rulename_;
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmRuleData::set_allocated_rulename(::std::string* rulename) {
  if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rulename_;
  }
  if (rulename) {
    set_has_rulename();
    rulename_ = rulename;
  } else {
    clear_has_rulename();
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmRuleData.ruleName)
}

// optional bytes ruleDescribe = 5 [default = ""];
inline bool AlarmRuleData::has_ruledescribe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmRuleData::set_has_ruledescribe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmRuleData::clear_has_ruledescribe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmRuleData::clear_ruledescribe() {
  if (ruledescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruledescribe_->clear();
  }
  clear_has_ruledescribe();
}
inline const ::std::string& AlarmRuleData::ruledescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.ruleDescribe)
  return *ruledescribe_;
}
inline void AlarmRuleData::set_ruledescribe(const ::std::string& value) {
  set_has_ruledescribe();
  if (ruledescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruledescribe_ = new ::std::string;
  }
  ruledescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.ruleDescribe)
}
inline void AlarmRuleData::set_ruledescribe(const char* value) {
  set_has_ruledescribe();
  if (ruledescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruledescribe_ = new ::std::string;
  }
  ruledescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmRuleData.ruleDescribe)
}
inline void AlarmRuleData::set_ruledescribe(const void* value, size_t size) {
  set_has_ruledescribe();
  if (ruledescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruledescribe_ = new ::std::string;
  }
  ruledescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmRuleData.ruleDescribe)
}
inline ::std::string* AlarmRuleData::mutable_ruledescribe() {
  set_has_ruledescribe();
  if (ruledescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruledescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmRuleData.ruleDescribe)
  return ruledescribe_;
}
inline ::std::string* AlarmRuleData::release_ruledescribe() {
  clear_has_ruledescribe();
  if (ruledescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ruledescribe_;
    ruledescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmRuleData::set_allocated_ruledescribe(::std::string* ruledescribe) {
  if (ruledescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ruledescribe_;
  }
  if (ruledescribe) {
    set_has_ruledescribe();
    ruledescribe_ = ruledescribe;
  } else {
    clear_has_ruledescribe();
    ruledescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmRuleData.ruleDescribe)
}

// optional int32 state = 7 [default = -1];
inline bool AlarmRuleData::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmRuleData::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmRuleData::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmRuleData::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 AlarmRuleData::state() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.state)
  return state_;
}
inline void AlarmRuleData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmRuleData.state)
}

// repeated .com.arges.file.proto.AlarmSrcDevInfo srcDevs = 8;
inline int AlarmRuleData::srcdevs_size() const {
  return srcdevs_.size();
}
inline void AlarmRuleData::clear_srcdevs() {
  srcdevs_.Clear();
}
inline const ::com::arges::file::proto::AlarmSrcDevInfo& AlarmRuleData::srcdevs(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.srcDevs)
  return srcdevs_.Get(index);
}
inline ::com::arges::file::proto::AlarmSrcDevInfo* AlarmRuleData::mutable_srcdevs(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmRuleData.srcDevs)
  return srcdevs_.Mutable(index);
}
inline ::com::arges::file::proto::AlarmSrcDevInfo* AlarmRuleData::add_srcdevs() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmRuleData.srcDevs)
  return srcdevs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmSrcDevInfo >&
AlarmRuleData::srcdevs() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmRuleData.srcDevs)
  return srcdevs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmSrcDevInfo >*
AlarmRuleData::mutable_srcdevs() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmRuleData.srcDevs)
  return &srcdevs_;
}

// optional .com.arges.file.proto.ActionLinkData action = 9;
inline bool AlarmRuleData::has_action() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlarmRuleData::set_has_action() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlarmRuleData::clear_has_action() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlarmRuleData::clear_action() {
  if (action_ != NULL) action_->::com::arges::file::proto::ActionLinkData::Clear();
  clear_has_action();
}
inline const ::com::arges::file::proto::ActionLinkData& AlarmRuleData::action() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmRuleData.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::com::arges::file::proto::ActionLinkData* AlarmRuleData::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::com::arges::file::proto::ActionLinkData;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmRuleData.action)
  return action_;
}
inline ::com::arges::file::proto::ActionLinkData* AlarmRuleData::release_action() {
  clear_has_action();
  ::com::arges::file::proto::ActionLinkData* temp = action_;
  action_ = NULL;
  return temp;
}
inline void AlarmRuleData::set_allocated_action(::com::arges::file::proto::ActionLinkData* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmRuleData.action)
}

// -------------------------------------------------------------------

// AlarmPlanMassage

// optional int32 requestType = 1 [default = -1];
inline bool AlarmPlanMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmPlanMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmPlanMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmPlanMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 AlarmPlanMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.requestType)
  return requesttype_;
}
inline void AlarmPlanMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanMassage.requestType)
}

// optional int32 result = 2 [default = -1];
inline bool AlarmPlanMassage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmPlanMassage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmPlanMassage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmPlanMassage::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AlarmPlanMassage::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.result)
  return result_;
}
inline void AlarmPlanMassage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanMassage.result)
}

// optional bytes resultDescribe = 3 [default = ""];
inline bool AlarmPlanMassage::has_resultdescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmPlanMassage::set_has_resultdescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmPlanMassage::clear_has_resultdescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmPlanMassage::clear_resultdescribe() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_->clear();
  }
  clear_has_resultdescribe();
}
inline const ::std::string& AlarmPlanMassage::resultdescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
  return *resultdescribe_;
}
inline void AlarmPlanMassage::set_resultdescribe(const ::std::string& value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
}
inline void AlarmPlanMassage::set_resultdescribe(const char* value) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
}
inline void AlarmPlanMassage::set_resultdescribe(const void* value, size_t size) {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  resultdescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
}
inline ::std::string* AlarmPlanMassage::mutable_resultdescribe() {
  set_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdescribe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
  return resultdescribe_;
}
inline ::std::string* AlarmPlanMassage::release_resultdescribe() {
  clear_has_resultdescribe();
  if (resultdescribe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdescribe_;
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmPlanMassage::set_allocated_resultdescribe(::std::string* resultdescribe) {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (resultdescribe) {
    set_has_resultdescribe();
    resultdescribe_ = resultdescribe;
  } else {
    clear_has_resultdescribe();
    resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmPlanMassage.resultDescribe)
}

// repeated string id = 4;
inline int AlarmPlanMassage::id_size() const {
  return id_.size();
}
inline void AlarmPlanMassage::clear_id() {
  id_.Clear();
}
inline const ::std::string& AlarmPlanMassage::id(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.id)
  return id_.Get(index);
}
inline ::std::string* AlarmPlanMassage::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanMassage.id)
  return id_.Mutable(index);
}
inline void AlarmPlanMassage::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanMassage.id)
  id_.Mutable(index)->assign(value);
}
inline void AlarmPlanMassage::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanMassage.id)
}
inline void AlarmPlanMassage::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanMassage.id)
}
inline ::std::string* AlarmPlanMassage::add_id() {
  return id_.Add();
}
inline void AlarmPlanMassage::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmPlanMassage.id)
}
inline void AlarmPlanMassage::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.AlarmPlanMassage.id)
}
inline void AlarmPlanMassage::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.AlarmPlanMassage.id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlarmPlanMassage::id() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmPlanMassage.id)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlarmPlanMassage::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmPlanMassage.id)
  return &id_;
}

// optional string name = 5 [default = ""];
inline bool AlarmPlanMassage::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmPlanMassage::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmPlanMassage::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmPlanMassage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AlarmPlanMassage::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.name)
  return *name_;
}
inline void AlarmPlanMassage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.AlarmPlanMassage.name)
}
inline void AlarmPlanMassage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.AlarmPlanMassage.name)
}
inline void AlarmPlanMassage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.AlarmPlanMassage.name)
}
inline ::std::string* AlarmPlanMassage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanMassage.name)
  return name_;
}
inline ::std::string* AlarmPlanMassage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmPlanMassage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.AlarmPlanMassage.name)
}

// repeated .com.arges.file.proto.AlarmPlanData plan = 6;
inline int AlarmPlanMassage::plan_size() const {
  return plan_.size();
}
inline void AlarmPlanMassage::clear_plan() {
  plan_.Clear();
}
inline const ::com::arges::file::proto::AlarmPlanData& AlarmPlanMassage::plan(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.AlarmPlanMassage.plan)
  return plan_.Get(index);
}
inline ::com::arges::file::proto::AlarmPlanData* AlarmPlanMassage::mutable_plan(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.AlarmPlanMassage.plan)
  return plan_.Mutable(index);
}
inline ::com::arges::file::proto::AlarmPlanData* AlarmPlanMassage::add_plan() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.AlarmPlanMassage.plan)
  return plan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmPlanData >&
AlarmPlanMassage::plan() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.AlarmPlanMassage.plan)
  return plan_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::AlarmPlanData >*
AlarmPlanMassage::mutable_plan() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.AlarmPlanMassage.plan)
  return &plan_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::DEVICE_TYPE_OF_ALARM_SROUCE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::DEVICE_TYPE_OF_ALARM_SROUCE>() {
  return ::com::arges::file::proto::DEVICE_TYPE_OF_ALARM_SROUCE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_TYPE>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_TYPE>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_ACTION_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_ACTION_TYPE>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_ACTION_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_ACTION_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_ACTION_TYPE>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_ACTION_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::USING_STAT_OF_ALARM_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::USING_STAT_OF_ALARM_PLAN>() {
  return ::com::arges::file::proto::USING_STAT_OF_ALARM_PLAN_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::USER_TYPE_OF_ALARM_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::USER_TYPE_OF_ALARM_PLAN>() {
  return ::com::arges::file::proto::USER_TYPE_OF_ALARM_PLAN_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_PLAN>() {
  return ::com::arges::file::proto::RESULT_TYPE_OF_ALARM_PLAN_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_PLAN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_PLAN>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_ALARM_PLAN_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AlarmBean_2eproto__INCLUDED
