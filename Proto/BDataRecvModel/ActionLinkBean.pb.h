// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActionLinkBean.proto

#ifndef PROTOBUF_ActionLinkBean_2eproto__INCLUDED
#define PROTOBUF_ActionLinkBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DevInfoListBean.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActionLinkBean_2eproto();
void protobuf_AssignDesc_ActionLinkBean_2eproto();
void protobuf_ShutdownFile_ActionLinkBean_2eproto();

class PictureLinkMassage;
class SoundLinkData;
class LightLinkData;
class VideoLinkData;
class EmailLinkData;
class RecordLinkData;
class SmsLinkData;
class TvwallLinkData;

enum REQUEST_TYPE_OF_PICTURE_LINK {
  PICTURE_LINK_GET_DEV_INFO = 1,
  PICTURE_LINK_GET_PICTURE = 2
};
bool REQUEST_TYPE_OF_PICTURE_LINK_IsValid(int value);
const REQUEST_TYPE_OF_PICTURE_LINK REQUEST_TYPE_OF_PICTURE_LINK_MIN = PICTURE_LINK_GET_DEV_INFO;
const REQUEST_TYPE_OF_PICTURE_LINK REQUEST_TYPE_OF_PICTURE_LINK_MAX = PICTURE_LINK_GET_PICTURE;
const int REQUEST_TYPE_OF_PICTURE_LINK_ARRAYSIZE = REQUEST_TYPE_OF_PICTURE_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_PICTURE_LINK_descriptor();
inline const ::std::string& REQUEST_TYPE_OF_PICTURE_LINK_Name(REQUEST_TYPE_OF_PICTURE_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_OF_PICTURE_LINK_descriptor(), value);
}
inline bool REQUEST_TYPE_OF_PICTURE_LINK_Parse(
    const ::std::string& name, REQUEST_TYPE_OF_PICTURE_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE_OF_PICTURE_LINK>(
    REQUEST_TYPE_OF_PICTURE_LINK_descriptor(), name, value);
}
enum LOOP_TYPE_OF_SOUND_LINK {
  SOUND_LINK_NOT_LOOP_PLAY = 0,
  SOUND_LINK_LOOP_PLAY = 1
};
bool LOOP_TYPE_OF_SOUND_LINK_IsValid(int value);
const LOOP_TYPE_OF_SOUND_LINK LOOP_TYPE_OF_SOUND_LINK_MIN = SOUND_LINK_NOT_LOOP_PLAY;
const LOOP_TYPE_OF_SOUND_LINK LOOP_TYPE_OF_SOUND_LINK_MAX = SOUND_LINK_LOOP_PLAY;
const int LOOP_TYPE_OF_SOUND_LINK_ARRAYSIZE = LOOP_TYPE_OF_SOUND_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOOP_TYPE_OF_SOUND_LINK_descriptor();
inline const ::std::string& LOOP_TYPE_OF_SOUND_LINK_Name(LOOP_TYPE_OF_SOUND_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOOP_TYPE_OF_SOUND_LINK_descriptor(), value);
}
inline bool LOOP_TYPE_OF_SOUND_LINK_Parse(
    const ::std::string& name, LOOP_TYPE_OF_SOUND_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOOP_TYPE_OF_SOUND_LINK>(
    LOOP_TYPE_OF_SOUND_LINK_descriptor(), name, value);
}
enum AUTO_TYPE_OF_LIGHT_LINK {
  LIGHT_LINK_IS_NOT_AUTO_OPEN = 0,
  LIGHT_LINK_IS_AUTO_OPEN = 1
};
bool AUTO_TYPE_OF_LIGHT_LINK_IsValid(int value);
const AUTO_TYPE_OF_LIGHT_LINK AUTO_TYPE_OF_LIGHT_LINK_MIN = LIGHT_LINK_IS_NOT_AUTO_OPEN;
const AUTO_TYPE_OF_LIGHT_LINK AUTO_TYPE_OF_LIGHT_LINK_MAX = LIGHT_LINK_IS_AUTO_OPEN;
const int AUTO_TYPE_OF_LIGHT_LINK_ARRAYSIZE = AUTO_TYPE_OF_LIGHT_LINK_MAX + 1;

const ::google::protobuf::EnumDescriptor* AUTO_TYPE_OF_LIGHT_LINK_descriptor();
inline const ::std::string& AUTO_TYPE_OF_LIGHT_LINK_Name(AUTO_TYPE_OF_LIGHT_LINK value) {
  return ::google::protobuf::internal::NameOfEnum(
    AUTO_TYPE_OF_LIGHT_LINK_descriptor(), value);
}
inline bool AUTO_TYPE_OF_LIGHT_LINK_Parse(
    const ::std::string& name, AUTO_TYPE_OF_LIGHT_LINK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AUTO_TYPE_OF_LIGHT_LINK>(
    AUTO_TYPE_OF_LIGHT_LINK_descriptor(), name, value);
}
// ===================================================================

class PictureLinkMassage : public ::google::protobuf::Message {
 public:
  PictureLinkMassage();
  virtual ~PictureLinkMassage();

  PictureLinkMassage(const PictureLinkMassage& from);

  inline PictureLinkMassage& operator=(const PictureLinkMassage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PictureLinkMassage& default_instance();

  void Swap(PictureLinkMassage* other);

  // implements Message ----------------------------------------------

  PictureLinkMassage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PictureLinkMassage& from);
  void MergeFrom(const PictureLinkMassage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2 [default = 0];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string token = 3 [default = ""];
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional int32 requestType = 4 [default = -1];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 4;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional string devicecode = 5 [default = ""];
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDevicecodeFieldNumber = 5;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string wristmac = 6 [default = ""];
  inline bool has_wristmac() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 6;
  inline const ::std::string& wristmac() const;
  inline void set_wristmac(const ::std::string& value);
  inline void set_wristmac(const char* value);
  inline void set_wristmac(const char* value, size_t size);
  inline ::std::string* mutable_wristmac();
  inline ::std::string* release_wristmac();
  inline void set_allocated_wristmac(::std::string* wristmac);

  // optional uint64 time = 7 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .com.arges.file.proto.DeviceInfo devInfo = 8;
  inline bool has_devinfo() const;
  inline void clear_devinfo();
  static const int kDevInfoFieldNumber = 8;
  inline const ::com::arges::file::proto::DeviceInfo& devinfo() const;
  inline ::com::arges::file::proto::DeviceInfo* mutable_devinfo();
  inline ::com::arges::file::proto::DeviceInfo* release_devinfo();
  inline void set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo);

  // optional string capture1 = 9 [default = ""];
  inline bool has_capture1() const;
  inline void clear_capture1();
  static const int kCapture1FieldNumber = 9;
  inline const ::std::string& capture1() const;
  inline void set_capture1(const ::std::string& value);
  inline void set_capture1(const char* value);
  inline void set_capture1(const char* value, size_t size);
  inline ::std::string* mutable_capture1();
  inline ::std::string* release_capture1();
  inline void set_allocated_capture1(::std::string* capture1);

  // optional string capture2 = 10 [default = ""];
  inline bool has_capture2() const;
  inline void clear_capture2();
  static const int kCapture2FieldNumber = 10;
  inline const ::std::string& capture2() const;
  inline void set_capture2(const ::std::string& value);
  inline void set_capture2(const char* value);
  inline void set_capture2(const char* value, size_t size);
  inline ::std::string* mutable_capture2();
  inline ::std::string* release_capture2();
  inline void set_allocated_capture2(::std::string* capture2);

  // optional string capture3 = 11 [default = ""];
  inline bool has_capture3() const;
  inline void clear_capture3();
  static const int kCapture3FieldNumber = 11;
  inline const ::std::string& capture3() const;
  inline void set_capture3(const ::std::string& value);
  inline void set_capture3(const char* value);
  inline void set_capture3(const char* value, size_t size);
  inline ::std::string* mutable_capture3();
  inline ::std::string* release_capture3();
  inline void set_allocated_capture3(::std::string* capture3);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.PictureLinkMassage)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_wristmac();
  inline void clear_has_wristmac();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_devinfo();
  inline void clear_has_devinfo();
  inline void set_has_capture1();
  inline void clear_has_capture1();
  inline void set_has_capture2();
  inline void clear_has_capture2();
  inline void set_has_capture3();
  inline void clear_has_capture3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::std::string* token_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 requesttype_;
  ::std::string* devicecode_;
  ::std::string* wristmac_;
  ::google::protobuf::uint64 time_;
  ::com::arges::file::proto::DeviceInfo* devinfo_;
  ::std::string* capture1_;
  ::std::string* capture2_;
  ::std::string* capture3_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static PictureLinkMassage* default_instance_;
};
// -------------------------------------------------------------------

class SoundLinkData : public ::google::protobuf::Message {
 public:
  SoundLinkData();
  virtual ~SoundLinkData();

  SoundLinkData(const SoundLinkData& from);

  inline SoundLinkData& operator=(const SoundLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundLinkData& default_instance();

  void Swap(SoundLinkData* other);

  // implements Message ----------------------------------------------

  SoundLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoundLinkData& from);
  void MergeFrom(const SoundLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 alarmType = 1 [default = -1];
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 1;
  inline ::google::protobuf::int64 alarmtype() const;
  inline void set_alarmtype(::google::protobuf::int64 value);

  // optional string name = 2 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string file = 3 [default = ""];
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional int32 isLoop = 4 [default = 0];
  inline bool has_isloop() const;
  inline void clear_isloop();
  static const int kIsLoopFieldNumber = 4;
  inline ::google::protobuf::int32 isloop() const;
  inline void set_isloop(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SoundLinkData)
 private:
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_isloop();
  inline void clear_has_isloop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 alarmtype_;
  ::std::string* name_;
  ::std::string* file_;
  ::google::protobuf::int32 isloop_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static SoundLinkData* default_instance_;
};
// -------------------------------------------------------------------

class LightLinkData : public ::google::protobuf::Message {
 public:
  LightLinkData();
  virtual ~LightLinkData();

  LightLinkData(const LightLinkData& from);

  inline LightLinkData& operator=(const LightLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightLinkData& default_instance();

  void Swap(LightLinkData* other);

  // implements Message ----------------------------------------------

  LightLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightLinkData& from);
  void MergeFrom(const LightLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string channelCode = 3 [default = ""];
  inline bool has_channelcode() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 3;
  inline const ::std::string& channelcode() const;
  inline void set_channelcode(const ::std::string& value);
  inline void set_channelcode(const char* value);
  inline void set_channelcode(const char* value, size_t size);
  inline ::std::string* mutable_channelcode();
  inline ::std::string* release_channelcode();
  inline void set_allocated_channelcode(::std::string* channelcode);

  // optional int64 stayTime = 4 [default = 0];
  inline bool has_staytime() const;
  inline void clear_staytime();
  static const int kStayTimeFieldNumber = 4;
  inline ::google::protobuf::int64 staytime() const;
  inline void set_staytime(::google::protobuf::int64 value);

  // optional int32 autoOpen = 5 [default = -1];
  inline bool has_autoopen() const;
  inline void clear_autoopen();
  static const int kAutoOpenFieldNumber = 5;
  inline ::google::protobuf::int32 autoopen() const;
  inline void set_autoopen(::google::protobuf::int32 value);

  // optional string devName = 6 [default = ""];
  inline bool has_devname() const;
  inline void clear_devname();
  static const int kDevNameFieldNumber = 6;
  inline const ::std::string& devname() const;
  inline void set_devname(const ::std::string& value);
  inline void set_devname(const char* value);
  inline void set_devname(const char* value, size_t size);
  inline ::std::string* mutable_devname();
  inline ::std::string* release_devname();
  inline void set_allocated_devname(::std::string* devname);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.LightLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_channelcode();
  inline void clear_has_channelcode();
  inline void set_has_staytime();
  inline void clear_has_staytime();
  inline void set_has_autoopen();
  inline void clear_has_autoopen();
  inline void set_has_devname();
  inline void clear_has_devname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* channelcode_;
  ::google::protobuf::int64 staytime_;
  ::std::string* devname_;
  ::google::protobuf::int32 autoopen_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static LightLinkData* default_instance_;
};
// -------------------------------------------------------------------

class VideoLinkData : public ::google::protobuf::Message {
 public:
  VideoLinkData();
  virtual ~VideoLinkData();

  VideoLinkData(const VideoLinkData& from);

  inline VideoLinkData& operator=(const VideoLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoLinkData& default_instance();

  void Swap(VideoLinkData* other);

  // implements Message ----------------------------------------------

  VideoLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoLinkData& from);
  void MergeFrom(const VideoLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string channelCode = 3 [default = ""];
  inline bool has_channelcode() const;
  inline void clear_channelcode();
  static const int kChannelCodeFieldNumber = 3;
  inline const ::std::string& channelcode() const;
  inline void set_channelcode(const ::std::string& value);
  inline void set_channelcode(const char* value);
  inline void set_channelcode(const char* value, size_t size);
  inline ::std::string* mutable_channelcode();
  inline ::std::string* release_channelcode();
  inline void set_allocated_channelcode(::std::string* channelcode);

  // optional int64 stayTime = 4 [default = 0];
  inline bool has_staytime() const;
  inline void clear_staytime();
  static const int kStayTimeFieldNumber = 4;
  inline ::google::protobuf::int64 staytime() const;
  inline void set_staytime(::google::protobuf::int64 value);

  // optional string prepoint = 5 [default = ""];
  inline bool has_prepoint() const;
  inline void clear_prepoint();
  static const int kPrepointFieldNumber = 5;
  inline const ::std::string& prepoint() const;
  inline void set_prepoint(const ::std::string& value);
  inline void set_prepoint(const char* value);
  inline void set_prepoint(const char* value, size_t size);
  inline ::std::string* mutable_prepoint();
  inline ::std::string* release_prepoint();
  inline void set_allocated_prepoint(::std::string* prepoint);

  // optional string devName = 6 [default = ""];
  inline bool has_devname() const;
  inline void clear_devname();
  static const int kDevNameFieldNumber = 6;
  inline const ::std::string& devname() const;
  inline void set_devname(const ::std::string& value);
  inline void set_devname(const char* value);
  inline void set_devname(const char* value, size_t size);
  inline ::std::string* mutable_devname();
  inline ::std::string* release_devname();
  inline void set_allocated_devname(::std::string* devname);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VideoLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_channelcode();
  inline void clear_has_channelcode();
  inline void set_has_staytime();
  inline void clear_has_staytime();
  inline void set_has_prepoint();
  inline void clear_has_prepoint();
  inline void set_has_devname();
  inline void clear_has_devname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* channelcode_;
  ::google::protobuf::int64 staytime_;
  ::std::string* prepoint_;
  ::std::string* devname_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static VideoLinkData* default_instance_;
};
// -------------------------------------------------------------------

class EmailLinkData : public ::google::protobuf::Message {
 public:
  EmailLinkData();
  virtual ~EmailLinkData();

  EmailLinkData(const EmailLinkData& from);

  inline EmailLinkData& operator=(const EmailLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailLinkData& default_instance();

  void Swap(EmailLinkData* other);

  // implements Message ----------------------------------------------

  EmailLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailLinkData& from);
  void MergeFrom(const EmailLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string subject = 3 [default = ""];
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 3;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional string content = 4 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.EmailLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* subject_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static EmailLinkData* default_instance_;
};
// -------------------------------------------------------------------

class RecordLinkData : public ::google::protobuf::Message {
 public:
  RecordLinkData();
  virtual ~RecordLinkData();

  RecordLinkData(const RecordLinkData& from);

  inline RecordLinkData& operator=(const RecordLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordLinkData& default_instance();

  void Swap(RecordLinkData* other);

  // implements Message ----------------------------------------------

  RecordLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordLinkData& from);
  void MergeFrom(const RecordLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int64 recordTime = 3 [default = 0];
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 3;
  inline ::google::protobuf::int64 recordtime() const;
  inline void set_recordtime(::google::protobuf::int64 value);

  // optional int64 preRecordTime = 4 [default = 0];
  inline bool has_prerecordtime() const;
  inline void clear_prerecordtime();
  static const int kPreRecordTimeFieldNumber = 4;
  inline ::google::protobuf::int64 prerecordtime() const;
  inline void set_prerecordtime(::google::protobuf::int64 value);

  // optional int32 assistantStream = 5 [default = -1];
  inline bool has_assistantstream() const;
  inline void clear_assistantstream();
  static const int kAssistantStreamFieldNumber = 5;
  inline ::google::protobuf::int32 assistantstream() const;
  inline void set_assistantstream(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RecordLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_prerecordtime();
  inline void clear_has_prerecordtime();
  inline void set_has_assistantstream();
  inline void clear_has_assistantstream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::google::protobuf::int64 recordtime_;
  ::google::protobuf::int64 prerecordtime_;
  ::google::protobuf::int32 assistantstream_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static RecordLinkData* default_instance_;
};
// -------------------------------------------------------------------

class SmsLinkData : public ::google::protobuf::Message {
 public:
  SmsLinkData();
  virtual ~SmsLinkData();

  SmsLinkData(const SmsLinkData& from);

  inline SmsLinkData& operator=(const SmsLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsLinkData& default_instance();

  void Swap(SmsLinkData* other);

  // implements Message ----------------------------------------------

  SmsLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmsLinkData& from);
  void MergeFrom(const SmsLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional string content = 3 [default = ""];
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.SmsLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static SmsLinkData* default_instance_;
};
// -------------------------------------------------------------------

class TvwallLinkData : public ::google::protobuf::Message {
 public:
  TvwallLinkData();
  virtual ~TvwallLinkData();

  TvwallLinkData(const TvwallLinkData& from);

  inline TvwallLinkData& operator=(const TvwallLinkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TvwallLinkData& default_instance();

  void Swap(TvwallLinkData* other);

  // implements Message ----------------------------------------------

  TvwallLinkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TvwallLinkData& from);
  void MergeFrom(const TvwallLinkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 ruleId = 2 [default = -1];
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  inline ::google::protobuf::int64 ruleid() const;
  inline void set_ruleid(::google::protobuf::int64 value);

  // optional int64 planId = 3 [default = -1];
  inline bool has_planid() const;
  inline void clear_planid();
  static const int kPlanIdFieldNumber = 3;
  inline ::google::protobuf::int64 planid() const;
  inline void set_planid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.TvwallLinkData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_planid();
  inline void clear_has_planid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ruleid_;
  ::google::protobuf::int64 planid_;
  friend void  protobuf_AddDesc_ActionLinkBean_2eproto();
  friend void protobuf_AssignDesc_ActionLinkBean_2eproto();
  friend void protobuf_ShutdownFile_ActionLinkBean_2eproto();

  void InitAsDefaultInstance();
  static TvwallLinkData* default_instance_;
};
// ===================================================================


// ===================================================================

// PictureLinkMassage

// optional string ip = 1 [default = ""];
inline bool PictureLinkMassage::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PictureLinkMassage::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PictureLinkMassage::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PictureLinkMassage::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PictureLinkMassage::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.ip)
  return *ip_;
}
inline void PictureLinkMassage::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.ip)
}
inline void PictureLinkMassage::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.ip)
}
inline void PictureLinkMassage::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.ip)
}
inline ::std::string* PictureLinkMassage::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.ip)
  return ip_;
}
inline ::std::string* PictureLinkMassage::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.ip)
}

// optional int32 port = 2 [default = 0];
inline bool PictureLinkMassage::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PictureLinkMassage::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PictureLinkMassage::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PictureLinkMassage::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 PictureLinkMassage::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.port)
  return port_;
}
inline void PictureLinkMassage::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.port)
}

// optional string token = 3 [default = ""];
inline bool PictureLinkMassage::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PictureLinkMassage::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PictureLinkMassage::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PictureLinkMassage::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PictureLinkMassage::token() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.token)
  return *token_;
}
inline void PictureLinkMassage::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.token)
}
inline void PictureLinkMassage::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.token)
}
inline void PictureLinkMassage::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.token)
}
inline ::std::string* PictureLinkMassage::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.token)
  return token_;
}
inline ::std::string* PictureLinkMassage::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.token)
}

// optional int32 requestType = 4 [default = -1];
inline bool PictureLinkMassage::has_requesttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PictureLinkMassage::set_has_requesttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PictureLinkMassage::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PictureLinkMassage::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 PictureLinkMassage::requesttype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.requestType)
  return requesttype_;
}
inline void PictureLinkMassage::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.requestType)
}

// optional string devicecode = 5 [default = ""];
inline bool PictureLinkMassage::has_devicecode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PictureLinkMassage::set_has_devicecode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PictureLinkMassage::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PictureLinkMassage::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& PictureLinkMassage::devicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.devicecode)
  return *devicecode_;
}
inline void PictureLinkMassage::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.devicecode)
}
inline void PictureLinkMassage::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.devicecode)
}
inline void PictureLinkMassage::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.devicecode)
}
inline ::std::string* PictureLinkMassage::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.devicecode)
  return devicecode_;
}
inline ::std::string* PictureLinkMassage::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.devicecode)
}

// optional string wristmac = 6 [default = ""];
inline bool PictureLinkMassage::has_wristmac() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PictureLinkMassage::set_has_wristmac() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PictureLinkMassage::clear_has_wristmac() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PictureLinkMassage::clear_wristmac() {
  if (wristmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristmac_->clear();
  }
  clear_has_wristmac();
}
inline const ::std::string& PictureLinkMassage::wristmac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.wristmac)
  return *wristmac_;
}
inline void PictureLinkMassage::set_wristmac(const ::std::string& value) {
  set_has_wristmac();
  if (wristmac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.wristmac)
}
inline void PictureLinkMassage::set_wristmac(const char* value) {
  set_has_wristmac();
  if (wristmac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.wristmac)
}
inline void PictureLinkMassage::set_wristmac(const char* value, size_t size) {
  set_has_wristmac();
  if (wristmac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.wristmac)
}
inline ::std::string* PictureLinkMassage::mutable_wristmac() {
  set_has_wristmac();
  if (wristmac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristmac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.wristmac)
  return wristmac_;
}
inline ::std::string* PictureLinkMassage::release_wristmac() {
  clear_has_wristmac();
  if (wristmac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wristmac_;
    wristmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_wristmac(::std::string* wristmac) {
  if (wristmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristmac_;
  }
  if (wristmac) {
    set_has_wristmac();
    wristmac_ = wristmac;
  } else {
    clear_has_wristmac();
    wristmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.wristmac)
}

// optional uint64 time = 7 [default = 0];
inline bool PictureLinkMassage::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PictureLinkMassage::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PictureLinkMassage::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PictureLinkMassage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 PictureLinkMassage::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.time)
  return time_;
}
inline void PictureLinkMassage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.time)
}

// optional .com.arges.file.proto.DeviceInfo devInfo = 8;
inline bool PictureLinkMassage::has_devinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PictureLinkMassage::set_has_devinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PictureLinkMassage::clear_has_devinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PictureLinkMassage::clear_devinfo() {
  if (devinfo_ != NULL) devinfo_->::com::arges::file::proto::DeviceInfo::Clear();
  clear_has_devinfo();
}
inline const ::com::arges::file::proto::DeviceInfo& PictureLinkMassage::devinfo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.devInfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* PictureLinkMassage::mutable_devinfo() {
  set_has_devinfo();
  if (devinfo_ == NULL) devinfo_ = new ::com::arges::file::proto::DeviceInfo;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.devInfo)
  return devinfo_;
}
inline ::com::arges::file::proto::DeviceInfo* PictureLinkMassage::release_devinfo() {
  clear_has_devinfo();
  ::com::arges::file::proto::DeviceInfo* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
inline void PictureLinkMassage::set_allocated_devinfo(::com::arges::file::proto::DeviceInfo* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    set_has_devinfo();
  } else {
    clear_has_devinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.devInfo)
}

// optional string capture1 = 9 [default = ""];
inline bool PictureLinkMassage::has_capture1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PictureLinkMassage::set_has_capture1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PictureLinkMassage::clear_has_capture1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PictureLinkMassage::clear_capture1() {
  if (capture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture1_->clear();
  }
  clear_has_capture1();
}
inline const ::std::string& PictureLinkMassage::capture1() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.capture1)
  return *capture1_;
}
inline void PictureLinkMassage::set_capture1(const ::std::string& value) {
  set_has_capture1();
  if (capture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture1_ = new ::std::string;
  }
  capture1_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.capture1)
}
inline void PictureLinkMassage::set_capture1(const char* value) {
  set_has_capture1();
  if (capture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture1_ = new ::std::string;
  }
  capture1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.capture1)
}
inline void PictureLinkMassage::set_capture1(const char* value, size_t size) {
  set_has_capture1();
  if (capture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture1_ = new ::std::string;
  }
  capture1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.capture1)
}
inline ::std::string* PictureLinkMassage::mutable_capture1() {
  set_has_capture1();
  if (capture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.capture1)
  return capture1_;
}
inline ::std::string* PictureLinkMassage::release_capture1() {
  clear_has_capture1();
  if (capture1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = capture1_;
    capture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_capture1(::std::string* capture1) {
  if (capture1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture1_;
  }
  if (capture1) {
    set_has_capture1();
    capture1_ = capture1;
  } else {
    clear_has_capture1();
    capture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.capture1)
}

// optional string capture2 = 10 [default = ""];
inline bool PictureLinkMassage::has_capture2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PictureLinkMassage::set_has_capture2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PictureLinkMassage::clear_has_capture2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PictureLinkMassage::clear_capture2() {
  if (capture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture2_->clear();
  }
  clear_has_capture2();
}
inline const ::std::string& PictureLinkMassage::capture2() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.capture2)
  return *capture2_;
}
inline void PictureLinkMassage::set_capture2(const ::std::string& value) {
  set_has_capture2();
  if (capture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture2_ = new ::std::string;
  }
  capture2_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.capture2)
}
inline void PictureLinkMassage::set_capture2(const char* value) {
  set_has_capture2();
  if (capture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture2_ = new ::std::string;
  }
  capture2_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.capture2)
}
inline void PictureLinkMassage::set_capture2(const char* value, size_t size) {
  set_has_capture2();
  if (capture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture2_ = new ::std::string;
  }
  capture2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.capture2)
}
inline ::std::string* PictureLinkMassage::mutable_capture2() {
  set_has_capture2();
  if (capture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.capture2)
  return capture2_;
}
inline ::std::string* PictureLinkMassage::release_capture2() {
  clear_has_capture2();
  if (capture2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = capture2_;
    capture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_capture2(::std::string* capture2) {
  if (capture2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture2_;
  }
  if (capture2) {
    set_has_capture2();
    capture2_ = capture2;
  } else {
    clear_has_capture2();
    capture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.capture2)
}

// optional string capture3 = 11 [default = ""];
inline bool PictureLinkMassage::has_capture3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PictureLinkMassage::set_has_capture3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PictureLinkMassage::clear_has_capture3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PictureLinkMassage::clear_capture3() {
  if (capture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture3_->clear();
  }
  clear_has_capture3();
}
inline const ::std::string& PictureLinkMassage::capture3() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.PictureLinkMassage.capture3)
  return *capture3_;
}
inline void PictureLinkMassage::set_capture3(const ::std::string& value) {
  set_has_capture3();
  if (capture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture3_ = new ::std::string;
  }
  capture3_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.PictureLinkMassage.capture3)
}
inline void PictureLinkMassage::set_capture3(const char* value) {
  set_has_capture3();
  if (capture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture3_ = new ::std::string;
  }
  capture3_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.PictureLinkMassage.capture3)
}
inline void PictureLinkMassage::set_capture3(const char* value, size_t size) {
  set_has_capture3();
  if (capture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture3_ = new ::std::string;
  }
  capture3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.PictureLinkMassage.capture3)
}
inline ::std::string* PictureLinkMassage::mutable_capture3() {
  set_has_capture3();
  if (capture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    capture3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.PictureLinkMassage.capture3)
  return capture3_;
}
inline ::std::string* PictureLinkMassage::release_capture3() {
  clear_has_capture3();
  if (capture3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = capture3_;
    capture3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PictureLinkMassage::set_allocated_capture3(::std::string* capture3) {
  if (capture3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture3_;
  }
  if (capture3) {
    set_has_capture3();
    capture3_ = capture3;
  } else {
    clear_has_capture3();
    capture3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.PictureLinkMassage.capture3)
}

// -------------------------------------------------------------------

// SoundLinkData

// optional int64 alarmType = 1 [default = -1];
inline bool SoundLinkData::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundLinkData::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundLinkData::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundLinkData::clear_alarmtype() {
  alarmtype_ = GOOGLE_LONGLONG(-1);
  clear_has_alarmtype();
}
inline ::google::protobuf::int64 SoundLinkData::alarmtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.alarmType)
  return alarmtype_;
}
inline void SoundLinkData::set_alarmtype(::google::protobuf::int64 value) {
  set_has_alarmtype();
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.alarmType)
}

// optional string name = 2 [default = ""];
inline bool SoundLinkData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoundLinkData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoundLinkData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoundLinkData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SoundLinkData::name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.name)
  return *name_;
}
inline void SoundLinkData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.name)
}
inline void SoundLinkData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SoundLinkData.name)
}
inline void SoundLinkData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SoundLinkData.name)
}
inline ::std::string* SoundLinkData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SoundLinkData.name)
  return name_;
}
inline ::std::string* SoundLinkData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoundLinkData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SoundLinkData.name)
}

// optional string file = 3 [default = ""];
inline bool SoundLinkData::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoundLinkData::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoundLinkData::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoundLinkData::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& SoundLinkData::file() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.file)
  return *file_;
}
inline void SoundLinkData::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.file)
}
inline void SoundLinkData::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SoundLinkData.file)
}
inline void SoundLinkData::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SoundLinkData.file)
}
inline ::std::string* SoundLinkData::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SoundLinkData.file)
  return file_;
}
inline ::std::string* SoundLinkData::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoundLinkData::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SoundLinkData.file)
}

// optional int32 isLoop = 4 [default = 0];
inline bool SoundLinkData::has_isloop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoundLinkData::set_has_isloop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoundLinkData::clear_has_isloop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoundLinkData::clear_isloop() {
  isloop_ = 0;
  clear_has_isloop();
}
inline ::google::protobuf::int32 SoundLinkData::isloop() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SoundLinkData.isLoop)
  return isloop_;
}
inline void SoundLinkData::set_isloop(::google::protobuf::int32 value) {
  set_has_isloop();
  isloop_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SoundLinkData.isLoop)
}

// -------------------------------------------------------------------

// LightLinkData

// optional int64 id = 1 [default = -1];
inline bool LightLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 LightLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.id)
  return id_;
}
inline void LightLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool LightLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 LightLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.ruleId)
  return ruleid_;
}
inline void LightLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.ruleId)
}

// optional string channelCode = 3 [default = ""];
inline bool LightLinkData::has_channelcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightLinkData::set_has_channelcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightLinkData::clear_has_channelcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightLinkData::clear_channelcode() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_->clear();
  }
  clear_has_channelcode();
}
inline const ::std::string& LightLinkData::channelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.channelCode)
  return *channelcode_;
}
inline void LightLinkData::set_channelcode(const ::std::string& value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.channelCode)
}
inline void LightLinkData::set_channelcode(const char* value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.LightLinkData.channelCode)
}
inline void LightLinkData::set_channelcode(const char* value, size_t size) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.LightLinkData.channelCode)
}
inline ::std::string* LightLinkData::mutable_channelcode() {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.LightLinkData.channelCode)
  return channelcode_;
}
inline ::std::string* LightLinkData::release_channelcode() {
  clear_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelcode_;
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LightLinkData::set_allocated_channelcode(::std::string* channelcode) {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (channelcode) {
    set_has_channelcode();
    channelcode_ = channelcode;
  } else {
    clear_has_channelcode();
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.LightLinkData.channelCode)
}

// optional int64 stayTime = 4 [default = 0];
inline bool LightLinkData::has_staytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightLinkData::set_has_staytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightLinkData::clear_has_staytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightLinkData::clear_staytime() {
  staytime_ = GOOGLE_LONGLONG(0);
  clear_has_staytime();
}
inline ::google::protobuf::int64 LightLinkData::staytime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.stayTime)
  return staytime_;
}
inline void LightLinkData::set_staytime(::google::protobuf::int64 value) {
  set_has_staytime();
  staytime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.stayTime)
}

// optional int32 autoOpen = 5 [default = -1];
inline bool LightLinkData::has_autoopen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LightLinkData::set_has_autoopen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LightLinkData::clear_has_autoopen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LightLinkData::clear_autoopen() {
  autoopen_ = -1;
  clear_has_autoopen();
}
inline ::google::protobuf::int32 LightLinkData::autoopen() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.autoOpen)
  return autoopen_;
}
inline void LightLinkData::set_autoopen(::google::protobuf::int32 value) {
  set_has_autoopen();
  autoopen_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.autoOpen)
}

// optional string devName = 6 [default = ""];
inline bool LightLinkData::has_devname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LightLinkData::set_has_devname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LightLinkData::clear_has_devname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LightLinkData::clear_devname() {
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_->clear();
  }
  clear_has_devname();
}
inline const ::std::string& LightLinkData::devname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.LightLinkData.devName)
  return *devname_;
}
inline void LightLinkData::set_devname(const ::std::string& value) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.LightLinkData.devName)
}
inline void LightLinkData::set_devname(const char* value) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.LightLinkData.devName)
}
inline void LightLinkData::set_devname(const char* value, size_t size) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.LightLinkData.devName)
}
inline ::std::string* LightLinkData::mutable_devname() {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.LightLinkData.devName)
  return devname_;
}
inline ::std::string* LightLinkData::release_devname() {
  clear_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devname_;
    devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LightLinkData::set_allocated_devname(::std::string* devname) {
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devname_;
  }
  if (devname) {
    set_has_devname();
    devname_ = devname;
  } else {
    clear_has_devname();
    devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.LightLinkData.devName)
}

// -------------------------------------------------------------------

// VideoLinkData

// optional int64 id = 1 [default = -1];
inline bool VideoLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 VideoLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.id)
  return id_;
}
inline void VideoLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool VideoLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 VideoLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.ruleId)
  return ruleid_;
}
inline void VideoLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.ruleId)
}

// optional string channelCode = 3 [default = ""];
inline bool VideoLinkData::has_channelcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoLinkData::set_has_channelcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoLinkData::clear_has_channelcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoLinkData::clear_channelcode() {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_->clear();
  }
  clear_has_channelcode();
}
inline const ::std::string& VideoLinkData::channelcode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.channelCode)
  return *channelcode_;
}
inline void VideoLinkData::set_channelcode(const ::std::string& value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.channelCode)
}
inline void VideoLinkData::set_channelcode(const char* value) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoLinkData.channelCode)
}
inline void VideoLinkData::set_channelcode(const char* value, size_t size) {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  channelcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoLinkData.channelCode)
}
inline ::std::string* VideoLinkData::mutable_channelcode() {
  set_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoLinkData.channelCode)
  return channelcode_;
}
inline ::std::string* VideoLinkData::release_channelcode() {
  clear_has_channelcode();
  if (channelcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelcode_;
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoLinkData::set_allocated_channelcode(::std::string* channelcode) {
  if (channelcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelcode_;
  }
  if (channelcode) {
    set_has_channelcode();
    channelcode_ = channelcode;
  } else {
    clear_has_channelcode();
    channelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoLinkData.channelCode)
}

// optional int64 stayTime = 4 [default = 0];
inline bool VideoLinkData::has_staytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoLinkData::set_has_staytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoLinkData::clear_has_staytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoLinkData::clear_staytime() {
  staytime_ = GOOGLE_LONGLONG(0);
  clear_has_staytime();
}
inline ::google::protobuf::int64 VideoLinkData::staytime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.stayTime)
  return staytime_;
}
inline void VideoLinkData::set_staytime(::google::protobuf::int64 value) {
  set_has_staytime();
  staytime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.stayTime)
}

// optional string prepoint = 5 [default = ""];
inline bool VideoLinkData::has_prepoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoLinkData::set_has_prepoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoLinkData::clear_has_prepoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoLinkData::clear_prepoint() {
  if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_->clear();
  }
  clear_has_prepoint();
}
inline const ::std::string& VideoLinkData::prepoint() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.prepoint)
  return *prepoint_;
}
inline void VideoLinkData::set_prepoint(const ::std::string& value) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.prepoint)
}
inline void VideoLinkData::set_prepoint(const char* value) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoLinkData.prepoint)
}
inline void VideoLinkData::set_prepoint(const char* value, size_t size) {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  prepoint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoLinkData.prepoint)
}
inline ::std::string* VideoLinkData::mutable_prepoint() {
  set_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prepoint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoLinkData.prepoint)
  return prepoint_;
}
inline ::std::string* VideoLinkData::release_prepoint() {
  clear_has_prepoint();
  if (prepoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prepoint_;
    prepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoLinkData::set_allocated_prepoint(::std::string* prepoint) {
  if (prepoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prepoint_;
  }
  if (prepoint) {
    set_has_prepoint();
    prepoint_ = prepoint;
  } else {
    clear_has_prepoint();
    prepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoLinkData.prepoint)
}

// optional string devName = 6 [default = ""];
inline bool VideoLinkData::has_devname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoLinkData::set_has_devname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoLinkData::clear_has_devname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoLinkData::clear_devname() {
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_->clear();
  }
  clear_has_devname();
}
inline const ::std::string& VideoLinkData::devname() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VideoLinkData.devName)
  return *devname_;
}
inline void VideoLinkData::set_devname(const ::std::string& value) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VideoLinkData.devName)
}
inline void VideoLinkData::set_devname(const char* value) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VideoLinkData.devName)
}
inline void VideoLinkData::set_devname(const char* value, size_t size) {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  devname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VideoLinkData.devName)
}
inline ::std::string* VideoLinkData::mutable_devname() {
  set_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VideoLinkData.devName)
  return devname_;
}
inline ::std::string* VideoLinkData::release_devname() {
  clear_has_devname();
  if (devname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devname_;
    devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoLinkData::set_allocated_devname(::std::string* devname) {
  if (devname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devname_;
  }
  if (devname) {
    set_has_devname();
    devname_ = devname;
  } else {
    clear_has_devname();
    devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VideoLinkData.devName)
}

// -------------------------------------------------------------------

// EmailLinkData

// optional int64 id = 1 [default = -1];
inline bool EmailLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 EmailLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.id)
  return id_;
}
inline void EmailLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool EmailLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 EmailLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.ruleId)
  return ruleid_;
}
inline void EmailLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.ruleId)
}

// optional string subject = 3 [default = ""];
inline bool EmailLinkData::has_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailLinkData::set_has_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailLinkData::clear_has_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailLinkData::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& EmailLinkData::subject() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.subject)
  return *subject_;
}
inline void EmailLinkData::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.subject)
}
inline void EmailLinkData::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EmailLinkData.subject)
}
inline void EmailLinkData::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EmailLinkData.subject)
}
inline ::std::string* EmailLinkData::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EmailLinkData.subject)
  return subject_;
}
inline ::std::string* EmailLinkData::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailLinkData::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EmailLinkData.subject)
}

// optional string content = 4 [default = ""];
inline bool EmailLinkData::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmailLinkData::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmailLinkData::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmailLinkData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& EmailLinkData::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.EmailLinkData.content)
  return *content_;
}
inline void EmailLinkData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.EmailLinkData.content)
}
inline void EmailLinkData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.EmailLinkData.content)
}
inline void EmailLinkData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.EmailLinkData.content)
}
inline ::std::string* EmailLinkData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.EmailLinkData.content)
  return content_;
}
inline ::std::string* EmailLinkData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailLinkData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.EmailLinkData.content)
}

// -------------------------------------------------------------------

// RecordLinkData

// optional int64 id = 1 [default = -1];
inline bool RecordLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 RecordLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.id)
  return id_;
}
inline void RecordLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool RecordLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 RecordLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.ruleId)
  return ruleid_;
}
inline void RecordLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.ruleId)
}

// optional int64 recordTime = 3 [default = 0];
inline bool RecordLinkData::has_recordtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordLinkData::set_has_recordtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordLinkData::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordLinkData::clear_recordtime() {
  recordtime_ = GOOGLE_LONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::int64 RecordLinkData::recordtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.recordTime)
  return recordtime_;
}
inline void RecordLinkData::set_recordtime(::google::protobuf::int64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.recordTime)
}

// optional int64 preRecordTime = 4 [default = 0];
inline bool RecordLinkData::has_prerecordtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordLinkData::set_has_prerecordtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordLinkData::clear_has_prerecordtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordLinkData::clear_prerecordtime() {
  prerecordtime_ = GOOGLE_LONGLONG(0);
  clear_has_prerecordtime();
}
inline ::google::protobuf::int64 RecordLinkData::prerecordtime() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.preRecordTime)
  return prerecordtime_;
}
inline void RecordLinkData::set_prerecordtime(::google::protobuf::int64 value) {
  set_has_prerecordtime();
  prerecordtime_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.preRecordTime)
}

// optional int32 assistantStream = 5 [default = -1];
inline bool RecordLinkData::has_assistantstream() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordLinkData::set_has_assistantstream() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordLinkData::clear_has_assistantstream() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordLinkData::clear_assistantstream() {
  assistantstream_ = -1;
  clear_has_assistantstream();
}
inline ::google::protobuf::int32 RecordLinkData::assistantstream() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RecordLinkData.assistantStream)
  return assistantstream_;
}
inline void RecordLinkData::set_assistantstream(::google::protobuf::int32 value) {
  set_has_assistantstream();
  assistantstream_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RecordLinkData.assistantStream)
}

// -------------------------------------------------------------------

// SmsLinkData

// optional int64 id = 1 [default = -1];
inline bool SmsLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmsLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmsLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmsLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 SmsLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.id)
  return id_;
}
inline void SmsLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool SmsLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmsLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmsLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmsLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 SmsLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.ruleId)
  return ruleid_;
}
inline void SmsLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.ruleId)
}

// optional string content = 3 [default = ""];
inline bool SmsLinkData::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmsLinkData::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmsLinkData::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmsLinkData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SmsLinkData::content() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.SmsLinkData.content)
  return *content_;
}
inline void SmsLinkData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.SmsLinkData.content)
}
inline void SmsLinkData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.SmsLinkData.content)
}
inline void SmsLinkData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.SmsLinkData.content)
}
inline ::std::string* SmsLinkData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.SmsLinkData.content)
  return content_;
}
inline ::std::string* SmsLinkData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SmsLinkData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.SmsLinkData.content)
}

// -------------------------------------------------------------------

// TvwallLinkData

// optional int64 id = 1 [default = -1];
inline bool TvwallLinkData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TvwallLinkData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TvwallLinkData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TvwallLinkData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 TvwallLinkData::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.id)
  return id_;
}
inline void TvwallLinkData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.id)
}

// optional int64 ruleId = 2 [default = -1];
inline bool TvwallLinkData::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TvwallLinkData::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TvwallLinkData::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TvwallLinkData::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(-1);
  clear_has_ruleid();
}
inline ::google::protobuf::int64 TvwallLinkData::ruleid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.ruleId)
  return ruleid_;
}
inline void TvwallLinkData::set_ruleid(::google::protobuf::int64 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.ruleId)
}

// optional int64 planId = 3 [default = -1];
inline bool TvwallLinkData::has_planid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TvwallLinkData::set_has_planid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TvwallLinkData::clear_has_planid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TvwallLinkData::clear_planid() {
  planid_ = GOOGLE_LONGLONG(-1);
  clear_has_planid();
}
inline ::google::protobuf::int64 TvwallLinkData::planid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.TvwallLinkData.planId)
  return planid_;
}
inline void TvwallLinkData::set_planid(::google::protobuf::int64 value) {
  set_has_planid();
  planid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.TvwallLinkData.planId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK>() {
  return ::com::arges::file::proto::REQUEST_TYPE_OF_PICTURE_LINK_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK>() {
  return ::com::arges::file::proto::LOOP_TYPE_OF_SOUND_LINK_descriptor();
}
template <> struct is_proto_enum< ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK>() {
  return ::com::arges::file::proto::AUTO_TYPE_OF_LIGHT_LINK_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActionLinkBean_2eproto__INCLUDED
