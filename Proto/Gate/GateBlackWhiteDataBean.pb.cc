// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateBlackWhiteDataBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GateBlackWhiteDataBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GateBlackWhiteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateBlackWhiteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateBlackWhiteDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateBlackWhiteDataList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GateBlackWhiteDataBean_2eproto() {
  protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GateBlackWhiteDataBean.proto");
  GOOGLE_CHECK(file != NULL);
  GateBlackWhiteData_descriptor_ = file->message_type(0);
  static const int GateBlackWhiteData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, identityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, wristid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, idtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, picture_),
  };
  GateBlackWhiteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateBlackWhiteData_descriptor_,
      GateBlackWhiteData::default_instance_,
      GateBlackWhiteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateBlackWhiteData));
  GateBlackWhiteDataList_descriptor_ = file->message_type(1);
  static const int GateBlackWhiteDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteDataList, data_),
  };
  GateBlackWhiteDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateBlackWhiteDataList_descriptor_,
      GateBlackWhiteDataList::default_instance_,
      GateBlackWhiteDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateBlackWhiteDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateBlackWhiteDataList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GateBlackWhiteDataBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateBlackWhiteData_descriptor_, &GateBlackWhiteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateBlackWhiteDataList_descriptor_, &GateBlackWhiteDataList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GateBlackWhiteDataBean_2eproto() {
  delete GateBlackWhiteData::default_instance_;
  delete GateBlackWhiteData_reflection_;
  delete GateBlackWhiteData::_default_identityid_;
  delete GateBlackWhiteData::_default_wristid_;
  delete GateBlackWhiteData::_default_picture_;
  delete GateBlackWhiteDataList::default_instance_;
  delete GateBlackWhiteDataList_reflection_;
}

void protobuf_AddDesc_GateBlackWhiteDataBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034GateBlackWhiteDataBean.proto\022\024com.arge"
    "s.file.proto\"y\n\022GateBlackWhiteData\022\033\n\nid"
    "entityid\030\001 \001(\t:\007default\022\030\n\007wristid\030\002 \001(\t"
    ":\007default\022\022\n\006idtype\030\003 \001(\005:\002-1\022\030\n\007picture"
    "\030\004 \001(\014:\007default\"P\n\026GateBlackWhiteDataLis"
    "t\0226\n\004data\030\001 \003(\0132(.com.arges.file.proto.G"
    "ateBlackWhiteData", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GateBlackWhiteDataBean.proto", &protobuf_RegisterTypes);
  GateBlackWhiteData::_default_identityid_ =
      new ::std::string("default", 7);
  GateBlackWhiteData::_default_wristid_ =
      new ::std::string("default", 7);
  GateBlackWhiteData::_default_picture_ =
      new ::std::string("default", 7);
  GateBlackWhiteData::default_instance_ = new GateBlackWhiteData();
  GateBlackWhiteDataList::default_instance_ = new GateBlackWhiteDataList();
  GateBlackWhiteData::default_instance_->InitAsDefaultInstance();
  GateBlackWhiteDataList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GateBlackWhiteDataBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GateBlackWhiteDataBean_2eproto {
  StaticDescriptorInitializer_GateBlackWhiteDataBean_2eproto() {
    protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  }
} static_descriptor_initializer_GateBlackWhiteDataBean_2eproto_;

// ===================================================================

::std::string* GateBlackWhiteData::_default_identityid_ = NULL;
::std::string* GateBlackWhiteData::_default_wristid_ = NULL;
::std::string* GateBlackWhiteData::_default_picture_ = NULL;
#ifndef _MSC_VER
const int GateBlackWhiteData::kIdentityidFieldNumber;
const int GateBlackWhiteData::kWristidFieldNumber;
const int GateBlackWhiteData::kIdtypeFieldNumber;
const int GateBlackWhiteData::kPictureFieldNumber;
#endif  // !_MSC_VER

GateBlackWhiteData::GateBlackWhiteData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.GateBlackWhiteData)
}

void GateBlackWhiteData::InitAsDefaultInstance() {
}

GateBlackWhiteData::GateBlackWhiteData(const GateBlackWhiteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.GateBlackWhiteData)
}

void GateBlackWhiteData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identityid_ = const_cast< ::std::string*>(_default_identityid_);
  wristid_ = const_cast< ::std::string*>(_default_wristid_);
  idtype_ = -1;
  picture_ = const_cast< ::std::string*>(_default_picture_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateBlackWhiteData::~GateBlackWhiteData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.GateBlackWhiteData)
  SharedDtor();
}

void GateBlackWhiteData::SharedDtor() {
  if (identityid_ != _default_identityid_) {
    delete identityid_;
  }
  if (wristid_ != _default_wristid_) {
    delete wristid_;
  }
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (this != default_instance_) {
  }
}

void GateBlackWhiteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateBlackWhiteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateBlackWhiteData_descriptor_;
}

const GateBlackWhiteData& GateBlackWhiteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  return *default_instance_;
}

GateBlackWhiteData* GateBlackWhiteData::default_instance_ = NULL;

GateBlackWhiteData* GateBlackWhiteData::New() const {
  return new GateBlackWhiteData;
}

void GateBlackWhiteData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_identityid()) {
      if (identityid_ != _default_identityid_) {
        identityid_->assign(*_default_identityid_);
      }
    }
    if (has_wristid()) {
      if (wristid_ != _default_wristid_) {
        wristid_->assign(*_default_wristid_);
      }
    }
    idtype_ = -1;
    if (has_picture()) {
      if (picture_ != _default_picture_) {
        picture_->assign(*_default_picture_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateBlackWhiteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.GateBlackWhiteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string identityid = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identityid().data(), this->identityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "identityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wristid;
        break;
      }

      // optional string wristid = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_wristid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristid().data(), this->wristid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idtype;
        break;
      }

      // optional int32 idtype = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_idtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idtype_)));
          set_has_idtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_picture;
        break;
      }

      // optional bytes picture = 4 [default = "default"];
      case 4: {
        if (tag == 34) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.GateBlackWhiteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.GateBlackWhiteData)
  return false;
#undef DO_
}

void GateBlackWhiteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.GateBlackWhiteData)
  // optional string identityid = 1 [default = "default"];
  if (has_identityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identityid().data(), this->identityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identityid(), output);
  }

  // optional string wristid = 2 [default = "default"];
  if (has_wristid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristid().data(), this->wristid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wristid(), output);
  }

  // optional int32 idtype = 3 [default = -1];
  if (has_idtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idtype(), output);
  }

  // optional bytes picture = 4 [default = "default"];
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->picture(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.GateBlackWhiteData)
}

::google::protobuf::uint8* GateBlackWhiteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.GateBlackWhiteData)
  // optional string identityid = 1 [default = "default"];
  if (has_identityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identityid().data(), this->identityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identityid(), target);
  }

  // optional string wristid = 2 [default = "default"];
  if (has_wristid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristid().data(), this->wristid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wristid(), target);
  }

  // optional int32 idtype = 3 [default = -1];
  if (has_idtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idtype(), target);
  }

  // optional bytes picture = 4 [default = "default"];
  if (has_picture()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->picture(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.GateBlackWhiteData)
  return target;
}

int GateBlackWhiteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string identityid = 1 [default = "default"];
    if (has_identityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identityid());
    }

    // optional string wristid = 2 [default = "default"];
    if (has_wristid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristid());
    }

    // optional int32 idtype = 3 [default = -1];
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idtype());
    }

    // optional bytes picture = 4 [default = "default"];
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picture());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateBlackWhiteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateBlackWhiteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateBlackWhiteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateBlackWhiteData::MergeFrom(const GateBlackWhiteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identityid()) {
      set_identityid(from.identityid());
    }
    if (from.has_wristid()) {
      set_wristid(from.wristid());
    }
    if (from.has_idtype()) {
      set_idtype(from.idtype());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateBlackWhiteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateBlackWhiteData::CopyFrom(const GateBlackWhiteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateBlackWhiteData::IsInitialized() const {

  return true;
}

void GateBlackWhiteData::Swap(GateBlackWhiteData* other) {
  if (other != this) {
    std::swap(identityid_, other->identityid_);
    std::swap(wristid_, other->wristid_);
    std::swap(idtype_, other->idtype_);
    std::swap(picture_, other->picture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateBlackWhiteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateBlackWhiteData_descriptor_;
  metadata.reflection = GateBlackWhiteData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateBlackWhiteDataList::kDataFieldNumber;
#endif  // !_MSC_VER

GateBlackWhiteDataList::GateBlackWhiteDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.GateBlackWhiteDataList)
}

void GateBlackWhiteDataList::InitAsDefaultInstance() {
}

GateBlackWhiteDataList::GateBlackWhiteDataList(const GateBlackWhiteDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.GateBlackWhiteDataList)
}

void GateBlackWhiteDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateBlackWhiteDataList::~GateBlackWhiteDataList() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.GateBlackWhiteDataList)
  SharedDtor();
}

void GateBlackWhiteDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateBlackWhiteDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateBlackWhiteDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateBlackWhiteDataList_descriptor_;
}

const GateBlackWhiteDataList& GateBlackWhiteDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  return *default_instance_;
}

GateBlackWhiteDataList* GateBlackWhiteDataList::default_instance_ = NULL;

GateBlackWhiteDataList* GateBlackWhiteDataList::New() const {
  return new GateBlackWhiteDataList;
}

void GateBlackWhiteDataList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateBlackWhiteDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.GateBlackWhiteDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.GateBlackWhiteDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.GateBlackWhiteDataList)
  return false;
#undef DO_
}

void GateBlackWhiteDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.GateBlackWhiteDataList)
  // repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.GateBlackWhiteDataList)
}

::google::protobuf::uint8* GateBlackWhiteDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.GateBlackWhiteDataList)
  // repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.GateBlackWhiteDataList)
  return target;
}

int GateBlackWhiteDataList::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateBlackWhiteDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateBlackWhiteDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateBlackWhiteDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateBlackWhiteDataList::MergeFrom(const GateBlackWhiteDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateBlackWhiteDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateBlackWhiteDataList::CopyFrom(const GateBlackWhiteDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateBlackWhiteDataList::IsInitialized() const {

  return true;
}

void GateBlackWhiteDataList::Swap(GateBlackWhiteDataList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateBlackWhiteDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateBlackWhiteDataList_descriptor_;
  metadata.reflection = GateBlackWhiteDataList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
