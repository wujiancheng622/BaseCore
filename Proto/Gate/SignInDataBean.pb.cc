// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignInDataBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SignInDataBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SigninDataForHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigninDataForHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* WristUserPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WristUserPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WristUserName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WristUserName_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhiteUserMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiteUserMassage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBlackWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBlackWhite_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhiteUserMassageTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiteUserMassageTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WristSignInTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WristSignInTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigninMassageForReal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigninMassageForReal_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotMapMassage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotMapMassage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AUTO_MODE_OF_USER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_WHITE_LIST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_WHITE_LIST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_HOST_MAP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_HOST_MAP_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SignInDataBean_2eproto() {
  protobuf_AddDesc_SignInDataBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SignInDataBean.proto");
  GOOGLE_CHECK(file != NULL);
  SigninDataForHistory_descriptor_ = file->message_type(0);
  static const int SigninDataForHistory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, signinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, wristphotos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, wristnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, signintimes_),
  };
  SigninDataForHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigninDataForHistory_descriptor_,
      SigninDataForHistory::default_instance_,
      SigninDataForHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninDataForHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigninDataForHistory));
  WristUserPhoto_descriptor_ = file->message_type(1);
  static const int WristUserPhoto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserPhoto, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserPhoto, wristuserphoto_),
  };
  WristUserPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WristUserPhoto_descriptor_,
      WristUserPhoto::default_instance_,
      WristUserPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WristUserPhoto));
  WristUserName_descriptor_ = file->message_type(2);
  static const int WristUserName_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, wristusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, attendancestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, wristcodetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, identitypicture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, automode_),
  };
  WristUserName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WristUserName_descriptor_,
      WristUserName::default_instance_,
      WristUserName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristUserName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WristUserName));
  WhiteUserMassage_descriptor_ = file->message_type(3);
  static const int WhiteUserMassage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, macs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, devcode_),
  };
  WhiteUserMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiteUserMassage_descriptor_,
      WhiteUserMassage::default_instance_,
      WhiteUserMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiteUserMassage));
  QueryBlackWhite_descriptor_ = file->message_type(4);
  static const int QueryBlackWhite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackWhite, device_),
  };
  QueryBlackWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBlackWhite_descriptor_,
      QueryBlackWhite::default_instance_,
      QueryBlackWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBlackWhite));
  WhiteUserMassageTest_descriptor_ = file->message_type(5);
  static const int WhiteUserMassageTest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassageTest, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassageTest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassageTest, resultdescribe_),
  };
  WhiteUserMassageTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiteUserMassageTest_descriptor_,
      WhiteUserMassageTest::default_instance_,
      WhiteUserMassageTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassageTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteUserMassageTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiteUserMassageTest));
  WristSignInTime_descriptor_ = file->message_type(6);
  static const int WristSignInTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristSignInTime, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristSignInTime, signintime_),
  };
  WristSignInTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WristSignInTime_descriptor_,
      WristSignInTime::default_instance_,
      WristSignInTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristSignInTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WristSignInTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WristSignInTime));
  SigninMassageForReal_descriptor_ = file->message_type(7);
  static const int SigninMassageForReal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, wrist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, wristuserphoto_),
  };
  SigninMassageForReal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigninMassageForReal_descriptor_,
      SigninMassageForReal::default_instance_,
      SigninMassageForReal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninMassageForReal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigninMassageForReal));
  HotMapData_descriptor_ = file->message_type(8);
  static const int HotMapData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapData, orgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapData, loginname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapData, count_),
  };
  HotMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotMapData_descriptor_,
      HotMapData::default_instance_,
      HotMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotMapData));
  HotMapMassage_descriptor_ = file->message_type(9);
  static const int HotMapMassage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, resultdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, orgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, data_),
  };
  HotMapMassage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotMapMassage_descriptor_,
      HotMapMassage::default_instance_,
      HotMapMassage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotMapMassage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotMapMassage));
  AUTO_MODE_OF_USER_descriptor_ = file->enum_type(0);
  REQUEST_TYPE_OF_WHITE_LIST_descriptor_ = file->enum_type(1);
  RESULT_TYPE_OF_WHITE_LIST_descriptor_ = file->enum_type(2);
  REQUEST_TYPE_OF_HOST_MAP_descriptor_ = file->enum_type(3);
  RESULT_TYPE_OF_HOST_MAP_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SignInDataBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigninDataForHistory_descriptor_, &SigninDataForHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WristUserPhoto_descriptor_, &WristUserPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WristUserName_descriptor_, &WristUserName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiteUserMassage_descriptor_, &WhiteUserMassage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBlackWhite_descriptor_, &QueryBlackWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiteUserMassageTest_descriptor_, &WhiteUserMassageTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WristSignInTime_descriptor_, &WristSignInTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigninMassageForReal_descriptor_, &SigninMassageForReal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotMapData_descriptor_, &HotMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotMapMassage_descriptor_, &HotMapMassage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SignInDataBean_2eproto() {
  delete SigninDataForHistory::default_instance_;
  delete SigninDataForHistory_reflection_;
  delete SigninDataForHistory::_default_devicecode_;
  delete WristUserPhoto::default_instance_;
  delete WristUserPhoto_reflection_;
  delete WristUserPhoto::_default_wristmac_;
  delete WristUserPhoto::_default_wristuserphoto_;
  delete WristUserName::default_instance_;
  delete WristUserName_reflection_;
  delete WristUserName::_default_wristmac_;
  delete WristUserName::_default_wristusername_;
  delete WhiteUserMassage::default_instance_;
  delete WhiteUserMassage_reflection_;
  delete QueryBlackWhite::default_instance_;
  delete QueryBlackWhite_reflection_;
  delete WhiteUserMassageTest::default_instance_;
  delete WhiteUserMassageTest_reflection_;
  delete WristSignInTime::default_instance_;
  delete WristSignInTime_reflection_;
  delete WristSignInTime::_default_wristmac_;
  delete SigninMassageForReal::default_instance_;
  delete SigninMassageForReal_reflection_;
  delete HotMapData::default_instance_;
  delete HotMapData_reflection_;
  delete HotMapMassage::default_instance_;
  delete HotMapMassage_reflection_;
}

void protobuf_AddDesc_SignInDataBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_HbeaconDataBean_2eproto();
  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SignInDataBean.proto\022\024com.arges.file.p"
    "roto\032\025HbeaconDataBean.proto\032\025DevInfoList"
    "Bean.proto\"\265\002\n\024SigninDataForHistory\022\024\n\ts"
    "tarttime\030\001 \001(\004:\0010\022\022\n\007endtime\030\002 \001(\004:\0010\022\033\n"
    "\ndeviceCode\030\003 \001(\t:\007default\022\024\n\tsigninnum\030"
    "\004 \001(\005:\0010\022\020\n\010wristmac\030\005 \003(\t\0229\n\013wristphoto"
    "s\030\006 \003(\0132$.com.arges.file.proto.WristUser"
    "Photo\0227\n\nwristnames\030\007 \003(\0132#.com.arges.fi"
    "le.proto.WristUserName\022:\n\013signintimes\030\010 "
    "\003(\0132%.com.arges.file.proto.WristSignInTi"
    "me\"L\n\016WristUserPhoto\022\031\n\010wristmac\030\001 \001(\t:\007"
    "default\022\037\n\016wristuserphoto\030\002 \001(\014:\007default"
    "\"\242\002\n\rWristUserName\022\031\n\010wristmac\030\001 \001(\t:\007de"
    "fault\022\036\n\rwristusername\030\002 \001(\t:\007default\022\034\n"
    "\020attendanceStatus\030\003 \001(\005:\002-1\022\031\n\rwristCode"
    "Type\030\004 \001(\005:\002-1\022\020\n\004date\030\005 \001(\003:\002-1\022\020\n\006idCa"
    "rd\030\006 \001(\t:\000\022\022\n\010nickName\030\007 \001(\t:\000\022\022\n\010positi"
    "on\030\010 \001(\t:\000\022\017\n\003sex\030\t \001(\005:\002-1\022\017\n\004type\030\n \001("
    "\005:\0010\022\031\n\017identityPicture\030\013 \001(\014:\000\022\024\n\010autoM"
    "ode\030\014 \001(\005:\002-1\"\316\001\n\020WhiteUserMassage\022\027\n\013re"
    "questType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1\022"
    "\030\n\016resultDescribe\030\003 \001(\014:\000\022\014\n\004macs\030\004 \003(\t\022"
    "2\n\005users\030\005 \003(\0132#.com.arges.file.proto.Wr"
    "istUserName\0221\n\007devCode\030\006 \001(\0132 .com.arges"
    ".file.proto.DeviceInfo\"C\n\017QueryBlackWhit"
    "e\0220\n\006device\030\001 \001(\0132 .com.arges.file.proto"
    ".DeviceInfo\"]\n\024WhiteUserMassageTest\022\027\n\013r"
    "equestType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1"
    "\022\030\n\016resultDescribe\030\003 \001(\014:\000\"C\n\017WristSignI"
    "nTime\022\031\n\010wristmac\030\001 \001(\t:\007default\022\025\n\nsign"
    "intime\030\002 \001(\004:\0010\"\247\001\n\024SigninMassageForReal"
    "\022\024\n\ndeviceCode\030\001 \001(\t:\000\022*\n\005wrist\030\002 \001(\0132\033."
    "com.arges.file.proto.Wrist\0225\n\010userName\030\003"
    " \001(\0132#.com.arges.file.proto.WristUserNam"
    "e\022\026\n\016wristuserphoto\030\004 \001(\014\"D\n\nHotMapData\022"
    "\021\n\007orgCode\030\001 \001(\t:\000\022\021\n\tloginName\030\002 \003(\t\022\020\n"
    "\005count\030\003 \001(\005:\0010\"\231\001\n\rHotMapMassage\022\027\n\013req"
    "uestType\030\001 \001(\005:\002-1\022\022\n\006result\030\002 \001(\005:\002-1\022\030"
    "\n\016resultDescribe\030\003 \001(\014:\000\022\021\n\007orgCode\030\004 \001("
    "\t:\000\022.\n\004data\030\005 \003(\0132 .com.arges.file.proto"
    ".HotMapData*F\n\021AUTO_MODE_OF_USER\022\026\n\022AUTO"
    "_MODE_BY_WRIST\020\001\022\031\n\025AUTO_MODE_BY_IDENTIF"
    "Y\020\002*\335\001\n\032REQUEST_TYPE_OF_WHITE_LIST\022\036\n\032WH"
    "ITE_LIST_REQUEST_GET_ALL\020\001\022\'\n#WHITE_LIST"
    "_REQUEST_GET_BY_WRIST_MAC\020\002\022\032\n\026WHITE_LIS"
    "T_REQUEST_ADD\020\003\022\035\n\031WHITE_LIST_REQUEST_UP"
    "DATE\020\004\022\035\n\031WHITE_LIST_REQUEST_DELETE\020\005\022\034\n"
    "\030WHITE_LIST_REQUEST_CLEAR\020\006*X\n\031RESULT_TY"
    "PE_OF_WHITE_LIST\022\033\n\027WHITE_LIST_RESULT_IS"
    "_OK\020\001\022\036\n\032WHITE_LIST_RESULT_IS_ERROR\020\002*V\n"
    "\030REQUEST_TYPE_OF_HOST_MAP\022\033\n\027HOST_MAP_GE"
    "T_IPC_BY_ORG\020\001\022\035\n\031HOST_MAP_GET_PEOPLE_CO"
    "UNT\020\002*R\n\027RESULT_TYPE_OF_HOST_MAP\022\031\n\025HOST"
    "_MAP_RESULT_IS_OK\020\001\022\034\n\030HOST_MAP_RESULT_I"
    "S_ERROR\020\002", 2169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SignInDataBean.proto", &protobuf_RegisterTypes);
  SigninDataForHistory::_default_devicecode_ =
      new ::std::string("default", 7);
  SigninDataForHistory::default_instance_ = new SigninDataForHistory();
  WristUserPhoto::_default_wristmac_ =
      new ::std::string("default", 7);
  WristUserPhoto::_default_wristuserphoto_ =
      new ::std::string("default", 7);
  WristUserPhoto::default_instance_ = new WristUserPhoto();
  WristUserName::_default_wristmac_ =
      new ::std::string("default", 7);
  WristUserName::_default_wristusername_ =
      new ::std::string("default", 7);
  WristUserName::default_instance_ = new WristUserName();
  WhiteUserMassage::default_instance_ = new WhiteUserMassage();
  QueryBlackWhite::default_instance_ = new QueryBlackWhite();
  WhiteUserMassageTest::default_instance_ = new WhiteUserMassageTest();
  WristSignInTime::_default_wristmac_ =
      new ::std::string("default", 7);
  WristSignInTime::default_instance_ = new WristSignInTime();
  SigninMassageForReal::default_instance_ = new SigninMassageForReal();
  HotMapData::default_instance_ = new HotMapData();
  HotMapMassage::default_instance_ = new HotMapMassage();
  SigninDataForHistory::default_instance_->InitAsDefaultInstance();
  WristUserPhoto::default_instance_->InitAsDefaultInstance();
  WristUserName::default_instance_->InitAsDefaultInstance();
  WhiteUserMassage::default_instance_->InitAsDefaultInstance();
  QueryBlackWhite::default_instance_->InitAsDefaultInstance();
  WhiteUserMassageTest::default_instance_->InitAsDefaultInstance();
  WristSignInTime::default_instance_->InitAsDefaultInstance();
  SigninMassageForReal::default_instance_->InitAsDefaultInstance();
  HotMapData::default_instance_->InitAsDefaultInstance();
  HotMapMassage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SignInDataBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SignInDataBean_2eproto {
  StaticDescriptorInitializer_SignInDataBean_2eproto() {
    protobuf_AddDesc_SignInDataBean_2eproto();
  }
} static_descriptor_initializer_SignInDataBean_2eproto_;
const ::google::protobuf::EnumDescriptor* AUTO_MODE_OF_USER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUTO_MODE_OF_USER_descriptor_;
}
bool AUTO_MODE_OF_USER_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_WHITE_LIST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_WHITE_LIST_descriptor_;
}
bool REQUEST_TYPE_OF_WHITE_LIST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_WHITE_LIST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_WHITE_LIST_descriptor_;
}
bool RESULT_TYPE_OF_WHITE_LIST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_OF_HOST_MAP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_OF_HOST_MAP_descriptor_;
}
bool REQUEST_TYPE_OF_HOST_MAP_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_TYPE_OF_HOST_MAP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_TYPE_OF_HOST_MAP_descriptor_;
}
bool RESULT_TYPE_OF_HOST_MAP_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* SigninDataForHistory::_default_devicecode_ = NULL;
#ifndef _MSC_VER
const int SigninDataForHistory::kStarttimeFieldNumber;
const int SigninDataForHistory::kEndtimeFieldNumber;
const int SigninDataForHistory::kDeviceCodeFieldNumber;
const int SigninDataForHistory::kSigninnumFieldNumber;
const int SigninDataForHistory::kWristmacFieldNumber;
const int SigninDataForHistory::kWristphotosFieldNumber;
const int SigninDataForHistory::kWristnamesFieldNumber;
const int SigninDataForHistory::kSignintimesFieldNumber;
#endif  // !_MSC_VER

SigninDataForHistory::SigninDataForHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.SigninDataForHistory)
}

void SigninDataForHistory::InitAsDefaultInstance() {
}

SigninDataForHistory::SigninDataForHistory(const SigninDataForHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.SigninDataForHistory)
}

void SigninDataForHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  devicecode_ = const_cast< ::std::string*>(_default_devicecode_);
  signinnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigninDataForHistory::~SigninDataForHistory() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.SigninDataForHistory)
  SharedDtor();
}

void SigninDataForHistory::SharedDtor() {
  if (devicecode_ != _default_devicecode_) {
    delete devicecode_;
  }
  if (this != default_instance_) {
  }
}

void SigninDataForHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigninDataForHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigninDataForHistory_descriptor_;
}

const SigninDataForHistory& SigninDataForHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

SigninDataForHistory* SigninDataForHistory::default_instance_ = NULL;

SigninDataForHistory* SigninDataForHistory::New() const {
  return new SigninDataForHistory;
}

void SigninDataForHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SigninDataForHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(starttime_, endtime_);
    if (has_devicecode()) {
      if (devicecode_ != _default_devicecode_) {
        devicecode_->assign(*_default_devicecode_);
      }
    }
    signinnum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wristmac_.Clear();
  wristphotos_.Clear();
  wristnames_.Clear();
  signintimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigninDataForHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.SigninDataForHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 starttime = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceCode;
        break;
      }

      // optional string deviceCode = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_deviceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signinnum;
        break;
      }

      // optional int32 signinnum = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_signinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signinnum_)));
          set_has_signinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wristmac;
        break;
      }

      // repeated string wristmac = 5;
      case 5: {
        if (tag == 42) {
         parse_wristmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac(this->wristmac_size() - 1).data(),
            this->wristmac(this->wristmac_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wristmac;
        if (input->ExpectTag(50)) goto parse_wristphotos;
        break;
      }

      // repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
      case 6: {
        if (tag == 50) {
         parse_wristphotos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wristphotos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wristphotos;
        if (input->ExpectTag(58)) goto parse_wristnames;
        break;
      }

      // repeated .com.arges.file.proto.WristUserName wristnames = 7;
      case 7: {
        if (tag == 58) {
         parse_wristnames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wristnames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_wristnames;
        if (input->ExpectTag(66)) goto parse_signintimes;
        break;
      }

      // repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
      case 8: {
        if (tag == 66) {
         parse_signintimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signintimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_signintimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.SigninDataForHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.SigninDataForHistory)
  return false;
#undef DO_
}

void SigninDataForHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.SigninDataForHistory)
  // optional uint64 starttime = 1 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->starttime(), output);
  }

  // optional uint64 endtime = 2 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtime(), output);
  }

  // optional string deviceCode = 3 [default = "default"];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devicecode(), output);
  }

  // optional int32 signinnum = 4 [default = 0];
  if (has_signinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->signinnum(), output);
  }

  // repeated string wristmac = 5;
  for (int i = 0; i < this->wristmac_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->wristmac(i).data(), this->wristmac(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wristmac(i), output);
  }

  // repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
  for (int i = 0; i < this->wristphotos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wristphotos(i), output);
  }

  // repeated .com.arges.file.proto.WristUserName wristnames = 7;
  for (int i = 0; i < this->wristnames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->wristnames(i), output);
  }

  // repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
  for (int i = 0; i < this->signintimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->signintimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.SigninDataForHistory)
}

::google::protobuf::uint8* SigninDataForHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.SigninDataForHistory)
  // optional uint64 starttime = 1 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->starttime(), target);
  }

  // optional uint64 endtime = 2 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtime(), target);
  }

  // optional string deviceCode = 3 [default = "default"];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicecode(), target);
  }

  // optional int32 signinnum = 4 [default = 0];
  if (has_signinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->signinnum(), target);
  }

  // repeated string wristmac = 5;
  for (int i = 0; i < this->wristmac_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac(i).data(), this->wristmac(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wristmac(i), target);
  }

  // repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
  for (int i = 0; i < this->wristphotos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wristphotos(i), target);
  }

  // repeated .com.arges.file.proto.WristUserName wristnames = 7;
  for (int i = 0; i < this->wristnames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->wristnames(i), target);
  }

  // repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
  for (int i = 0; i < this->signintimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->signintimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.SigninDataForHistory)
  return target;
}

int SigninDataForHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 starttime = 1 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 2 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional string deviceCode = 3 [default = "default"];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional int32 signinnum = 4 [default = 0];
    if (has_signinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signinnum());
    }

  }
  // repeated string wristmac = 5;
  total_size += 1 * this->wristmac_size();
  for (int i = 0; i < this->wristmac_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wristmac(i));
  }

  // repeated .com.arges.file.proto.WristUserPhoto wristphotos = 6;
  total_size += 1 * this->wristphotos_size();
  for (int i = 0; i < this->wristphotos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wristphotos(i));
  }

  // repeated .com.arges.file.proto.WristUserName wristnames = 7;
  total_size += 1 * this->wristnames_size();
  for (int i = 0; i < this->wristnames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wristnames(i));
  }

  // repeated .com.arges.file.proto.WristSignInTime signintimes = 8;
  total_size += 1 * this->signintimes_size();
  for (int i = 0; i < this->signintimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signintimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigninDataForHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigninDataForHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigninDataForHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigninDataForHistory::MergeFrom(const SigninDataForHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  wristmac_.MergeFrom(from.wristmac_);
  wristphotos_.MergeFrom(from.wristphotos_);
  wristnames_.MergeFrom(from.wristnames_);
  signintimes_.MergeFrom(from.signintimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_signinnum()) {
      set_signinnum(from.signinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigninDataForHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigninDataForHistory::CopyFrom(const SigninDataForHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigninDataForHistory::IsInitialized() const {

  return true;
}

void SigninDataForHistory::Swap(SigninDataForHistory* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(devicecode_, other->devicecode_);
    std::swap(signinnum_, other->signinnum_);
    wristmac_.Swap(&other->wristmac_);
    wristphotos_.Swap(&other->wristphotos_);
    wristnames_.Swap(&other->wristnames_);
    signintimes_.Swap(&other->signintimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigninDataForHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigninDataForHistory_descriptor_;
  metadata.reflection = SigninDataForHistory_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WristUserPhoto::_default_wristmac_ = NULL;
::std::string* WristUserPhoto::_default_wristuserphoto_ = NULL;
#ifndef _MSC_VER
const int WristUserPhoto::kWristmacFieldNumber;
const int WristUserPhoto::kWristuserphotoFieldNumber;
#endif  // !_MSC_VER

WristUserPhoto::WristUserPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WristUserPhoto)
}

void WristUserPhoto::InitAsDefaultInstance() {
}

WristUserPhoto::WristUserPhoto(const WristUserPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WristUserPhoto)
}

void WristUserPhoto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  wristuserphoto_ = const_cast< ::std::string*>(_default_wristuserphoto_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WristUserPhoto::~WristUserPhoto() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WristUserPhoto)
  SharedDtor();
}

void WristUserPhoto::SharedDtor() {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristuserphoto_ != _default_wristuserphoto_) {
    delete wristuserphoto_;
  }
  if (this != default_instance_) {
  }
}

void WristUserPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WristUserPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WristUserPhoto_descriptor_;
}

const WristUserPhoto& WristUserPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

WristUserPhoto* WristUserPhoto::default_instance_ = NULL;

WristUserPhoto* WristUserPhoto::New() const {
  return new WristUserPhoto;
}

void WristUserPhoto::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_wristmac()) {
      if (wristmac_ != _default_wristmac_) {
        wristmac_->assign(*_default_wristmac_);
      }
    }
    if (has_wristuserphoto()) {
      if (wristuserphoto_ != _default_wristuserphoto_) {
        wristuserphoto_->assign(*_default_wristuserphoto_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WristUserPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WristUserPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wristmac = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac().data(), this->wristmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wristuserphoto;
        break;
      }

      // optional bytes wristuserphoto = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_wristuserphoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wristuserphoto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WristUserPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WristUserPhoto)
  return false;
#undef DO_
}

void WristUserPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WristUserPhoto)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wristmac(), output);
  }

  // optional bytes wristuserphoto = 2 [default = "default"];
  if (has_wristuserphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->wristuserphoto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WristUserPhoto)
}

::google::protobuf::uint8* WristUserPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WristUserPhoto)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wristmac(), target);
  }

  // optional bytes wristuserphoto = 2 [default = "default"];
  if (has_wristuserphoto()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->wristuserphoto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WristUserPhoto)
  return target;
}

int WristUserPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wristmac = 1 [default = "default"];
    if (has_wristmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristmac());
    }

    // optional bytes wristuserphoto = 2 [default = "default"];
    if (has_wristuserphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wristuserphoto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WristUserPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WristUserPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WristUserPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WristUserPhoto::MergeFrom(const WristUserPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wristmac()) {
      set_wristmac(from.wristmac());
    }
    if (from.has_wristuserphoto()) {
      set_wristuserphoto(from.wristuserphoto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WristUserPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WristUserPhoto::CopyFrom(const WristUserPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WristUserPhoto::IsInitialized() const {

  return true;
}

void WristUserPhoto::Swap(WristUserPhoto* other) {
  if (other != this) {
    std::swap(wristmac_, other->wristmac_);
    std::swap(wristuserphoto_, other->wristuserphoto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WristUserPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WristUserPhoto_descriptor_;
  metadata.reflection = WristUserPhoto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WristUserName::_default_wristmac_ = NULL;
::std::string* WristUserName::_default_wristusername_ = NULL;
#ifndef _MSC_VER
const int WristUserName::kWristmacFieldNumber;
const int WristUserName::kWristusernameFieldNumber;
const int WristUserName::kAttendanceStatusFieldNumber;
const int WristUserName::kWristCodeTypeFieldNumber;
const int WristUserName::kDateFieldNumber;
const int WristUserName::kIdCardFieldNumber;
const int WristUserName::kNickNameFieldNumber;
const int WristUserName::kPositionFieldNumber;
const int WristUserName::kSexFieldNumber;
const int WristUserName::kTypeFieldNumber;
const int WristUserName::kIdentityPictureFieldNumber;
const int WristUserName::kAutoModeFieldNumber;
#endif  // !_MSC_VER

WristUserName::WristUserName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WristUserName)
}

void WristUserName::InitAsDefaultInstance() {
}

WristUserName::WristUserName(const WristUserName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WristUserName)
}

void WristUserName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  wristusername_ = const_cast< ::std::string*>(_default_wristusername_);
  attendancestatus_ = -1;
  wristcodetype_ = -1;
  date_ = GOOGLE_LONGLONG(-1);
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = -1;
  type_ = 0;
  identitypicture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automode_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WristUserName::~WristUserName() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WristUserName)
  SharedDtor();
}

void WristUserName::SharedDtor() {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristusername_ != _default_wristusername_) {
    delete wristusername_;
  }
  if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (identitypicture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identitypicture_;
  }
  if (this != default_instance_) {
  }
}

void WristUserName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WristUserName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WristUserName_descriptor_;
}

const WristUserName& WristUserName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

WristUserName* WristUserName::default_instance_ = NULL;

WristUserName* WristUserName::New() const {
  return new WristUserName;
}

void WristUserName::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_wristmac()) {
      if (wristmac_ != _default_wristmac_) {
        wristmac_->assign(*_default_wristmac_);
      }
    }
    if (has_wristusername()) {
      if (wristusername_ != _default_wristusername_) {
        wristusername_->assign(*_default_wristusername_);
      }
    }
    attendancestatus_ = -1;
    wristcodetype_ = -1;
    date_ = GOOGLE_LONGLONG(-1);
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    sex_ = -1;
    type_ = 0;
    if (has_identitypicture()) {
      if (identitypicture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identitypicture_->clear();
      }
    }
    automode_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WristUserName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WristUserName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wristmac = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac().data(), this->wristmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wristusername;
        break;
      }

      // optional string wristusername = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_wristusername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristusername().data(), this->wristusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristusername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attendanceStatus;
        break;
      }

      // optional int32 attendanceStatus = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_attendanceStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attendancestatus_)));
          set_has_attendancestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wristCodeType;
        break;
      }

      // optional int32 wristCodeType = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_wristCodeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wristcodetype_)));
          set_has_wristcodetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_date;
        break;
      }

      // optional int64 date = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_idCard;
        break;
      }

      // optional string idCard = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_idCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nickName;
        break;
      }

      // optional string nickName = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_position;
        break;
      }

      // optional string position = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9 [default = -1];
      case 9: {
        if (tag == 72) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional int32 type = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_identityPicture;
        break;
      }

      // optional bytes identityPicture = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_identityPicture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identitypicture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_autoMode;
        break;
      }

      // optional int32 autoMode = 12 [default = -1];
      case 12: {
        if (tag == 96) {
         parse_autoMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &automode_)));
          set_has_automode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WristUserName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WristUserName)
  return false;
#undef DO_
}

void WristUserName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WristUserName)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wristmac(), output);
  }

  // optional string wristusername = 2 [default = "default"];
  if (has_wristusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristusername().data(), this->wristusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristusername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wristusername(), output);
  }

  // optional int32 attendanceStatus = 3 [default = -1];
  if (has_attendancestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attendancestatus(), output);
  }

  // optional int32 wristCodeType = 4 [default = -1];
  if (has_wristcodetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wristcodetype(), output);
  }

  // optional int64 date = 5 [default = -1];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->date(), output);
  }

  // optional string idCard = 6 [default = ""];
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->idcard(), output);
  }

  // optional string nickName = 7 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // optional string position = 8 [default = ""];
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->position(), output);
  }

  // optional int32 sex = 9 [default = -1];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int32 type = 10 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // optional bytes identityPicture = 11 [default = ""];
  if (has_identitypicture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->identitypicture(), output);
  }

  // optional int32 autoMode = 12 [default = -1];
  if (has_automode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->automode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WristUserName)
}

::google::protobuf::uint8* WristUserName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WristUserName)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wristmac(), target);
  }

  // optional string wristusername = 2 [default = "default"];
  if (has_wristusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristusername().data(), this->wristusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristusername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wristusername(), target);
  }

  // optional int32 attendanceStatus = 3 [default = -1];
  if (has_attendancestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attendancestatus(), target);
  }

  // optional int32 wristCodeType = 4 [default = -1];
  if (has_wristcodetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wristcodetype(), target);
  }

  // optional int64 date = 5 [default = -1];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->date(), target);
  }

  // optional string idCard = 6 [default = ""];
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->idcard(), target);
  }

  // optional string nickName = 7 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional string position = 8 [default = ""];
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->position(), target);
  }

  // optional int32 sex = 9 [default = -1];
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int32 type = 10 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // optional bytes identityPicture = 11 [default = ""];
  if (has_identitypicture()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->identitypicture(), target);
  }

  // optional int32 autoMode = 12 [default = -1];
  if (has_automode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->automode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WristUserName)
  return target;
}

int WristUserName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wristmac = 1 [default = "default"];
    if (has_wristmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristmac());
    }

    // optional string wristusername = 2 [default = "default"];
    if (has_wristusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristusername());
    }

    // optional int32 attendanceStatus = 3 [default = -1];
    if (has_attendancestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attendancestatus());
    }

    // optional int32 wristCodeType = 4 [default = -1];
    if (has_wristcodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wristcodetype());
    }

    // optional int64 date = 5 [default = -1];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

    // optional string idCard = 6 [default = ""];
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcard());
    }

    // optional string nickName = 7 [default = ""];
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string position = 8 [default = ""];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sex = 9 [default = -1];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 type = 10 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes identityPicture = 11 [default = ""];
    if (has_identitypicture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identitypicture());
    }

    // optional int32 autoMode = 12 [default = -1];
    if (has_automode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->automode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WristUserName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WristUserName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WristUserName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WristUserName::MergeFrom(const WristUserName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wristmac()) {
      set_wristmac(from.wristmac());
    }
    if (from.has_wristusername()) {
      set_wristusername(from.wristusername());
    }
    if (from.has_attendancestatus()) {
      set_attendancestatus(from.attendancestatus());
    }
    if (from.has_wristcodetype()) {
      set_wristcodetype(from.wristcodetype());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_identitypicture()) {
      set_identitypicture(from.identitypicture());
    }
    if (from.has_automode()) {
      set_automode(from.automode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WristUserName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WristUserName::CopyFrom(const WristUserName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WristUserName::IsInitialized() const {

  return true;
}

void WristUserName::Swap(WristUserName* other) {
  if (other != this) {
    std::swap(wristmac_, other->wristmac_);
    std::swap(wristusername_, other->wristusername_);
    std::swap(attendancestatus_, other->attendancestatus_);
    std::swap(wristcodetype_, other->wristcodetype_);
    std::swap(date_, other->date_);
    std::swap(idcard_, other->idcard_);
    std::swap(nickname_, other->nickname_);
    std::swap(position_, other->position_);
    std::swap(sex_, other->sex_);
    std::swap(type_, other->type_);
    std::swap(identitypicture_, other->identitypicture_);
    std::swap(automode_, other->automode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WristUserName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WristUserName_descriptor_;
  metadata.reflection = WristUserName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhiteUserMassage::kRequestTypeFieldNumber;
const int WhiteUserMassage::kResultFieldNumber;
const int WhiteUserMassage::kResultDescribeFieldNumber;
const int WhiteUserMassage::kMacsFieldNumber;
const int WhiteUserMassage::kUsersFieldNumber;
const int WhiteUserMassage::kDevCodeFieldNumber;
#endif  // !_MSC_VER

WhiteUserMassage::WhiteUserMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WhiteUserMassage)
}

void WhiteUserMassage::InitAsDefaultInstance() {
  devcode_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

WhiteUserMassage::WhiteUserMassage(const WhiteUserMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WhiteUserMassage)
}

void WhiteUserMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiteUserMassage::~WhiteUserMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WhiteUserMassage)
  SharedDtor();
}

void WhiteUserMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
    delete devcode_;
  }
}

void WhiteUserMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiteUserMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteUserMassage_descriptor_;
}

const WhiteUserMassage& WhiteUserMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

WhiteUserMassage* WhiteUserMassage::default_instance_ = NULL;

WhiteUserMassage* WhiteUserMassage::New() const {
  return new WhiteUserMassage;
}

void WhiteUserMassage::Clear() {
  if (_has_bits_[0 / 32] & 39) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_devcode()) {
      if (devcode_ != NULL) devcode_->::com::arges::file::proto::DeviceInfo::Clear();
    }
  }
  macs_.Clear();
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiteUserMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WhiteUserMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_macs;
        break;
      }

      // repeated string macs = 4;
      case 4: {
        if (tag == 34) {
         parse_macs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_macs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macs(this->macs_size() - 1).data(),
            this->macs(this->macs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "macs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_macs;
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated .com.arges.file.proto.WristUserName users = 5;
      case 5: {
        if (tag == 42) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_users;
        if (input->ExpectTag(50)) goto parse_devCode;
        break;
      }

      // optional .com.arges.file.proto.DeviceInfo devCode = 6;
      case 6: {
        if (tag == 50) {
         parse_devCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WhiteUserMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WhiteUserMassage)
  return false;
#undef DO_
}

void WhiteUserMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WhiteUserMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // repeated string macs = 4;
  for (int i = 0; i < this->macs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->macs(i).data(), this->macs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "macs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->macs(i), output);
  }

  // repeated .com.arges.file.proto.WristUserName users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  // optional .com.arges.file.proto.DeviceInfo devCode = 6;
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->devcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WhiteUserMassage)
}

::google::protobuf::uint8* WhiteUserMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WhiteUserMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // repeated string macs = 4;
  for (int i = 0; i < this->macs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macs(i).data(), this->macs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->macs(i), target);
  }

  // repeated .com.arges.file.proto.WristUserName users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->users(i), target);
  }

  // optional .com.arges.file.proto.DeviceInfo devCode = 6;
  if (has_devcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->devcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WhiteUserMassage)
  return target;
}

int WhiteUserMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional .com.arges.file.proto.DeviceInfo devCode = 6;
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devcode());
    }

  }
  // repeated string macs = 4;
  total_size += 1 * this->macs_size();
  for (int i = 0; i < this->macs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->macs(i));
  }

  // repeated .com.arges.file.proto.WristUserName users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiteUserMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiteUserMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiteUserMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiteUserMassage::MergeFrom(const WhiteUserMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  macs_.MergeFrom(from.macs_);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_devcode()) {
      mutable_devcode()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.devcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiteUserMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiteUserMassage::CopyFrom(const WhiteUserMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiteUserMassage::IsInitialized() const {

  return true;
}

void WhiteUserMassage::Swap(WhiteUserMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    macs_.Swap(&other->macs_);
    users_.Swap(&other->users_);
    std::swap(devcode_, other->devcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiteUserMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiteUserMassage_descriptor_;
  metadata.reflection = WhiteUserMassage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBlackWhite::kDeviceFieldNumber;
#endif  // !_MSC_VER

QueryBlackWhite::QueryBlackWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.QueryBlackWhite)
}

void QueryBlackWhite::InitAsDefaultInstance() {
  device_ = const_cast< ::com::arges::file::proto::DeviceInfo*>(&::com::arges::file::proto::DeviceInfo::default_instance());
}

QueryBlackWhite::QueryBlackWhite(const QueryBlackWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.QueryBlackWhite)
}

void QueryBlackWhite::SharedCtor() {
  _cached_size_ = 0;
  device_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBlackWhite::~QueryBlackWhite() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.QueryBlackWhite)
  SharedDtor();
}

void QueryBlackWhite::SharedDtor() {
  if (this != default_instance_) {
    delete device_;
  }
}

void QueryBlackWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBlackWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBlackWhite_descriptor_;
}

const QueryBlackWhite& QueryBlackWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

QueryBlackWhite* QueryBlackWhite::default_instance_ = NULL;

QueryBlackWhite* QueryBlackWhite::New() const {
  return new QueryBlackWhite;
}

void QueryBlackWhite::Clear() {
  if (has_device()) {
    if (device_ != NULL) device_->::com::arges::file::proto::DeviceInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBlackWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.QueryBlackWhite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.arges.file.proto.DeviceInfo device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.QueryBlackWhite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.QueryBlackWhite)
  return false;
#undef DO_
}

void QueryBlackWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.QueryBlackWhite)
  // optional .com.arges.file.proto.DeviceInfo device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.QueryBlackWhite)
}

::google::protobuf::uint8* QueryBlackWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.QueryBlackWhite)
  // optional .com.arges.file.proto.DeviceInfo device = 1;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.QueryBlackWhite)
  return target;
}

int QueryBlackWhite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.arges.file.proto.DeviceInfo device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBlackWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBlackWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBlackWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBlackWhite::MergeFrom(const QueryBlackWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      mutable_device()->::com::arges::file::proto::DeviceInfo::MergeFrom(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBlackWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBlackWhite::CopyFrom(const QueryBlackWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBlackWhite::IsInitialized() const {

  return true;
}

void QueryBlackWhite::Swap(QueryBlackWhite* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBlackWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBlackWhite_descriptor_;
  metadata.reflection = QueryBlackWhite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhiteUserMassageTest::kRequestTypeFieldNumber;
const int WhiteUserMassageTest::kResultFieldNumber;
const int WhiteUserMassageTest::kResultDescribeFieldNumber;
#endif  // !_MSC_VER

WhiteUserMassageTest::WhiteUserMassageTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WhiteUserMassageTest)
}

void WhiteUserMassageTest::InitAsDefaultInstance() {
}

WhiteUserMassageTest::WhiteUserMassageTest(const WhiteUserMassageTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WhiteUserMassageTest)
}

void WhiteUserMassageTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiteUserMassageTest::~WhiteUserMassageTest() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WhiteUserMassageTest)
  SharedDtor();
}

void WhiteUserMassageTest::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
  }
}

void WhiteUserMassageTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiteUserMassageTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteUserMassageTest_descriptor_;
}

const WhiteUserMassageTest& WhiteUserMassageTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

WhiteUserMassageTest* WhiteUserMassageTest::default_instance_ = NULL;

WhiteUserMassageTest* WhiteUserMassageTest::New() const {
  return new WhiteUserMassageTest;
}

void WhiteUserMassageTest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiteUserMassageTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WhiteUserMassageTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WhiteUserMassageTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WhiteUserMassageTest)
  return false;
#undef DO_
}

void WhiteUserMassageTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WhiteUserMassageTest)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WhiteUserMassageTest)
}

::google::protobuf::uint8* WhiteUserMassageTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WhiteUserMassageTest)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WhiteUserMassageTest)
  return target;
}

int WhiteUserMassageTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiteUserMassageTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiteUserMassageTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiteUserMassageTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiteUserMassageTest::MergeFrom(const WhiteUserMassageTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiteUserMassageTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiteUserMassageTest::CopyFrom(const WhiteUserMassageTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiteUserMassageTest::IsInitialized() const {

  return true;
}

void WhiteUserMassageTest::Swap(WhiteUserMassageTest* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiteUserMassageTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiteUserMassageTest_descriptor_;
  metadata.reflection = WhiteUserMassageTest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WristSignInTime::_default_wristmac_ = NULL;
#ifndef _MSC_VER
const int WristSignInTime::kWristmacFieldNumber;
const int WristSignInTime::kSignintimeFieldNumber;
#endif  // !_MSC_VER

WristSignInTime::WristSignInTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.WristSignInTime)
}

void WristSignInTime::InitAsDefaultInstance() {
}

WristSignInTime::WristSignInTime(const WristSignInTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.WristSignInTime)
}

void WristSignInTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  signintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WristSignInTime::~WristSignInTime() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.WristSignInTime)
  SharedDtor();
}

void WristSignInTime::SharedDtor() {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (this != default_instance_) {
  }
}

void WristSignInTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WristSignInTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WristSignInTime_descriptor_;
}

const WristSignInTime& WristSignInTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

WristSignInTime* WristSignInTime::default_instance_ = NULL;

WristSignInTime* WristSignInTime::New() const {
  return new WristSignInTime;
}

void WristSignInTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_wristmac()) {
      if (wristmac_ != _default_wristmac_) {
        wristmac_->assign(*_default_wristmac_);
      }
    }
    signintime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WristSignInTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.WristSignInTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wristmac = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac().data(), this->wristmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signintime;
        break;
      }

      // optional uint64 signintime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_signintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signintime_)));
          set_has_signintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.WristSignInTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.WristSignInTime)
  return false;
#undef DO_
}

void WristSignInTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.WristSignInTime)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wristmac(), output);
  }

  // optional uint64 signintime = 2 [default = 0];
  if (has_signintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->signintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.WristSignInTime)
}

::google::protobuf::uint8* WristSignInTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.WristSignInTime)
  // optional string wristmac = 1 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wristmac(), target);
  }

  // optional uint64 signintime = 2 [default = 0];
  if (has_signintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->signintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.WristSignInTime)
  return target;
}

int WristSignInTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wristmac = 1 [default = "default"];
    if (has_wristmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristmac());
    }

    // optional uint64 signintime = 2 [default = 0];
    if (has_signintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WristSignInTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WristSignInTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WristSignInTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WristSignInTime::MergeFrom(const WristSignInTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wristmac()) {
      set_wristmac(from.wristmac());
    }
    if (from.has_signintime()) {
      set_signintime(from.signintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WristSignInTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WristSignInTime::CopyFrom(const WristSignInTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WristSignInTime::IsInitialized() const {

  return true;
}

void WristSignInTime::Swap(WristSignInTime* other) {
  if (other != this) {
    std::swap(wristmac_, other->wristmac_);
    std::swap(signintime_, other->signintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WristSignInTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WristSignInTime_descriptor_;
  metadata.reflection = WristSignInTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SigninMassageForReal::kDeviceCodeFieldNumber;
const int SigninMassageForReal::kWristFieldNumber;
const int SigninMassageForReal::kUserNameFieldNumber;
const int SigninMassageForReal::kWristuserphotoFieldNumber;
#endif  // !_MSC_VER

SigninMassageForReal::SigninMassageForReal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.SigninMassageForReal)
}

void SigninMassageForReal::InitAsDefaultInstance() {
  wrist_ = const_cast< ::com::arges::file::proto::Wrist*>(&::com::arges::file::proto::Wrist::default_instance());
  username_ = const_cast< ::com::arges::file::proto::WristUserName*>(&::com::arges::file::proto::WristUserName::default_instance());
}

SigninMassageForReal::SigninMassageForReal(const SigninMassageForReal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.SigninMassageForReal)
}

void SigninMassageForReal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wrist_ = NULL;
  username_ = NULL;
  wristuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigninMassageForReal::~SigninMassageForReal() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.SigninMassageForReal)
  SharedDtor();
}

void SigninMassageForReal::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (wristuserphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristuserphoto_;
  }
  if (this != default_instance_) {
    delete wrist_;
    delete username_;
  }
}

void SigninMassageForReal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigninMassageForReal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigninMassageForReal_descriptor_;
}

const SigninMassageForReal& SigninMassageForReal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

SigninMassageForReal* SigninMassageForReal::default_instance_ = NULL;

SigninMassageForReal* SigninMassageForReal::New() const {
  return new SigninMassageForReal;
}

void SigninMassageForReal::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_wrist()) {
      if (wrist_ != NULL) wrist_->::com::arges::file::proto::Wrist::Clear();
    }
    if (has_username()) {
      if (username_ != NULL) username_->::com::arges::file::proto::WristUserName::Clear();
    }
    if (has_wristuserphoto()) {
      if (wristuserphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wristuserphoto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigninMassageForReal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.SigninMassageForReal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wrist;
        break;
      }

      // optional .com.arges.file.proto.Wrist wrist = 2;
      case 2: {
        if (tag == 18) {
         parse_wrist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }

      // optional .com.arges.file.proto.WristUserName userName = 3;
      case 3: {
        if (tag == 26) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wristuserphoto;
        break;
      }

      // optional bytes wristuserphoto = 4;
      case 4: {
        if (tag == 34) {
         parse_wristuserphoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wristuserphoto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.SigninMassageForReal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.SigninMassageForReal)
  return false;
#undef DO_
}

void SigninMassageForReal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.SigninMassageForReal)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional .com.arges.file.proto.Wrist wrist = 2;
  if (has_wrist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wrist(), output);
  }

  // optional .com.arges.file.proto.WristUserName userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->username(), output);
  }

  // optional bytes wristuserphoto = 4;
  if (has_wristuserphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->wristuserphoto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.SigninMassageForReal)
}

::google::protobuf::uint8* SigninMassageForReal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.SigninMassageForReal)
  // optional string deviceCode = 1 [default = ""];
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional .com.arges.file.proto.Wrist wrist = 2;
  if (has_wrist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wrist(), target);
  }

  // optional .com.arges.file.proto.WristUserName userName = 3;
  if (has_username()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->username(), target);
  }

  // optional bytes wristuserphoto = 4;
  if (has_wristuserphoto()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->wristuserphoto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.SigninMassageForReal)
  return target;
}

int SigninMassageForReal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceCode = 1 [default = ""];
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional .com.arges.file.proto.Wrist wrist = 2;
    if (has_wrist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrist());
    }

    // optional .com.arges.file.proto.WristUserName userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->username());
    }

    // optional bytes wristuserphoto = 4;
    if (has_wristuserphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wristuserphoto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigninMassageForReal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigninMassageForReal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigninMassageForReal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigninMassageForReal::MergeFrom(const SigninMassageForReal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_wrist()) {
      mutable_wrist()->::com::arges::file::proto::Wrist::MergeFrom(from.wrist());
    }
    if (from.has_username()) {
      mutable_username()->::com::arges::file::proto::WristUserName::MergeFrom(from.username());
    }
    if (from.has_wristuserphoto()) {
      set_wristuserphoto(from.wristuserphoto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigninMassageForReal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigninMassageForReal::CopyFrom(const SigninMassageForReal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigninMassageForReal::IsInitialized() const {

  if (has_wrist()) {
    if (!this->wrist().IsInitialized()) return false;
  }
  return true;
}

void SigninMassageForReal::Swap(SigninMassageForReal* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(wrist_, other->wrist_);
    std::swap(username_, other->username_);
    std::swap(wristuserphoto_, other->wristuserphoto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigninMassageForReal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigninMassageForReal_descriptor_;
  metadata.reflection = SigninMassageForReal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotMapData::kOrgCodeFieldNumber;
const int HotMapData::kLoginNameFieldNumber;
const int HotMapData::kCountFieldNumber;
#endif  // !_MSC_VER

HotMapData::HotMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HotMapData)
}

void HotMapData::InitAsDefaultInstance() {
}

HotMapData::HotMapData(const HotMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HotMapData)
}

void HotMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotMapData::~HotMapData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HotMapData)
  SharedDtor();
}

void HotMapData::SharedDtor() {
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (this != default_instance_) {
  }
}

void HotMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotMapData_descriptor_;
}

const HotMapData& HotMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

HotMapData* HotMapData::default_instance_ = NULL;

HotMapData* HotMapData::New() const {
  return new HotMapData;
}

void HotMapData::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_orgcode()) {
      if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgcode_->clear();
      }
    }
    count_ = 0;
  }
  loginname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HotMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orgCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgcode().data(), this->orgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginName;
        break;
      }

      // repeated string loginName = 2;
      case 2: {
        if (tag == 18) {
         parse_loginName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_loginname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginname(this->loginname_size() - 1).data(),
            this->loginname(this->loginname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginName;
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HotMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HotMapData)
  return false;
#undef DO_
}

void HotMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HotMapData)
  // optional string orgCode = 1 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orgcode(), output);
  }

  // repeated string loginName = 2;
  for (int i = 0; i < this->loginname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->loginname(i).data(), this->loginname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "loginname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loginname(i), output);
  }

  // optional int32 count = 3 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HotMapData)
}

::google::protobuf::uint8* HotMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HotMapData)
  // optional string orgCode = 1 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orgcode(), target);
  }

  // repeated string loginName = 2;
  for (int i = 0; i < this->loginname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginname(i).data(), this->loginname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->loginname(i), target);
  }

  // optional int32 count = 3 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HotMapData)
  return target;
}

int HotMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orgCode = 1 [default = ""];
    if (has_orgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgcode());
    }

    // optional int32 count = 3 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated string loginName = 2;
  total_size += 1 * this->loginname_size();
  for (int i = 0; i < this->loginname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->loginname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotMapData::MergeFrom(const HotMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginname_.MergeFrom(from.loginname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgcode()) {
      set_orgcode(from.orgcode());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotMapData::CopyFrom(const HotMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotMapData::IsInitialized() const {

  return true;
}

void HotMapData::Swap(HotMapData* other) {
  if (other != this) {
    std::swap(orgcode_, other->orgcode_);
    loginname_.Swap(&other->loginname_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotMapData_descriptor_;
  metadata.reflection = HotMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotMapMassage::kRequestTypeFieldNumber;
const int HotMapMassage::kResultFieldNumber;
const int HotMapMassage::kResultDescribeFieldNumber;
const int HotMapMassage::kOrgCodeFieldNumber;
const int HotMapMassage::kDataFieldNumber;
#endif  // !_MSC_VER

HotMapMassage::HotMapMassage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.HotMapMassage)
}

void HotMapMassage::InitAsDefaultInstance() {
}

HotMapMassage::HotMapMassage(const HotMapMassage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.HotMapMassage)
}

void HotMapMassage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotMapMassage::~HotMapMassage() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.HotMapMassage)
  SharedDtor();
}

void HotMapMassage::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgcode_;
  }
  if (this != default_instance_) {
  }
}

void HotMapMassage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotMapMassage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotMapMassage_descriptor_;
}

const HotMapMassage& HotMapMassage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignInDataBean_2eproto();
  return *default_instance_;
}

HotMapMassage* HotMapMassage::default_instance_ = NULL;

HotMapMassage* HotMapMassage::New() const {
  return new HotMapMassage;
}

void HotMapMassage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requesttype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
    if (has_orgcode()) {
      if (orgcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgcode_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotMapMassage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.HotMapMassage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orgCode;
        break;
      }

      // optional string orgCode = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_orgCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgcode().data(), this->orgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .com.arges.file.proto.HotMapData data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.HotMapMassage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.HotMapMassage)
  return false;
#undef DO_
}

void HotMapMassage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.HotMapMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->resultdescribe(), output);
  }

  // optional string orgCode = 4 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orgcode(), output);
  }

  // repeated .com.arges.file.proto.HotMapData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.HotMapMassage)
}

::google::protobuf::uint8* HotMapMassage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.HotMapMassage)
  // optional int32 requestType = 1 [default = -1];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional int32 result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes resultDescribe = 3 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->resultdescribe(), target);
  }

  // optional string orgCode = 4 [default = ""];
  if (has_orgcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgcode().data(), this->orgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orgcode(), target);
  }

  // repeated .com.arges.file.proto.HotMapData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.HotMapMassage)
  return target;
}

int HotMapMassage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1 [default = -1];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional int32 result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 3 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

    // optional string orgCode = 4 [default = ""];
    if (has_orgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgcode());
    }

  }
  // repeated .com.arges.file.proto.HotMapData data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotMapMassage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotMapMassage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotMapMassage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotMapMassage::MergeFrom(const HotMapMassage& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
    if (from.has_orgcode()) {
      set_orgcode(from.orgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotMapMassage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotMapMassage::CopyFrom(const HotMapMassage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotMapMassage::IsInitialized() const {

  return true;
}

void HotMapMassage::Swap(HotMapMassage* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(orgcode_, other->orgcode_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotMapMassage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotMapMassage_descriptor_;
  metadata.reflection = HotMapMassage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
