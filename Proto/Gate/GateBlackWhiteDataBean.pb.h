// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateBlackWhiteDataBean.proto

#ifndef PROTOBUF_GateBlackWhiteDataBean_2eproto__INCLUDED
#define PROTOBUF_GateBlackWhiteDataBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
void protobuf_AssignDesc_GateBlackWhiteDataBean_2eproto();
void protobuf_ShutdownFile_GateBlackWhiteDataBean_2eproto();

class GateBlackWhiteData;
class GateBlackWhiteDataList;

// ===================================================================

class GateBlackWhiteData : public ::google::protobuf::Message {
 public:
  GateBlackWhiteData();
  virtual ~GateBlackWhiteData();

  GateBlackWhiteData(const GateBlackWhiteData& from);

  inline GateBlackWhiteData& operator=(const GateBlackWhiteData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateBlackWhiteData& default_instance();

  void Swap(GateBlackWhiteData* other);

  // implements Message ----------------------------------------------

  GateBlackWhiteData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateBlackWhiteData& from);
  void MergeFrom(const GateBlackWhiteData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string identityid = 1 [default = "default"];
  inline bool has_identityid() const;
  inline void clear_identityid();
  static const int kIdentityidFieldNumber = 1;
  inline const ::std::string& identityid() const;
  inline void set_identityid(const ::std::string& value);
  inline void set_identityid(const char* value);
  inline void set_identityid(const char* value, size_t size);
  inline ::std::string* mutable_identityid();
  inline ::std::string* release_identityid();
  inline void set_allocated_identityid(::std::string* identityid);

  // optional string wristid = 2 [default = "default"];
  inline bool has_wristid() const;
  inline void clear_wristid();
  static const int kWristidFieldNumber = 2;
  inline const ::std::string& wristid() const;
  inline void set_wristid(const ::std::string& value);
  inline void set_wristid(const char* value);
  inline void set_wristid(const char* value, size_t size);
  inline ::std::string* mutable_wristid();
  inline ::std::string* release_wristid();
  inline void set_allocated_wristid(::std::string* wristid);

  // optional int32 idtype = 3 [default = -1];
  inline bool has_idtype() const;
  inline void clear_idtype();
  static const int kIdtypeFieldNumber = 3;
  inline ::google::protobuf::int32 idtype() const;
  inline void set_idtype(::google::protobuf::int32 value);

  // optional bytes picture = 4 [default = "default"];
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 4;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const void* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  inline void set_allocated_picture(::std::string* picture);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.GateBlackWhiteData)
 private:
  inline void set_has_identityid();
  inline void clear_has_identityid();
  inline void set_has_wristid();
  inline void clear_has_wristid();
  inline void set_has_idtype();
  inline void clear_has_idtype();
  inline void set_has_picture();
  inline void clear_has_picture();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_identityid_;
  ::std::string* identityid_;
  static ::std::string* _default_wristid_;
  ::std::string* wristid_;
  static ::std::string* _default_picture_;
  ::std::string* picture_;
  ::google::protobuf::int32 idtype_;
  friend void  protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  friend void protobuf_AssignDesc_GateBlackWhiteDataBean_2eproto();
  friend void protobuf_ShutdownFile_GateBlackWhiteDataBean_2eproto();

  void InitAsDefaultInstance();
  static GateBlackWhiteData* default_instance_;
};
// -------------------------------------------------------------------

class GateBlackWhiteDataList : public ::google::protobuf::Message {
 public:
  GateBlackWhiteDataList();
  virtual ~GateBlackWhiteDataList();

  GateBlackWhiteDataList(const GateBlackWhiteDataList& from);

  inline GateBlackWhiteDataList& operator=(const GateBlackWhiteDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateBlackWhiteDataList& default_instance();

  void Swap(GateBlackWhiteDataList* other);

  // implements Message ----------------------------------------------

  GateBlackWhiteDataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateBlackWhiteDataList& from);
  void MergeFrom(const GateBlackWhiteDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::com::arges::file::proto::GateBlackWhiteData& data(int index) const;
  inline ::com::arges::file::proto::GateBlackWhiteData* mutable_data(int index);
  inline ::com::arges::file::proto::GateBlackWhiteData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateBlackWhiteData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateBlackWhiteData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.GateBlackWhiteDataList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateBlackWhiteData > data_;
  friend void  protobuf_AddDesc_GateBlackWhiteDataBean_2eproto();
  friend void protobuf_AssignDesc_GateBlackWhiteDataBean_2eproto();
  friend void protobuf_ShutdownFile_GateBlackWhiteDataBean_2eproto();

  void InitAsDefaultInstance();
  static GateBlackWhiteDataList* default_instance_;
};
// ===================================================================


// ===================================================================

// GateBlackWhiteData

// optional string identityid = 1 [default = "default"];
inline bool GateBlackWhiteData::has_identityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateBlackWhiteData::set_has_identityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateBlackWhiteData::clear_has_identityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateBlackWhiteData::clear_identityid() {
  if (identityid_ != _default_identityid_) {
    identityid_->assign(*_default_identityid_);
  }
  clear_has_identityid();
}
inline const ::std::string& GateBlackWhiteData::identityid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateBlackWhiteData.identityid)
  return *identityid_;
}
inline void GateBlackWhiteData::set_identityid(const ::std::string& value) {
  set_has_identityid();
  if (identityid_ == _default_identityid_) {
    identityid_ = new ::std::string;
  }
  identityid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateBlackWhiteData.identityid)
}
inline void GateBlackWhiteData::set_identityid(const char* value) {
  set_has_identityid();
  if (identityid_ == _default_identityid_) {
    identityid_ = new ::std::string;
  }
  identityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateBlackWhiteData.identityid)
}
inline void GateBlackWhiteData::set_identityid(const char* value, size_t size) {
  set_has_identityid();
  if (identityid_ == _default_identityid_) {
    identityid_ = new ::std::string;
  }
  identityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateBlackWhiteData.identityid)
}
inline ::std::string* GateBlackWhiteData::mutable_identityid() {
  set_has_identityid();
  if (identityid_ == _default_identityid_) {
    identityid_ = new ::std::string(*_default_identityid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateBlackWhiteData.identityid)
  return identityid_;
}
inline ::std::string* GateBlackWhiteData::release_identityid() {
  clear_has_identityid();
  if (identityid_ == _default_identityid_) {
    return NULL;
  } else {
    ::std::string* temp = identityid_;
    identityid_ = const_cast< ::std::string*>(_default_identityid_);
    return temp;
  }
}
inline void GateBlackWhiteData::set_allocated_identityid(::std::string* identityid) {
  if (identityid_ != _default_identityid_) {
    delete identityid_;
  }
  if (identityid) {
    set_has_identityid();
    identityid_ = identityid;
  } else {
    clear_has_identityid();
    identityid_ = const_cast< ::std::string*>(_default_identityid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateBlackWhiteData.identityid)
}

// optional string wristid = 2 [default = "default"];
inline bool GateBlackWhiteData::has_wristid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateBlackWhiteData::set_has_wristid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateBlackWhiteData::clear_has_wristid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateBlackWhiteData::clear_wristid() {
  if (wristid_ != _default_wristid_) {
    wristid_->assign(*_default_wristid_);
  }
  clear_has_wristid();
}
inline const ::std::string& GateBlackWhiteData::wristid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateBlackWhiteData.wristid)
  return *wristid_;
}
inline void GateBlackWhiteData::set_wristid(const ::std::string& value) {
  set_has_wristid();
  if (wristid_ == _default_wristid_) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateBlackWhiteData.wristid)
}
inline void GateBlackWhiteData::set_wristid(const char* value) {
  set_has_wristid();
  if (wristid_ == _default_wristid_) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateBlackWhiteData.wristid)
}
inline void GateBlackWhiteData::set_wristid(const char* value, size_t size) {
  set_has_wristid();
  if (wristid_ == _default_wristid_) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateBlackWhiteData.wristid)
}
inline ::std::string* GateBlackWhiteData::mutable_wristid() {
  set_has_wristid();
  if (wristid_ == _default_wristid_) {
    wristid_ = new ::std::string(*_default_wristid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateBlackWhiteData.wristid)
  return wristid_;
}
inline ::std::string* GateBlackWhiteData::release_wristid() {
  clear_has_wristid();
  if (wristid_ == _default_wristid_) {
    return NULL;
  } else {
    ::std::string* temp = wristid_;
    wristid_ = const_cast< ::std::string*>(_default_wristid_);
    return temp;
  }
}
inline void GateBlackWhiteData::set_allocated_wristid(::std::string* wristid) {
  if (wristid_ != _default_wristid_) {
    delete wristid_;
  }
  if (wristid) {
    set_has_wristid();
    wristid_ = wristid;
  } else {
    clear_has_wristid();
    wristid_ = const_cast< ::std::string*>(_default_wristid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateBlackWhiteData.wristid)
}

// optional int32 idtype = 3 [default = -1];
inline bool GateBlackWhiteData::has_idtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateBlackWhiteData::set_has_idtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateBlackWhiteData::clear_has_idtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateBlackWhiteData::clear_idtype() {
  idtype_ = -1;
  clear_has_idtype();
}
inline ::google::protobuf::int32 GateBlackWhiteData::idtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateBlackWhiteData.idtype)
  return idtype_;
}
inline void GateBlackWhiteData::set_idtype(::google::protobuf::int32 value) {
  set_has_idtype();
  idtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateBlackWhiteData.idtype)
}

// optional bytes picture = 4 [default = "default"];
inline bool GateBlackWhiteData::has_picture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateBlackWhiteData::set_has_picture() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateBlackWhiteData::clear_has_picture() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateBlackWhiteData::clear_picture() {
  if (picture_ != _default_picture_) {
    picture_->assign(*_default_picture_);
  }
  clear_has_picture();
}
inline const ::std::string& GateBlackWhiteData::picture() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateBlackWhiteData.picture)
  return *picture_;
}
inline void GateBlackWhiteData::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.GateBlackWhiteData.picture)
}
inline void GateBlackWhiteData::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.GateBlackWhiteData.picture)
}
inline void GateBlackWhiteData::set_picture(const void* value, size_t size) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.GateBlackWhiteData.picture)
}
inline ::std::string* GateBlackWhiteData::mutable_picture() {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string(*_default_picture_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateBlackWhiteData.picture)
  return picture_;
}
inline ::std::string* GateBlackWhiteData::release_picture() {
  clear_has_picture();
  if (picture_ == _default_picture_) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(_default_picture_);
    return temp;
  }
}
inline void GateBlackWhiteData::set_allocated_picture(::std::string* picture) {
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (picture) {
    set_has_picture();
    picture_ = picture;
  } else {
    clear_has_picture();
    picture_ = const_cast< ::std::string*>(_default_picture_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.GateBlackWhiteData.picture)
}

// -------------------------------------------------------------------

// GateBlackWhiteDataList

// repeated .com.arges.file.proto.GateBlackWhiteData data = 1;
inline int GateBlackWhiteDataList::data_size() const {
  return data_.size();
}
inline void GateBlackWhiteDataList::clear_data() {
  data_.Clear();
}
inline const ::com::arges::file::proto::GateBlackWhiteData& GateBlackWhiteDataList::data(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.GateBlackWhiteDataList.data)
  return data_.Get(index);
}
inline ::com::arges::file::proto::GateBlackWhiteData* GateBlackWhiteDataList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.GateBlackWhiteDataList.data)
  return data_.Mutable(index);
}
inline ::com::arges::file::proto::GateBlackWhiteData* GateBlackWhiteDataList::add_data() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.GateBlackWhiteDataList.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateBlackWhiteData >&
GateBlackWhiteDataList::data() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.GateBlackWhiteDataList.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::GateBlackWhiteData >*
GateBlackWhiteDataList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.GateBlackWhiteDataList.data)
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GateBlackWhiteDataBean_2eproto__INCLUDED
