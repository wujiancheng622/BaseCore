// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VerifyInfoReportBean.proto

#ifndef PROTOBUF_VerifyInfoReportBean_2eproto__INCLUDED
#define PROTOBUF_VerifyInfoReportBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VerifyInfoReportBean_2eproto();
void protobuf_AssignDesc_VerifyInfoReportBean_2eproto();
void protobuf_ShutdownFile_VerifyInfoReportBean_2eproto();

class VerifyInfoReport;

// ===================================================================

class VerifyInfoReport : public ::google::protobuf::Message {
 public:
  VerifyInfoReport();
  virtual ~VerifyInfoReport();

  VerifyInfoReport(const VerifyInfoReport& from);

  inline VerifyInfoReport& operator=(const VerifyInfoReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyInfoReport& default_instance();

  void Swap(VerifyInfoReport* other);

  // implements Message ----------------------------------------------

  VerifyInfoReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyInfoReport& from);
  void MergeFrom(const VerifyInfoReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceid = 1 [default = "default"];
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string deviceName = 2 [default = "default"];
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  inline void set_allocated_devicename(::std::string* devicename);

  // optional bytes picture = 3 [default = "default"];
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 3;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const void* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  inline void set_allocated_picture(::std::string* picture);

  // optional string wristid = 4 [default = ""];
  inline bool has_wristid() const;
  inline void clear_wristid();
  static const int kWristidFieldNumber = 4;
  inline const ::std::string& wristid() const;
  inline void set_wristid(const ::std::string& value);
  inline void set_wristid(const char* value);
  inline void set_wristid(const char* value, size_t size);
  inline ::std::string* mutable_wristid();
  inline ::std::string* release_wristid();
  inline void set_allocated_wristid(::std::string* wristid);

  // optional string identificationid = 5 [default = ""];
  inline bool has_identificationid() const;
  inline void clear_identificationid();
  static const int kIdentificationidFieldNumber = 5;
  inline const ::std::string& identificationid() const;
  inline void set_identificationid(const ::std::string& value);
  inline void set_identificationid(const char* value);
  inline void set_identificationid(const char* value, size_t size);
  inline ::std::string* mutable_identificationid();
  inline ::std::string* release_identificationid();
  inline void set_allocated_identificationid(::std::string* identificationid);

  // optional int32 idtype = 6 [default = -1];
  inline bool has_idtype() const;
  inline void clear_idtype();
  static const int kIdtypeFieldNumber = 6;
  inline ::google::protobuf::int32 idtype() const;
  inline void set_idtype(::google::protobuf::int32 value);

  // optional int32 result = 7 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 verifymode = 8 [default = -1];
  inline bool has_verifymode() const;
  inline void clear_verifymode();
  static const int kVerifymodeFieldNumber = 8;
  inline ::google::protobuf::int32 verifymode() const;
  inline void set_verifymode(::google::protobuf::int32 value);

  // optional float compareResult = 9 [default = 0];
  inline bool has_compareresult() const;
  inline void clear_compareresult();
  static const int kCompareResultFieldNumber = 9;
  inline float compareresult() const;
  inline void set_compareresult(float value);

  // optional string filepath = 10 [default = "default"];
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilepathFieldNumber = 10;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // optional string picturename = 11 [default = "default"];
  inline bool has_picturename() const;
  inline void clear_picturename();
  static const int kPicturenameFieldNumber = 11;
  inline const ::std::string& picturename() const;
  inline void set_picturename(const ::std::string& value);
  inline void set_picturename(const char* value);
  inline void set_picturename(const char* value, size_t size);
  inline ::std::string* mutable_picturename();
  inline ::std::string* release_picturename();
  inline void set_allocated_picturename(::std::string* picturename);

  // optional uint64 time = 12 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.VerifyInfoReport)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_devicename();
  inline void clear_has_devicename();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_wristid();
  inline void clear_has_wristid();
  inline void set_has_identificationid();
  inline void clear_has_identificationid();
  inline void set_has_idtype();
  inline void clear_has_idtype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_verifymode();
  inline void clear_has_verifymode();
  inline void set_has_compareresult();
  inline void clear_has_compareresult();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_picturename();
  inline void clear_has_picturename();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_deviceid_;
  ::std::string* deviceid_;
  static ::std::string* _default_devicename_;
  ::std::string* devicename_;
  static ::std::string* _default_picture_;
  ::std::string* picture_;
  ::std::string* wristid_;
  ::std::string* identificationid_;
  ::google::protobuf::int32 idtype_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 verifymode_;
  float compareresult_;
  static ::std::string* _default_filepath_;
  ::std::string* filepath_;
  static ::std::string* _default_picturename_;
  ::std::string* picturename_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_VerifyInfoReportBean_2eproto();
  friend void protobuf_AssignDesc_VerifyInfoReportBean_2eproto();
  friend void protobuf_ShutdownFile_VerifyInfoReportBean_2eproto();

  void InitAsDefaultInstance();
  static VerifyInfoReport* default_instance_;
};
// ===================================================================


// ===================================================================

// VerifyInfoReport

// optional string deviceid = 1 [default = "default"];
inline bool VerifyInfoReport::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyInfoReport::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyInfoReport::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyInfoReport::clear_deviceid() {
  if (deviceid_ != _default_deviceid_) {
    deviceid_->assign(*_default_deviceid_);
  }
  clear_has_deviceid();
}
inline const ::std::string& VerifyInfoReport::deviceid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.deviceid)
  return *deviceid_;
}
inline void VerifyInfoReport::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.deviceid)
}
inline void VerifyInfoReport::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.deviceid)
}
inline void VerifyInfoReport::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.deviceid)
}
inline ::std::string* VerifyInfoReport::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string(*_default_deviceid_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.deviceid)
  return deviceid_;
}
inline ::std::string* VerifyInfoReport::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.deviceid)
}

// optional string deviceName = 2 [default = "default"];
inline bool VerifyInfoReport::has_devicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyInfoReport::set_has_devicename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyInfoReport::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyInfoReport::clear_devicename() {
  if (devicename_ != _default_devicename_) {
    devicename_->assign(*_default_devicename_);
  }
  clear_has_devicename();
}
inline const ::std::string& VerifyInfoReport::devicename() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.deviceName)
  return *devicename_;
}
inline void VerifyInfoReport::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == _default_devicename_) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.deviceName)
}
inline void VerifyInfoReport::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == _default_devicename_) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.deviceName)
}
inline void VerifyInfoReport::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  if (devicename_ == _default_devicename_) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.deviceName)
}
inline ::std::string* VerifyInfoReport::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == _default_devicename_) {
    devicename_ = new ::std::string(*_default_devicename_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.deviceName)
  return devicename_;
}
inline ::std::string* VerifyInfoReport::release_devicename() {
  clear_has_devicename();
  if (devicename_ == _default_devicename_) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(_default_devicename_);
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_devicename(::std::string* devicename) {
  if (devicename_ != _default_devicename_) {
    delete devicename_;
  }
  if (devicename) {
    set_has_devicename();
    devicename_ = devicename;
  } else {
    clear_has_devicename();
    devicename_ = const_cast< ::std::string*>(_default_devicename_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.deviceName)
}

// optional bytes picture = 3 [default = "default"];
inline bool VerifyInfoReport::has_picture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyInfoReport::set_has_picture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyInfoReport::clear_has_picture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyInfoReport::clear_picture() {
  if (picture_ != _default_picture_) {
    picture_->assign(*_default_picture_);
  }
  clear_has_picture();
}
inline const ::std::string& VerifyInfoReport::picture() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.picture)
  return *picture_;
}
inline void VerifyInfoReport::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.picture)
}
inline void VerifyInfoReport::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.picture)
}
inline void VerifyInfoReport::set_picture(const void* value, size_t size) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.picture)
}
inline ::std::string* VerifyInfoReport::mutable_picture() {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string(*_default_picture_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.picture)
  return picture_;
}
inline ::std::string* VerifyInfoReport::release_picture() {
  clear_has_picture();
  if (picture_ == _default_picture_) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(_default_picture_);
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_picture(::std::string* picture) {
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (picture) {
    set_has_picture();
    picture_ = picture;
  } else {
    clear_has_picture();
    picture_ = const_cast< ::std::string*>(_default_picture_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.picture)
}

// optional string wristid = 4 [default = ""];
inline bool VerifyInfoReport::has_wristid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyInfoReport::set_has_wristid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyInfoReport::clear_has_wristid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyInfoReport::clear_wristid() {
  if (wristid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristid_->clear();
  }
  clear_has_wristid();
}
inline const ::std::string& VerifyInfoReport::wristid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.wristid)
  return *wristid_;
}
inline void VerifyInfoReport::set_wristid(const ::std::string& value) {
  set_has_wristid();
  if (wristid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.wristid)
}
inline void VerifyInfoReport::set_wristid(const char* value) {
  set_has_wristid();
  if (wristid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.wristid)
}
inline void VerifyInfoReport::set_wristid(const char* value, size_t size) {
  set_has_wristid();
  if (wristid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristid_ = new ::std::string;
  }
  wristid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.wristid)
}
inline ::std::string* VerifyInfoReport::mutable_wristid() {
  set_has_wristid();
  if (wristid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wristid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.wristid)
  return wristid_;
}
inline ::std::string* VerifyInfoReport::release_wristid() {
  clear_has_wristid();
  if (wristid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wristid_;
    wristid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_wristid(::std::string* wristid) {
  if (wristid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristid_;
  }
  if (wristid) {
    set_has_wristid();
    wristid_ = wristid;
  } else {
    clear_has_wristid();
    wristid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.wristid)
}

// optional string identificationid = 5 [default = ""];
inline bool VerifyInfoReport::has_identificationid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyInfoReport::set_has_identificationid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyInfoReport::clear_has_identificationid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyInfoReport::clear_identificationid() {
  if (identificationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identificationid_->clear();
  }
  clear_has_identificationid();
}
inline const ::std::string& VerifyInfoReport::identificationid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.identificationid)
  return *identificationid_;
}
inline void VerifyInfoReport::set_identificationid(const ::std::string& value) {
  set_has_identificationid();
  if (identificationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identificationid_ = new ::std::string;
  }
  identificationid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.identificationid)
}
inline void VerifyInfoReport::set_identificationid(const char* value) {
  set_has_identificationid();
  if (identificationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identificationid_ = new ::std::string;
  }
  identificationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.identificationid)
}
inline void VerifyInfoReport::set_identificationid(const char* value, size_t size) {
  set_has_identificationid();
  if (identificationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identificationid_ = new ::std::string;
  }
  identificationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.identificationid)
}
inline ::std::string* VerifyInfoReport::mutable_identificationid() {
  set_has_identificationid();
  if (identificationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identificationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.identificationid)
  return identificationid_;
}
inline ::std::string* VerifyInfoReport::release_identificationid() {
  clear_has_identificationid();
  if (identificationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identificationid_;
    identificationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_identificationid(::std::string* identificationid) {
  if (identificationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identificationid_;
  }
  if (identificationid) {
    set_has_identificationid();
    identificationid_ = identificationid;
  } else {
    clear_has_identificationid();
    identificationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.identificationid)
}

// optional int32 idtype = 6 [default = -1];
inline bool VerifyInfoReport::has_idtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VerifyInfoReport::set_has_idtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VerifyInfoReport::clear_has_idtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VerifyInfoReport::clear_idtype() {
  idtype_ = -1;
  clear_has_idtype();
}
inline ::google::protobuf::int32 VerifyInfoReport::idtype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.idtype)
  return idtype_;
}
inline void VerifyInfoReport::set_idtype(::google::protobuf::int32 value) {
  set_has_idtype();
  idtype_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.idtype)
}

// optional int32 result = 7 [default = -1];
inline bool VerifyInfoReport::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VerifyInfoReport::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VerifyInfoReport::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VerifyInfoReport::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 VerifyInfoReport::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.result)
  return result_;
}
inline void VerifyInfoReport::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.result)
}

// optional int32 verifymode = 8 [default = -1];
inline bool VerifyInfoReport::has_verifymode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VerifyInfoReport::set_has_verifymode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VerifyInfoReport::clear_has_verifymode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VerifyInfoReport::clear_verifymode() {
  verifymode_ = -1;
  clear_has_verifymode();
}
inline ::google::protobuf::int32 VerifyInfoReport::verifymode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.verifymode)
  return verifymode_;
}
inline void VerifyInfoReport::set_verifymode(::google::protobuf::int32 value) {
  set_has_verifymode();
  verifymode_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.verifymode)
}

// optional float compareResult = 9 [default = 0];
inline bool VerifyInfoReport::has_compareresult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VerifyInfoReport::set_has_compareresult() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VerifyInfoReport::clear_has_compareresult() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VerifyInfoReport::clear_compareresult() {
  compareresult_ = 0;
  clear_has_compareresult();
}
inline float VerifyInfoReport::compareresult() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.compareResult)
  return compareresult_;
}
inline void VerifyInfoReport::set_compareresult(float value) {
  set_has_compareresult();
  compareresult_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.compareResult)
}

// optional string filepath = 10 [default = "default"];
inline bool VerifyInfoReport::has_filepath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VerifyInfoReport::set_has_filepath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VerifyInfoReport::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VerifyInfoReport::clear_filepath() {
  if (filepath_ != _default_filepath_) {
    filepath_->assign(*_default_filepath_);
  }
  clear_has_filepath();
}
inline const ::std::string& VerifyInfoReport::filepath() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.filepath)
  return *filepath_;
}
inline void VerifyInfoReport::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == _default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.filepath)
}
inline void VerifyInfoReport::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == _default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.filepath)
}
inline void VerifyInfoReport::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == _default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.filepath)
}
inline ::std::string* VerifyInfoReport::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == _default_filepath_) {
    filepath_ = new ::std::string(*_default_filepath_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.filepath)
  return filepath_;
}
inline ::std::string* VerifyInfoReport::release_filepath() {
  clear_has_filepath();
  if (filepath_ == _default_filepath_) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(_default_filepath_);
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != _default_filepath_) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(_default_filepath_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.filepath)
}

// optional string picturename = 11 [default = "default"];
inline bool VerifyInfoReport::has_picturename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VerifyInfoReport::set_has_picturename() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VerifyInfoReport::clear_has_picturename() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VerifyInfoReport::clear_picturename() {
  if (picturename_ != _default_picturename_) {
    picturename_->assign(*_default_picturename_);
  }
  clear_has_picturename();
}
inline const ::std::string& VerifyInfoReport::picturename() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.picturename)
  return *picturename_;
}
inline void VerifyInfoReport::set_picturename(const ::std::string& value) {
  set_has_picturename();
  if (picturename_ == _default_picturename_) {
    picturename_ = new ::std::string;
  }
  picturename_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.picturename)
}
inline void VerifyInfoReport::set_picturename(const char* value) {
  set_has_picturename();
  if (picturename_ == _default_picturename_) {
    picturename_ = new ::std::string;
  }
  picturename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.VerifyInfoReport.picturename)
}
inline void VerifyInfoReport::set_picturename(const char* value, size_t size) {
  set_has_picturename();
  if (picturename_ == _default_picturename_) {
    picturename_ = new ::std::string;
  }
  picturename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.VerifyInfoReport.picturename)
}
inline ::std::string* VerifyInfoReport::mutable_picturename() {
  set_has_picturename();
  if (picturename_ == _default_picturename_) {
    picturename_ = new ::std::string(*_default_picturename_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.VerifyInfoReport.picturename)
  return picturename_;
}
inline ::std::string* VerifyInfoReport::release_picturename() {
  clear_has_picturename();
  if (picturename_ == _default_picturename_) {
    return NULL;
  } else {
    ::std::string* temp = picturename_;
    picturename_ = const_cast< ::std::string*>(_default_picturename_);
    return temp;
  }
}
inline void VerifyInfoReport::set_allocated_picturename(::std::string* picturename) {
  if (picturename_ != _default_picturename_) {
    delete picturename_;
  }
  if (picturename) {
    set_has_picturename();
    picturename_ = picturename;
  } else {
    clear_has_picturename();
    picturename_ = const_cast< ::std::string*>(_default_picturename_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.VerifyInfoReport.picturename)
}

// optional uint64 time = 12 [default = 0];
inline bool VerifyInfoReport::has_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VerifyInfoReport::set_has_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VerifyInfoReport::clear_has_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VerifyInfoReport::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 VerifyInfoReport::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.VerifyInfoReport.time)
  return time_;
}
inline void VerifyInfoReport::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.VerifyInfoReport.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VerifyInfoReportBean_2eproto__INCLUDED
