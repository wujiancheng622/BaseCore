// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VerifyInfoReportBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VerifyInfoReportBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* VerifyInfoReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyInfoReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VerifyInfoReportBean_2eproto() {
  protobuf_AddDesc_VerifyInfoReportBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VerifyInfoReportBean.proto");
  GOOGLE_CHECK(file != NULL);
  VerifyInfoReport_descriptor_ = file->message_type(0);
  static const int VerifyInfoReport_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, wristid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, identificationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, idtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, verifymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, compareresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, picturename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, time_),
  };
  VerifyInfoReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyInfoReport_descriptor_,
      VerifyInfoReport::default_instance_,
      VerifyInfoReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyInfoReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyInfoReport));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VerifyInfoReportBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyInfoReport_descriptor_, &VerifyInfoReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VerifyInfoReportBean_2eproto() {
  delete VerifyInfoReport::default_instance_;
  delete VerifyInfoReport_reflection_;
  delete VerifyInfoReport::_default_deviceid_;
  delete VerifyInfoReport::_default_devicename_;
  delete VerifyInfoReport::_default_picture_;
  delete VerifyInfoReport::_default_filepath_;
  delete VerifyInfoReport::_default_picturename_;
}

void protobuf_AddDesc_VerifyInfoReportBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032VerifyInfoReportBean.proto\022\024com.arges."
    "file.proto\"\267\002\n\020VerifyInfoReport\022\031\n\010devic"
    "eid\030\001 \001(\t:\007default\022\033\n\ndeviceName\030\002 \001(\t:\007"
    "default\022\030\n\007picture\030\003 \001(\014:\007default\022\021\n\007wri"
    "stid\030\004 \001(\t:\000\022\032\n\020identificationid\030\005 \001(\t:\000"
    "\022\022\n\006idtype\030\006 \001(\005:\002-1\022\022\n\006result\030\007 \001(\005:\002-1"
    "\022\026\n\nverifymode\030\010 \001(\005:\002-1\022\030\n\rcompareResul"
    "t\030\t \001(\002:\0010\022\031\n\010filepath\030\n \001(\t:\007default\022\034\n"
    "\013picturename\030\013 \001(\t:\007default\022\017\n\004time\030\014 \001("
    "\004:\0010", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VerifyInfoReportBean.proto", &protobuf_RegisterTypes);
  VerifyInfoReport::_default_deviceid_ =
      new ::std::string("default", 7);
  VerifyInfoReport::_default_devicename_ =
      new ::std::string("default", 7);
  VerifyInfoReport::_default_picture_ =
      new ::std::string("default", 7);
  VerifyInfoReport::_default_filepath_ =
      new ::std::string("default", 7);
  VerifyInfoReport::_default_picturename_ =
      new ::std::string("default", 7);
  VerifyInfoReport::default_instance_ = new VerifyInfoReport();
  VerifyInfoReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VerifyInfoReportBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VerifyInfoReportBean_2eproto {
  StaticDescriptorInitializer_VerifyInfoReportBean_2eproto() {
    protobuf_AddDesc_VerifyInfoReportBean_2eproto();
  }
} static_descriptor_initializer_VerifyInfoReportBean_2eproto_;

// ===================================================================

::std::string* VerifyInfoReport::_default_deviceid_ = NULL;
::std::string* VerifyInfoReport::_default_devicename_ = NULL;
::std::string* VerifyInfoReport::_default_picture_ = NULL;
::std::string* VerifyInfoReport::_default_filepath_ = NULL;
::std::string* VerifyInfoReport::_default_picturename_ = NULL;
#ifndef _MSC_VER
const int VerifyInfoReport::kDeviceidFieldNumber;
const int VerifyInfoReport::kDeviceNameFieldNumber;
const int VerifyInfoReport::kPictureFieldNumber;
const int VerifyInfoReport::kWristidFieldNumber;
const int VerifyInfoReport::kIdentificationidFieldNumber;
const int VerifyInfoReport::kIdtypeFieldNumber;
const int VerifyInfoReport::kResultFieldNumber;
const int VerifyInfoReport::kVerifymodeFieldNumber;
const int VerifyInfoReport::kCompareResultFieldNumber;
const int VerifyInfoReport::kFilepathFieldNumber;
const int VerifyInfoReport::kPicturenameFieldNumber;
const int VerifyInfoReport::kTimeFieldNumber;
#endif  // !_MSC_VER

VerifyInfoReport::VerifyInfoReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.VerifyInfoReport)
}

void VerifyInfoReport::InitAsDefaultInstance() {
}

VerifyInfoReport::VerifyInfoReport(const VerifyInfoReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.VerifyInfoReport)
}

void VerifyInfoReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  devicename_ = const_cast< ::std::string*>(_default_devicename_);
  picture_ = const_cast< ::std::string*>(_default_picture_);
  wristid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identificationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idtype_ = -1;
  result_ = -1;
  verifymode_ = -1;
  compareresult_ = 0;
  filepath_ = const_cast< ::std::string*>(_default_filepath_);
  picturename_ = const_cast< ::std::string*>(_default_picturename_);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyInfoReport::~VerifyInfoReport() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.VerifyInfoReport)
  SharedDtor();
}

void VerifyInfoReport::SharedDtor() {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (devicename_ != _default_devicename_) {
    delete devicename_;
  }
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (wristid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wristid_;
  }
  if (identificationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identificationid_;
  }
  if (filepath_ != _default_filepath_) {
    delete filepath_;
  }
  if (picturename_ != _default_picturename_) {
    delete picturename_;
  }
  if (this != default_instance_) {
  }
}

void VerifyInfoReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyInfoReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyInfoReport_descriptor_;
}

const VerifyInfoReport& VerifyInfoReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VerifyInfoReportBean_2eproto();
  return *default_instance_;
}

VerifyInfoReport* VerifyInfoReport::default_instance_ = NULL;

VerifyInfoReport* VerifyInfoReport::New() const {
  return new VerifyInfoReport;
}

void VerifyInfoReport::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_deviceid()) {
      if (deviceid_ != _default_deviceid_) {
        deviceid_->assign(*_default_deviceid_);
      }
    }
    if (has_devicename()) {
      if (devicename_ != _default_devicename_) {
        devicename_->assign(*_default_devicename_);
      }
    }
    if (has_picture()) {
      if (picture_ != _default_picture_) {
        picture_->assign(*_default_picture_);
      }
    }
    if (has_wristid()) {
      if (wristid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wristid_->clear();
      }
    }
    if (has_identificationid()) {
      if (identificationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identificationid_->clear();
      }
    }
    idtype_ = -1;
    result_ = -1;
    verifymode_ = -1;
  }
  if (_has_bits_[8 / 32] & 3840) {
    compareresult_ = 0;
    if (has_filepath()) {
      if (filepath_ != _default_filepath_) {
        filepath_->assign(*_default_filepath_);
      }
    }
    if (has_picturename()) {
      if (picturename_ != _default_picturename_) {
        picturename_->assign(*_default_picturename_);
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.VerifyInfoReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceid = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceName;
        break;
      }

      // optional string deviceName = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picture;
        break;
      }

      // optional bytes picture = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wristid;
        break;
      }

      // optional string wristid = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_wristid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristid().data(), this->wristid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_identificationid;
        break;
      }

      // optional string identificationid = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_identificationid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identificationid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identificationid().data(), this->identificationid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "identificationid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_idtype;
        break;
      }

      // optional int32 idtype = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_idtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idtype_)));
          set_has_idtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional int32 result = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_verifymode;
        break;
      }

      // optional int32 verifymode = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_verifymode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifymode_)));
          set_has_verifymode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_compareResult;
        break;
      }

      // optional float compareResult = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_compareResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &compareresult_)));
          set_has_compareresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_filepath;
        break;
      }

      // optional string filepath = 10 [default = "default"];
      case 10: {
        if (tag == 82) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_picturename;
        break;
      }

      // optional string picturename = 11 [default = "default"];
      case 11: {
        if (tag == 90) {
         parse_picturename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picturename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picturename().data(), this->picturename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picturename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time;
        break;
      }

      // optional uint64 time = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.VerifyInfoReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.VerifyInfoReport)
  return false;
#undef DO_
}

void VerifyInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.VerifyInfoReport)
  // optional string deviceid = 1 [default = "default"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional string deviceName = 2 [default = "default"];
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  // optional bytes picture = 3 [default = "default"];
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->picture(), output);
  }

  // optional string wristid = 4 [default = ""];
  if (has_wristid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristid().data(), this->wristid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wristid(), output);
  }

  // optional string identificationid = 5 [default = ""];
  if (has_identificationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identificationid().data(), this->identificationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identificationid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->identificationid(), output);
  }

  // optional int32 idtype = 6 [default = -1];
  if (has_idtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->idtype(), output);
  }

  // optional int32 result = 7 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->result(), output);
  }

  // optional int32 verifymode = 8 [default = -1];
  if (has_verifymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->verifymode(), output);
  }

  // optional float compareResult = 9 [default = 0];
  if (has_compareresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->compareresult(), output);
  }

  // optional string filepath = 10 [default = "default"];
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filepath(), output);
  }

  // optional string picturename = 11 [default = "default"];
  if (has_picturename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picturename().data(), this->picturename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picturename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->picturename(), output);
  }

  // optional uint64 time = 12 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.VerifyInfoReport)
}

::google::protobuf::uint8* VerifyInfoReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.VerifyInfoReport)
  // optional string deviceid = 1 [default = "default"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // optional string deviceName = 2 [default = "default"];
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }

  // optional bytes picture = 3 [default = "default"];
  if (has_picture()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->picture(), target);
  }

  // optional string wristid = 4 [default = ""];
  if (has_wristid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristid().data(), this->wristid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wristid(), target);
  }

  // optional string identificationid = 5 [default = ""];
  if (has_identificationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identificationid().data(), this->identificationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identificationid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->identificationid(), target);
  }

  // optional int32 idtype = 6 [default = -1];
  if (has_idtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->idtype(), target);
  }

  // optional int32 result = 7 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->result(), target);
  }

  // optional int32 verifymode = 8 [default = -1];
  if (has_verifymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->verifymode(), target);
  }

  // optional float compareResult = 9 [default = 0];
  if (has_compareresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->compareresult(), target);
  }

  // optional string filepath = 10 [default = "default"];
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filepath(), target);
  }

  // optional string picturename = 11 [default = "default"];
  if (has_picturename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picturename().data(), this->picturename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picturename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->picturename(), target);
  }

  // optional uint64 time = 12 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.VerifyInfoReport)
  return target;
}

int VerifyInfoReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceid = 1 [default = "default"];
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string deviceName = 2 [default = "default"];
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional bytes picture = 3 [default = "default"];
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picture());
    }

    // optional string wristid = 4 [default = ""];
    if (has_wristid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristid());
    }

    // optional string identificationid = 5 [default = ""];
    if (has_identificationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identificationid());
    }

    // optional int32 idtype = 6 [default = -1];
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idtype());
    }

    // optional int32 result = 7 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 verifymode = 8 [default = -1];
    if (has_verifymode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifymode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float compareResult = 9 [default = 0];
    if (has_compareresult()) {
      total_size += 1 + 4;
    }

    // optional string filepath = 10 [default = "default"];
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // optional string picturename = 11 [default = "default"];
    if (has_picturename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picturename());
    }

    // optional uint64 time = 12 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyInfoReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyInfoReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyInfoReport::MergeFrom(const VerifyInfoReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_wristid()) {
      set_wristid(from.wristid());
    }
    if (from.has_identificationid()) {
      set_identificationid(from.identificationid());
    }
    if (from.has_idtype()) {
      set_idtype(from.idtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_verifymode()) {
      set_verifymode(from.verifymode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compareresult()) {
      set_compareresult(from.compareresult());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_picturename()) {
      set_picturename(from.picturename());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyInfoReport::CopyFrom(const VerifyInfoReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyInfoReport::IsInitialized() const {

  return true;
}

void VerifyInfoReport::Swap(VerifyInfoReport* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicename_, other->devicename_);
    std::swap(picture_, other->picture_);
    std::swap(wristid_, other->wristid_);
    std::swap(identificationid_, other->identificationid_);
    std::swap(idtype_, other->idtype_);
    std::swap(result_, other->result_);
    std::swap(verifymode_, other->verifymode_);
    std::swap(compareresult_, other->compareresult_);
    std::swap(filepath_, other->filepath_);
    std::swap(picturename_, other->picturename_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyInfoReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyInfoReport_descriptor_;
  metadata.reflection = VerifyInfoReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
