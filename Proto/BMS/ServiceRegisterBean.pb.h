// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceRegisterBean.proto

#ifndef PROTOBUF_ServiceRegisterBean_2eproto__INCLUDED
#define PROTOBUF_ServiceRegisterBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

class RegisterModelInfo;
class ServiceInfoForRegister;
class ReqServiceRegister;
class RspServiceRegister;
class ReqServiceLogout;
class RspServiceLogout;
class ReqServiceInfoForQuery;
class RspServiceInfoForQuery;

// ===================================================================

class RegisterModelInfo : public ::google::protobuf::Message {
 public:
  RegisterModelInfo();
  virtual ~RegisterModelInfo();

  RegisterModelInfo(const RegisterModelInfo& from);

  inline RegisterModelInfo& operator=(const RegisterModelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterModelInfo& default_instance();

  void Swap(RegisterModelInfo* other);

  // implements Message ----------------------------------------------

  RegisterModelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterModelInfo& from);
  void MergeFrom(const RegisterModelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1 [default = "default"];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RegisterModelInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_ip_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static RegisterModelInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServiceInfoForRegister : public ::google::protobuf::Message {
 public:
  ServiceInfoForRegister();
  virtual ~ServiceInfoForRegister();

  ServiceInfoForRegister(const ServiceInfoForRegister& from);

  inline ServiceInfoForRegister& operator=(const ServiceInfoForRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfoForRegister& default_instance();

  void Swap(ServiceInfoForRegister* other);

  // implements Message ----------------------------------------------

  ServiceInfoForRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceInfoForRegister& from);
  void MergeFrom(const ServiceInfoForRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string info_node = 1 [default = "default"];
  inline bool has_info_node() const;
  inline void clear_info_node();
  static const int kInfoNodeFieldNumber = 1;
  inline const ::std::string& info_node() const;
  inline void set_info_node(const ::std::string& value);
  inline void set_info_node(const char* value);
  inline void set_info_node(const char* value, size_t size);
  inline ::std::string* mutable_info_node();
  inline ::std::string* release_info_node();
  inline void set_allocated_info_node(::std::string* info_node);

  // optional string info_address = 2 [default = "default"];
  inline bool has_info_address() const;
  inline void clear_info_address();
  static const int kInfoAddressFieldNumber = 2;
  inline const ::std::string& info_address() const;
  inline void set_info_address(const ::std::string& value);
  inline void set_info_address(const char* value);
  inline void set_info_address(const char* value, size_t size);
  inline ::std::string* mutable_info_address();
  inline ::std::string* release_info_address();
  inline void set_allocated_info_address(::std::string* info_address);

  // optional string info_service_id = 3 [default = "default"];
  inline bool has_info_service_id() const;
  inline void clear_info_service_id();
  static const int kInfoServiceIdFieldNumber = 3;
  inline const ::std::string& info_service_id() const;
  inline void set_info_service_id(const ::std::string& value);
  inline void set_info_service_id(const char* value);
  inline void set_info_service_id(const char* value, size_t size);
  inline ::std::string* mutable_info_service_id();
  inline ::std::string* release_info_service_id();
  inline void set_allocated_info_service_id(::std::string* info_service_id);

  // optional string info_service_name = 4 [default = "default"];
  inline bool has_info_service_name() const;
  inline void clear_info_service_name();
  static const int kInfoServiceNameFieldNumber = 4;
  inline const ::std::string& info_service_name() const;
  inline void set_info_service_name(const ::std::string& value);
  inline void set_info_service_name(const char* value);
  inline void set_info_service_name(const char* value, size_t size);
  inline ::std::string* mutable_info_service_name();
  inline ::std::string* release_info_service_name();
  inline void set_allocated_info_service_name(::std::string* info_service_name);

  // optional string info_service_address = 5 [default = "default"];
  inline bool has_info_service_address() const;
  inline void clear_info_service_address();
  static const int kInfoServiceAddressFieldNumber = 5;
  inline const ::std::string& info_service_address() const;
  inline void set_info_service_address(const ::std::string& value);
  inline void set_info_service_address(const char* value);
  inline void set_info_service_address(const char* value, size_t size);
  inline ::std::string* mutable_info_service_address();
  inline ::std::string* release_info_service_address();
  inline void set_allocated_info_service_address(::std::string* info_service_address);

  // optional int32 info_service_port = 6 [default = -1];
  inline bool has_info_service_port() const;
  inline void clear_info_service_port();
  static const int kInfoServicePortFieldNumber = 6;
  inline ::google::protobuf::int32 info_service_port() const;
  inline void set_info_service_port(::google::protobuf::int32 value);

  // optional int32 info_service_pid = 7 [default = -1];
  inline bool has_info_service_pid() const;
  inline void clear_info_service_pid();
  static const int kInfoServicePidFieldNumber = 7;
  inline ::google::protobuf::int32 info_service_pid() const;
  inline void set_info_service_pid(::google::protobuf::int32 value);

  // optional int32 info_service_module = 8 [default = -1];
  inline bool has_info_service_module() const;
  inline void clear_info_service_module();
  static const int kInfoServiceModuleFieldNumber = 8;
  inline ::google::protobuf::int32 info_service_module() const;
  inline void set_info_service_module(::google::protobuf::int32 value);

  // optional string info_mq_consumer_queue_name = 9 [default = "default"];
  inline bool has_info_mq_consumer_queue_name() const;
  inline void clear_info_mq_consumer_queue_name();
  static const int kInfoMqConsumerQueueNameFieldNumber = 9;
  inline const ::std::string& info_mq_consumer_queue_name() const;
  inline void set_info_mq_consumer_queue_name(const ::std::string& value);
  inline void set_info_mq_consumer_queue_name(const char* value);
  inline void set_info_mq_consumer_queue_name(const char* value, size_t size);
  inline ::std::string* mutable_info_mq_consumer_queue_name();
  inline ::std::string* release_info_mq_consumer_queue_name();
  inline void set_allocated_info_mq_consumer_queue_name(::std::string* info_mq_consumer_queue_name);

  // optional string status_node = 10 [default = "default"];
  inline bool has_status_node() const;
  inline void clear_status_node();
  static const int kStatusNodeFieldNumber = 10;
  inline const ::std::string& status_node() const;
  inline void set_status_node(const ::std::string& value);
  inline void set_status_node(const char* value);
  inline void set_status_node(const char* value, size_t size);
  inline ::std::string* mutable_status_node();
  inline ::std::string* release_status_node();
  inline void set_allocated_status_node(::std::string* status_node);

  // optional string status_check_id = 11 [default = "default"];
  inline bool has_status_check_id() const;
  inline void clear_status_check_id();
  static const int kStatusCheckIdFieldNumber = 11;
  inline const ::std::string& status_check_id() const;
  inline void set_status_check_id(const ::std::string& value);
  inline void set_status_check_id(const char* value);
  inline void set_status_check_id(const char* value, size_t size);
  inline ::std::string* mutable_status_check_id();
  inline ::std::string* release_status_check_id();
  inline void set_allocated_status_check_id(::std::string* status_check_id);

  // optional string status_name = 12 [default = "default"];
  inline bool has_status_name() const;
  inline void clear_status_name();
  static const int kStatusNameFieldNumber = 12;
  inline const ::std::string& status_name() const;
  inline void set_status_name(const ::std::string& value);
  inline void set_status_name(const char* value);
  inline void set_status_name(const char* value, size_t size);
  inline ::std::string* mutable_status_name();
  inline ::std::string* release_status_name();
  inline void set_allocated_status_name(::std::string* status_name);

  // optional string status_status = 13 [default = "default"];
  inline bool has_status_status() const;
  inline void clear_status_status();
  static const int kStatusStatusFieldNumber = 13;
  inline const ::std::string& status_status() const;
  inline void set_status_status(const ::std::string& value);
  inline void set_status_status(const char* value);
  inline void set_status_status(const char* value, size_t size);
  inline ::std::string* mutable_status_status();
  inline ::std::string* release_status_status();
  inline void set_allocated_status_status(::std::string* status_status);

  // optional string status_notes = 14 [default = "default"];
  inline bool has_status_notes() const;
  inline void clear_status_notes();
  static const int kStatusNotesFieldNumber = 14;
  inline const ::std::string& status_notes() const;
  inline void set_status_notes(const ::std::string& value);
  inline void set_status_notes(const char* value);
  inline void set_status_notes(const char* value, size_t size);
  inline ::std::string* mutable_status_notes();
  inline ::std::string* release_status_notes();
  inline void set_allocated_status_notes(::std::string* status_notes);

  // optional string status_output = 15 [default = "default"];
  inline bool has_status_output() const;
  inline void clear_status_output();
  static const int kStatusOutputFieldNumber = 15;
  inline const ::std::string& status_output() const;
  inline void set_status_output(const ::std::string& value);
  inline void set_status_output(const char* value);
  inline void set_status_output(const char* value, size_t size);
  inline ::std::string* mutable_status_output();
  inline ::std::string* release_status_output();
  inline void set_allocated_status_output(::std::string* status_output);

  // optional string status_service_id = 16 [default = "default"];
  inline bool has_status_service_id() const;
  inline void clear_status_service_id();
  static const int kStatusServiceIdFieldNumber = 16;
  inline const ::std::string& status_service_id() const;
  inline void set_status_service_id(const ::std::string& value);
  inline void set_status_service_id(const char* value);
  inline void set_status_service_id(const char* value, size_t size);
  inline ::std::string* mutable_status_service_id();
  inline ::std::string* release_status_service_id();
  inline void set_allocated_status_service_id(::std::string* status_service_id);

  // optional string status_service_name = 17 [default = "default"];
  inline bool has_status_service_name() const;
  inline void clear_status_service_name();
  static const int kStatusServiceNameFieldNumber = 17;
  inline const ::std::string& status_service_name() const;
  inline void set_status_service_name(const ::std::string& value);
  inline void set_status_service_name(const char* value);
  inline void set_status_service_name(const char* value, size_t size);
  inline ::std::string* mutable_status_service_name();
  inline ::std::string* release_status_service_name();
  inline void set_allocated_status_service_name(::std::string* status_service_name);

  // repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
  inline int registermodel_size() const;
  inline void clear_registermodel();
  static const int kRegistermodelFieldNumber = 18;
  inline const ::com::arges::file::proto::RegisterModelInfo& registermodel(int index) const;
  inline ::com::arges::file::proto::RegisterModelInfo* mutable_registermodel(int index);
  inline ::com::arges::file::proto::RegisterModelInfo* add_registermodel();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RegisterModelInfo >&
      registermodel() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RegisterModelInfo >*
      mutable_registermodel();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ServiceInfoForRegister)
 private:
  inline void set_has_info_node();
  inline void clear_has_info_node();
  inline void set_has_info_address();
  inline void clear_has_info_address();
  inline void set_has_info_service_id();
  inline void clear_has_info_service_id();
  inline void set_has_info_service_name();
  inline void clear_has_info_service_name();
  inline void set_has_info_service_address();
  inline void clear_has_info_service_address();
  inline void set_has_info_service_port();
  inline void clear_has_info_service_port();
  inline void set_has_info_service_pid();
  inline void clear_has_info_service_pid();
  inline void set_has_info_service_module();
  inline void clear_has_info_service_module();
  inline void set_has_info_mq_consumer_queue_name();
  inline void clear_has_info_mq_consumer_queue_name();
  inline void set_has_status_node();
  inline void clear_has_status_node();
  inline void set_has_status_check_id();
  inline void clear_has_status_check_id();
  inline void set_has_status_name();
  inline void clear_has_status_name();
  inline void set_has_status_status();
  inline void clear_has_status_status();
  inline void set_has_status_notes();
  inline void clear_has_status_notes();
  inline void set_has_status_output();
  inline void clear_has_status_output();
  inline void set_has_status_service_id();
  inline void clear_has_status_service_id();
  inline void set_has_status_service_name();
  inline void clear_has_status_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_info_node_;
  ::std::string* info_node_;
  static ::std::string* _default_info_address_;
  ::std::string* info_address_;
  static ::std::string* _default_info_service_id_;
  ::std::string* info_service_id_;
  static ::std::string* _default_info_service_name_;
  ::std::string* info_service_name_;
  static ::std::string* _default_info_service_address_;
  ::std::string* info_service_address_;
  ::google::protobuf::int32 info_service_port_;
  ::google::protobuf::int32 info_service_pid_;
  static ::std::string* _default_info_mq_consumer_queue_name_;
  ::std::string* info_mq_consumer_queue_name_;
  static ::std::string* _default_status_node_;
  ::std::string* status_node_;
  static ::std::string* _default_status_check_id_;
  ::std::string* status_check_id_;
  static ::std::string* _default_status_name_;
  ::std::string* status_name_;
  static ::std::string* _default_status_status_;
  ::std::string* status_status_;
  static ::std::string* _default_status_notes_;
  ::std::string* status_notes_;
  static ::std::string* _default_status_output_;
  ::std::string* status_output_;
  static ::std::string* _default_status_service_id_;
  ::std::string* status_service_id_;
  static ::std::string* _default_status_service_name_;
  ::std::string* status_service_name_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RegisterModelInfo > registermodel_;
  ::google::protobuf::int32 info_service_module_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static ServiceInfoForRegister* default_instance_;
};
// -------------------------------------------------------------------

class ReqServiceRegister : public ::google::protobuf::Message {
 public:
  ReqServiceRegister();
  virtual ~ReqServiceRegister();

  ReqServiceRegister(const ReqServiceRegister& from);

  inline ReqServiceRegister& operator=(const ReqServiceRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServiceRegister& default_instance();

  void Swap(ReqServiceRegister* other);

  // implements Message ----------------------------------------------

  ReqServiceRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServiceRegister& from);
  void MergeFrom(const ReqServiceRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
  inline bool has_serviceinfo() const;
  inline void clear_serviceinfo();
  static const int kServiceInfoFieldNumber = 1;
  inline const ::com::arges::file::proto::ServiceInfoForRegister& serviceinfo() const;
  inline ::com::arges::file::proto::ServiceInfoForRegister* mutable_serviceinfo();
  inline ::com::arges::file::proto::ServiceInfoForRegister* release_serviceinfo();
  inline void set_allocated_serviceinfo(::com::arges::file::proto::ServiceInfoForRegister* serviceinfo);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqServiceRegister)
 private:
  inline void set_has_serviceinfo();
  inline void clear_has_serviceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::arges::file::proto::ServiceInfoForRegister* serviceinfo_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static ReqServiceRegister* default_instance_;
};
// -------------------------------------------------------------------

class RspServiceRegister : public ::google::protobuf::Message {
 public:
  RspServiceRegister();
  virtual ~RspServiceRegister();

  RspServiceRegister(const RspServiceRegister& from);

  inline RspServiceRegister& operator=(const RspServiceRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspServiceRegister& default_instance();

  void Swap(RspServiceRegister* other);

  // implements Message ----------------------------------------------

  RspServiceRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspServiceRegister& from);
  void MergeFrom(const RspServiceRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string describe = 2 [default = "default"];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 2;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional string id = 3 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspServiceRegister)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_describe_;
  ::std::string* describe_;
  ::std::string* id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static RspServiceRegister* default_instance_;
};
// -------------------------------------------------------------------

class ReqServiceLogout : public ::google::protobuf::Message {
 public:
  ReqServiceLogout();
  virtual ~ReqServiceLogout();

  ReqServiceLogout(const ReqServiceLogout& from);

  inline ReqServiceLogout& operator=(const ReqServiceLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServiceLogout& default_instance();

  void Swap(ReqServiceLogout* other);

  // implements Message ----------------------------------------------

  ReqServiceLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServiceLogout& from);
  void MergeFrom(const ReqServiceLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id(int index) const;
  inline ::std::string* mutable_id(int index);
  inline void set_id(int index, const ::std::string& value);
  inline void set_id(int index, const char* value);
  inline void set_id(int index, const char* value, size_t size);
  inline ::std::string* add_id();
  inline void add_id(const ::std::string& value);
  inline void add_id(const char* value);
  inline void add_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqServiceLogout)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static ReqServiceLogout* default_instance_;
};
// -------------------------------------------------------------------

class RspServiceLogout : public ::google::protobuf::Message {
 public:
  RspServiceLogout();
  virtual ~RspServiceLogout();

  RspServiceLogout(const RspServiceLogout& from);

  inline RspServiceLogout& operator=(const RspServiceLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspServiceLogout& default_instance();

  void Swap(RspServiceLogout* other);

  // implements Message ----------------------------------------------

  RspServiceLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspServiceLogout& from);
  void MergeFrom(const RspServiceLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string describe = 2 [default = "default"];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 2;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspServiceLogout)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_describe();
  inline void clear_has_describe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_describe_;
  ::std::string* describe_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static RspServiceLogout* default_instance_;
};
// -------------------------------------------------------------------

class ReqServiceInfoForQuery : public ::google::protobuf::Message {
 public:
  ReqServiceInfoForQuery();
  virtual ~ReqServiceInfoForQuery();

  ReqServiceInfoForQuery(const ReqServiceInfoForQuery& from);

  inline ReqServiceInfoForQuery& operator=(const ReqServiceInfoForQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServiceInfoForQuery& default_instance();

  void Swap(ReqServiceInfoForQuery* other);

  // implements Message ----------------------------------------------

  ReqServiceInfoForQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServiceInfoForQuery& from);
  void MergeFrom(const ReqServiceInfoForQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string info_node = 1;
  inline int info_node_size() const;
  inline void clear_info_node();
  static const int kInfoNodeFieldNumber = 1;
  inline const ::std::string& info_node(int index) const;
  inline ::std::string* mutable_info_node(int index);
  inline void set_info_node(int index, const ::std::string& value);
  inline void set_info_node(int index, const char* value);
  inline void set_info_node(int index, const char* value, size_t size);
  inline ::std::string* add_info_node();
  inline void add_info_node(const ::std::string& value);
  inline void add_info_node(const char* value);
  inline void add_info_node(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_node();

  // repeated string info_address = 2;
  inline int info_address_size() const;
  inline void clear_info_address();
  static const int kInfoAddressFieldNumber = 2;
  inline const ::std::string& info_address(int index) const;
  inline ::std::string* mutable_info_address(int index);
  inline void set_info_address(int index, const ::std::string& value);
  inline void set_info_address(int index, const char* value);
  inline void set_info_address(int index, const char* value, size_t size);
  inline ::std::string* add_info_address();
  inline void add_info_address(const ::std::string& value);
  inline void add_info_address(const char* value);
  inline void add_info_address(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_address();

  // repeated string info_service_id = 3;
  inline int info_service_id_size() const;
  inline void clear_info_service_id();
  static const int kInfoServiceIdFieldNumber = 3;
  inline const ::std::string& info_service_id(int index) const;
  inline ::std::string* mutable_info_service_id(int index);
  inline void set_info_service_id(int index, const ::std::string& value);
  inline void set_info_service_id(int index, const char* value);
  inline void set_info_service_id(int index, const char* value, size_t size);
  inline ::std::string* add_info_service_id();
  inline void add_info_service_id(const ::std::string& value);
  inline void add_info_service_id(const char* value);
  inline void add_info_service_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_service_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_service_id();

  // repeated string info_service_name = 4;
  inline int info_service_name_size() const;
  inline void clear_info_service_name();
  static const int kInfoServiceNameFieldNumber = 4;
  inline const ::std::string& info_service_name(int index) const;
  inline ::std::string* mutable_info_service_name(int index);
  inline void set_info_service_name(int index, const ::std::string& value);
  inline void set_info_service_name(int index, const char* value);
  inline void set_info_service_name(int index, const char* value, size_t size);
  inline ::std::string* add_info_service_name();
  inline void add_info_service_name(const ::std::string& value);
  inline void add_info_service_name(const char* value);
  inline void add_info_service_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_service_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_service_name();

  // repeated string info_service_address = 5;
  inline int info_service_address_size() const;
  inline void clear_info_service_address();
  static const int kInfoServiceAddressFieldNumber = 5;
  inline const ::std::string& info_service_address(int index) const;
  inline ::std::string* mutable_info_service_address(int index);
  inline void set_info_service_address(int index, const ::std::string& value);
  inline void set_info_service_address(int index, const char* value);
  inline void set_info_service_address(int index, const char* value, size_t size);
  inline ::std::string* add_info_service_address();
  inline void add_info_service_address(const ::std::string& value);
  inline void add_info_service_address(const char* value);
  inline void add_info_service_address(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_service_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_service_address();

  // repeated int32 info_service_port = 6;
  inline int info_service_port_size() const;
  inline void clear_info_service_port();
  static const int kInfoServicePortFieldNumber = 6;
  inline ::google::protobuf::int32 info_service_port(int index) const;
  inline void set_info_service_port(int index, ::google::protobuf::int32 value);
  inline void add_info_service_port(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      info_service_port() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_info_service_port();

  // repeated int32 info_service_pid = 7;
  inline int info_service_pid_size() const;
  inline void clear_info_service_pid();
  static const int kInfoServicePidFieldNumber = 7;
  inline ::google::protobuf::int32 info_service_pid(int index) const;
  inline void set_info_service_pid(int index, ::google::protobuf::int32 value);
  inline void add_info_service_pid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      info_service_pid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_info_service_pid();

  // repeated int32 info_service_module = 8;
  inline int info_service_module_size() const;
  inline void clear_info_service_module();
  static const int kInfoServiceModuleFieldNumber = 8;
  inline ::google::protobuf::int32 info_service_module(int index) const;
  inline void set_info_service_module(int index, ::google::protobuf::int32 value);
  inline void add_info_service_module(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      info_service_module() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_info_service_module();

  // repeated string info_mq_consumer_queue_name = 9;
  inline int info_mq_consumer_queue_name_size() const;
  inline void clear_info_mq_consumer_queue_name();
  static const int kInfoMqConsumerQueueNameFieldNumber = 9;
  inline const ::std::string& info_mq_consumer_queue_name(int index) const;
  inline ::std::string* mutable_info_mq_consumer_queue_name(int index);
  inline void set_info_mq_consumer_queue_name(int index, const ::std::string& value);
  inline void set_info_mq_consumer_queue_name(int index, const char* value);
  inline void set_info_mq_consumer_queue_name(int index, const char* value, size_t size);
  inline ::std::string* add_info_mq_consumer_queue_name();
  inline void add_info_mq_consumer_queue_name(const ::std::string& value);
  inline void add_info_mq_consumer_queue_name(const char* value);
  inline void add_info_mq_consumer_queue_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info_mq_consumer_queue_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info_mq_consumer_queue_name();

  // repeated string status_node = 10;
  inline int status_node_size() const;
  inline void clear_status_node();
  static const int kStatusNodeFieldNumber = 10;
  inline const ::std::string& status_node(int index) const;
  inline ::std::string* mutable_status_node(int index);
  inline void set_status_node(int index, const ::std::string& value);
  inline void set_status_node(int index, const char* value);
  inline void set_status_node(int index, const char* value, size_t size);
  inline ::std::string* add_status_node();
  inline void add_status_node(const ::std::string& value);
  inline void add_status_node(const char* value);
  inline void add_status_node(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_node();

  // repeated string status_check_id = 11;
  inline int status_check_id_size() const;
  inline void clear_status_check_id();
  static const int kStatusCheckIdFieldNumber = 11;
  inline const ::std::string& status_check_id(int index) const;
  inline ::std::string* mutable_status_check_id(int index);
  inline void set_status_check_id(int index, const ::std::string& value);
  inline void set_status_check_id(int index, const char* value);
  inline void set_status_check_id(int index, const char* value, size_t size);
  inline ::std::string* add_status_check_id();
  inline void add_status_check_id(const ::std::string& value);
  inline void add_status_check_id(const char* value);
  inline void add_status_check_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_check_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_check_id();

  // repeated string status_name = 12;
  inline int status_name_size() const;
  inline void clear_status_name();
  static const int kStatusNameFieldNumber = 12;
  inline const ::std::string& status_name(int index) const;
  inline ::std::string* mutable_status_name(int index);
  inline void set_status_name(int index, const ::std::string& value);
  inline void set_status_name(int index, const char* value);
  inline void set_status_name(int index, const char* value, size_t size);
  inline ::std::string* add_status_name();
  inline void add_status_name(const ::std::string& value);
  inline void add_status_name(const char* value);
  inline void add_status_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_name();

  // repeated string status_status = 13;
  inline int status_status_size() const;
  inline void clear_status_status();
  static const int kStatusStatusFieldNumber = 13;
  inline const ::std::string& status_status(int index) const;
  inline ::std::string* mutable_status_status(int index);
  inline void set_status_status(int index, const ::std::string& value);
  inline void set_status_status(int index, const char* value);
  inline void set_status_status(int index, const char* value, size_t size);
  inline ::std::string* add_status_status();
  inline void add_status_status(const ::std::string& value);
  inline void add_status_status(const char* value);
  inline void add_status_status(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_status();

  // repeated string status_notes = 14;
  inline int status_notes_size() const;
  inline void clear_status_notes();
  static const int kStatusNotesFieldNumber = 14;
  inline const ::std::string& status_notes(int index) const;
  inline ::std::string* mutable_status_notes(int index);
  inline void set_status_notes(int index, const ::std::string& value);
  inline void set_status_notes(int index, const char* value);
  inline void set_status_notes(int index, const char* value, size_t size);
  inline ::std::string* add_status_notes();
  inline void add_status_notes(const ::std::string& value);
  inline void add_status_notes(const char* value);
  inline void add_status_notes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_notes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_notes();

  // repeated string status_output = 15;
  inline int status_output_size() const;
  inline void clear_status_output();
  static const int kStatusOutputFieldNumber = 15;
  inline const ::std::string& status_output(int index) const;
  inline ::std::string* mutable_status_output(int index);
  inline void set_status_output(int index, const ::std::string& value);
  inline void set_status_output(int index, const char* value);
  inline void set_status_output(int index, const char* value, size_t size);
  inline ::std::string* add_status_output();
  inline void add_status_output(const ::std::string& value);
  inline void add_status_output(const char* value);
  inline void add_status_output(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_output() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_output();

  // repeated string status_service_id = 16;
  inline int status_service_id_size() const;
  inline void clear_status_service_id();
  static const int kStatusServiceIdFieldNumber = 16;
  inline const ::std::string& status_service_id(int index) const;
  inline ::std::string* mutable_status_service_id(int index);
  inline void set_status_service_id(int index, const ::std::string& value);
  inline void set_status_service_id(int index, const char* value);
  inline void set_status_service_id(int index, const char* value, size_t size);
  inline ::std::string* add_status_service_id();
  inline void add_status_service_id(const ::std::string& value);
  inline void add_status_service_id(const char* value);
  inline void add_status_service_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_service_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_service_id();

  // repeated string status_service_name = 17;
  inline int status_service_name_size() const;
  inline void clear_status_service_name();
  static const int kStatusServiceNameFieldNumber = 17;
  inline const ::std::string& status_service_name(int index) const;
  inline ::std::string* mutable_status_service_name(int index);
  inline void set_status_service_name(int index, const ::std::string& value);
  inline void set_status_service_name(int index, const char* value);
  inline void set_status_service_name(int index, const char* value, size_t size);
  inline ::std::string* add_status_service_name();
  inline void add_status_service_name(const ::std::string& value);
  inline void add_status_service_name(const char* value);
  inline void add_status_service_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& status_service_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_status_service_name();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqServiceInfoForQuery)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_node_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_service_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_service_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_service_address_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > info_service_port_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > info_service_pid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > info_service_module_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_mq_consumer_queue_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_node_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_check_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_notes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_output_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_service_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> status_service_name_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static ReqServiceInfoForQuery* default_instance_;
};
// -------------------------------------------------------------------

class RspServiceInfoForQuery : public ::google::protobuf::Message {
 public:
  RspServiceInfoForQuery();
  virtual ~RspServiceInfoForQuery();

  RspServiceInfoForQuery(const RspServiceInfoForQuery& from);

  inline RspServiceInfoForQuery& operator=(const RspServiceInfoForQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspServiceInfoForQuery& default_instance();

  void Swap(RspServiceInfoForQuery* other);

  // implements Message ----------------------------------------------

  RspServiceInfoForQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspServiceInfoForQuery& from);
  void MergeFrom(const RspServiceInfoForQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
  inline int service_info_size() const;
  inline void clear_service_info();
  static const int kServiceInfoFieldNumber = 1;
  inline const ::com::arges::file::proto::ServiceInfoForRegister& service_info(int index) const;
  inline ::com::arges::file::proto::ServiceInfoForRegister* mutable_service_info(int index);
  inline ::com::arges::file::proto::ServiceInfoForRegister* add_service_info();
  inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ServiceInfoForRegister >&
      service_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ServiceInfoForRegister >*
      mutable_service_info();

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspServiceInfoForQuery)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ServiceInfoForRegister > service_info_;
  friend void  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_AssignDesc_ServiceRegisterBean_2eproto();
  friend void protobuf_ShutdownFile_ServiceRegisterBean_2eproto();

  void InitAsDefaultInstance();
  static RspServiceInfoForQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// RegisterModelInfo

// optional string ip = 1 [default = "default"];
inline bool RegisterModelInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterModelInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterModelInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterModelInfo::clear_ip() {
  if (ip_ != _default_ip_) {
    ip_->assign(*_default_ip_);
  }
  clear_has_ip();
}
inline const ::std::string& RegisterModelInfo::ip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RegisterModelInfo.ip)
  return *ip_;
}
inline void RegisterModelInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RegisterModelInfo.ip)
}
inline void RegisterModelInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RegisterModelInfo.ip)
}
inline void RegisterModelInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RegisterModelInfo.ip)
}
inline ::std::string* RegisterModelInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string(*_default_ip_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RegisterModelInfo.ip)
  return ip_;
}
inline ::std::string* RegisterModelInfo::release_ip() {
  clear_has_ip();
  if (ip_ == _default_ip_) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(_default_ip_);
    return temp;
  }
}
inline void RegisterModelInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(_default_ip_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RegisterModelInfo.ip)
}

// optional int32 port = 2 [default = -1];
inline bool RegisterModelInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterModelInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterModelInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterModelInfo::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 RegisterModelInfo::port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RegisterModelInfo.port)
  return port_;
}
inline void RegisterModelInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RegisterModelInfo.port)
}

// -------------------------------------------------------------------

// ServiceInfoForRegister

// optional string info_node = 1 [default = "default"];
inline bool ServiceInfoForRegister::has_info_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceInfoForRegister::clear_has_info_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceInfoForRegister::clear_info_node() {
  if (info_node_ != _default_info_node_) {
    info_node_->assign(*_default_info_node_);
  }
  clear_has_info_node();
}
inline const ::std::string& ServiceInfoForRegister::info_node() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_node)
  return *info_node_;
}
inline void ServiceInfoForRegister::set_info_node(const ::std::string& value) {
  set_has_info_node();
  if (info_node_ == _default_info_node_) {
    info_node_ = new ::std::string;
  }
  info_node_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_node)
}
inline void ServiceInfoForRegister::set_info_node(const char* value) {
  set_has_info_node();
  if (info_node_ == _default_info_node_) {
    info_node_ = new ::std::string;
  }
  info_node_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_node)
}
inline void ServiceInfoForRegister::set_info_node(const char* value, size_t size) {
  set_has_info_node();
  if (info_node_ == _default_info_node_) {
    info_node_ = new ::std::string;
  }
  info_node_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_node)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_node() {
  set_has_info_node();
  if (info_node_ == _default_info_node_) {
    info_node_ = new ::std::string(*_default_info_node_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_node)
  return info_node_;
}
inline ::std::string* ServiceInfoForRegister::release_info_node() {
  clear_has_info_node();
  if (info_node_ == _default_info_node_) {
    return NULL;
  } else {
    ::std::string* temp = info_node_;
    info_node_ = const_cast< ::std::string*>(_default_info_node_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_node(::std::string* info_node) {
  if (info_node_ != _default_info_node_) {
    delete info_node_;
  }
  if (info_node) {
    set_has_info_node();
    info_node_ = info_node;
  } else {
    clear_has_info_node();
    info_node_ = const_cast< ::std::string*>(_default_info_node_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_node)
}

// optional string info_address = 2 [default = "default"];
inline bool ServiceInfoForRegister::has_info_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceInfoForRegister::clear_has_info_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceInfoForRegister::clear_info_address() {
  if (info_address_ != _default_info_address_) {
    info_address_->assign(*_default_info_address_);
  }
  clear_has_info_address();
}
inline const ::std::string& ServiceInfoForRegister::info_address() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_address)
  return *info_address_;
}
inline void ServiceInfoForRegister::set_info_address(const ::std::string& value) {
  set_has_info_address();
  if (info_address_ == _default_info_address_) {
    info_address_ = new ::std::string;
  }
  info_address_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_address)
}
inline void ServiceInfoForRegister::set_info_address(const char* value) {
  set_has_info_address();
  if (info_address_ == _default_info_address_) {
    info_address_ = new ::std::string;
  }
  info_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_address)
}
inline void ServiceInfoForRegister::set_info_address(const char* value, size_t size) {
  set_has_info_address();
  if (info_address_ == _default_info_address_) {
    info_address_ = new ::std::string;
  }
  info_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_address)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_address() {
  set_has_info_address();
  if (info_address_ == _default_info_address_) {
    info_address_ = new ::std::string(*_default_info_address_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_address)
  return info_address_;
}
inline ::std::string* ServiceInfoForRegister::release_info_address() {
  clear_has_info_address();
  if (info_address_ == _default_info_address_) {
    return NULL;
  } else {
    ::std::string* temp = info_address_;
    info_address_ = const_cast< ::std::string*>(_default_info_address_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_address(::std::string* info_address) {
  if (info_address_ != _default_info_address_) {
    delete info_address_;
  }
  if (info_address) {
    set_has_info_address();
    info_address_ = info_address;
  } else {
    clear_has_info_address();
    info_address_ = const_cast< ::std::string*>(_default_info_address_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_address)
}

// optional string info_service_id = 3 [default = "default"];
inline bool ServiceInfoForRegister::has_info_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceInfoForRegister::clear_has_info_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceInfoForRegister::clear_info_service_id() {
  if (info_service_id_ != _default_info_service_id_) {
    info_service_id_->assign(*_default_info_service_id_);
  }
  clear_has_info_service_id();
}
inline const ::std::string& ServiceInfoForRegister::info_service_id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
  return *info_service_id_;
}
inline void ServiceInfoForRegister::set_info_service_id(const ::std::string& value) {
  set_has_info_service_id();
  if (info_service_id_ == _default_info_service_id_) {
    info_service_id_ = new ::std::string;
  }
  info_service_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
}
inline void ServiceInfoForRegister::set_info_service_id(const char* value) {
  set_has_info_service_id();
  if (info_service_id_ == _default_info_service_id_) {
    info_service_id_ = new ::std::string;
  }
  info_service_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
}
inline void ServiceInfoForRegister::set_info_service_id(const char* value, size_t size) {
  set_has_info_service_id();
  if (info_service_id_ == _default_info_service_id_) {
    info_service_id_ = new ::std::string;
  }
  info_service_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_service_id() {
  set_has_info_service_id();
  if (info_service_id_ == _default_info_service_id_) {
    info_service_id_ = new ::std::string(*_default_info_service_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
  return info_service_id_;
}
inline ::std::string* ServiceInfoForRegister::release_info_service_id() {
  clear_has_info_service_id();
  if (info_service_id_ == _default_info_service_id_) {
    return NULL;
  } else {
    ::std::string* temp = info_service_id_;
    info_service_id_ = const_cast< ::std::string*>(_default_info_service_id_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_service_id(::std::string* info_service_id) {
  if (info_service_id_ != _default_info_service_id_) {
    delete info_service_id_;
  }
  if (info_service_id) {
    set_has_info_service_id();
    info_service_id_ = info_service_id;
  } else {
    clear_has_info_service_id();
    info_service_id_ = const_cast< ::std::string*>(_default_info_service_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_service_id)
}

// optional string info_service_name = 4 [default = "default"];
inline bool ServiceInfoForRegister::has_info_service_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceInfoForRegister::clear_has_info_service_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceInfoForRegister::clear_info_service_name() {
  if (info_service_name_ != _default_info_service_name_) {
    info_service_name_->assign(*_default_info_service_name_);
  }
  clear_has_info_service_name();
}
inline const ::std::string& ServiceInfoForRegister::info_service_name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
  return *info_service_name_;
}
inline void ServiceInfoForRegister::set_info_service_name(const ::std::string& value) {
  set_has_info_service_name();
  if (info_service_name_ == _default_info_service_name_) {
    info_service_name_ = new ::std::string;
  }
  info_service_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
}
inline void ServiceInfoForRegister::set_info_service_name(const char* value) {
  set_has_info_service_name();
  if (info_service_name_ == _default_info_service_name_) {
    info_service_name_ = new ::std::string;
  }
  info_service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
}
inline void ServiceInfoForRegister::set_info_service_name(const char* value, size_t size) {
  set_has_info_service_name();
  if (info_service_name_ == _default_info_service_name_) {
    info_service_name_ = new ::std::string;
  }
  info_service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_service_name() {
  set_has_info_service_name();
  if (info_service_name_ == _default_info_service_name_) {
    info_service_name_ = new ::std::string(*_default_info_service_name_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
  return info_service_name_;
}
inline ::std::string* ServiceInfoForRegister::release_info_service_name() {
  clear_has_info_service_name();
  if (info_service_name_ == _default_info_service_name_) {
    return NULL;
  } else {
    ::std::string* temp = info_service_name_;
    info_service_name_ = const_cast< ::std::string*>(_default_info_service_name_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_service_name(::std::string* info_service_name) {
  if (info_service_name_ != _default_info_service_name_) {
    delete info_service_name_;
  }
  if (info_service_name) {
    set_has_info_service_name();
    info_service_name_ = info_service_name;
  } else {
    clear_has_info_service_name();
    info_service_name_ = const_cast< ::std::string*>(_default_info_service_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_service_name)
}

// optional string info_service_address = 5 [default = "default"];
inline bool ServiceInfoForRegister::has_info_service_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceInfoForRegister::clear_has_info_service_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceInfoForRegister::clear_info_service_address() {
  if (info_service_address_ != _default_info_service_address_) {
    info_service_address_->assign(*_default_info_service_address_);
  }
  clear_has_info_service_address();
}
inline const ::std::string& ServiceInfoForRegister::info_service_address() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
  return *info_service_address_;
}
inline void ServiceInfoForRegister::set_info_service_address(const ::std::string& value) {
  set_has_info_service_address();
  if (info_service_address_ == _default_info_service_address_) {
    info_service_address_ = new ::std::string;
  }
  info_service_address_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
}
inline void ServiceInfoForRegister::set_info_service_address(const char* value) {
  set_has_info_service_address();
  if (info_service_address_ == _default_info_service_address_) {
    info_service_address_ = new ::std::string;
  }
  info_service_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
}
inline void ServiceInfoForRegister::set_info_service_address(const char* value, size_t size) {
  set_has_info_service_address();
  if (info_service_address_ == _default_info_service_address_) {
    info_service_address_ = new ::std::string;
  }
  info_service_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_service_address() {
  set_has_info_service_address();
  if (info_service_address_ == _default_info_service_address_) {
    info_service_address_ = new ::std::string(*_default_info_service_address_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
  return info_service_address_;
}
inline ::std::string* ServiceInfoForRegister::release_info_service_address() {
  clear_has_info_service_address();
  if (info_service_address_ == _default_info_service_address_) {
    return NULL;
  } else {
    ::std::string* temp = info_service_address_;
    info_service_address_ = const_cast< ::std::string*>(_default_info_service_address_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_service_address(::std::string* info_service_address) {
  if (info_service_address_ != _default_info_service_address_) {
    delete info_service_address_;
  }
  if (info_service_address) {
    set_has_info_service_address();
    info_service_address_ = info_service_address;
  } else {
    clear_has_info_service_address();
    info_service_address_ = const_cast< ::std::string*>(_default_info_service_address_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_service_address)
}

// optional int32 info_service_port = 6 [default = -1];
inline bool ServiceInfoForRegister::has_info_service_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceInfoForRegister::clear_has_info_service_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceInfoForRegister::clear_info_service_port() {
  info_service_port_ = -1;
  clear_has_info_service_port();
}
inline ::google::protobuf::int32 ServiceInfoForRegister::info_service_port() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_port)
  return info_service_port_;
}
inline void ServiceInfoForRegister::set_info_service_port(::google::protobuf::int32 value) {
  set_has_info_service_port();
  info_service_port_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_port)
}

// optional int32 info_service_pid = 7 [default = -1];
inline bool ServiceInfoForRegister::has_info_service_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceInfoForRegister::clear_has_info_service_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceInfoForRegister::clear_info_service_pid() {
  info_service_pid_ = -1;
  clear_has_info_service_pid();
}
inline ::google::protobuf::int32 ServiceInfoForRegister::info_service_pid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_pid)
  return info_service_pid_;
}
inline void ServiceInfoForRegister::set_info_service_pid(::google::protobuf::int32 value) {
  set_has_info_service_pid();
  info_service_pid_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_pid)
}

// optional int32 info_service_module = 8 [default = -1];
inline bool ServiceInfoForRegister::has_info_service_module() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_service_module() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceInfoForRegister::clear_has_info_service_module() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceInfoForRegister::clear_info_service_module() {
  info_service_module_ = -1;
  clear_has_info_service_module();
}
inline ::google::protobuf::int32 ServiceInfoForRegister::info_service_module() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_service_module)
  return info_service_module_;
}
inline void ServiceInfoForRegister::set_info_service_module(::google::protobuf::int32 value) {
  set_has_info_service_module();
  info_service_module_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_service_module)
}

// optional string info_mq_consumer_queue_name = 9 [default = "default"];
inline bool ServiceInfoForRegister::has_info_mq_consumer_queue_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceInfoForRegister::set_has_info_mq_consumer_queue_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceInfoForRegister::clear_has_info_mq_consumer_queue_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceInfoForRegister::clear_info_mq_consumer_queue_name() {
  if (info_mq_consumer_queue_name_ != _default_info_mq_consumer_queue_name_) {
    info_mq_consumer_queue_name_->assign(*_default_info_mq_consumer_queue_name_);
  }
  clear_has_info_mq_consumer_queue_name();
}
inline const ::std::string& ServiceInfoForRegister::info_mq_consumer_queue_name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
  return *info_mq_consumer_queue_name_;
}
inline void ServiceInfoForRegister::set_info_mq_consumer_queue_name(const ::std::string& value) {
  set_has_info_mq_consumer_queue_name();
  if (info_mq_consumer_queue_name_ == _default_info_mq_consumer_queue_name_) {
    info_mq_consumer_queue_name_ = new ::std::string;
  }
  info_mq_consumer_queue_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
}
inline void ServiceInfoForRegister::set_info_mq_consumer_queue_name(const char* value) {
  set_has_info_mq_consumer_queue_name();
  if (info_mq_consumer_queue_name_ == _default_info_mq_consumer_queue_name_) {
    info_mq_consumer_queue_name_ = new ::std::string;
  }
  info_mq_consumer_queue_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
}
inline void ServiceInfoForRegister::set_info_mq_consumer_queue_name(const char* value, size_t size) {
  set_has_info_mq_consumer_queue_name();
  if (info_mq_consumer_queue_name_ == _default_info_mq_consumer_queue_name_) {
    info_mq_consumer_queue_name_ = new ::std::string;
  }
  info_mq_consumer_queue_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
}
inline ::std::string* ServiceInfoForRegister::mutable_info_mq_consumer_queue_name() {
  set_has_info_mq_consumer_queue_name();
  if (info_mq_consumer_queue_name_ == _default_info_mq_consumer_queue_name_) {
    info_mq_consumer_queue_name_ = new ::std::string(*_default_info_mq_consumer_queue_name_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
  return info_mq_consumer_queue_name_;
}
inline ::std::string* ServiceInfoForRegister::release_info_mq_consumer_queue_name() {
  clear_has_info_mq_consumer_queue_name();
  if (info_mq_consumer_queue_name_ == _default_info_mq_consumer_queue_name_) {
    return NULL;
  } else {
    ::std::string* temp = info_mq_consumer_queue_name_;
    info_mq_consumer_queue_name_ = const_cast< ::std::string*>(_default_info_mq_consumer_queue_name_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_info_mq_consumer_queue_name(::std::string* info_mq_consumer_queue_name) {
  if (info_mq_consumer_queue_name_ != _default_info_mq_consumer_queue_name_) {
    delete info_mq_consumer_queue_name_;
  }
  if (info_mq_consumer_queue_name) {
    set_has_info_mq_consumer_queue_name();
    info_mq_consumer_queue_name_ = info_mq_consumer_queue_name;
  } else {
    clear_has_info_mq_consumer_queue_name();
    info_mq_consumer_queue_name_ = const_cast< ::std::string*>(_default_info_mq_consumer_queue_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.info_mq_consumer_queue_name)
}

// optional string status_node = 10 [default = "default"];
inline bool ServiceInfoForRegister::has_status_node() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_node() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceInfoForRegister::clear_has_status_node() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceInfoForRegister::clear_status_node() {
  if (status_node_ != _default_status_node_) {
    status_node_->assign(*_default_status_node_);
  }
  clear_has_status_node();
}
inline const ::std::string& ServiceInfoForRegister::status_node() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_node)
  return *status_node_;
}
inline void ServiceInfoForRegister::set_status_node(const ::std::string& value) {
  set_has_status_node();
  if (status_node_ == _default_status_node_) {
    status_node_ = new ::std::string;
  }
  status_node_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_node)
}
inline void ServiceInfoForRegister::set_status_node(const char* value) {
  set_has_status_node();
  if (status_node_ == _default_status_node_) {
    status_node_ = new ::std::string;
  }
  status_node_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_node)
}
inline void ServiceInfoForRegister::set_status_node(const char* value, size_t size) {
  set_has_status_node();
  if (status_node_ == _default_status_node_) {
    status_node_ = new ::std::string;
  }
  status_node_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_node)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_node() {
  set_has_status_node();
  if (status_node_ == _default_status_node_) {
    status_node_ = new ::std::string(*_default_status_node_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_node)
  return status_node_;
}
inline ::std::string* ServiceInfoForRegister::release_status_node() {
  clear_has_status_node();
  if (status_node_ == _default_status_node_) {
    return NULL;
  } else {
    ::std::string* temp = status_node_;
    status_node_ = const_cast< ::std::string*>(_default_status_node_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_node(::std::string* status_node) {
  if (status_node_ != _default_status_node_) {
    delete status_node_;
  }
  if (status_node) {
    set_has_status_node();
    status_node_ = status_node;
  } else {
    clear_has_status_node();
    status_node_ = const_cast< ::std::string*>(_default_status_node_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_node)
}

// optional string status_check_id = 11 [default = "default"];
inline bool ServiceInfoForRegister::has_status_check_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_check_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServiceInfoForRegister::clear_has_status_check_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServiceInfoForRegister::clear_status_check_id() {
  if (status_check_id_ != _default_status_check_id_) {
    status_check_id_->assign(*_default_status_check_id_);
  }
  clear_has_status_check_id();
}
inline const ::std::string& ServiceInfoForRegister::status_check_id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
  return *status_check_id_;
}
inline void ServiceInfoForRegister::set_status_check_id(const ::std::string& value) {
  set_has_status_check_id();
  if (status_check_id_ == _default_status_check_id_) {
    status_check_id_ = new ::std::string;
  }
  status_check_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
}
inline void ServiceInfoForRegister::set_status_check_id(const char* value) {
  set_has_status_check_id();
  if (status_check_id_ == _default_status_check_id_) {
    status_check_id_ = new ::std::string;
  }
  status_check_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
}
inline void ServiceInfoForRegister::set_status_check_id(const char* value, size_t size) {
  set_has_status_check_id();
  if (status_check_id_ == _default_status_check_id_) {
    status_check_id_ = new ::std::string;
  }
  status_check_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_check_id() {
  set_has_status_check_id();
  if (status_check_id_ == _default_status_check_id_) {
    status_check_id_ = new ::std::string(*_default_status_check_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
  return status_check_id_;
}
inline ::std::string* ServiceInfoForRegister::release_status_check_id() {
  clear_has_status_check_id();
  if (status_check_id_ == _default_status_check_id_) {
    return NULL;
  } else {
    ::std::string* temp = status_check_id_;
    status_check_id_ = const_cast< ::std::string*>(_default_status_check_id_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_check_id(::std::string* status_check_id) {
  if (status_check_id_ != _default_status_check_id_) {
    delete status_check_id_;
  }
  if (status_check_id) {
    set_has_status_check_id();
    status_check_id_ = status_check_id;
  } else {
    clear_has_status_check_id();
    status_check_id_ = const_cast< ::std::string*>(_default_status_check_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_check_id)
}

// optional string status_name = 12 [default = "default"];
inline bool ServiceInfoForRegister::has_status_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServiceInfoForRegister::clear_has_status_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServiceInfoForRegister::clear_status_name() {
  if (status_name_ != _default_status_name_) {
    status_name_->assign(*_default_status_name_);
  }
  clear_has_status_name();
}
inline const ::std::string& ServiceInfoForRegister::status_name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_name)
  return *status_name_;
}
inline void ServiceInfoForRegister::set_status_name(const ::std::string& value) {
  set_has_status_name();
  if (status_name_ == _default_status_name_) {
    status_name_ = new ::std::string;
  }
  status_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_name)
}
inline void ServiceInfoForRegister::set_status_name(const char* value) {
  set_has_status_name();
  if (status_name_ == _default_status_name_) {
    status_name_ = new ::std::string;
  }
  status_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_name)
}
inline void ServiceInfoForRegister::set_status_name(const char* value, size_t size) {
  set_has_status_name();
  if (status_name_ == _default_status_name_) {
    status_name_ = new ::std::string;
  }
  status_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_name)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_name() {
  set_has_status_name();
  if (status_name_ == _default_status_name_) {
    status_name_ = new ::std::string(*_default_status_name_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_name)
  return status_name_;
}
inline ::std::string* ServiceInfoForRegister::release_status_name() {
  clear_has_status_name();
  if (status_name_ == _default_status_name_) {
    return NULL;
  } else {
    ::std::string* temp = status_name_;
    status_name_ = const_cast< ::std::string*>(_default_status_name_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_name(::std::string* status_name) {
  if (status_name_ != _default_status_name_) {
    delete status_name_;
  }
  if (status_name) {
    set_has_status_name();
    status_name_ = status_name;
  } else {
    clear_has_status_name();
    status_name_ = const_cast< ::std::string*>(_default_status_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_name)
}

// optional string status_status = 13 [default = "default"];
inline bool ServiceInfoForRegister::has_status_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServiceInfoForRegister::clear_has_status_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServiceInfoForRegister::clear_status_status() {
  if (status_status_ != _default_status_status_) {
    status_status_->assign(*_default_status_status_);
  }
  clear_has_status_status();
}
inline const ::std::string& ServiceInfoForRegister::status_status() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_status)
  return *status_status_;
}
inline void ServiceInfoForRegister::set_status_status(const ::std::string& value) {
  set_has_status_status();
  if (status_status_ == _default_status_status_) {
    status_status_ = new ::std::string;
  }
  status_status_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_status)
}
inline void ServiceInfoForRegister::set_status_status(const char* value) {
  set_has_status_status();
  if (status_status_ == _default_status_status_) {
    status_status_ = new ::std::string;
  }
  status_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_status)
}
inline void ServiceInfoForRegister::set_status_status(const char* value, size_t size) {
  set_has_status_status();
  if (status_status_ == _default_status_status_) {
    status_status_ = new ::std::string;
  }
  status_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_status)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_status() {
  set_has_status_status();
  if (status_status_ == _default_status_status_) {
    status_status_ = new ::std::string(*_default_status_status_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_status)
  return status_status_;
}
inline ::std::string* ServiceInfoForRegister::release_status_status() {
  clear_has_status_status();
  if (status_status_ == _default_status_status_) {
    return NULL;
  } else {
    ::std::string* temp = status_status_;
    status_status_ = const_cast< ::std::string*>(_default_status_status_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_status(::std::string* status_status) {
  if (status_status_ != _default_status_status_) {
    delete status_status_;
  }
  if (status_status) {
    set_has_status_status();
    status_status_ = status_status;
  } else {
    clear_has_status_status();
    status_status_ = const_cast< ::std::string*>(_default_status_status_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_status)
}

// optional string status_notes = 14 [default = "default"];
inline bool ServiceInfoForRegister::has_status_notes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_notes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ServiceInfoForRegister::clear_has_status_notes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ServiceInfoForRegister::clear_status_notes() {
  if (status_notes_ != _default_status_notes_) {
    status_notes_->assign(*_default_status_notes_);
  }
  clear_has_status_notes();
}
inline const ::std::string& ServiceInfoForRegister::status_notes() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_notes)
  return *status_notes_;
}
inline void ServiceInfoForRegister::set_status_notes(const ::std::string& value) {
  set_has_status_notes();
  if (status_notes_ == _default_status_notes_) {
    status_notes_ = new ::std::string;
  }
  status_notes_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_notes)
}
inline void ServiceInfoForRegister::set_status_notes(const char* value) {
  set_has_status_notes();
  if (status_notes_ == _default_status_notes_) {
    status_notes_ = new ::std::string;
  }
  status_notes_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_notes)
}
inline void ServiceInfoForRegister::set_status_notes(const char* value, size_t size) {
  set_has_status_notes();
  if (status_notes_ == _default_status_notes_) {
    status_notes_ = new ::std::string;
  }
  status_notes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_notes)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_notes() {
  set_has_status_notes();
  if (status_notes_ == _default_status_notes_) {
    status_notes_ = new ::std::string(*_default_status_notes_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_notes)
  return status_notes_;
}
inline ::std::string* ServiceInfoForRegister::release_status_notes() {
  clear_has_status_notes();
  if (status_notes_ == _default_status_notes_) {
    return NULL;
  } else {
    ::std::string* temp = status_notes_;
    status_notes_ = const_cast< ::std::string*>(_default_status_notes_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_notes(::std::string* status_notes) {
  if (status_notes_ != _default_status_notes_) {
    delete status_notes_;
  }
  if (status_notes) {
    set_has_status_notes();
    status_notes_ = status_notes;
  } else {
    clear_has_status_notes();
    status_notes_ = const_cast< ::std::string*>(_default_status_notes_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_notes)
}

// optional string status_output = 15 [default = "default"];
inline bool ServiceInfoForRegister::has_status_output() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_output() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ServiceInfoForRegister::clear_has_status_output() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ServiceInfoForRegister::clear_status_output() {
  if (status_output_ != _default_status_output_) {
    status_output_->assign(*_default_status_output_);
  }
  clear_has_status_output();
}
inline const ::std::string& ServiceInfoForRegister::status_output() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_output)
  return *status_output_;
}
inline void ServiceInfoForRegister::set_status_output(const ::std::string& value) {
  set_has_status_output();
  if (status_output_ == _default_status_output_) {
    status_output_ = new ::std::string;
  }
  status_output_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_output)
}
inline void ServiceInfoForRegister::set_status_output(const char* value) {
  set_has_status_output();
  if (status_output_ == _default_status_output_) {
    status_output_ = new ::std::string;
  }
  status_output_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_output)
}
inline void ServiceInfoForRegister::set_status_output(const char* value, size_t size) {
  set_has_status_output();
  if (status_output_ == _default_status_output_) {
    status_output_ = new ::std::string;
  }
  status_output_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_output)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_output() {
  set_has_status_output();
  if (status_output_ == _default_status_output_) {
    status_output_ = new ::std::string(*_default_status_output_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_output)
  return status_output_;
}
inline ::std::string* ServiceInfoForRegister::release_status_output() {
  clear_has_status_output();
  if (status_output_ == _default_status_output_) {
    return NULL;
  } else {
    ::std::string* temp = status_output_;
    status_output_ = const_cast< ::std::string*>(_default_status_output_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_output(::std::string* status_output) {
  if (status_output_ != _default_status_output_) {
    delete status_output_;
  }
  if (status_output) {
    set_has_status_output();
    status_output_ = status_output;
  } else {
    clear_has_status_output();
    status_output_ = const_cast< ::std::string*>(_default_status_output_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_output)
}

// optional string status_service_id = 16 [default = "default"];
inline bool ServiceInfoForRegister::has_status_service_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_service_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ServiceInfoForRegister::clear_has_status_service_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ServiceInfoForRegister::clear_status_service_id() {
  if (status_service_id_ != _default_status_service_id_) {
    status_service_id_->assign(*_default_status_service_id_);
  }
  clear_has_status_service_id();
}
inline const ::std::string& ServiceInfoForRegister::status_service_id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
  return *status_service_id_;
}
inline void ServiceInfoForRegister::set_status_service_id(const ::std::string& value) {
  set_has_status_service_id();
  if (status_service_id_ == _default_status_service_id_) {
    status_service_id_ = new ::std::string;
  }
  status_service_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
}
inline void ServiceInfoForRegister::set_status_service_id(const char* value) {
  set_has_status_service_id();
  if (status_service_id_ == _default_status_service_id_) {
    status_service_id_ = new ::std::string;
  }
  status_service_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
}
inline void ServiceInfoForRegister::set_status_service_id(const char* value, size_t size) {
  set_has_status_service_id();
  if (status_service_id_ == _default_status_service_id_) {
    status_service_id_ = new ::std::string;
  }
  status_service_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_service_id() {
  set_has_status_service_id();
  if (status_service_id_ == _default_status_service_id_) {
    status_service_id_ = new ::std::string(*_default_status_service_id_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
  return status_service_id_;
}
inline ::std::string* ServiceInfoForRegister::release_status_service_id() {
  clear_has_status_service_id();
  if (status_service_id_ == _default_status_service_id_) {
    return NULL;
  } else {
    ::std::string* temp = status_service_id_;
    status_service_id_ = const_cast< ::std::string*>(_default_status_service_id_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_service_id(::std::string* status_service_id) {
  if (status_service_id_ != _default_status_service_id_) {
    delete status_service_id_;
  }
  if (status_service_id) {
    set_has_status_service_id();
    status_service_id_ = status_service_id;
  } else {
    clear_has_status_service_id();
    status_service_id_ = const_cast< ::std::string*>(_default_status_service_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_service_id)
}

// optional string status_service_name = 17 [default = "default"];
inline bool ServiceInfoForRegister::has_status_service_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ServiceInfoForRegister::set_has_status_service_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ServiceInfoForRegister::clear_has_status_service_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ServiceInfoForRegister::clear_status_service_name() {
  if (status_service_name_ != _default_status_service_name_) {
    status_service_name_->assign(*_default_status_service_name_);
  }
  clear_has_status_service_name();
}
inline const ::std::string& ServiceInfoForRegister::status_service_name() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
  return *status_service_name_;
}
inline void ServiceInfoForRegister::set_status_service_name(const ::std::string& value) {
  set_has_status_service_name();
  if (status_service_name_ == _default_status_service_name_) {
    status_service_name_ = new ::std::string;
  }
  status_service_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
}
inline void ServiceInfoForRegister::set_status_service_name(const char* value) {
  set_has_status_service_name();
  if (status_service_name_ == _default_status_service_name_) {
    status_service_name_ = new ::std::string;
  }
  status_service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
}
inline void ServiceInfoForRegister::set_status_service_name(const char* value, size_t size) {
  set_has_status_service_name();
  if (status_service_name_ == _default_status_service_name_) {
    status_service_name_ = new ::std::string;
  }
  status_service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
}
inline ::std::string* ServiceInfoForRegister::mutable_status_service_name() {
  set_has_status_service_name();
  if (status_service_name_ == _default_status_service_name_) {
    status_service_name_ = new ::std::string(*_default_status_service_name_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
  return status_service_name_;
}
inline ::std::string* ServiceInfoForRegister::release_status_service_name() {
  clear_has_status_service_name();
  if (status_service_name_ == _default_status_service_name_) {
    return NULL;
  } else {
    ::std::string* temp = status_service_name_;
    status_service_name_ = const_cast< ::std::string*>(_default_status_service_name_);
    return temp;
  }
}
inline void ServiceInfoForRegister::set_allocated_status_service_name(::std::string* status_service_name) {
  if (status_service_name_ != _default_status_service_name_) {
    delete status_service_name_;
  }
  if (status_service_name) {
    set_has_status_service_name();
    status_service_name_ = status_service_name;
  } else {
    clear_has_status_service_name();
    status_service_name_ = const_cast< ::std::string*>(_default_status_service_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ServiceInfoForRegister.status_service_name)
}

// repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
inline int ServiceInfoForRegister::registermodel_size() const {
  return registermodel_.size();
}
inline void ServiceInfoForRegister::clear_registermodel() {
  registermodel_.Clear();
}
inline const ::com::arges::file::proto::RegisterModelInfo& ServiceInfoForRegister::registermodel(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ServiceInfoForRegister.registermodel)
  return registermodel_.Get(index);
}
inline ::com::arges::file::proto::RegisterModelInfo* ServiceInfoForRegister::mutable_registermodel(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ServiceInfoForRegister.registermodel)
  return registermodel_.Mutable(index);
}
inline ::com::arges::file::proto::RegisterModelInfo* ServiceInfoForRegister::add_registermodel() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ServiceInfoForRegister.registermodel)
  return registermodel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RegisterModelInfo >&
ServiceInfoForRegister::registermodel() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ServiceInfoForRegister.registermodel)
  return registermodel_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::RegisterModelInfo >*
ServiceInfoForRegister::mutable_registermodel() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ServiceInfoForRegister.registermodel)
  return &registermodel_;
}

// -------------------------------------------------------------------

// ReqServiceRegister

// required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
inline bool ReqServiceRegister::has_serviceinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqServiceRegister::set_has_serviceinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqServiceRegister::clear_has_serviceinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqServiceRegister::clear_serviceinfo() {
  if (serviceinfo_ != NULL) serviceinfo_->::com::arges::file::proto::ServiceInfoForRegister::Clear();
  clear_has_serviceinfo();
}
inline const ::com::arges::file::proto::ServiceInfoForRegister& ReqServiceRegister::serviceinfo() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceRegister.serviceInfo)
  return serviceinfo_ != NULL ? *serviceinfo_ : *default_instance_->serviceinfo_;
}
inline ::com::arges::file::proto::ServiceInfoForRegister* ReqServiceRegister::mutable_serviceinfo() {
  set_has_serviceinfo();
  if (serviceinfo_ == NULL) serviceinfo_ = new ::com::arges::file::proto::ServiceInfoForRegister;
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceRegister.serviceInfo)
  return serviceinfo_;
}
inline ::com::arges::file::proto::ServiceInfoForRegister* ReqServiceRegister::release_serviceinfo() {
  clear_has_serviceinfo();
  ::com::arges::file::proto::ServiceInfoForRegister* temp = serviceinfo_;
  serviceinfo_ = NULL;
  return temp;
}
inline void ReqServiceRegister::set_allocated_serviceinfo(::com::arges::file::proto::ServiceInfoForRegister* serviceinfo) {
  delete serviceinfo_;
  serviceinfo_ = serviceinfo;
  if (serviceinfo) {
    set_has_serviceinfo();
  } else {
    clear_has_serviceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqServiceRegister.serviceInfo)
}

// -------------------------------------------------------------------

// RspServiceRegister

// optional int32 result = 1 [default = -1];
inline bool RspServiceRegister::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspServiceRegister::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspServiceRegister::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspServiceRegister::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspServiceRegister::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceRegister.result)
  return result_;
}
inline void RspServiceRegister::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspServiceRegister.result)
}

// optional string describe = 2 [default = "default"];
inline bool RspServiceRegister::has_describe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspServiceRegister::set_has_describe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspServiceRegister::clear_has_describe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspServiceRegister::clear_describe() {
  if (describe_ != _default_describe_) {
    describe_->assign(*_default_describe_);
  }
  clear_has_describe();
}
inline const ::std::string& RspServiceRegister::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceRegister.describe)
  return *describe_;
}
inline void RspServiceRegister::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspServiceRegister.describe)
}
inline void RspServiceRegister::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspServiceRegister.describe)
}
inline void RspServiceRegister::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspServiceRegister.describe)
}
inline ::std::string* RspServiceRegister::mutable_describe() {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string(*_default_describe_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspServiceRegister.describe)
  return describe_;
}
inline ::std::string* RspServiceRegister::release_describe() {
  clear_has_describe();
  if (describe_ == _default_describe_) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(_default_describe_);
    return temp;
  }
}
inline void RspServiceRegister::set_allocated_describe(::std::string* describe) {
  if (describe_ != _default_describe_) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(_default_describe_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspServiceRegister.describe)
}

// optional string id = 3 [default = ""];
inline bool RspServiceRegister::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspServiceRegister::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspServiceRegister::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspServiceRegister::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RspServiceRegister::id() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceRegister.id)
  return *id_;
}
inline void RspServiceRegister::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspServiceRegister.id)
}
inline void RspServiceRegister::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspServiceRegister.id)
}
inline void RspServiceRegister::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspServiceRegister.id)
}
inline ::std::string* RspServiceRegister::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspServiceRegister.id)
  return id_;
}
inline ::std::string* RspServiceRegister::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspServiceRegister::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspServiceRegister.id)
}

// -------------------------------------------------------------------

// ReqServiceLogout

// repeated string id = 1;
inline int ReqServiceLogout::id_size() const {
  return id_.size();
}
inline void ReqServiceLogout::clear_id() {
  id_.Clear();
}
inline const ::std::string& ReqServiceLogout::id(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceLogout.id)
  return id_.Get(index);
}
inline ::std::string* ReqServiceLogout::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceLogout.id)
  return id_.Mutable(index);
}
inline void ReqServiceLogout::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceLogout.id)
  id_.Mutable(index)->assign(value);
}
inline void ReqServiceLogout::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceLogout.id)
}
inline void ReqServiceLogout::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceLogout.id)
}
inline ::std::string* ReqServiceLogout::add_id() {
  return id_.Add();
}
inline void ReqServiceLogout::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceLogout.id)
}
inline void ReqServiceLogout::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceLogout.id)
}
inline void ReqServiceLogout::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceLogout.id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceLogout::id() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceLogout.id)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceLogout::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceLogout.id)
  return &id_;
}

// -------------------------------------------------------------------

// RspServiceLogout

// optional int32 result = 1 [default = -1];
inline bool RspServiceLogout::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspServiceLogout::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspServiceLogout::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspServiceLogout::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RspServiceLogout::result() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceLogout.result)
  return result_;
}
inline void RspServiceLogout::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspServiceLogout.result)
}

// optional string describe = 2 [default = "default"];
inline bool RspServiceLogout::has_describe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspServiceLogout::set_has_describe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspServiceLogout::clear_has_describe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspServiceLogout::clear_describe() {
  if (describe_ != _default_describe_) {
    describe_->assign(*_default_describe_);
  }
  clear_has_describe();
}
inline const ::std::string& RspServiceLogout::describe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceLogout.describe)
  return *describe_;
}
inline void RspServiceLogout::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspServiceLogout.describe)
}
inline void RspServiceLogout::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspServiceLogout.describe)
}
inline void RspServiceLogout::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspServiceLogout.describe)
}
inline ::std::string* RspServiceLogout::mutable_describe() {
  set_has_describe();
  if (describe_ == _default_describe_) {
    describe_ = new ::std::string(*_default_describe_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspServiceLogout.describe)
  return describe_;
}
inline ::std::string* RspServiceLogout::release_describe() {
  clear_has_describe();
  if (describe_ == _default_describe_) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(_default_describe_);
    return temp;
  }
}
inline void RspServiceLogout::set_allocated_describe(::std::string* describe) {
  if (describe_ != _default_describe_) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(_default_describe_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspServiceLogout.describe)
}

// -------------------------------------------------------------------

// ReqServiceInfoForQuery

// repeated string info_node = 1;
inline int ReqServiceInfoForQuery::info_node_size() const {
  return info_node_.size();
}
inline void ReqServiceInfoForQuery::clear_info_node() {
  info_node_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_node(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
  return info_node_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_node(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
  return info_node_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_node(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
  info_node_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_node(int index, const char* value) {
  info_node_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
}
inline void ReqServiceInfoForQuery::set_info_node(int index, const char* value, size_t size) {
  info_node_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_node() {
  return info_node_.Add();
}
inline void ReqServiceInfoForQuery::add_info_node(const ::std::string& value) {
  info_node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
}
inline void ReqServiceInfoForQuery::add_info_node(const char* value) {
  info_node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
}
inline void ReqServiceInfoForQuery::add_info_node(const char* value, size_t size) {
  info_node_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_node() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
  return info_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_node() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_node)
  return &info_node_;
}

// repeated string info_address = 2;
inline int ReqServiceInfoForQuery::info_address_size() const {
  return info_address_.size();
}
inline void ReqServiceInfoForQuery::clear_info_address() {
  info_address_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_address(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
  return info_address_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_address(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
  return info_address_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
  info_address_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_address(int index, const char* value) {
  info_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
}
inline void ReqServiceInfoForQuery::set_info_address(int index, const char* value, size_t size) {
  info_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_address() {
  return info_address_.Add();
}
inline void ReqServiceInfoForQuery::add_info_address(const ::std::string& value) {
  info_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
}
inline void ReqServiceInfoForQuery::add_info_address(const char* value) {
  info_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
}
inline void ReqServiceInfoForQuery::add_info_address(const char* value, size_t size) {
  info_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_address() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
  return info_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_address() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_address)
  return &info_address_;
}

// repeated string info_service_id = 3;
inline int ReqServiceInfoForQuery::info_service_id_size() const {
  return info_service_id_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_id() {
  info_service_id_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_service_id(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
  return info_service_id_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_service_id(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
  return info_service_id_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_service_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
  info_service_id_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_service_id(int index, const char* value) {
  info_service_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
}
inline void ReqServiceInfoForQuery::set_info_service_id(int index, const char* value, size_t size) {
  info_service_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_service_id() {
  return info_service_id_.Add();
}
inline void ReqServiceInfoForQuery::add_info_service_id(const ::std::string& value) {
  info_service_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
}
inline void ReqServiceInfoForQuery::add_info_service_id(const char* value) {
  info_service_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
}
inline void ReqServiceInfoForQuery::add_info_service_id(const char* value, size_t size) {
  info_service_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_service_id() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
  return info_service_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_service_id() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_id)
  return &info_service_id_;
}

// repeated string info_service_name = 4;
inline int ReqServiceInfoForQuery::info_service_name_size() const {
  return info_service_name_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_name() {
  info_service_name_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_service_name(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
  return info_service_name_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_service_name(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
  return info_service_name_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_service_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
  info_service_name_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_service_name(int index, const char* value) {
  info_service_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
}
inline void ReqServiceInfoForQuery::set_info_service_name(int index, const char* value, size_t size) {
  info_service_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_service_name() {
  return info_service_name_.Add();
}
inline void ReqServiceInfoForQuery::add_info_service_name(const ::std::string& value) {
  info_service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
}
inline void ReqServiceInfoForQuery::add_info_service_name(const char* value) {
  info_service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
}
inline void ReqServiceInfoForQuery::add_info_service_name(const char* value, size_t size) {
  info_service_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_service_name() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
  return info_service_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_service_name() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_name)
  return &info_service_name_;
}

// repeated string info_service_address = 5;
inline int ReqServiceInfoForQuery::info_service_address_size() const {
  return info_service_address_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_address() {
  info_service_address_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_service_address(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
  return info_service_address_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_service_address(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
  return info_service_address_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_service_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
  info_service_address_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_service_address(int index, const char* value) {
  info_service_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
}
inline void ReqServiceInfoForQuery::set_info_service_address(int index, const char* value, size_t size) {
  info_service_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_service_address() {
  return info_service_address_.Add();
}
inline void ReqServiceInfoForQuery::add_info_service_address(const ::std::string& value) {
  info_service_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
}
inline void ReqServiceInfoForQuery::add_info_service_address(const char* value) {
  info_service_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
}
inline void ReqServiceInfoForQuery::add_info_service_address(const char* value, size_t size) {
  info_service_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_service_address() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
  return info_service_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_service_address() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_address)
  return &info_service_address_;
}

// repeated int32 info_service_port = 6;
inline int ReqServiceInfoForQuery::info_service_port_size() const {
  return info_service_port_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_port() {
  info_service_port_.Clear();
}
inline ::google::protobuf::int32 ReqServiceInfoForQuery::info_service_port(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_port)
  return info_service_port_.Get(index);
}
inline void ReqServiceInfoForQuery::set_info_service_port(int index, ::google::protobuf::int32 value) {
  info_service_port_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_port)
}
inline void ReqServiceInfoForQuery::add_info_service_port(::google::protobuf::int32 value) {
  info_service_port_.Add(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_port)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqServiceInfoForQuery::info_service_port() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_port)
  return info_service_port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqServiceInfoForQuery::mutable_info_service_port() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_port)
  return &info_service_port_;
}

// repeated int32 info_service_pid = 7;
inline int ReqServiceInfoForQuery::info_service_pid_size() const {
  return info_service_pid_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_pid() {
  info_service_pid_.Clear();
}
inline ::google::protobuf::int32 ReqServiceInfoForQuery::info_service_pid(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_pid)
  return info_service_pid_.Get(index);
}
inline void ReqServiceInfoForQuery::set_info_service_pid(int index, ::google::protobuf::int32 value) {
  info_service_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_pid)
}
inline void ReqServiceInfoForQuery::add_info_service_pid(::google::protobuf::int32 value) {
  info_service_pid_.Add(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqServiceInfoForQuery::info_service_pid() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_pid)
  return info_service_pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqServiceInfoForQuery::mutable_info_service_pid() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_pid)
  return &info_service_pid_;
}

// repeated int32 info_service_module = 8;
inline int ReqServiceInfoForQuery::info_service_module_size() const {
  return info_service_module_.size();
}
inline void ReqServiceInfoForQuery::clear_info_service_module() {
  info_service_module_.Clear();
}
inline ::google::protobuf::int32 ReqServiceInfoForQuery::info_service_module(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_service_module)
  return info_service_module_.Get(index);
}
inline void ReqServiceInfoForQuery::set_info_service_module(int index, ::google::protobuf::int32 value) {
  info_service_module_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_service_module)
}
inline void ReqServiceInfoForQuery::add_info_service_module(::google::protobuf::int32 value) {
  info_service_module_.Add(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_service_module)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqServiceInfoForQuery::info_service_module() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_module)
  return info_service_module_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqServiceInfoForQuery::mutable_info_service_module() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_service_module)
  return &info_service_module_;
}

// repeated string info_mq_consumer_queue_name = 9;
inline int ReqServiceInfoForQuery::info_mq_consumer_queue_name_size() const {
  return info_mq_consumer_queue_name_.size();
}
inline void ReqServiceInfoForQuery::clear_info_mq_consumer_queue_name() {
  info_mq_consumer_queue_name_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::info_mq_consumer_queue_name(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
  return info_mq_consumer_queue_name_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_info_mq_consumer_queue_name(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
  return info_mq_consumer_queue_name_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_info_mq_consumer_queue_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
  info_mq_consumer_queue_name_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_info_mq_consumer_queue_name(int index, const char* value) {
  info_mq_consumer_queue_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
}
inline void ReqServiceInfoForQuery::set_info_mq_consumer_queue_name(int index, const char* value, size_t size) {
  info_mq_consumer_queue_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
}
inline ::std::string* ReqServiceInfoForQuery::add_info_mq_consumer_queue_name() {
  return info_mq_consumer_queue_name_.Add();
}
inline void ReqServiceInfoForQuery::add_info_mq_consumer_queue_name(const ::std::string& value) {
  info_mq_consumer_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
}
inline void ReqServiceInfoForQuery::add_info_mq_consumer_queue_name(const char* value) {
  info_mq_consumer_queue_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
}
inline void ReqServiceInfoForQuery::add_info_mq_consumer_queue_name(const char* value, size_t size) {
  info_mq_consumer_queue_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::info_mq_consumer_queue_name() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
  return info_mq_consumer_queue_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_info_mq_consumer_queue_name() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.info_mq_consumer_queue_name)
  return &info_mq_consumer_queue_name_;
}

// repeated string status_node = 10;
inline int ReqServiceInfoForQuery::status_node_size() const {
  return status_node_.size();
}
inline void ReqServiceInfoForQuery::clear_status_node() {
  status_node_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_node(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
  return status_node_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_node(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
  return status_node_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_node(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
  status_node_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_node(int index, const char* value) {
  status_node_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
}
inline void ReqServiceInfoForQuery::set_status_node(int index, const char* value, size_t size) {
  status_node_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_node() {
  return status_node_.Add();
}
inline void ReqServiceInfoForQuery::add_status_node(const ::std::string& value) {
  status_node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
}
inline void ReqServiceInfoForQuery::add_status_node(const char* value) {
  status_node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
}
inline void ReqServiceInfoForQuery::add_status_node(const char* value, size_t size) {
  status_node_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_node() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
  return status_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_node() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_node)
  return &status_node_;
}

// repeated string status_check_id = 11;
inline int ReqServiceInfoForQuery::status_check_id_size() const {
  return status_check_id_.size();
}
inline void ReqServiceInfoForQuery::clear_status_check_id() {
  status_check_id_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_check_id(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
  return status_check_id_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_check_id(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
  return status_check_id_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_check_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
  status_check_id_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_check_id(int index, const char* value) {
  status_check_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
}
inline void ReqServiceInfoForQuery::set_status_check_id(int index, const char* value, size_t size) {
  status_check_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_check_id() {
  return status_check_id_.Add();
}
inline void ReqServiceInfoForQuery::add_status_check_id(const ::std::string& value) {
  status_check_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
}
inline void ReqServiceInfoForQuery::add_status_check_id(const char* value) {
  status_check_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
}
inline void ReqServiceInfoForQuery::add_status_check_id(const char* value, size_t size) {
  status_check_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_check_id() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
  return status_check_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_check_id() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_check_id)
  return &status_check_id_;
}

// repeated string status_name = 12;
inline int ReqServiceInfoForQuery::status_name_size() const {
  return status_name_.size();
}
inline void ReqServiceInfoForQuery::clear_status_name() {
  status_name_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_name(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
  return status_name_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_name(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
  return status_name_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
  status_name_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_name(int index, const char* value) {
  status_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
}
inline void ReqServiceInfoForQuery::set_status_name(int index, const char* value, size_t size) {
  status_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_name() {
  return status_name_.Add();
}
inline void ReqServiceInfoForQuery::add_status_name(const ::std::string& value) {
  status_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
}
inline void ReqServiceInfoForQuery::add_status_name(const char* value) {
  status_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
}
inline void ReqServiceInfoForQuery::add_status_name(const char* value, size_t size) {
  status_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_name() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
  return status_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_name() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_name)
  return &status_name_;
}

// repeated string status_status = 13;
inline int ReqServiceInfoForQuery::status_status_size() const {
  return status_status_.size();
}
inline void ReqServiceInfoForQuery::clear_status_status() {
  status_status_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_status(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
  return status_status_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_status(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
  return status_status_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_status(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
  status_status_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_status(int index, const char* value) {
  status_status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
}
inline void ReqServiceInfoForQuery::set_status_status(int index, const char* value, size_t size) {
  status_status_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_status() {
  return status_status_.Add();
}
inline void ReqServiceInfoForQuery::add_status_status(const ::std::string& value) {
  status_status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
}
inline void ReqServiceInfoForQuery::add_status_status(const char* value) {
  status_status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
}
inline void ReqServiceInfoForQuery::add_status_status(const char* value, size_t size) {
  status_status_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_status() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
  return status_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_status() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_status)
  return &status_status_;
}

// repeated string status_notes = 14;
inline int ReqServiceInfoForQuery::status_notes_size() const {
  return status_notes_.size();
}
inline void ReqServiceInfoForQuery::clear_status_notes() {
  status_notes_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_notes(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
  return status_notes_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_notes(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
  return status_notes_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_notes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
  status_notes_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_notes(int index, const char* value) {
  status_notes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
}
inline void ReqServiceInfoForQuery::set_status_notes(int index, const char* value, size_t size) {
  status_notes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_notes() {
  return status_notes_.Add();
}
inline void ReqServiceInfoForQuery::add_status_notes(const ::std::string& value) {
  status_notes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
}
inline void ReqServiceInfoForQuery::add_status_notes(const char* value) {
  status_notes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
}
inline void ReqServiceInfoForQuery::add_status_notes(const char* value, size_t size) {
  status_notes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_notes() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
  return status_notes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_notes() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_notes)
  return &status_notes_;
}

// repeated string status_output = 15;
inline int ReqServiceInfoForQuery::status_output_size() const {
  return status_output_.size();
}
inline void ReqServiceInfoForQuery::clear_status_output() {
  status_output_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_output(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
  return status_output_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_output(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
  return status_output_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
  status_output_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_output(int index, const char* value) {
  status_output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
}
inline void ReqServiceInfoForQuery::set_status_output(int index, const char* value, size_t size) {
  status_output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_output() {
  return status_output_.Add();
}
inline void ReqServiceInfoForQuery::add_status_output(const ::std::string& value) {
  status_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
}
inline void ReqServiceInfoForQuery::add_status_output(const char* value) {
  status_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
}
inline void ReqServiceInfoForQuery::add_status_output(const char* value, size_t size) {
  status_output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_output() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
  return status_output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_output() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_output)
  return &status_output_;
}

// repeated string status_service_id = 16;
inline int ReqServiceInfoForQuery::status_service_id_size() const {
  return status_service_id_.size();
}
inline void ReqServiceInfoForQuery::clear_status_service_id() {
  status_service_id_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_service_id(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
  return status_service_id_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_service_id(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
  return status_service_id_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_service_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
  status_service_id_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_service_id(int index, const char* value) {
  status_service_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
}
inline void ReqServiceInfoForQuery::set_status_service_id(int index, const char* value, size_t size) {
  status_service_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_service_id() {
  return status_service_id_.Add();
}
inline void ReqServiceInfoForQuery::add_status_service_id(const ::std::string& value) {
  status_service_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
}
inline void ReqServiceInfoForQuery::add_status_service_id(const char* value) {
  status_service_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
}
inline void ReqServiceInfoForQuery::add_status_service_id(const char* value, size_t size) {
  status_service_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_service_id() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
  return status_service_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_service_id() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_service_id)
  return &status_service_id_;
}

// repeated string status_service_name = 17;
inline int ReqServiceInfoForQuery::status_service_name_size() const {
  return status_service_name_.size();
}
inline void ReqServiceInfoForQuery::clear_status_service_name() {
  status_service_name_.Clear();
}
inline const ::std::string& ReqServiceInfoForQuery::status_service_name(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
  return status_service_name_.Get(index);
}
inline ::std::string* ReqServiceInfoForQuery::mutable_status_service_name(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
  return status_service_name_.Mutable(index);
}
inline void ReqServiceInfoForQuery::set_status_service_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
  status_service_name_.Mutable(index)->assign(value);
}
inline void ReqServiceInfoForQuery::set_status_service_name(int index, const char* value) {
  status_service_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
}
inline void ReqServiceInfoForQuery::set_status_service_name(int index, const char* value, size_t size) {
  status_service_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
}
inline ::std::string* ReqServiceInfoForQuery::add_status_service_name() {
  return status_service_name_.Add();
}
inline void ReqServiceInfoForQuery::add_status_service_name(const ::std::string& value) {
  status_service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
}
inline void ReqServiceInfoForQuery::add_status_service_name(const char* value) {
  status_service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
}
inline void ReqServiceInfoForQuery::add_status_service_name(const char* value, size_t size) {
  status_service_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqServiceInfoForQuery::status_service_name() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
  return status_service_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqServiceInfoForQuery::mutable_status_service_name() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.ReqServiceInfoForQuery.status_service_name)
  return &status_service_name_;
}

// -------------------------------------------------------------------

// RspServiceInfoForQuery

// repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
inline int RspServiceInfoForQuery::service_info_size() const {
  return service_info_.size();
}
inline void RspServiceInfoForQuery::clear_service_info() {
  service_info_.Clear();
}
inline const ::com::arges::file::proto::ServiceInfoForRegister& RspServiceInfoForQuery::service_info(int index) const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspServiceInfoForQuery.service_info)
  return service_info_.Get(index);
}
inline ::com::arges::file::proto::ServiceInfoForRegister* RspServiceInfoForQuery::mutable_service_info(int index) {
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspServiceInfoForQuery.service_info)
  return service_info_.Mutable(index);
}
inline ::com::arges::file::proto::ServiceInfoForRegister* RspServiceInfoForQuery::add_service_info() {
  // @@protoc_insertion_point(field_add:com.arges.file.proto.RspServiceInfoForQuery.service_info)
  return service_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ServiceInfoForRegister >&
RspServiceInfoForQuery::service_info() const {
  // @@protoc_insertion_point(field_list:com.arges.file.proto.RspServiceInfoForQuery.service_info)
  return service_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::arges::file::proto::ServiceInfoForRegister >*
RspServiceInfoForQuery::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable_list:com.arges.file.proto.RspServiceInfoForQuery.service_info)
  return &service_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceRegisterBean_2eproto__INCLUDED
