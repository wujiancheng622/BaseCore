// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSHeartBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BMSHeartBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BPXInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BPXInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BMSHeart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BMSHeart_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BMSHeartBean_2eproto() {
  protobuf_AddDesc_BMSHeartBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BMSHeartBean.proto");
  GOOGLE_CHECK(file != NULL);
  BPXInfo_descriptor_ = file->message_type(0);
  static const int BPXInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, port_),
  };
  BPXInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BPXInfo_descriptor_,
      BPXInfo::default_instance_,
      BPXInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPXInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BPXInfo));
  BMSHeart_descriptor_ = file->message_type(1);
  static const int BMSHeart_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, bpxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, deviceidnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, unloaddeviceidnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, unloaddeviceid_),
  };
  BMSHeart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BMSHeart_descriptor_,
      BMSHeart::default_instance_,
      BMSHeart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BMSHeart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BMSHeart));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BMSHeartBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BPXInfo_descriptor_, &BPXInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BMSHeart_descriptor_, &BMSHeart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BMSHeartBean_2eproto() {
  delete BPXInfo::default_instance_;
  delete BPXInfo_reflection_;
  delete BMSHeart::default_instance_;
  delete BMSHeart_reflection_;
}

void protobuf_AddDesc_BMSHeartBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BMSHeartBean.proto\022\024com.arges.file.pro"
    "to\"F\n\007BPXInfo\022\014\n\002id\030\001 \001(\t:\000\022\r\n\005keyid\030\002 \003"
    "(\t\022\014\n\002ip\030\003 \001(\t:\000\022\020\n\004port\030\004 \001(\005:\002-1\"\312\001\n\010B"
    "MSHeart\022\016\n\004term\030\001 \001(\t:\000\022\024\n\nidentifier\030\002 "
    "\001(\t:\000\022\014\n\002ip\030\003 \001(\t:\000\022\020\n\004port\030\004 \001(\005:\002-1\022.\n"
    "\007bpxinfo\030\005 \003(\0132\035.com.arges.file.proto.BP"
    "XInfo\022\024\n\014deviceidnums\030\006 \001(\005\022\032\n\022unLoaddev"
    "iceidnums\030\007 \001(\005\022\026\n\016unLoaddeviceid\030\010 \003(\t", 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BMSHeartBean.proto", &protobuf_RegisterTypes);
  BPXInfo::default_instance_ = new BPXInfo();
  BMSHeart::default_instance_ = new BMSHeart();
  BPXInfo::default_instance_->InitAsDefaultInstance();
  BMSHeart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BMSHeartBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BMSHeartBean_2eproto {
  StaticDescriptorInitializer_BMSHeartBean_2eproto() {
    protobuf_AddDesc_BMSHeartBean_2eproto();
  }
} static_descriptor_initializer_BMSHeartBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BPXInfo::kIdFieldNumber;
const int BPXInfo::kKeyidFieldNumber;
const int BPXInfo::kIpFieldNumber;
const int BPXInfo::kPortFieldNumber;
#endif  // !_MSC_VER

BPXInfo::BPXInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.BPXInfo)
}

void BPXInfo::InitAsDefaultInstance() {
}

BPXInfo::BPXInfo(const BPXInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.BPXInfo)
}

void BPXInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BPXInfo::~BPXInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.BPXInfo)
  SharedDtor();
}

void BPXInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void BPXInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BPXInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BPXInfo_descriptor_;
}

const BPXInfo& BPXInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSHeartBean_2eproto();
  return *default_instance_;
}

BPXInfo* BPXInfo::default_instance_ = NULL;

BPXInfo* BPXInfo::New() const {
  return new BPXInfo;
}

void BPXInfo::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
  }
  keyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BPXInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.BPXInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keyid;
        break;
      }

      // repeated string keyid = 2;
      case 2: {
        if (tag == 18) {
         parse_keyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyid(this->keyid_size() - 1).data(),
            this->keyid(this->keyid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keyid;
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.BPXInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.BPXInfo)
  return false;
#undef DO_
}

void BPXInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.BPXInfo)
  // optional string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string keyid = 2;
  for (int i = 0; i < this->keyid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keyid(i).data(), this->keyid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keyid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keyid(i), output);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.BPXInfo)
}

::google::protobuf::uint8* BPXInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.BPXInfo)
  // optional string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string keyid = 2;
  for (int i = 0; i < this->keyid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyid(i).data(), this->keyid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->keyid(i), target);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.BPXInfo)
  return target;
}

int BPXInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string ip = 3 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  // repeated string keyid = 2;
  total_size += 1 * this->keyid_size();
  for (int i = 0; i < this->keyid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BPXInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BPXInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BPXInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BPXInfo::MergeFrom(const BPXInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyid_.MergeFrom(from.keyid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BPXInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPXInfo::CopyFrom(const BPXInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPXInfo::IsInitialized() const {

  return true;
}

void BPXInfo::Swap(BPXInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    keyid_.Swap(&other->keyid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BPXInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BPXInfo_descriptor_;
  metadata.reflection = BPXInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BMSHeart::kTermFieldNumber;
const int BMSHeart::kIdentifierFieldNumber;
const int BMSHeart::kIpFieldNumber;
const int BMSHeart::kPortFieldNumber;
const int BMSHeart::kBpxinfoFieldNumber;
const int BMSHeart::kDeviceidnumsFieldNumber;
const int BMSHeart::kUnLoaddeviceidnumsFieldNumber;
const int BMSHeart::kUnLoaddeviceidFieldNumber;
#endif  // !_MSC_VER

BMSHeart::BMSHeart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.BMSHeart)
}

void BMSHeart::InitAsDefaultInstance() {
}

BMSHeart::BMSHeart(const BMSHeart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.BMSHeart)
}

void BMSHeart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  deviceidnums_ = 0;
  unloaddeviceidnums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BMSHeart::~BMSHeart() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.BMSHeart)
  SharedDtor();
}

void BMSHeart::SharedDtor() {
  if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_;
  }
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identifier_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void BMSHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BMSHeart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BMSHeart_descriptor_;
}

const BMSHeart& BMSHeart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSHeartBean_2eproto();
  return *default_instance_;
}

BMSHeart* BMSHeart::default_instance_ = NULL;

BMSHeart* BMSHeart::New() const {
  return new BMSHeart;
}

void BMSHeart::Clear() {
  if (_has_bits_[0 / 32] & 111) {
    if (has_term()) {
      if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        term_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identifier_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = -1;
    deviceidnums_ = 0;
    unloaddeviceidnums_ = 0;
  }
  bpxinfo_.Clear();
  unloaddeviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BMSHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.BMSHeart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string term = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->term().data(), this->term().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "term");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }

      // optional string identifier = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "identifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bpxinfo;
        break;
      }

      // repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_bpxinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bpxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bpxinfo;
        if (input->ExpectTag(48)) goto parse_deviceidnums;
        break;
      }

      // optional int32 deviceidnums = 6;
      case 6: {
        if (tag == 48) {
         parse_deviceidnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceidnums_)));
          set_has_deviceidnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unLoaddeviceidnums;
        break;
      }

      // optional int32 unLoaddeviceidnums = 7;
      case 7: {
        if (tag == 56) {
         parse_unLoaddeviceidnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unloaddeviceidnums_)));
          set_has_unloaddeviceidnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unLoaddeviceid;
        break;
      }

      // repeated string unLoaddeviceid = 8;
      case 8: {
        if (tag == 66) {
         parse_unLoaddeviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unloaddeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unloaddeviceid(this->unloaddeviceid_size() - 1).data(),
            this->unloaddeviceid(this->unloaddeviceid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unloaddeviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unLoaddeviceid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.BMSHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.BMSHeart)
  return false;
#undef DO_
}

void BMSHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.BMSHeart)
  // optional string term = 1 [default = ""];
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->term(), output);
  }

  // optional string identifier = 2 [default = ""];
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identifier(), output);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
  for (int i = 0; i < this->bpxinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bpxinfo(i), output);
  }

  // optional int32 deviceidnums = 6;
  if (has_deviceidnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deviceidnums(), output);
  }

  // optional int32 unLoaddeviceidnums = 7;
  if (has_unloaddeviceidnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unloaddeviceidnums(), output);
  }

  // repeated string unLoaddeviceid = 8;
  for (int i = 0; i < this->unloaddeviceid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->unloaddeviceid(i).data(), this->unloaddeviceid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "unloaddeviceid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->unloaddeviceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.BMSHeart)
}

::google::protobuf::uint8* BMSHeart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.BMSHeart)
  // optional string term = 1 [default = ""];
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->term(), target);
  }

  // optional string identifier = 2 [default = ""];
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identifier(), target);
  }

  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
  for (int i = 0; i < this->bpxinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bpxinfo(i), target);
  }

  // optional int32 deviceidnums = 6;
  if (has_deviceidnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deviceidnums(), target);
  }

  // optional int32 unLoaddeviceidnums = 7;
  if (has_unloaddeviceidnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unloaddeviceidnums(), target);
  }

  // repeated string unLoaddeviceid = 8;
  for (int i = 0; i < this->unloaddeviceid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unloaddeviceid(i).data(), this->unloaddeviceid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unloaddeviceid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->unloaddeviceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.BMSHeart)
  return target;
}

int BMSHeart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string term = 1 [default = ""];
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->term());
    }

    // optional string identifier = 2 [default = ""];
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // optional string ip = 3 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 deviceidnums = 6;
    if (has_deviceidnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceidnums());
    }

    // optional int32 unLoaddeviceidnums = 7;
    if (has_unloaddeviceidnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unloaddeviceidnums());
    }

  }
  // repeated .com.arges.file.proto.BPXInfo bpxinfo = 5;
  total_size += 1 * this->bpxinfo_size();
  for (int i = 0; i < this->bpxinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bpxinfo(i));
  }

  // repeated string unLoaddeviceid = 8;
  total_size += 1 * this->unloaddeviceid_size();
  for (int i = 0; i < this->unloaddeviceid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unloaddeviceid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BMSHeart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BMSHeart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BMSHeart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BMSHeart::MergeFrom(const BMSHeart& from) {
  GOOGLE_CHECK_NE(&from, this);
  bpxinfo_.MergeFrom(from.bpxinfo_);
  unloaddeviceid_.MergeFrom(from.unloaddeviceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_deviceidnums()) {
      set_deviceidnums(from.deviceidnums());
    }
    if (from.has_unloaddeviceidnums()) {
      set_unloaddeviceidnums(from.unloaddeviceidnums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BMSHeart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMSHeart::CopyFrom(const BMSHeart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMSHeart::IsInitialized() const {

  return true;
}

void BMSHeart::Swap(BMSHeart* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(identifier_, other->identifier_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    bpxinfo_.Swap(&other->bpxinfo_);
    std::swap(deviceidnums_, other->deviceidnums_);
    std::swap(unloaddeviceidnums_, other->unloaddeviceidnums_);
    unloaddeviceid_.Swap(&other->unloaddeviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BMSHeart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BMSHeart_descriptor_;
  metadata.reflection = BMSHeart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
