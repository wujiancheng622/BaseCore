// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceRegisterBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceRegisterBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RegisterModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfoForRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfoForRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServiceRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServiceRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspServiceRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspServiceRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServiceLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServiceLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspServiceLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspServiceLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServiceInfoForQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServiceInfoForQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspServiceInfoForQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspServiceInfoForQuery_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceRegisterBean_2eproto() {
  protobuf_AddDesc_ServiceRegisterBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceRegisterBean.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterModelInfo_descriptor_ = file->message_type(0);
  static const int RegisterModelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterModelInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterModelInfo, port_),
  };
  RegisterModelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterModelInfo_descriptor_,
      RegisterModelInfo::default_instance_,
      RegisterModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterModelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterModelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterModelInfo));
  ServiceInfoForRegister_descriptor_ = file->message_type(1);
  static const int ServiceInfoForRegister_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_service_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, info_mq_consumer_queue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_check_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, status_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, registermodel_),
  };
  ServiceInfoForRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceInfoForRegister_descriptor_,
      ServiceInfoForRegister::default_instance_,
      ServiceInfoForRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoForRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceInfoForRegister));
  ReqServiceRegister_descriptor_ = file->message_type(2);
  static const int ReqServiceRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceRegister, serviceinfo_),
  };
  ReqServiceRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServiceRegister_descriptor_,
      ReqServiceRegister::default_instance_,
      ReqServiceRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServiceRegister));
  RspServiceRegister_descriptor_ = file->message_type(3);
  static const int RspServiceRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceRegister, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceRegister, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceRegister, id_),
  };
  RspServiceRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspServiceRegister_descriptor_,
      RspServiceRegister::default_instance_,
      RspServiceRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspServiceRegister));
  ReqServiceLogout_descriptor_ = file->message_type(4);
  static const int ReqServiceLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceLogout, id_),
  };
  ReqServiceLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServiceLogout_descriptor_,
      ReqServiceLogout::default_instance_,
      ReqServiceLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServiceLogout));
  RspServiceLogout_descriptor_ = file->message_type(5);
  static const int RspServiceLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceLogout, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceLogout, describe_),
  };
  RspServiceLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspServiceLogout_descriptor_,
      RspServiceLogout::default_instance_,
      RspServiceLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspServiceLogout));
  ReqServiceInfoForQuery_descriptor_ = file->message_type(6);
  static const int ReqServiceInfoForQuery_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_service_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, info_mq_consumer_queue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_check_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, status_service_name_),
  };
  ReqServiceInfoForQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServiceInfoForQuery_descriptor_,
      ReqServiceInfoForQuery::default_instance_,
      ReqServiceInfoForQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServiceInfoForQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServiceInfoForQuery));
  RspServiceInfoForQuery_descriptor_ = file->message_type(7);
  static const int RspServiceInfoForQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceInfoForQuery, service_info_),
  };
  RspServiceInfoForQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspServiceInfoForQuery_descriptor_,
      RspServiceInfoForQuery::default_instance_,
      RspServiceInfoForQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceInfoForQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServiceInfoForQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspServiceInfoForQuery));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceRegisterBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterModelInfo_descriptor_, &RegisterModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceInfoForRegister_descriptor_, &ServiceInfoForRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServiceRegister_descriptor_, &ReqServiceRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspServiceRegister_descriptor_, &RspServiceRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServiceLogout_descriptor_, &ReqServiceLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspServiceLogout_descriptor_, &RspServiceLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServiceInfoForQuery_descriptor_, &ReqServiceInfoForQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspServiceInfoForQuery_descriptor_, &RspServiceInfoForQuery::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceRegisterBean_2eproto() {
  delete RegisterModelInfo::default_instance_;
  delete RegisterModelInfo_reflection_;
  delete RegisterModelInfo::_default_ip_;
  delete ServiceInfoForRegister::default_instance_;
  delete ServiceInfoForRegister_reflection_;
  delete ServiceInfoForRegister::_default_info_node_;
  delete ServiceInfoForRegister::_default_info_address_;
  delete ServiceInfoForRegister::_default_info_service_id_;
  delete ServiceInfoForRegister::_default_info_service_name_;
  delete ServiceInfoForRegister::_default_info_service_address_;
  delete ServiceInfoForRegister::_default_info_mq_consumer_queue_name_;
  delete ServiceInfoForRegister::_default_status_node_;
  delete ServiceInfoForRegister::_default_status_check_id_;
  delete ServiceInfoForRegister::_default_status_name_;
  delete ServiceInfoForRegister::_default_status_status_;
  delete ServiceInfoForRegister::_default_status_notes_;
  delete ServiceInfoForRegister::_default_status_output_;
  delete ServiceInfoForRegister::_default_status_service_id_;
  delete ServiceInfoForRegister::_default_status_service_name_;
  delete ReqServiceRegister::default_instance_;
  delete ReqServiceRegister_reflection_;
  delete RspServiceRegister::default_instance_;
  delete RspServiceRegister_reflection_;
  delete RspServiceRegister::_default_describe_;
  delete ReqServiceLogout::default_instance_;
  delete ReqServiceLogout_reflection_;
  delete RspServiceLogout::default_instance_;
  delete RspServiceLogout_reflection_;
  delete RspServiceLogout::_default_describe_;
  delete ReqServiceInfoForQuery::default_instance_;
  delete ReqServiceInfoForQuery_reflection_;
  delete RspServiceInfoForQuery::default_instance_;
  delete RspServiceInfoForQuery_reflection_;
}

void protobuf_AddDesc_ServiceRegisterBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ServiceRegisterBean.proto\022\024com.arges.f"
    "ile.proto\":\n\021RegisterModelInfo\022\023\n\002ip\030\001 \001"
    "(\t:\007default\022\020\n\004port\030\002 \001(\005:\002-1\"\223\005\n\026Servic"
    "eInfoForRegister\022\032\n\tinfo_node\030\001 \001(\t:\007def"
    "ault\022\035\n\014info_address\030\002 \001(\t:\007default\022 \n\017i"
    "nfo_service_id\030\003 \001(\t:\007default\022\"\n\021info_se"
    "rvice_name\030\004 \001(\t:\007default\022%\n\024info_servic"
    "e_address\030\005 \001(\t:\007default\022\035\n\021info_service"
    "_port\030\006 \001(\005:\002-1\022\034\n\020info_service_pid\030\007 \001("
    "\005:\002-1\022\037\n\023info_service_module\030\010 \001(\005:\002-1\022,"
    "\n\033info_mq_consumer_queue_name\030\t \001(\t:\007def"
    "ault\022\034\n\013status_node\030\n \001(\t:\007default\022 \n\017st"
    "atus_check_id\030\013 \001(\t:\007default\022\034\n\013status_n"
    "ame\030\014 \001(\t:\007default\022\036\n\rstatus_status\030\r \001("
    "\t:\007default\022\035\n\014status_notes\030\016 \001(\t:\007defaul"
    "t\022\036\n\rstatus_output\030\017 \001(\t:\007default\022\"\n\021sta"
    "tus_service_id\030\020 \001(\t:\007default\022$\n\023status_"
    "service_name\030\021 \001(\t:\007default\022>\n\rregisterm"
    "odel\030\022 \003(\0132\'.com.arges.file.proto.Regist"
    "erModelInfo\"W\n\022ReqServiceRegister\022A\n\013ser"
    "viceInfo\030\001 \002(\0132,.com.arges.file.proto.Se"
    "rviceInfoForRegister\"Q\n\022RspServiceRegist"
    "er\022\022\n\006result\030\001 \001(\005:\002-1\022\031\n\010describe\030\002 \001(\t"
    ":\007default\022\014\n\002id\030\003 \001(\t:\000\"\036\n\020ReqServiceLog"
    "out\022\n\n\002id\030\001 \003(\t\"A\n\020RspServiceLogout\022\022\n\006r"
    "esult\030\001 \001(\005:\002-1\022\031\n\010describe\030\002 \001(\t:\007defau"
    "lt\"\311\003\n\026ReqServiceInfoForQuery\022\021\n\tinfo_no"
    "de\030\001 \003(\t\022\024\n\014info_address\030\002 \003(\t\022\027\n\017info_s"
    "ervice_id\030\003 \003(\t\022\031\n\021info_service_name\030\004 \003"
    "(\t\022\034\n\024info_service_address\030\005 \003(\t\022\031\n\021info"
    "_service_port\030\006 \003(\005\022\030\n\020info_service_pid\030"
    "\007 \003(\005\022\033\n\023info_service_module\030\010 \003(\005\022#\n\033in"
    "fo_mq_consumer_queue_name\030\t \003(\t\022\023\n\013statu"
    "s_node\030\n \003(\t\022\027\n\017status_check_id\030\013 \003(\t\022\023\n"
    "\013status_name\030\014 \003(\t\022\025\n\rstatus_status\030\r \003("
    "\t\022\024\n\014status_notes\030\016 \003(\t\022\025\n\rstatus_output"
    "\030\017 \003(\t\022\031\n\021status_service_id\030\020 \003(\t\022\033\n\023sta"
    "tus_service_name\030\021 \003(\t\"\\\n\026RspServiceInfo"
    "ForQuery\022B\n\014service_info\030\001 \003(\0132,.com.arg"
    "es.file.proto.ServiceInfoForRegister", 1596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceRegisterBean.proto", &protobuf_RegisterTypes);
  RegisterModelInfo::_default_ip_ =
      new ::std::string("default", 7);
  RegisterModelInfo::default_instance_ = new RegisterModelInfo();
  ServiceInfoForRegister::_default_info_node_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_info_address_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_info_service_id_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_info_service_name_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_info_service_address_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_info_mq_consumer_queue_name_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_node_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_check_id_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_name_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_status_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_notes_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_output_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_service_id_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::_default_status_service_name_ =
      new ::std::string("default", 7);
  ServiceInfoForRegister::default_instance_ = new ServiceInfoForRegister();
  ReqServiceRegister::default_instance_ = new ReqServiceRegister();
  RspServiceRegister::_default_describe_ =
      new ::std::string("default", 7);
  RspServiceRegister::default_instance_ = new RspServiceRegister();
  ReqServiceLogout::default_instance_ = new ReqServiceLogout();
  RspServiceLogout::_default_describe_ =
      new ::std::string("default", 7);
  RspServiceLogout::default_instance_ = new RspServiceLogout();
  ReqServiceInfoForQuery::default_instance_ = new ReqServiceInfoForQuery();
  RspServiceInfoForQuery::default_instance_ = new RspServiceInfoForQuery();
  RegisterModelInfo::default_instance_->InitAsDefaultInstance();
  ServiceInfoForRegister::default_instance_->InitAsDefaultInstance();
  ReqServiceRegister::default_instance_->InitAsDefaultInstance();
  RspServiceRegister::default_instance_->InitAsDefaultInstance();
  ReqServiceLogout::default_instance_->InitAsDefaultInstance();
  RspServiceLogout::default_instance_->InitAsDefaultInstance();
  ReqServiceInfoForQuery::default_instance_->InitAsDefaultInstance();
  RspServiceInfoForQuery::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceRegisterBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceRegisterBean_2eproto {
  StaticDescriptorInitializer_ServiceRegisterBean_2eproto() {
    protobuf_AddDesc_ServiceRegisterBean_2eproto();
  }
} static_descriptor_initializer_ServiceRegisterBean_2eproto_;

// ===================================================================

::std::string* RegisterModelInfo::_default_ip_ = NULL;
#ifndef _MSC_VER
const int RegisterModelInfo::kIpFieldNumber;
const int RegisterModelInfo::kPortFieldNumber;
#endif  // !_MSC_VER

RegisterModelInfo::RegisterModelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RegisterModelInfo)
}

void RegisterModelInfo::InitAsDefaultInstance() {
}

RegisterModelInfo::RegisterModelInfo(const RegisterModelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RegisterModelInfo)
}

void RegisterModelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(_default_ip_);
  port_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterModelInfo::~RegisterModelInfo() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RegisterModelInfo)
  SharedDtor();
}

void RegisterModelInfo::SharedDtor() {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RegisterModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterModelInfo_descriptor_;
}

const RegisterModelInfo& RegisterModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

RegisterModelInfo* RegisterModelInfo::default_instance_ = NULL;

RegisterModelInfo* RegisterModelInfo::New() const {
  return new RegisterModelInfo;
}

void RegisterModelInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != _default_ip_) {
        ip_->assign(*_default_ip_);
      }
    }
    port_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RegisterModelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RegisterModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RegisterModelInfo)
  return false;
#undef DO_
}

void RegisterModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RegisterModelInfo)
  // optional string ip = 1 [default = "default"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RegisterModelInfo)
}

::google::protobuf::uint8* RegisterModelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RegisterModelInfo)
  // optional string ip = 1 [default = "default"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RegisterModelInfo)
  return target;
}

int RegisterModelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1 [default = "default"];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterModelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterModelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterModelInfo::MergeFrom(const RegisterModelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterModelInfo::CopyFrom(const RegisterModelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterModelInfo::IsInitialized() const {

  return true;
}

void RegisterModelInfo::Swap(RegisterModelInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterModelInfo_descriptor_;
  metadata.reflection = RegisterModelInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ServiceInfoForRegister::_default_info_node_ = NULL;
::std::string* ServiceInfoForRegister::_default_info_address_ = NULL;
::std::string* ServiceInfoForRegister::_default_info_service_id_ = NULL;
::std::string* ServiceInfoForRegister::_default_info_service_name_ = NULL;
::std::string* ServiceInfoForRegister::_default_info_service_address_ = NULL;
::std::string* ServiceInfoForRegister::_default_info_mq_consumer_queue_name_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_node_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_check_id_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_name_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_status_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_notes_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_output_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_service_id_ = NULL;
::std::string* ServiceInfoForRegister::_default_status_service_name_ = NULL;
#ifndef _MSC_VER
const int ServiceInfoForRegister::kInfoNodeFieldNumber;
const int ServiceInfoForRegister::kInfoAddressFieldNumber;
const int ServiceInfoForRegister::kInfoServiceIdFieldNumber;
const int ServiceInfoForRegister::kInfoServiceNameFieldNumber;
const int ServiceInfoForRegister::kInfoServiceAddressFieldNumber;
const int ServiceInfoForRegister::kInfoServicePortFieldNumber;
const int ServiceInfoForRegister::kInfoServicePidFieldNumber;
const int ServiceInfoForRegister::kInfoServiceModuleFieldNumber;
const int ServiceInfoForRegister::kInfoMqConsumerQueueNameFieldNumber;
const int ServiceInfoForRegister::kStatusNodeFieldNumber;
const int ServiceInfoForRegister::kStatusCheckIdFieldNumber;
const int ServiceInfoForRegister::kStatusNameFieldNumber;
const int ServiceInfoForRegister::kStatusStatusFieldNumber;
const int ServiceInfoForRegister::kStatusNotesFieldNumber;
const int ServiceInfoForRegister::kStatusOutputFieldNumber;
const int ServiceInfoForRegister::kStatusServiceIdFieldNumber;
const int ServiceInfoForRegister::kStatusServiceNameFieldNumber;
const int ServiceInfoForRegister::kRegistermodelFieldNumber;
#endif  // !_MSC_VER

ServiceInfoForRegister::ServiceInfoForRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ServiceInfoForRegister)
}

void ServiceInfoForRegister::InitAsDefaultInstance() {
}

ServiceInfoForRegister::ServiceInfoForRegister(const ServiceInfoForRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ServiceInfoForRegister)
}

void ServiceInfoForRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_node_ = const_cast< ::std::string*>(_default_info_node_);
  info_address_ = const_cast< ::std::string*>(_default_info_address_);
  info_service_id_ = const_cast< ::std::string*>(_default_info_service_id_);
  info_service_name_ = const_cast< ::std::string*>(_default_info_service_name_);
  info_service_address_ = const_cast< ::std::string*>(_default_info_service_address_);
  info_service_port_ = -1;
  info_service_pid_ = -1;
  info_service_module_ = -1;
  info_mq_consumer_queue_name_ = const_cast< ::std::string*>(_default_info_mq_consumer_queue_name_);
  status_node_ = const_cast< ::std::string*>(_default_status_node_);
  status_check_id_ = const_cast< ::std::string*>(_default_status_check_id_);
  status_name_ = const_cast< ::std::string*>(_default_status_name_);
  status_status_ = const_cast< ::std::string*>(_default_status_status_);
  status_notes_ = const_cast< ::std::string*>(_default_status_notes_);
  status_output_ = const_cast< ::std::string*>(_default_status_output_);
  status_service_id_ = const_cast< ::std::string*>(_default_status_service_id_);
  status_service_name_ = const_cast< ::std::string*>(_default_status_service_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceInfoForRegister::~ServiceInfoForRegister() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ServiceInfoForRegister)
  SharedDtor();
}

void ServiceInfoForRegister::SharedDtor() {
  if (info_node_ != _default_info_node_) {
    delete info_node_;
  }
  if (info_address_ != _default_info_address_) {
    delete info_address_;
  }
  if (info_service_id_ != _default_info_service_id_) {
    delete info_service_id_;
  }
  if (info_service_name_ != _default_info_service_name_) {
    delete info_service_name_;
  }
  if (info_service_address_ != _default_info_service_address_) {
    delete info_service_address_;
  }
  if (info_mq_consumer_queue_name_ != _default_info_mq_consumer_queue_name_) {
    delete info_mq_consumer_queue_name_;
  }
  if (status_node_ != _default_status_node_) {
    delete status_node_;
  }
  if (status_check_id_ != _default_status_check_id_) {
    delete status_check_id_;
  }
  if (status_name_ != _default_status_name_) {
    delete status_name_;
  }
  if (status_status_ != _default_status_status_) {
    delete status_status_;
  }
  if (status_notes_ != _default_status_notes_) {
    delete status_notes_;
  }
  if (status_output_ != _default_status_output_) {
    delete status_output_;
  }
  if (status_service_id_ != _default_status_service_id_) {
    delete status_service_id_;
  }
  if (status_service_name_ != _default_status_service_name_) {
    delete status_service_name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceInfoForRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfoForRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfoForRegister_descriptor_;
}

const ServiceInfoForRegister& ServiceInfoForRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

ServiceInfoForRegister* ServiceInfoForRegister::default_instance_ = NULL;

ServiceInfoForRegister* ServiceInfoForRegister::New() const {
  return new ServiceInfoForRegister;
}

void ServiceInfoForRegister::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_info_node()) {
      if (info_node_ != _default_info_node_) {
        info_node_->assign(*_default_info_node_);
      }
    }
    if (has_info_address()) {
      if (info_address_ != _default_info_address_) {
        info_address_->assign(*_default_info_address_);
      }
    }
    if (has_info_service_id()) {
      if (info_service_id_ != _default_info_service_id_) {
        info_service_id_->assign(*_default_info_service_id_);
      }
    }
    if (has_info_service_name()) {
      if (info_service_name_ != _default_info_service_name_) {
        info_service_name_->assign(*_default_info_service_name_);
      }
    }
    if (has_info_service_address()) {
      if (info_service_address_ != _default_info_service_address_) {
        info_service_address_->assign(*_default_info_service_address_);
      }
    }
    info_service_port_ = -1;
    info_service_pid_ = -1;
    info_service_module_ = -1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_info_mq_consumer_queue_name()) {
      if (info_mq_consumer_queue_name_ != _default_info_mq_consumer_queue_name_) {
        info_mq_consumer_queue_name_->assign(*_default_info_mq_consumer_queue_name_);
      }
    }
    if (has_status_node()) {
      if (status_node_ != _default_status_node_) {
        status_node_->assign(*_default_status_node_);
      }
    }
    if (has_status_check_id()) {
      if (status_check_id_ != _default_status_check_id_) {
        status_check_id_->assign(*_default_status_check_id_);
      }
    }
    if (has_status_name()) {
      if (status_name_ != _default_status_name_) {
        status_name_->assign(*_default_status_name_);
      }
    }
    if (has_status_status()) {
      if (status_status_ != _default_status_status_) {
        status_status_->assign(*_default_status_status_);
      }
    }
    if (has_status_notes()) {
      if (status_notes_ != _default_status_notes_) {
        status_notes_->assign(*_default_status_notes_);
      }
    }
    if (has_status_output()) {
      if (status_output_ != _default_status_output_) {
        status_output_->assign(*_default_status_output_);
      }
    }
    if (has_status_service_id()) {
      if (status_service_id_ != _default_status_service_id_) {
        status_service_id_->assign(*_default_status_service_id_);
      }
    }
  }
  if (has_status_service_name()) {
    if (status_service_name_ != _default_status_service_name_) {
      status_service_name_->assign(*_default_status_service_name_);
    }
  }
  registermodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceInfoForRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ServiceInfoForRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info_node = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_node().data(), this->info_node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info_address;
        break;
      }

      // optional string info_address = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_info_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_address().data(), this->info_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info_service_id;
        break;
      }

      // optional string info_service_id = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_info_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_id().data(), this->info_service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info_service_name;
        break;
      }

      // optional string info_service_name = 4 [default = "default"];
      case 4: {
        if (tag == 34) {
         parse_info_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_name().data(), this->info_service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info_service_address;
        break;
      }

      // optional string info_service_address = 5 [default = "default"];
      case 5: {
        if (tag == 42) {
         parse_info_service_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_service_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_address().data(), this->info_service_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_info_service_port;
        break;
      }

      // optional int32 info_service_port = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_info_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_service_port_)));
          set_has_info_service_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_info_service_pid;
        break;
      }

      // optional int32 info_service_pid = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_info_service_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_service_pid_)));
          set_has_info_service_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_info_service_module;
        break;
      }

      // optional int32 info_service_module = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_info_service_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_service_module_)));
          set_has_info_service_module();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_info_mq_consumer_queue_name;
        break;
      }

      // optional string info_mq_consumer_queue_name = 9 [default = "default"];
      case 9: {
        if (tag == 74) {
         parse_info_mq_consumer_queue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_mq_consumer_queue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_mq_consumer_queue_name().data(), this->info_mq_consumer_queue_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_mq_consumer_queue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_status_node;
        break;
      }

      // optional string status_node = 10 [default = "default"];
      case 10: {
        if (tag == 82) {
         parse_status_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_node().data(), this->status_node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_status_check_id;
        break;
      }

      // optional string status_check_id = 11 [default = "default"];
      case 11: {
        if (tag == 90) {
         parse_status_check_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_check_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_check_id().data(), this->status_check_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_check_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_status_name;
        break;
      }

      // optional string status_name = 12 [default = "default"];
      case 12: {
        if (tag == 98) {
         parse_status_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_name().data(), this->status_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_status_status;
        break;
      }

      // optional string status_status = 13 [default = "default"];
      case 13: {
        if (tag == 106) {
         parse_status_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_status().data(), this->status_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_status_notes;
        break;
      }

      // optional string status_notes = 14 [default = "default"];
      case 14: {
        if (tag == 114) {
         parse_status_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_notes().data(), this->status_notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_notes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_status_output;
        break;
      }

      // optional string status_output = 15 [default = "default"];
      case 15: {
        if (tag == 122) {
         parse_status_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_output().data(), this->status_output().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_output");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_status_service_id;
        break;
      }

      // optional string status_service_id = 16 [default = "default"];
      case 16: {
        if (tag == 130) {
         parse_status_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_service_id().data(), this->status_service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_service_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_status_service_name;
        break;
      }

      // optional string status_service_name = 17 [default = "default"];
      case 17: {
        if (tag == 138) {
         parse_status_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_service_name().data(), this->status_service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_registermodel;
        break;
      }

      // repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
      case 18: {
        if (tag == 146) {
         parse_registermodel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_registermodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_registermodel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ServiceInfoForRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ServiceInfoForRegister)
  return false;
#undef DO_
}

void ServiceInfoForRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ServiceInfoForRegister)
  // optional string info_node = 1 [default = "default"];
  if (has_info_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_node().data(), this->info_node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_node(), output);
  }

  // optional string info_address = 2 [default = "default"];
  if (has_info_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_address().data(), this->info_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info_address(), output);
  }

  // optional string info_service_id = 3 [default = "default"];
  if (has_info_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_id().data(), this->info_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info_service_id(), output);
  }

  // optional string info_service_name = 4 [default = "default"];
  if (has_info_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_name().data(), this->info_service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info_service_name(), output);
  }

  // optional string info_service_address = 5 [default = "default"];
  if (has_info_service_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_address().data(), this->info_service_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->info_service_address(), output);
  }

  // optional int32 info_service_port = 6 [default = -1];
  if (has_info_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->info_service_port(), output);
  }

  // optional int32 info_service_pid = 7 [default = -1];
  if (has_info_service_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->info_service_pid(), output);
  }

  // optional int32 info_service_module = 8 [default = -1];
  if (has_info_service_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->info_service_module(), output);
  }

  // optional string info_mq_consumer_queue_name = 9 [default = "default"];
  if (has_info_mq_consumer_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_mq_consumer_queue_name().data(), this->info_mq_consumer_queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_mq_consumer_queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->info_mq_consumer_queue_name(), output);
  }

  // optional string status_node = 10 [default = "default"];
  if (has_status_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_node().data(), this->status_node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->status_node(), output);
  }

  // optional string status_check_id = 11 [default = "default"];
  if (has_status_check_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_check_id().data(), this->status_check_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_check_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->status_check_id(), output);
  }

  // optional string status_name = 12 [default = "default"];
  if (has_status_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_name().data(), this->status_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->status_name(), output);
  }

  // optional string status_status = 13 [default = "default"];
  if (has_status_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_status().data(), this->status_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->status_status(), output);
  }

  // optional string status_notes = 14 [default = "default"];
  if (has_status_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_notes().data(), this->status_notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->status_notes(), output);
  }

  // optional string status_output = 15 [default = "default"];
  if (has_status_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_output().data(), this->status_output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->status_output(), output);
  }

  // optional string status_service_id = 16 [default = "default"];
  if (has_status_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_id().data(), this->status_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->status_service_id(), output);
  }

  // optional string status_service_name = 17 [default = "default"];
  if (has_status_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_name().data(), this->status_service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->status_service_name(), output);
  }

  // repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
  for (int i = 0; i < this->registermodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->registermodel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ServiceInfoForRegister)
}

::google::protobuf::uint8* ServiceInfoForRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ServiceInfoForRegister)
  // optional string info_node = 1 [default = "default"];
  if (has_info_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_node().data(), this->info_node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_node(), target);
  }

  // optional string info_address = 2 [default = "default"];
  if (has_info_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_address().data(), this->info_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info_address(), target);
  }

  // optional string info_service_id = 3 [default = "default"];
  if (has_info_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_id().data(), this->info_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info_service_id(), target);
  }

  // optional string info_service_name = 4 [default = "default"];
  if (has_info_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_name().data(), this->info_service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info_service_name(), target);
  }

  // optional string info_service_address = 5 [default = "default"];
  if (has_info_service_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_address().data(), this->info_service_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->info_service_address(), target);
  }

  // optional int32 info_service_port = 6 [default = -1];
  if (has_info_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->info_service_port(), target);
  }

  // optional int32 info_service_pid = 7 [default = -1];
  if (has_info_service_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->info_service_pid(), target);
  }

  // optional int32 info_service_module = 8 [default = -1];
  if (has_info_service_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->info_service_module(), target);
  }

  // optional string info_mq_consumer_queue_name = 9 [default = "default"];
  if (has_info_mq_consumer_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_mq_consumer_queue_name().data(), this->info_mq_consumer_queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_mq_consumer_queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->info_mq_consumer_queue_name(), target);
  }

  // optional string status_node = 10 [default = "default"];
  if (has_status_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_node().data(), this->status_node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->status_node(), target);
  }

  // optional string status_check_id = 11 [default = "default"];
  if (has_status_check_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_check_id().data(), this->status_check_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_check_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->status_check_id(), target);
  }

  // optional string status_name = 12 [default = "default"];
  if (has_status_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_name().data(), this->status_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->status_name(), target);
  }

  // optional string status_status = 13 [default = "default"];
  if (has_status_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_status().data(), this->status_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->status_status(), target);
  }

  // optional string status_notes = 14 [default = "default"];
  if (has_status_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_notes().data(), this->status_notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->status_notes(), target);
  }

  // optional string status_output = 15 [default = "default"];
  if (has_status_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_output().data(), this->status_output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->status_output(), target);
  }

  // optional string status_service_id = 16 [default = "default"];
  if (has_status_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_id().data(), this->status_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->status_service_id(), target);
  }

  // optional string status_service_name = 17 [default = "default"];
  if (has_status_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_name().data(), this->status_service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->status_service_name(), target);
  }

  // repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
  for (int i = 0; i < this->registermodel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->registermodel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ServiceInfoForRegister)
  return target;
}

int ServiceInfoForRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info_node = 1 [default = "default"];
    if (has_info_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_node());
    }

    // optional string info_address = 2 [default = "default"];
    if (has_info_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_address());
    }

    // optional string info_service_id = 3 [default = "default"];
    if (has_info_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_service_id());
    }

    // optional string info_service_name = 4 [default = "default"];
    if (has_info_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_service_name());
    }

    // optional string info_service_address = 5 [default = "default"];
    if (has_info_service_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_service_address());
    }

    // optional int32 info_service_port = 6 [default = -1];
    if (has_info_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_service_port());
    }

    // optional int32 info_service_pid = 7 [default = -1];
    if (has_info_service_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_service_pid());
    }

    // optional int32 info_service_module = 8 [default = -1];
    if (has_info_service_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_service_module());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string info_mq_consumer_queue_name = 9 [default = "default"];
    if (has_info_mq_consumer_queue_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_mq_consumer_queue_name());
    }

    // optional string status_node = 10 [default = "default"];
    if (has_status_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_node());
    }

    // optional string status_check_id = 11 [default = "default"];
    if (has_status_check_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_check_id());
    }

    // optional string status_name = 12 [default = "default"];
    if (has_status_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_name());
    }

    // optional string status_status = 13 [default = "default"];
    if (has_status_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_status());
    }

    // optional string status_notes = 14 [default = "default"];
    if (has_status_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_notes());
    }

    // optional string status_output = 15 [default = "default"];
    if (has_status_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_output());
    }

    // optional string status_service_id = 16 [default = "default"];
    if (has_status_service_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_service_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string status_service_name = 17 [default = "default"];
    if (has_status_service_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_service_name());
    }

  }
  // repeated .com.arges.file.proto.RegisterModelInfo registermodel = 18;
  total_size += 2 * this->registermodel_size();
  for (int i = 0; i < this->registermodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->registermodel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfoForRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceInfoForRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceInfoForRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceInfoForRegister::MergeFrom(const ServiceInfoForRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  registermodel_.MergeFrom(from.registermodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_node()) {
      set_info_node(from.info_node());
    }
    if (from.has_info_address()) {
      set_info_address(from.info_address());
    }
    if (from.has_info_service_id()) {
      set_info_service_id(from.info_service_id());
    }
    if (from.has_info_service_name()) {
      set_info_service_name(from.info_service_name());
    }
    if (from.has_info_service_address()) {
      set_info_service_address(from.info_service_address());
    }
    if (from.has_info_service_port()) {
      set_info_service_port(from.info_service_port());
    }
    if (from.has_info_service_pid()) {
      set_info_service_pid(from.info_service_pid());
    }
    if (from.has_info_service_module()) {
      set_info_service_module(from.info_service_module());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_info_mq_consumer_queue_name()) {
      set_info_mq_consumer_queue_name(from.info_mq_consumer_queue_name());
    }
    if (from.has_status_node()) {
      set_status_node(from.status_node());
    }
    if (from.has_status_check_id()) {
      set_status_check_id(from.status_check_id());
    }
    if (from.has_status_name()) {
      set_status_name(from.status_name());
    }
    if (from.has_status_status()) {
      set_status_status(from.status_status());
    }
    if (from.has_status_notes()) {
      set_status_notes(from.status_notes());
    }
    if (from.has_status_output()) {
      set_status_output(from.status_output());
    }
    if (from.has_status_service_id()) {
      set_status_service_id(from.status_service_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_status_service_name()) {
      set_status_service_name(from.status_service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceInfoForRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfoForRegister::CopyFrom(const ServiceInfoForRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfoForRegister::IsInitialized() const {

  return true;
}

void ServiceInfoForRegister::Swap(ServiceInfoForRegister* other) {
  if (other != this) {
    std::swap(info_node_, other->info_node_);
    std::swap(info_address_, other->info_address_);
    std::swap(info_service_id_, other->info_service_id_);
    std::swap(info_service_name_, other->info_service_name_);
    std::swap(info_service_address_, other->info_service_address_);
    std::swap(info_service_port_, other->info_service_port_);
    std::swap(info_service_pid_, other->info_service_pid_);
    std::swap(info_service_module_, other->info_service_module_);
    std::swap(info_mq_consumer_queue_name_, other->info_mq_consumer_queue_name_);
    std::swap(status_node_, other->status_node_);
    std::swap(status_check_id_, other->status_check_id_);
    std::swap(status_name_, other->status_name_);
    std::swap(status_status_, other->status_status_);
    std::swap(status_notes_, other->status_notes_);
    std::swap(status_output_, other->status_output_);
    std::swap(status_service_id_, other->status_service_id_);
    std::swap(status_service_name_, other->status_service_name_);
    registermodel_.Swap(&other->registermodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceInfoForRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfoForRegister_descriptor_;
  metadata.reflection = ServiceInfoForRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServiceRegister::kServiceInfoFieldNumber;
#endif  // !_MSC_VER

ReqServiceRegister::ReqServiceRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqServiceRegister)
}

void ReqServiceRegister::InitAsDefaultInstance() {
  serviceinfo_ = const_cast< ::com::arges::file::proto::ServiceInfoForRegister*>(&::com::arges::file::proto::ServiceInfoForRegister::default_instance());
}

ReqServiceRegister::ReqServiceRegister(const ReqServiceRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqServiceRegister)
}

void ReqServiceRegister::SharedCtor() {
  _cached_size_ = 0;
  serviceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServiceRegister::~ReqServiceRegister() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqServiceRegister)
  SharedDtor();
}

void ReqServiceRegister::SharedDtor() {
  if (this != default_instance_) {
    delete serviceinfo_;
  }
}

void ReqServiceRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServiceRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServiceRegister_descriptor_;
}

const ReqServiceRegister& ReqServiceRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

ReqServiceRegister* ReqServiceRegister::default_instance_ = NULL;

ReqServiceRegister* ReqServiceRegister::New() const {
  return new ReqServiceRegister;
}

void ReqServiceRegister::Clear() {
  if (has_serviceinfo()) {
    if (serviceinfo_ != NULL) serviceinfo_->::com::arges::file::proto::ServiceInfoForRegister::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServiceRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqServiceRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqServiceRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqServiceRegister)
  return false;
#undef DO_
}

void ReqServiceRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqServiceRegister)
  // required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
  if (has_serviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqServiceRegister)
}

::google::protobuf::uint8* ReqServiceRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqServiceRegister)
  // required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
  if (has_serviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqServiceRegister)
  return target;
}

int ReqServiceRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.arges.file.proto.ServiceInfoForRegister serviceInfo = 1;
    if (has_serviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServiceRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServiceRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServiceRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServiceRegister::MergeFrom(const ReqServiceRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceinfo()) {
      mutable_serviceinfo()->::com::arges::file::proto::ServiceInfoForRegister::MergeFrom(from.serviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServiceRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServiceRegister::CopyFrom(const ReqServiceRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServiceRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqServiceRegister::Swap(ReqServiceRegister* other) {
  if (other != this) {
    std::swap(serviceinfo_, other->serviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServiceRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServiceRegister_descriptor_;
  metadata.reflection = ReqServiceRegister_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspServiceRegister::_default_describe_ = NULL;
#ifndef _MSC_VER
const int RspServiceRegister::kResultFieldNumber;
const int RspServiceRegister::kDescribeFieldNumber;
const int RspServiceRegister::kIdFieldNumber;
#endif  // !_MSC_VER

RspServiceRegister::RspServiceRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspServiceRegister)
}

void RspServiceRegister::InitAsDefaultInstance() {
}

RspServiceRegister::RspServiceRegister(const RspServiceRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspServiceRegister)
}

void RspServiceRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  describe_ = const_cast< ::std::string*>(_default_describe_);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspServiceRegister::~RspServiceRegister() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspServiceRegister)
  SharedDtor();
}

void RspServiceRegister::SharedDtor() {
  if (describe_ != _default_describe_) {
    delete describe_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RspServiceRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspServiceRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspServiceRegister_descriptor_;
}

const RspServiceRegister& RspServiceRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

RspServiceRegister* RspServiceRegister::default_instance_ = NULL;

RspServiceRegister* RspServiceRegister::New() const {
  return new RspServiceRegister;
}

void RspServiceRegister::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = -1;
    if (has_describe()) {
      if (describe_ != _default_describe_) {
        describe_->assign(*_default_describe_);
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspServiceRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspServiceRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_describe;
        break;
      }

      // optional string describe = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspServiceRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspServiceRegister)
  return false;
#undef DO_
}

void RspServiceRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspServiceRegister)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string describe = 2 [default = "default"];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->describe(), output);
  }

  // optional string id = 3 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspServiceRegister)
}

::google::protobuf::uint8* RspServiceRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspServiceRegister)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string describe = 2 [default = "default"];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->describe(), target);
  }

  // optional string id = 3 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspServiceRegister)
  return target;
}

int RspServiceRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string describe = 2 [default = "default"];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional string id = 3 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspServiceRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspServiceRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspServiceRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspServiceRegister::MergeFrom(const RspServiceRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspServiceRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspServiceRegister::CopyFrom(const RspServiceRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspServiceRegister::IsInitialized() const {

  return true;
}

void RspServiceRegister::Swap(RspServiceRegister* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(describe_, other->describe_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspServiceRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspServiceRegister_descriptor_;
  metadata.reflection = RspServiceRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServiceLogout::kIdFieldNumber;
#endif  // !_MSC_VER

ReqServiceLogout::ReqServiceLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqServiceLogout)
}

void ReqServiceLogout::InitAsDefaultInstance() {
}

ReqServiceLogout::ReqServiceLogout(const ReqServiceLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqServiceLogout)
}

void ReqServiceLogout::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServiceLogout::~ReqServiceLogout() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqServiceLogout)
  SharedDtor();
}

void ReqServiceLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqServiceLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServiceLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServiceLogout_descriptor_;
}

const ReqServiceLogout& ReqServiceLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

ReqServiceLogout* ReqServiceLogout::default_instance_ = NULL;

ReqServiceLogout* ReqServiceLogout::New() const {
  return new ReqServiceLogout;
}

void ReqServiceLogout::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServiceLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqServiceLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string id = 1;
      case 1: {
        if (tag == 10) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqServiceLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqServiceLogout)
  return false;
#undef DO_
}

void ReqServiceLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqServiceLogout)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqServiceLogout)
}

::google::protobuf::uint8* ReqServiceLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqServiceLogout)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqServiceLogout)
  return target;
}

int ReqServiceLogout::ByteSize() const {
  int total_size = 0;

  // repeated string id = 1;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServiceLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServiceLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServiceLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServiceLogout::MergeFrom(const ReqServiceLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServiceLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServiceLogout::CopyFrom(const ReqServiceLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServiceLogout::IsInitialized() const {

  return true;
}

void ReqServiceLogout::Swap(ReqServiceLogout* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServiceLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServiceLogout_descriptor_;
  metadata.reflection = ReqServiceLogout_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RspServiceLogout::_default_describe_ = NULL;
#ifndef _MSC_VER
const int RspServiceLogout::kResultFieldNumber;
const int RspServiceLogout::kDescribeFieldNumber;
#endif  // !_MSC_VER

RspServiceLogout::RspServiceLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspServiceLogout)
}

void RspServiceLogout::InitAsDefaultInstance() {
}

RspServiceLogout::RspServiceLogout(const RspServiceLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspServiceLogout)
}

void RspServiceLogout::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = -1;
  describe_ = const_cast< ::std::string*>(_default_describe_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspServiceLogout::~RspServiceLogout() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspServiceLogout)
  SharedDtor();
}

void RspServiceLogout::SharedDtor() {
  if (describe_ != _default_describe_) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void RspServiceLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspServiceLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspServiceLogout_descriptor_;
}

const RspServiceLogout& RspServiceLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

RspServiceLogout* RspServiceLogout::default_instance_ = NULL;

RspServiceLogout* RspServiceLogout::New() const {
  return new RspServiceLogout;
}

void RspServiceLogout::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = -1;
    if (has_describe()) {
      if (describe_ != _default_describe_) {
        describe_->assign(*_default_describe_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspServiceLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspServiceLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_describe;
        break;
      }

      // optional string describe = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspServiceLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspServiceLogout)
  return false;
#undef DO_
}

void RspServiceLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspServiceLogout)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string describe = 2 [default = "default"];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->describe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspServiceLogout)
}

::google::protobuf::uint8* RspServiceLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspServiceLogout)
  // optional int32 result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string describe = 2 [default = "default"];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->describe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspServiceLogout)
  return target;
}

int RspServiceLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string describe = 2 [default = "default"];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspServiceLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspServiceLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspServiceLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspServiceLogout::MergeFrom(const RspServiceLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspServiceLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspServiceLogout::CopyFrom(const RspServiceLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspServiceLogout::IsInitialized() const {

  return true;
}

void RspServiceLogout::Swap(RspServiceLogout* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspServiceLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspServiceLogout_descriptor_;
  metadata.reflection = RspServiceLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServiceInfoForQuery::kInfoNodeFieldNumber;
const int ReqServiceInfoForQuery::kInfoAddressFieldNumber;
const int ReqServiceInfoForQuery::kInfoServiceIdFieldNumber;
const int ReqServiceInfoForQuery::kInfoServiceNameFieldNumber;
const int ReqServiceInfoForQuery::kInfoServiceAddressFieldNumber;
const int ReqServiceInfoForQuery::kInfoServicePortFieldNumber;
const int ReqServiceInfoForQuery::kInfoServicePidFieldNumber;
const int ReqServiceInfoForQuery::kInfoServiceModuleFieldNumber;
const int ReqServiceInfoForQuery::kInfoMqConsumerQueueNameFieldNumber;
const int ReqServiceInfoForQuery::kStatusNodeFieldNumber;
const int ReqServiceInfoForQuery::kStatusCheckIdFieldNumber;
const int ReqServiceInfoForQuery::kStatusNameFieldNumber;
const int ReqServiceInfoForQuery::kStatusStatusFieldNumber;
const int ReqServiceInfoForQuery::kStatusNotesFieldNumber;
const int ReqServiceInfoForQuery::kStatusOutputFieldNumber;
const int ReqServiceInfoForQuery::kStatusServiceIdFieldNumber;
const int ReqServiceInfoForQuery::kStatusServiceNameFieldNumber;
#endif  // !_MSC_VER

ReqServiceInfoForQuery::ReqServiceInfoForQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqServiceInfoForQuery)
}

void ReqServiceInfoForQuery::InitAsDefaultInstance() {
}

ReqServiceInfoForQuery::ReqServiceInfoForQuery(const ReqServiceInfoForQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqServiceInfoForQuery)
}

void ReqServiceInfoForQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServiceInfoForQuery::~ReqServiceInfoForQuery() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqServiceInfoForQuery)
  SharedDtor();
}

void ReqServiceInfoForQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqServiceInfoForQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServiceInfoForQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServiceInfoForQuery_descriptor_;
}

const ReqServiceInfoForQuery& ReqServiceInfoForQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

ReqServiceInfoForQuery* ReqServiceInfoForQuery::default_instance_ = NULL;

ReqServiceInfoForQuery* ReqServiceInfoForQuery::New() const {
  return new ReqServiceInfoForQuery;
}

void ReqServiceInfoForQuery::Clear() {
  info_node_.Clear();
  info_address_.Clear();
  info_service_id_.Clear();
  info_service_name_.Clear();
  info_service_address_.Clear();
  info_service_port_.Clear();
  info_service_pid_.Clear();
  info_service_module_.Clear();
  info_mq_consumer_queue_name_.Clear();
  status_node_.Clear();
  status_check_id_.Clear();
  status_name_.Clear();
  status_status_.Clear();
  status_notes_.Clear();
  status_output_.Clear();
  status_service_id_.Clear();
  status_service_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServiceInfoForQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqServiceInfoForQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string info_node = 1;
      case 1: {
        if (tag == 10) {
         parse_info_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_node(this->info_node_size() - 1).data(),
            this->info_node(this->info_node_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info_node;
        if (input->ExpectTag(18)) goto parse_info_address;
        break;
      }

      // repeated string info_address = 2;
      case 2: {
        if (tag == 18) {
         parse_info_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_address(this->info_address_size() - 1).data(),
            this->info_address(this->info_address_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info_address;
        if (input->ExpectTag(26)) goto parse_info_service_id;
        break;
      }

      // repeated string info_service_id = 3;
      case 3: {
        if (tag == 26) {
         parse_info_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_id(this->info_service_id_size() - 1).data(),
            this->info_service_id(this->info_service_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info_service_id;
        if (input->ExpectTag(34)) goto parse_info_service_name;
        break;
      }

      // repeated string info_service_name = 4;
      case 4: {
        if (tag == 34) {
         parse_info_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_name(this->info_service_name_size() - 1).data(),
            this->info_service_name(this->info_service_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info_service_name;
        if (input->ExpectTag(42)) goto parse_info_service_address;
        break;
      }

      // repeated string info_service_address = 5;
      case 5: {
        if (tag == 42) {
         parse_info_service_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_service_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_service_address(this->info_service_address_size() - 1).data(),
            this->info_service_address(this->info_service_address_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_service_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info_service_address;
        if (input->ExpectTag(48)) goto parse_info_service_port;
        break;
      }

      // repeated int32 info_service_port = 6;
      case 6: {
        if (tag == 48) {
         parse_info_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_info_service_port())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_info_service_port())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_info_service_port;
        if (input->ExpectTag(56)) goto parse_info_service_pid;
        break;
      }

      // repeated int32 info_service_pid = 7;
      case 7: {
        if (tag == 56) {
         parse_info_service_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_info_service_pid())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_info_service_pid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_info_service_pid;
        if (input->ExpectTag(64)) goto parse_info_service_module;
        break;
      }

      // repeated int32 info_service_module = 8;
      case 8: {
        if (tag == 64) {
         parse_info_service_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_info_service_module())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_info_service_module())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_info_service_module;
        if (input->ExpectTag(74)) goto parse_info_mq_consumer_queue_name;
        break;
      }

      // repeated string info_mq_consumer_queue_name = 9;
      case 9: {
        if (tag == 74) {
         parse_info_mq_consumer_queue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info_mq_consumer_queue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_mq_consumer_queue_name(this->info_mq_consumer_queue_name_size() - 1).data(),
            this->info_mq_consumer_queue_name(this->info_mq_consumer_queue_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_mq_consumer_queue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_info_mq_consumer_queue_name;
        if (input->ExpectTag(82)) goto parse_status_node;
        break;
      }

      // repeated string status_node = 10;
      case 10: {
        if (tag == 82) {
         parse_status_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_node(this->status_node_size() - 1).data(),
            this->status_node(this->status_node_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_status_node;
        if (input->ExpectTag(90)) goto parse_status_check_id;
        break;
      }

      // repeated string status_check_id = 11;
      case 11: {
        if (tag == 90) {
         parse_status_check_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_check_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_check_id(this->status_check_id_size() - 1).data(),
            this->status_check_id(this->status_check_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_check_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_status_check_id;
        if (input->ExpectTag(98)) goto parse_status_name;
        break;
      }

      // repeated string status_name = 12;
      case 12: {
        if (tag == 98) {
         parse_status_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_name(this->status_name_size() - 1).data(),
            this->status_name(this->status_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_status_name;
        if (input->ExpectTag(106)) goto parse_status_status;
        break;
      }

      // repeated string status_status = 13;
      case 13: {
        if (tag == 106) {
         parse_status_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_status(this->status_status_size() - 1).data(),
            this->status_status(this->status_status_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_status_status;
        if (input->ExpectTag(114)) goto parse_status_notes;
        break;
      }

      // repeated string status_notes = 14;
      case 14: {
        if (tag == 114) {
         parse_status_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_notes(this->status_notes_size() - 1).data(),
            this->status_notes(this->status_notes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_notes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_status_notes;
        if (input->ExpectTag(122)) goto parse_status_output;
        break;
      }

      // repeated string status_output = 15;
      case 15: {
        if (tag == 122) {
         parse_status_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_output(this->status_output_size() - 1).data(),
            this->status_output(this->status_output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_output");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_status_output;
        if (input->ExpectTag(130)) goto parse_status_service_id;
        break;
      }

      // repeated string status_service_id = 16;
      case 16: {
        if (tag == 130) {
         parse_status_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_service_id(this->status_service_id_size() - 1).data(),
            this->status_service_id(this->status_service_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_service_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_status_service_id;
        if (input->ExpectTag(138)) goto parse_status_service_name;
        break;
      }

      // repeated string status_service_name = 17;
      case 17: {
        if (tag == 138) {
         parse_status_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_service_name(this->status_service_name_size() - 1).data(),
            this->status_service_name(this->status_service_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_status_service_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqServiceInfoForQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqServiceInfoForQuery)
  return false;
#undef DO_
}

void ReqServiceInfoForQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqServiceInfoForQuery)
  // repeated string info_node = 1;
  for (int i = 0; i < this->info_node_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_node(i).data(), this->info_node(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_node");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info_node(i), output);
  }

  // repeated string info_address = 2;
  for (int i = 0; i < this->info_address_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_address(i).data(), this->info_address(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info_address(i), output);
  }

  // repeated string info_service_id = 3;
  for (int i = 0; i < this->info_service_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_service_id(i).data(), this->info_service_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->info_service_id(i), output);
  }

  // repeated string info_service_name = 4;
  for (int i = 0; i < this->info_service_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_service_name(i).data(), this->info_service_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_service_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->info_service_name(i), output);
  }

  // repeated string info_service_address = 5;
  for (int i = 0; i < this->info_service_address_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_service_address(i).data(), this->info_service_address(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_service_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->info_service_address(i), output);
  }

  // repeated int32 info_service_port = 6;
  for (int i = 0; i < this->info_service_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->info_service_port(i), output);
  }

  // repeated int32 info_service_pid = 7;
  for (int i = 0; i < this->info_service_pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->info_service_pid(i), output);
  }

  // repeated int32 info_service_module = 8;
  for (int i = 0; i < this->info_service_module_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->info_service_module(i), output);
  }

  // repeated string info_mq_consumer_queue_name = 9;
  for (int i = 0; i < this->info_mq_consumer_queue_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->info_mq_consumer_queue_name(i).data(), this->info_mq_consumer_queue_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "info_mq_consumer_queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->info_mq_consumer_queue_name(i), output);
  }

  // repeated string status_node = 10;
  for (int i = 0; i < this->status_node_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_node(i).data(), this->status_node(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_node");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->status_node(i), output);
  }

  // repeated string status_check_id = 11;
  for (int i = 0; i < this->status_check_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_check_id(i).data(), this->status_check_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_check_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->status_check_id(i), output);
  }

  // repeated string status_name = 12;
  for (int i = 0; i < this->status_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_name(i).data(), this->status_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->status_name(i), output);
  }

  // repeated string status_status = 13;
  for (int i = 0; i < this->status_status_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_status(i).data(), this->status_status(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_status");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->status_status(i), output);
  }

  // repeated string status_notes = 14;
  for (int i = 0; i < this->status_notes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_notes(i).data(), this->status_notes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_notes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->status_notes(i), output);
  }

  // repeated string status_output = 15;
  for (int i = 0; i < this->status_output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_output(i).data(), this->status_output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->status_output(i), output);
  }

  // repeated string status_service_id = 16;
  for (int i = 0; i < this->status_service_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_service_id(i).data(), this->status_service_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->status_service_id(i), output);
  }

  // repeated string status_service_name = 17;
  for (int i = 0; i < this->status_service_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->status_service_name(i).data(), this->status_service_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "status_service_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->status_service_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqServiceInfoForQuery)
}

::google::protobuf::uint8* ReqServiceInfoForQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqServiceInfoForQuery)
  // repeated string info_node = 1;
  for (int i = 0; i < this->info_node_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_node(i).data(), this->info_node(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_node");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->info_node(i), target);
  }

  // repeated string info_address = 2;
  for (int i = 0; i < this->info_address_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_address(i).data(), this->info_address(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_address");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->info_address(i), target);
  }

  // repeated string info_service_id = 3;
  for (int i = 0; i < this->info_service_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_id(i).data(), this->info_service_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->info_service_id(i), target);
  }

  // repeated string info_service_name = 4;
  for (int i = 0; i < this->info_service_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_name(i).data(), this->info_service_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->info_service_name(i), target);
  }

  // repeated string info_service_address = 5;
  for (int i = 0; i < this->info_service_address_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_service_address(i).data(), this->info_service_address(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_service_address");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->info_service_address(i), target);
  }

  // repeated int32 info_service_port = 6;
  for (int i = 0; i < this->info_service_port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->info_service_port(i), target);
  }

  // repeated int32 info_service_pid = 7;
  for (int i = 0; i < this->info_service_pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->info_service_pid(i), target);
  }

  // repeated int32 info_service_module = 8;
  for (int i = 0; i < this->info_service_module_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->info_service_module(i), target);
  }

  // repeated string info_mq_consumer_queue_name = 9;
  for (int i = 0; i < this->info_mq_consumer_queue_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_mq_consumer_queue_name(i).data(), this->info_mq_consumer_queue_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_mq_consumer_queue_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->info_mq_consumer_queue_name(i), target);
  }

  // repeated string status_node = 10;
  for (int i = 0; i < this->status_node_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_node(i).data(), this->status_node(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_node");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->status_node(i), target);
  }

  // repeated string status_check_id = 11;
  for (int i = 0; i < this->status_check_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_check_id(i).data(), this->status_check_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_check_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->status_check_id(i), target);
  }

  // repeated string status_name = 12;
  for (int i = 0; i < this->status_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_name(i).data(), this->status_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->status_name(i), target);
  }

  // repeated string status_status = 13;
  for (int i = 0; i < this->status_status_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_status(i).data(), this->status_status(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_status");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->status_status(i), target);
  }

  // repeated string status_notes = 14;
  for (int i = 0; i < this->status_notes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_notes(i).data(), this->status_notes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_notes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->status_notes(i), target);
  }

  // repeated string status_output = 15;
  for (int i = 0; i < this->status_output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_output(i).data(), this->status_output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->status_output(i), target);
  }

  // repeated string status_service_id = 16;
  for (int i = 0; i < this->status_service_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_id(i).data(), this->status_service_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->status_service_id(i), target);
  }

  // repeated string status_service_name = 17;
  for (int i = 0; i < this->status_service_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_service_name(i).data(), this->status_service_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_service_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->status_service_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqServiceInfoForQuery)
  return target;
}

int ReqServiceInfoForQuery::ByteSize() const {
  int total_size = 0;

  // repeated string info_node = 1;
  total_size += 1 * this->info_node_size();
  for (int i = 0; i < this->info_node_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_node(i));
  }

  // repeated string info_address = 2;
  total_size += 1 * this->info_address_size();
  for (int i = 0; i < this->info_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_address(i));
  }

  // repeated string info_service_id = 3;
  total_size += 1 * this->info_service_id_size();
  for (int i = 0; i < this->info_service_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_service_id(i));
  }

  // repeated string info_service_name = 4;
  total_size += 1 * this->info_service_name_size();
  for (int i = 0; i < this->info_service_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_service_name(i));
  }

  // repeated string info_service_address = 5;
  total_size += 1 * this->info_service_address_size();
  for (int i = 0; i < this->info_service_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_service_address(i));
  }

  // repeated int32 info_service_port = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->info_service_port_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->info_service_port(i));
    }
    total_size += 1 * this->info_service_port_size() + data_size;
  }

  // repeated int32 info_service_pid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->info_service_pid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->info_service_pid(i));
    }
    total_size += 1 * this->info_service_pid_size() + data_size;
  }

  // repeated int32 info_service_module = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->info_service_module_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->info_service_module(i));
    }
    total_size += 1 * this->info_service_module_size() + data_size;
  }

  // repeated string info_mq_consumer_queue_name = 9;
  total_size += 1 * this->info_mq_consumer_queue_name_size();
  for (int i = 0; i < this->info_mq_consumer_queue_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info_mq_consumer_queue_name(i));
  }

  // repeated string status_node = 10;
  total_size += 1 * this->status_node_size();
  for (int i = 0; i < this->status_node_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_node(i));
  }

  // repeated string status_check_id = 11;
  total_size += 1 * this->status_check_id_size();
  for (int i = 0; i < this->status_check_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_check_id(i));
  }

  // repeated string status_name = 12;
  total_size += 1 * this->status_name_size();
  for (int i = 0; i < this->status_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_name(i));
  }

  // repeated string status_status = 13;
  total_size += 1 * this->status_status_size();
  for (int i = 0; i < this->status_status_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_status(i));
  }

  // repeated string status_notes = 14;
  total_size += 1 * this->status_notes_size();
  for (int i = 0; i < this->status_notes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_notes(i));
  }

  // repeated string status_output = 15;
  total_size += 1 * this->status_output_size();
  for (int i = 0; i < this->status_output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_output(i));
  }

  // repeated string status_service_id = 16;
  total_size += 2 * this->status_service_id_size();
  for (int i = 0; i < this->status_service_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_service_id(i));
  }

  // repeated string status_service_name = 17;
  total_size += 2 * this->status_service_name_size();
  for (int i = 0; i < this->status_service_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status_service_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServiceInfoForQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServiceInfoForQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServiceInfoForQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServiceInfoForQuery::MergeFrom(const ReqServiceInfoForQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_node_.MergeFrom(from.info_node_);
  info_address_.MergeFrom(from.info_address_);
  info_service_id_.MergeFrom(from.info_service_id_);
  info_service_name_.MergeFrom(from.info_service_name_);
  info_service_address_.MergeFrom(from.info_service_address_);
  info_service_port_.MergeFrom(from.info_service_port_);
  info_service_pid_.MergeFrom(from.info_service_pid_);
  info_service_module_.MergeFrom(from.info_service_module_);
  info_mq_consumer_queue_name_.MergeFrom(from.info_mq_consumer_queue_name_);
  status_node_.MergeFrom(from.status_node_);
  status_check_id_.MergeFrom(from.status_check_id_);
  status_name_.MergeFrom(from.status_name_);
  status_status_.MergeFrom(from.status_status_);
  status_notes_.MergeFrom(from.status_notes_);
  status_output_.MergeFrom(from.status_output_);
  status_service_id_.MergeFrom(from.status_service_id_);
  status_service_name_.MergeFrom(from.status_service_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServiceInfoForQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServiceInfoForQuery::CopyFrom(const ReqServiceInfoForQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServiceInfoForQuery::IsInitialized() const {

  return true;
}

void ReqServiceInfoForQuery::Swap(ReqServiceInfoForQuery* other) {
  if (other != this) {
    info_node_.Swap(&other->info_node_);
    info_address_.Swap(&other->info_address_);
    info_service_id_.Swap(&other->info_service_id_);
    info_service_name_.Swap(&other->info_service_name_);
    info_service_address_.Swap(&other->info_service_address_);
    info_service_port_.Swap(&other->info_service_port_);
    info_service_pid_.Swap(&other->info_service_pid_);
    info_service_module_.Swap(&other->info_service_module_);
    info_mq_consumer_queue_name_.Swap(&other->info_mq_consumer_queue_name_);
    status_node_.Swap(&other->status_node_);
    status_check_id_.Swap(&other->status_check_id_);
    status_name_.Swap(&other->status_name_);
    status_status_.Swap(&other->status_status_);
    status_notes_.Swap(&other->status_notes_);
    status_output_.Swap(&other->status_output_);
    status_service_id_.Swap(&other->status_service_id_);
    status_service_name_.Swap(&other->status_service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServiceInfoForQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServiceInfoForQuery_descriptor_;
  metadata.reflection = ReqServiceInfoForQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspServiceInfoForQuery::kServiceInfoFieldNumber;
#endif  // !_MSC_VER

RspServiceInfoForQuery::RspServiceInfoForQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspServiceInfoForQuery)
}

void RspServiceInfoForQuery::InitAsDefaultInstance() {
}

RspServiceInfoForQuery::RspServiceInfoForQuery(const RspServiceInfoForQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspServiceInfoForQuery)
}

void RspServiceInfoForQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspServiceInfoForQuery::~RspServiceInfoForQuery() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspServiceInfoForQuery)
  SharedDtor();
}

void RspServiceInfoForQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspServiceInfoForQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspServiceInfoForQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspServiceInfoForQuery_descriptor_;
}

const RspServiceInfoForQuery& RspServiceInfoForQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceRegisterBean_2eproto();
  return *default_instance_;
}

RspServiceInfoForQuery* RspServiceInfoForQuery::default_instance_ = NULL;

RspServiceInfoForQuery* RspServiceInfoForQuery::New() const {
  return new RspServiceInfoForQuery;
}

void RspServiceInfoForQuery::Clear() {
  service_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspServiceInfoForQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspServiceInfoForQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
      case 1: {
        if (tag == 10) {
         parse_service_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_service_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspServiceInfoForQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspServiceInfoForQuery)
  return false;
#undef DO_
}

void RspServiceInfoForQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspServiceInfoForQuery)
  // repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
  for (int i = 0; i < this->service_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspServiceInfoForQuery)
}

::google::protobuf::uint8* RspServiceInfoForQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspServiceInfoForQuery)
  // repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
  for (int i = 0; i < this->service_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspServiceInfoForQuery)
  return target;
}

int RspServiceInfoForQuery::ByteSize() const {
  int total_size = 0;

  // repeated .com.arges.file.proto.ServiceInfoForRegister service_info = 1;
  total_size += 1 * this->service_info_size();
  for (int i = 0; i < this->service_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspServiceInfoForQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspServiceInfoForQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspServiceInfoForQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspServiceInfoForQuery::MergeFrom(const RspServiceInfoForQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_info_.MergeFrom(from.service_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspServiceInfoForQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspServiceInfoForQuery::CopyFrom(const RspServiceInfoForQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspServiceInfoForQuery::IsInitialized() const {

  return true;
}

void RspServiceInfoForQuery::Swap(RspServiceInfoForQuery* other) {
  if (other != this) {
    service_info_.Swap(&other->service_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspServiceInfoForQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspServiceInfoForQuery_descriptor_;
  metadata.reflection = RspServiceInfoForQuery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
