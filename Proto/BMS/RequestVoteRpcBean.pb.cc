// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestVoteRpcBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RequestVoteRpcBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RequestVoteRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteRpc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RequestVoteRpcBean_2eproto() {
  protobuf_AddDesc_RequestVoteRpcBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RequestVoteRpcBean.proto");
  GOOGLE_CHECK(file != NULL);
  RequestVoteRpc_descriptor_ = file->message_type(0);
  static const int RequestVoteRpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRpc, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRpc, srcidentifier_),
  };
  RequestVoteRpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteRpc_descriptor_,
      RequestVoteRpc::default_instance_,
      RequestVoteRpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteRpc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RequestVoteRpcBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteRpc_descriptor_, &RequestVoteRpc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RequestVoteRpcBean_2eproto() {
  delete RequestVoteRpc::default_instance_;
  delete RequestVoteRpc_reflection_;
}

void protobuf_AddDesc_RequestVoteRpcBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030RequestVoteRpcBean.proto\022\024com.arges.fi"
    "le.proto\"9\n\016RequestVoteRpc\022\016\n\004term\030\001 \001(\t"
    ":\000\022\027\n\rsrcIdentifier\030\002 \001(\t:\000", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RequestVoteRpcBean.proto", &protobuf_RegisterTypes);
  RequestVoteRpc::default_instance_ = new RequestVoteRpc();
  RequestVoteRpc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RequestVoteRpcBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RequestVoteRpcBean_2eproto {
  StaticDescriptorInitializer_RequestVoteRpcBean_2eproto() {
    protobuf_AddDesc_RequestVoteRpcBean_2eproto();
  }
} static_descriptor_initializer_RequestVoteRpcBean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RequestVoteRpc::kTermFieldNumber;
const int RequestVoteRpc::kSrcIdentifierFieldNumber;
#endif  // !_MSC_VER

RequestVoteRpc::RequestVoteRpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RequestVoteRpc)
}

void RequestVoteRpc::InitAsDefaultInstance() {
}

RequestVoteRpc::RequestVoteRpc(const RequestVoteRpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RequestVoteRpc)
}

void RequestVoteRpc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteRpc::~RequestVoteRpc() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RequestVoteRpc)
  SharedDtor();
}

void RequestVoteRpc::SharedDtor() {
  if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_;
  }
  if (srcidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srcidentifier_;
  }
  if (this != default_instance_) {
  }
}

void RequestVoteRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteRpc_descriptor_;
}

const RequestVoteRpc& RequestVoteRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RequestVoteRpcBean_2eproto();
  return *default_instance_;
}

RequestVoteRpc* RequestVoteRpc::default_instance_ = NULL;

RequestVoteRpc* RequestVoteRpc::New() const {
  return new RequestVoteRpc;
}

void RequestVoteRpc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_term()) {
      if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        term_->clear();
      }
    }
    if (has_srcidentifier()) {
      if (srcidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        srcidentifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RequestVoteRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string term = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->term().data(), this->term().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "term");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_srcIdentifier;
        break;
      }

      // optional string srcIdentifier = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_srcIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srcidentifier().data(), this->srcidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "srcidentifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RequestVoteRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RequestVoteRpc)
  return false;
#undef DO_
}

void RequestVoteRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RequestVoteRpc)
  // optional string term = 1 [default = ""];
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->term(), output);
  }

  // optional string srcIdentifier = 2 [default = ""];
  if (has_srcidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcidentifier().data(), this->srcidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcidentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->srcidentifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RequestVoteRpc)
}

::google::protobuf::uint8* RequestVoteRpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RequestVoteRpc)
  // optional string term = 1 [default = ""];
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->term(), target);
  }

  // optional string srcIdentifier = 2 [default = ""];
  if (has_srcidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcidentifier().data(), this->srcidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcidentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srcidentifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RequestVoteRpc)
  return target;
}

int RequestVoteRpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string term = 1 [default = ""];
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->term());
    }

    // optional string srcIdentifier = 2 [default = ""];
    if (has_srcidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcidentifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteRpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteRpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteRpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteRpc::MergeFrom(const RequestVoteRpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_srcidentifier()) {
      set_srcidentifier(from.srcidentifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteRpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRpc::CopyFrom(const RequestVoteRpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRpc::IsInitialized() const {

  return true;
}

void RequestVoteRpc::Swap(RequestVoteRpc* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(srcidentifier_, other->srcidentifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteRpc_descriptor_;
  metadata.reflection = RequestVoteRpc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
