// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CaptureDataBean.proto

#ifndef PROTOBUF_CaptureDataBean_2eproto__INCLUDED
#define PROTOBUF_CaptureDataBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CaptureDataBean_2eproto();
void protobuf_AssignDesc_CaptureDataBean_2eproto();
void protobuf_ShutdownFile_CaptureDataBean_2eproto();

class CaptureData;

// ===================================================================

class CaptureData : public ::google::protobuf::Message {
 public:
  CaptureData();
  virtual ~CaptureData();

  CaptureData(const CaptureData& from);

  inline CaptureData& operator=(const CaptureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureData& default_instance();

  void Swap(CaptureData* other);

  // implements Message ----------------------------------------------

  CaptureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaptureData& from);
  void MergeFrom(const CaptureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string scannerdevicecode = 1 [default = "default"];
  inline bool has_scannerdevicecode() const;
  inline void clear_scannerdevicecode();
  static const int kScannerdevicecodeFieldNumber = 1;
  inline const ::std::string& scannerdevicecode() const;
  inline void set_scannerdevicecode(const ::std::string& value);
  inline void set_scannerdevicecode(const char* value);
  inline void set_scannerdevicecode(const char* value, size_t size);
  inline ::std::string* mutable_scannerdevicecode();
  inline ::std::string* release_scannerdevicecode();
  inline void set_allocated_scannerdevicecode(::std::string* scannerdevicecode);

  // required string wristmac = 2 [default = "default"];
  inline bool has_wristmac() const;
  inline void clear_wristmac();
  static const int kWristmacFieldNumber = 2;
  inline const ::std::string& wristmac() const;
  inline void set_wristmac(const ::std::string& value);
  inline void set_wristmac(const char* value);
  inline void set_wristmac(const char* value, size_t size);
  inline ::std::string* mutable_wristmac();
  inline ::std::string* release_wristmac();
  inline void set_allocated_wristmac(::std::string* wristmac);

  // required string time = 3 [default = "default"];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required string actiontype = 4 [default = "default"];
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActiontypeFieldNumber = 4;
  inline const ::std::string& actiontype() const;
  inline void set_actiontype(const ::std::string& value);
  inline void set_actiontype(const char* value);
  inline void set_actiontype(const char* value, size_t size);
  inline ::std::string* mutable_actiontype();
  inline ::std::string* release_actiontype();
  inline void set_allocated_actiontype(::std::string* actiontype);

  // required string actiondescribe = 5 [default = "default"];
  inline bool has_actiondescribe() const;
  inline void clear_actiondescribe();
  static const int kActiondescribeFieldNumber = 5;
  inline const ::std::string& actiondescribe() const;
  inline void set_actiondescribe(const ::std::string& value);
  inline void set_actiondescribe(const char* value);
  inline void set_actiondescribe(const char* value, size_t size);
  inline ::std::string* mutable_actiondescribe();
  inline ::std::string* release_actiondescribe();
  inline void set_allocated_actiondescribe(::std::string* actiondescribe);

  // optional bytes actiondata1 = 6 [default = "default"];
  inline bool has_actiondata1() const;
  inline void clear_actiondata1();
  static const int kActiondata1FieldNumber = 6;
  inline const ::std::string& actiondata1() const;
  inline void set_actiondata1(const ::std::string& value);
  inline void set_actiondata1(const char* value);
  inline void set_actiondata1(const void* value, size_t size);
  inline ::std::string* mutable_actiondata1();
  inline ::std::string* release_actiondata1();
  inline void set_allocated_actiondata1(::std::string* actiondata1);

  // optional bytes actiondata2 = 7 [default = "default"];
  inline bool has_actiondata2() const;
  inline void clear_actiondata2();
  static const int kActiondata2FieldNumber = 7;
  inline const ::std::string& actiondata2() const;
  inline void set_actiondata2(const ::std::string& value);
  inline void set_actiondata2(const char* value);
  inline void set_actiondata2(const void* value, size_t size);
  inline ::std::string* mutable_actiondata2();
  inline ::std::string* release_actiondata2();
  inline void set_allocated_actiondata2(::std::string* actiondata2);

  // optional bytes actiondata3 = 8 [default = "default"];
  inline bool has_actiondata3() const;
  inline void clear_actiondata3();
  static const int kActiondata3FieldNumber = 8;
  inline const ::std::string& actiondata3() const;
  inline void set_actiondata3(const ::std::string& value);
  inline void set_actiondata3(const char* value);
  inline void set_actiondata3(const void* value, size_t size);
  inline ::std::string* mutable_actiondata3();
  inline ::std::string* release_actiondata3();
  inline void set_allocated_actiondata3(::std::string* actiondata3);

  // optional bytes actiondata = 9 [default = "default"];
  inline bool has_actiondata() const;
  inline void clear_actiondata();
  static const int kActiondataFieldNumber = 9;
  inline const ::std::string& actiondata() const;
  inline void set_actiondata(const ::std::string& value);
  inline void set_actiondata(const char* value);
  inline void set_actiondata(const void* value, size_t size);
  inline ::std::string* mutable_actiondata();
  inline ::std::string* release_actiondata();
  inline void set_allocated_actiondata(::std::string* actiondata);

  // optional bytes picture = 10 [default = "default"];
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 10;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const void* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  inline void set_allocated_picture(::std::string* picture);

  // required string picturetype = 11 [default = "default"];
  inline bool has_picturetype() const;
  inline void clear_picturetype();
  static const int kPicturetypeFieldNumber = 11;
  inline const ::std::string& picturetype() const;
  inline void set_picturetype(const ::std::string& value);
  inline void set_picturetype(const char* value);
  inline void set_picturetype(const char* value, size_t size);
  inline ::std::string* mutable_picturetype();
  inline ::std::string* release_picturetype();
  inline void set_allocated_picturetype(::std::string* picturetype);

  // required string actiondatatype = 12 [default = "default"];
  inline bool has_actiondatatype() const;
  inline void clear_actiondatatype();
  static const int kActiondatatypeFieldNumber = 12;
  inline const ::std::string& actiondatatype() const;
  inline void set_actiondatatype(const ::std::string& value);
  inline void set_actiondatatype(const char* value);
  inline void set_actiondatatype(const char* value, size_t size);
  inline ::std::string* mutable_actiondatatype();
  inline ::std::string* release_actiondatatype();
  inline void set_allocated_actiondatatype(::std::string* actiondatatype);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.CaptureData)
 private:
  inline void set_has_scannerdevicecode();
  inline void clear_has_scannerdevicecode();
  inline void set_has_wristmac();
  inline void clear_has_wristmac();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_actiondescribe();
  inline void clear_has_actiondescribe();
  inline void set_has_actiondata1();
  inline void clear_has_actiondata1();
  inline void set_has_actiondata2();
  inline void clear_has_actiondata2();
  inline void set_has_actiondata3();
  inline void clear_has_actiondata3();
  inline void set_has_actiondata();
  inline void clear_has_actiondata();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_picturetype();
  inline void clear_has_picturetype();
  inline void set_has_actiondatatype();
  inline void clear_has_actiondatatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_scannerdevicecode_;
  ::std::string* scannerdevicecode_;
  static ::std::string* _default_wristmac_;
  ::std::string* wristmac_;
  static ::std::string* _default_time_;
  ::std::string* time_;
  static ::std::string* _default_actiontype_;
  ::std::string* actiontype_;
  static ::std::string* _default_actiondescribe_;
  ::std::string* actiondescribe_;
  static ::std::string* _default_actiondata1_;
  ::std::string* actiondata1_;
  static ::std::string* _default_actiondata2_;
  ::std::string* actiondata2_;
  static ::std::string* _default_actiondata3_;
  ::std::string* actiondata3_;
  static ::std::string* _default_actiondata_;
  ::std::string* actiondata_;
  static ::std::string* _default_picture_;
  ::std::string* picture_;
  static ::std::string* _default_picturetype_;
  ::std::string* picturetype_;
  static ::std::string* _default_actiondatatype_;
  ::std::string* actiondatatype_;
  friend void  protobuf_AddDesc_CaptureDataBean_2eproto();
  friend void protobuf_AssignDesc_CaptureDataBean_2eproto();
  friend void protobuf_ShutdownFile_CaptureDataBean_2eproto();

  void InitAsDefaultInstance();
  static CaptureData* default_instance_;
};
// ===================================================================


// ===================================================================

// CaptureData

// required string scannerdevicecode = 1 [default = "default"];
inline bool CaptureData::has_scannerdevicecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptureData::set_has_scannerdevicecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptureData::clear_has_scannerdevicecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptureData::clear_scannerdevicecode() {
  if (scannerdevicecode_ != _default_scannerdevicecode_) {
    scannerdevicecode_->assign(*_default_scannerdevicecode_);
  }
  clear_has_scannerdevicecode();
}
inline const ::std::string& CaptureData::scannerdevicecode() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.scannerdevicecode)
  return *scannerdevicecode_;
}
inline void CaptureData::set_scannerdevicecode(const ::std::string& value) {
  set_has_scannerdevicecode();
  if (scannerdevicecode_ == _default_scannerdevicecode_) {
    scannerdevicecode_ = new ::std::string;
  }
  scannerdevicecode_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.scannerdevicecode)
}
inline void CaptureData::set_scannerdevicecode(const char* value) {
  set_has_scannerdevicecode();
  if (scannerdevicecode_ == _default_scannerdevicecode_) {
    scannerdevicecode_ = new ::std::string;
  }
  scannerdevicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.scannerdevicecode)
}
inline void CaptureData::set_scannerdevicecode(const char* value, size_t size) {
  set_has_scannerdevicecode();
  if (scannerdevicecode_ == _default_scannerdevicecode_) {
    scannerdevicecode_ = new ::std::string;
  }
  scannerdevicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.scannerdevicecode)
}
inline ::std::string* CaptureData::mutable_scannerdevicecode() {
  set_has_scannerdevicecode();
  if (scannerdevicecode_ == _default_scannerdevicecode_) {
    scannerdevicecode_ = new ::std::string(*_default_scannerdevicecode_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.scannerdevicecode)
  return scannerdevicecode_;
}
inline ::std::string* CaptureData::release_scannerdevicecode() {
  clear_has_scannerdevicecode();
  if (scannerdevicecode_ == _default_scannerdevicecode_) {
    return NULL;
  } else {
    ::std::string* temp = scannerdevicecode_;
    scannerdevicecode_ = const_cast< ::std::string*>(_default_scannerdevicecode_);
    return temp;
  }
}
inline void CaptureData::set_allocated_scannerdevicecode(::std::string* scannerdevicecode) {
  if (scannerdevicecode_ != _default_scannerdevicecode_) {
    delete scannerdevicecode_;
  }
  if (scannerdevicecode) {
    set_has_scannerdevicecode();
    scannerdevicecode_ = scannerdevicecode;
  } else {
    clear_has_scannerdevicecode();
    scannerdevicecode_ = const_cast< ::std::string*>(_default_scannerdevicecode_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.scannerdevicecode)
}

// required string wristmac = 2 [default = "default"];
inline bool CaptureData::has_wristmac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaptureData::set_has_wristmac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaptureData::clear_has_wristmac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaptureData::clear_wristmac() {
  if (wristmac_ != _default_wristmac_) {
    wristmac_->assign(*_default_wristmac_);
  }
  clear_has_wristmac();
}
inline const ::std::string& CaptureData::wristmac() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.wristmac)
  return *wristmac_;
}
inline void CaptureData::set_wristmac(const ::std::string& value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.wristmac)
}
inline void CaptureData::set_wristmac(const char* value) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.wristmac)
}
inline void CaptureData::set_wristmac(const char* value, size_t size) {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string;
  }
  wristmac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.wristmac)
}
inline ::std::string* CaptureData::mutable_wristmac() {
  set_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    wristmac_ = new ::std::string(*_default_wristmac_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.wristmac)
  return wristmac_;
}
inline ::std::string* CaptureData::release_wristmac() {
  clear_has_wristmac();
  if (wristmac_ == _default_wristmac_) {
    return NULL;
  } else {
    ::std::string* temp = wristmac_;
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
    return temp;
  }
}
inline void CaptureData::set_allocated_wristmac(::std::string* wristmac) {
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (wristmac) {
    set_has_wristmac();
    wristmac_ = wristmac;
  } else {
    clear_has_wristmac();
    wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.wristmac)
}

// required string time = 3 [default = "default"];
inline bool CaptureData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaptureData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaptureData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaptureData::clear_time() {
  if (time_ != _default_time_) {
    time_->assign(*_default_time_);
  }
  clear_has_time();
}
inline const ::std::string& CaptureData::time() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.time)
  return *time_;
}
inline void CaptureData::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == _default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.time)
}
inline void CaptureData::set_time(const char* value) {
  set_has_time();
  if (time_ == _default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.time)
}
inline void CaptureData::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == _default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.time)
}
inline ::std::string* CaptureData::mutable_time() {
  set_has_time();
  if (time_ == _default_time_) {
    time_ = new ::std::string(*_default_time_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.time)
  return time_;
}
inline ::std::string* CaptureData::release_time() {
  clear_has_time();
  if (time_ == _default_time_) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(_default_time_);
    return temp;
  }
}
inline void CaptureData::set_allocated_time(::std::string* time) {
  if (time_ != _default_time_) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(_default_time_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.time)
}

// required string actiontype = 4 [default = "default"];
inline bool CaptureData::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaptureData::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaptureData::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaptureData::clear_actiontype() {
  if (actiontype_ != _default_actiontype_) {
    actiontype_->assign(*_default_actiontype_);
  }
  clear_has_actiontype();
}
inline const ::std::string& CaptureData::actiontype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiontype)
  return *actiontype_;
}
inline void CaptureData::set_actiontype(const ::std::string& value) {
  set_has_actiontype();
  if (actiontype_ == _default_actiontype_) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiontype)
}
inline void CaptureData::set_actiontype(const char* value) {
  set_has_actiontype();
  if (actiontype_ == _default_actiontype_) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiontype)
}
inline void CaptureData::set_actiontype(const char* value, size_t size) {
  set_has_actiontype();
  if (actiontype_ == _default_actiontype_) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiontype)
}
inline ::std::string* CaptureData::mutable_actiontype() {
  set_has_actiontype();
  if (actiontype_ == _default_actiontype_) {
    actiontype_ = new ::std::string(*_default_actiontype_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiontype)
  return actiontype_;
}
inline ::std::string* CaptureData::release_actiontype() {
  clear_has_actiontype();
  if (actiontype_ == _default_actiontype_) {
    return NULL;
  } else {
    ::std::string* temp = actiontype_;
    actiontype_ = const_cast< ::std::string*>(_default_actiontype_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiontype(::std::string* actiontype) {
  if (actiontype_ != _default_actiontype_) {
    delete actiontype_;
  }
  if (actiontype) {
    set_has_actiontype();
    actiontype_ = actiontype;
  } else {
    clear_has_actiontype();
    actiontype_ = const_cast< ::std::string*>(_default_actiontype_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiontype)
}

// required string actiondescribe = 5 [default = "default"];
inline bool CaptureData::has_actiondescribe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CaptureData::set_has_actiondescribe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CaptureData::clear_has_actiondescribe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CaptureData::clear_actiondescribe() {
  if (actiondescribe_ != _default_actiondescribe_) {
    actiondescribe_->assign(*_default_actiondescribe_);
  }
  clear_has_actiondescribe();
}
inline const ::std::string& CaptureData::actiondescribe() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondescribe)
  return *actiondescribe_;
}
inline void CaptureData::set_actiondescribe(const ::std::string& value) {
  set_has_actiondescribe();
  if (actiondescribe_ == _default_actiondescribe_) {
    actiondescribe_ = new ::std::string;
  }
  actiondescribe_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondescribe)
}
inline void CaptureData::set_actiondescribe(const char* value) {
  set_has_actiondescribe();
  if (actiondescribe_ == _default_actiondescribe_) {
    actiondescribe_ = new ::std::string;
  }
  actiondescribe_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondescribe)
}
inline void CaptureData::set_actiondescribe(const char* value, size_t size) {
  set_has_actiondescribe();
  if (actiondescribe_ == _default_actiondescribe_) {
    actiondescribe_ = new ::std::string;
  }
  actiondescribe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondescribe)
}
inline ::std::string* CaptureData::mutable_actiondescribe() {
  set_has_actiondescribe();
  if (actiondescribe_ == _default_actiondescribe_) {
    actiondescribe_ = new ::std::string(*_default_actiondescribe_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondescribe)
  return actiondescribe_;
}
inline ::std::string* CaptureData::release_actiondescribe() {
  clear_has_actiondescribe();
  if (actiondescribe_ == _default_actiondescribe_) {
    return NULL;
  } else {
    ::std::string* temp = actiondescribe_;
    actiondescribe_ = const_cast< ::std::string*>(_default_actiondescribe_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondescribe(::std::string* actiondescribe) {
  if (actiondescribe_ != _default_actiondescribe_) {
    delete actiondescribe_;
  }
  if (actiondescribe) {
    set_has_actiondescribe();
    actiondescribe_ = actiondescribe;
  } else {
    clear_has_actiondescribe();
    actiondescribe_ = const_cast< ::std::string*>(_default_actiondescribe_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondescribe)
}

// optional bytes actiondata1 = 6 [default = "default"];
inline bool CaptureData::has_actiondata1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CaptureData::set_has_actiondata1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CaptureData::clear_has_actiondata1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CaptureData::clear_actiondata1() {
  if (actiondata1_ != _default_actiondata1_) {
    actiondata1_->assign(*_default_actiondata1_);
  }
  clear_has_actiondata1();
}
inline const ::std::string& CaptureData::actiondata1() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondata1)
  return *actiondata1_;
}
inline void CaptureData::set_actiondata1(const ::std::string& value) {
  set_has_actiondata1();
  if (actiondata1_ == _default_actiondata1_) {
    actiondata1_ = new ::std::string;
  }
  actiondata1_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondata1)
}
inline void CaptureData::set_actiondata1(const char* value) {
  set_has_actiondata1();
  if (actiondata1_ == _default_actiondata1_) {
    actiondata1_ = new ::std::string;
  }
  actiondata1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondata1)
}
inline void CaptureData::set_actiondata1(const void* value, size_t size) {
  set_has_actiondata1();
  if (actiondata1_ == _default_actiondata1_) {
    actiondata1_ = new ::std::string;
  }
  actiondata1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondata1)
}
inline ::std::string* CaptureData::mutable_actiondata1() {
  set_has_actiondata1();
  if (actiondata1_ == _default_actiondata1_) {
    actiondata1_ = new ::std::string(*_default_actiondata1_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondata1)
  return actiondata1_;
}
inline ::std::string* CaptureData::release_actiondata1() {
  clear_has_actiondata1();
  if (actiondata1_ == _default_actiondata1_) {
    return NULL;
  } else {
    ::std::string* temp = actiondata1_;
    actiondata1_ = const_cast< ::std::string*>(_default_actiondata1_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondata1(::std::string* actiondata1) {
  if (actiondata1_ != _default_actiondata1_) {
    delete actiondata1_;
  }
  if (actiondata1) {
    set_has_actiondata1();
    actiondata1_ = actiondata1;
  } else {
    clear_has_actiondata1();
    actiondata1_ = const_cast< ::std::string*>(_default_actiondata1_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondata1)
}

// optional bytes actiondata2 = 7 [default = "default"];
inline bool CaptureData::has_actiondata2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CaptureData::set_has_actiondata2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CaptureData::clear_has_actiondata2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CaptureData::clear_actiondata2() {
  if (actiondata2_ != _default_actiondata2_) {
    actiondata2_->assign(*_default_actiondata2_);
  }
  clear_has_actiondata2();
}
inline const ::std::string& CaptureData::actiondata2() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondata2)
  return *actiondata2_;
}
inline void CaptureData::set_actiondata2(const ::std::string& value) {
  set_has_actiondata2();
  if (actiondata2_ == _default_actiondata2_) {
    actiondata2_ = new ::std::string;
  }
  actiondata2_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondata2)
}
inline void CaptureData::set_actiondata2(const char* value) {
  set_has_actiondata2();
  if (actiondata2_ == _default_actiondata2_) {
    actiondata2_ = new ::std::string;
  }
  actiondata2_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondata2)
}
inline void CaptureData::set_actiondata2(const void* value, size_t size) {
  set_has_actiondata2();
  if (actiondata2_ == _default_actiondata2_) {
    actiondata2_ = new ::std::string;
  }
  actiondata2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondata2)
}
inline ::std::string* CaptureData::mutable_actiondata2() {
  set_has_actiondata2();
  if (actiondata2_ == _default_actiondata2_) {
    actiondata2_ = new ::std::string(*_default_actiondata2_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondata2)
  return actiondata2_;
}
inline ::std::string* CaptureData::release_actiondata2() {
  clear_has_actiondata2();
  if (actiondata2_ == _default_actiondata2_) {
    return NULL;
  } else {
    ::std::string* temp = actiondata2_;
    actiondata2_ = const_cast< ::std::string*>(_default_actiondata2_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondata2(::std::string* actiondata2) {
  if (actiondata2_ != _default_actiondata2_) {
    delete actiondata2_;
  }
  if (actiondata2) {
    set_has_actiondata2();
    actiondata2_ = actiondata2;
  } else {
    clear_has_actiondata2();
    actiondata2_ = const_cast< ::std::string*>(_default_actiondata2_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondata2)
}

// optional bytes actiondata3 = 8 [default = "default"];
inline bool CaptureData::has_actiondata3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CaptureData::set_has_actiondata3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CaptureData::clear_has_actiondata3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CaptureData::clear_actiondata3() {
  if (actiondata3_ != _default_actiondata3_) {
    actiondata3_->assign(*_default_actiondata3_);
  }
  clear_has_actiondata3();
}
inline const ::std::string& CaptureData::actiondata3() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondata3)
  return *actiondata3_;
}
inline void CaptureData::set_actiondata3(const ::std::string& value) {
  set_has_actiondata3();
  if (actiondata3_ == _default_actiondata3_) {
    actiondata3_ = new ::std::string;
  }
  actiondata3_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondata3)
}
inline void CaptureData::set_actiondata3(const char* value) {
  set_has_actiondata3();
  if (actiondata3_ == _default_actiondata3_) {
    actiondata3_ = new ::std::string;
  }
  actiondata3_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondata3)
}
inline void CaptureData::set_actiondata3(const void* value, size_t size) {
  set_has_actiondata3();
  if (actiondata3_ == _default_actiondata3_) {
    actiondata3_ = new ::std::string;
  }
  actiondata3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondata3)
}
inline ::std::string* CaptureData::mutable_actiondata3() {
  set_has_actiondata3();
  if (actiondata3_ == _default_actiondata3_) {
    actiondata3_ = new ::std::string(*_default_actiondata3_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondata3)
  return actiondata3_;
}
inline ::std::string* CaptureData::release_actiondata3() {
  clear_has_actiondata3();
  if (actiondata3_ == _default_actiondata3_) {
    return NULL;
  } else {
    ::std::string* temp = actiondata3_;
    actiondata3_ = const_cast< ::std::string*>(_default_actiondata3_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondata3(::std::string* actiondata3) {
  if (actiondata3_ != _default_actiondata3_) {
    delete actiondata3_;
  }
  if (actiondata3) {
    set_has_actiondata3();
    actiondata3_ = actiondata3;
  } else {
    clear_has_actiondata3();
    actiondata3_ = const_cast< ::std::string*>(_default_actiondata3_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondata3)
}

// optional bytes actiondata = 9 [default = "default"];
inline bool CaptureData::has_actiondata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CaptureData::set_has_actiondata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CaptureData::clear_has_actiondata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CaptureData::clear_actiondata() {
  if (actiondata_ != _default_actiondata_) {
    actiondata_->assign(*_default_actiondata_);
  }
  clear_has_actiondata();
}
inline const ::std::string& CaptureData::actiondata() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondata)
  return *actiondata_;
}
inline void CaptureData::set_actiondata(const ::std::string& value) {
  set_has_actiondata();
  if (actiondata_ == _default_actiondata_) {
    actiondata_ = new ::std::string;
  }
  actiondata_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondata)
}
inline void CaptureData::set_actiondata(const char* value) {
  set_has_actiondata();
  if (actiondata_ == _default_actiondata_) {
    actiondata_ = new ::std::string;
  }
  actiondata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondata)
}
inline void CaptureData::set_actiondata(const void* value, size_t size) {
  set_has_actiondata();
  if (actiondata_ == _default_actiondata_) {
    actiondata_ = new ::std::string;
  }
  actiondata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondata)
}
inline ::std::string* CaptureData::mutable_actiondata() {
  set_has_actiondata();
  if (actiondata_ == _default_actiondata_) {
    actiondata_ = new ::std::string(*_default_actiondata_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondata)
  return actiondata_;
}
inline ::std::string* CaptureData::release_actiondata() {
  clear_has_actiondata();
  if (actiondata_ == _default_actiondata_) {
    return NULL;
  } else {
    ::std::string* temp = actiondata_;
    actiondata_ = const_cast< ::std::string*>(_default_actiondata_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondata(::std::string* actiondata) {
  if (actiondata_ != _default_actiondata_) {
    delete actiondata_;
  }
  if (actiondata) {
    set_has_actiondata();
    actiondata_ = actiondata;
  } else {
    clear_has_actiondata();
    actiondata_ = const_cast< ::std::string*>(_default_actiondata_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondata)
}

// optional bytes picture = 10 [default = "default"];
inline bool CaptureData::has_picture() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CaptureData::set_has_picture() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CaptureData::clear_has_picture() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CaptureData::clear_picture() {
  if (picture_ != _default_picture_) {
    picture_->assign(*_default_picture_);
  }
  clear_has_picture();
}
inline const ::std::string& CaptureData::picture() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.picture)
  return *picture_;
}
inline void CaptureData::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.picture)
}
inline void CaptureData::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.picture)
}
inline void CaptureData::set_picture(const void* value, size_t size) {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.picture)
}
inline ::std::string* CaptureData::mutable_picture() {
  set_has_picture();
  if (picture_ == _default_picture_) {
    picture_ = new ::std::string(*_default_picture_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.picture)
  return picture_;
}
inline ::std::string* CaptureData::release_picture() {
  clear_has_picture();
  if (picture_ == _default_picture_) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(_default_picture_);
    return temp;
  }
}
inline void CaptureData::set_allocated_picture(::std::string* picture) {
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (picture) {
    set_has_picture();
    picture_ = picture;
  } else {
    clear_has_picture();
    picture_ = const_cast< ::std::string*>(_default_picture_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.picture)
}

// required string picturetype = 11 [default = "default"];
inline bool CaptureData::has_picturetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CaptureData::set_has_picturetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CaptureData::clear_has_picturetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CaptureData::clear_picturetype() {
  if (picturetype_ != _default_picturetype_) {
    picturetype_->assign(*_default_picturetype_);
  }
  clear_has_picturetype();
}
inline const ::std::string& CaptureData::picturetype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.picturetype)
  return *picturetype_;
}
inline void CaptureData::set_picturetype(const ::std::string& value) {
  set_has_picturetype();
  if (picturetype_ == _default_picturetype_) {
    picturetype_ = new ::std::string;
  }
  picturetype_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.picturetype)
}
inline void CaptureData::set_picturetype(const char* value) {
  set_has_picturetype();
  if (picturetype_ == _default_picturetype_) {
    picturetype_ = new ::std::string;
  }
  picturetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.picturetype)
}
inline void CaptureData::set_picturetype(const char* value, size_t size) {
  set_has_picturetype();
  if (picturetype_ == _default_picturetype_) {
    picturetype_ = new ::std::string;
  }
  picturetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.picturetype)
}
inline ::std::string* CaptureData::mutable_picturetype() {
  set_has_picturetype();
  if (picturetype_ == _default_picturetype_) {
    picturetype_ = new ::std::string(*_default_picturetype_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.picturetype)
  return picturetype_;
}
inline ::std::string* CaptureData::release_picturetype() {
  clear_has_picturetype();
  if (picturetype_ == _default_picturetype_) {
    return NULL;
  } else {
    ::std::string* temp = picturetype_;
    picturetype_ = const_cast< ::std::string*>(_default_picturetype_);
    return temp;
  }
}
inline void CaptureData::set_allocated_picturetype(::std::string* picturetype) {
  if (picturetype_ != _default_picturetype_) {
    delete picturetype_;
  }
  if (picturetype) {
    set_has_picturetype();
    picturetype_ = picturetype;
  } else {
    clear_has_picturetype();
    picturetype_ = const_cast< ::std::string*>(_default_picturetype_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.picturetype)
}

// required string actiondatatype = 12 [default = "default"];
inline bool CaptureData::has_actiondatatype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CaptureData::set_has_actiondatatype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CaptureData::clear_has_actiondatatype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CaptureData::clear_actiondatatype() {
  if (actiondatatype_ != _default_actiondatatype_) {
    actiondatatype_->assign(*_default_actiondatatype_);
  }
  clear_has_actiondatatype();
}
inline const ::std::string& CaptureData::actiondatatype() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.CaptureData.actiondatatype)
  return *actiondatatype_;
}
inline void CaptureData::set_actiondatatype(const ::std::string& value) {
  set_has_actiondatatype();
  if (actiondatatype_ == _default_actiondatatype_) {
    actiondatatype_ = new ::std::string;
  }
  actiondatatype_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.CaptureData.actiondatatype)
}
inline void CaptureData::set_actiondatatype(const char* value) {
  set_has_actiondatatype();
  if (actiondatatype_ == _default_actiondatatype_) {
    actiondatatype_ = new ::std::string;
  }
  actiondatatype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.CaptureData.actiondatatype)
}
inline void CaptureData::set_actiondatatype(const char* value, size_t size) {
  set_has_actiondatatype();
  if (actiondatatype_ == _default_actiondatatype_) {
    actiondatatype_ = new ::std::string;
  }
  actiondatatype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.CaptureData.actiondatatype)
}
inline ::std::string* CaptureData::mutable_actiondatatype() {
  set_has_actiondatatype();
  if (actiondatatype_ == _default_actiondatatype_) {
    actiondatatype_ = new ::std::string(*_default_actiondatatype_);
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.CaptureData.actiondatatype)
  return actiondatatype_;
}
inline ::std::string* CaptureData::release_actiondatatype() {
  clear_has_actiondatatype();
  if (actiondatatype_ == _default_actiondatatype_) {
    return NULL;
  } else {
    ::std::string* temp = actiondatatype_;
    actiondatatype_ = const_cast< ::std::string*>(_default_actiondatatype_);
    return temp;
  }
}
inline void CaptureData::set_allocated_actiondatatype(::std::string* actiondatatype) {
  if (actiondatatype_ != _default_actiondatatype_) {
    delete actiondatatype_;
  }
  if (actiondatatype) {
    set_has_actiondatatype();
    actiondatatype_ = actiondatatype;
  } else {
    clear_has_actiondatatype();
    actiondatatype_ = const_cast< ::std::string*>(_default_actiondatatype_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.CaptureData.actiondatatype)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CaptureDataBean_2eproto__INCLUDED
