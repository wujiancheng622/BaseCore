// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CaptureDataBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CaptureDataBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CaptureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CaptureDataBean_2eproto() {
  protobuf_AddDesc_CaptureDataBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CaptureDataBean.proto");
  GOOGLE_CHECK(file != NULL);
  CaptureData_descriptor_ = file->message_type(0);
  static const int CaptureData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, scannerdevicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, wristmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondata1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondata2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondata3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, picturetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, actiondatatype_),
  };
  CaptureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaptureData_descriptor_,
      CaptureData::default_instance_,
      CaptureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaptureData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CaptureDataBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaptureData_descriptor_, &CaptureData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CaptureDataBean_2eproto() {
  delete CaptureData::default_instance_;
  delete CaptureData_reflection_;
  delete CaptureData::_default_scannerdevicecode_;
  delete CaptureData::_default_wristmac_;
  delete CaptureData::_default_time_;
  delete CaptureData::_default_actiontype_;
  delete CaptureData::_default_actiondescribe_;
  delete CaptureData::_default_actiondata1_;
  delete CaptureData::_default_actiondata2_;
  delete CaptureData::_default_actiondata3_;
  delete CaptureData::_default_actiondata_;
  delete CaptureData::_default_picture_;
  delete CaptureData::_default_picturetype_;
  delete CaptureData::_default_actiondatatype_;
}

void protobuf_AddDesc_CaptureDataBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CaptureDataBean.proto\022\024com.arges.file."
    "proto\"\361\002\n\013CaptureData\022\"\n\021scannerdeviceco"
    "de\030\001 \002(\t:\007default\022\031\n\010wristmac\030\002 \002(\t:\007def"
    "ault\022\025\n\004time\030\003 \002(\t:\007default\022\033\n\nactiontyp"
    "e\030\004 \002(\t:\007default\022\037\n\016actiondescribe\030\005 \002(\t"
    ":\007default\022\034\n\013actiondata1\030\006 \001(\014:\007default\022"
    "\034\n\013actiondata2\030\007 \001(\014:\007default\022\034\n\013actiond"
    "ata3\030\010 \001(\014:\007default\022\033\n\nactiondata\030\t \001(\014:"
    "\007default\022\030\n\007picture\030\n \001(\014:\007default\022\034\n\013pi"
    "cturetype\030\013 \002(\t:\007default\022\037\n\016actiondataty"
    "pe\030\014 \002(\t:\007default", 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CaptureDataBean.proto", &protobuf_RegisterTypes);
  CaptureData::_default_scannerdevicecode_ =
      new ::std::string("default", 7);
  CaptureData::_default_wristmac_ =
      new ::std::string("default", 7);
  CaptureData::_default_time_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiontype_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondescribe_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondata1_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondata2_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondata3_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondata_ =
      new ::std::string("default", 7);
  CaptureData::_default_picture_ =
      new ::std::string("default", 7);
  CaptureData::_default_picturetype_ =
      new ::std::string("default", 7);
  CaptureData::_default_actiondatatype_ =
      new ::std::string("default", 7);
  CaptureData::default_instance_ = new CaptureData();
  CaptureData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CaptureDataBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CaptureDataBean_2eproto {
  StaticDescriptorInitializer_CaptureDataBean_2eproto() {
    protobuf_AddDesc_CaptureDataBean_2eproto();
  }
} static_descriptor_initializer_CaptureDataBean_2eproto_;

// ===================================================================

::std::string* CaptureData::_default_scannerdevicecode_ = NULL;
::std::string* CaptureData::_default_wristmac_ = NULL;
::std::string* CaptureData::_default_time_ = NULL;
::std::string* CaptureData::_default_actiontype_ = NULL;
::std::string* CaptureData::_default_actiondescribe_ = NULL;
::std::string* CaptureData::_default_actiondata1_ = NULL;
::std::string* CaptureData::_default_actiondata2_ = NULL;
::std::string* CaptureData::_default_actiondata3_ = NULL;
::std::string* CaptureData::_default_actiondata_ = NULL;
::std::string* CaptureData::_default_picture_ = NULL;
::std::string* CaptureData::_default_picturetype_ = NULL;
::std::string* CaptureData::_default_actiondatatype_ = NULL;
#ifndef _MSC_VER
const int CaptureData::kScannerdevicecodeFieldNumber;
const int CaptureData::kWristmacFieldNumber;
const int CaptureData::kTimeFieldNumber;
const int CaptureData::kActiontypeFieldNumber;
const int CaptureData::kActiondescribeFieldNumber;
const int CaptureData::kActiondata1FieldNumber;
const int CaptureData::kActiondata2FieldNumber;
const int CaptureData::kActiondata3FieldNumber;
const int CaptureData::kActiondataFieldNumber;
const int CaptureData::kPictureFieldNumber;
const int CaptureData::kPicturetypeFieldNumber;
const int CaptureData::kActiondatatypeFieldNumber;
#endif  // !_MSC_VER

CaptureData::CaptureData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.CaptureData)
}

void CaptureData::InitAsDefaultInstance() {
}

CaptureData::CaptureData(const CaptureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.CaptureData)
}

void CaptureData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scannerdevicecode_ = const_cast< ::std::string*>(_default_scannerdevicecode_);
  wristmac_ = const_cast< ::std::string*>(_default_wristmac_);
  time_ = const_cast< ::std::string*>(_default_time_);
  actiontype_ = const_cast< ::std::string*>(_default_actiontype_);
  actiondescribe_ = const_cast< ::std::string*>(_default_actiondescribe_);
  actiondata1_ = const_cast< ::std::string*>(_default_actiondata1_);
  actiondata2_ = const_cast< ::std::string*>(_default_actiondata2_);
  actiondata3_ = const_cast< ::std::string*>(_default_actiondata3_);
  actiondata_ = const_cast< ::std::string*>(_default_actiondata_);
  picture_ = const_cast< ::std::string*>(_default_picture_);
  picturetype_ = const_cast< ::std::string*>(_default_picturetype_);
  actiondatatype_ = const_cast< ::std::string*>(_default_actiondatatype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaptureData::~CaptureData() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.CaptureData)
  SharedDtor();
}

void CaptureData::SharedDtor() {
  if (scannerdevicecode_ != _default_scannerdevicecode_) {
    delete scannerdevicecode_;
  }
  if (wristmac_ != _default_wristmac_) {
    delete wristmac_;
  }
  if (time_ != _default_time_) {
    delete time_;
  }
  if (actiontype_ != _default_actiontype_) {
    delete actiontype_;
  }
  if (actiondescribe_ != _default_actiondescribe_) {
    delete actiondescribe_;
  }
  if (actiondata1_ != _default_actiondata1_) {
    delete actiondata1_;
  }
  if (actiondata2_ != _default_actiondata2_) {
    delete actiondata2_;
  }
  if (actiondata3_ != _default_actiondata3_) {
    delete actiondata3_;
  }
  if (actiondata_ != _default_actiondata_) {
    delete actiondata_;
  }
  if (picture_ != _default_picture_) {
    delete picture_;
  }
  if (picturetype_ != _default_picturetype_) {
    delete picturetype_;
  }
  if (actiondatatype_ != _default_actiondatatype_) {
    delete actiondatatype_;
  }
  if (this != default_instance_) {
  }
}

void CaptureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureData_descriptor_;
}

const CaptureData& CaptureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CaptureDataBean_2eproto();
  return *default_instance_;
}

CaptureData* CaptureData::default_instance_ = NULL;

CaptureData* CaptureData::New() const {
  return new CaptureData;
}

void CaptureData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_scannerdevicecode()) {
      if (scannerdevicecode_ != _default_scannerdevicecode_) {
        scannerdevicecode_->assign(*_default_scannerdevicecode_);
      }
    }
    if (has_wristmac()) {
      if (wristmac_ != _default_wristmac_) {
        wristmac_->assign(*_default_wristmac_);
      }
    }
    if (has_time()) {
      if (time_ != _default_time_) {
        time_->assign(*_default_time_);
      }
    }
    if (has_actiontype()) {
      if (actiontype_ != _default_actiontype_) {
        actiontype_->assign(*_default_actiontype_);
      }
    }
    if (has_actiondescribe()) {
      if (actiondescribe_ != _default_actiondescribe_) {
        actiondescribe_->assign(*_default_actiondescribe_);
      }
    }
    if (has_actiondata1()) {
      if (actiondata1_ != _default_actiondata1_) {
        actiondata1_->assign(*_default_actiondata1_);
      }
    }
    if (has_actiondata2()) {
      if (actiondata2_ != _default_actiondata2_) {
        actiondata2_->assign(*_default_actiondata2_);
      }
    }
    if (has_actiondata3()) {
      if (actiondata3_ != _default_actiondata3_) {
        actiondata3_->assign(*_default_actiondata3_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_actiondata()) {
      if (actiondata_ != _default_actiondata_) {
        actiondata_->assign(*_default_actiondata_);
      }
    }
    if (has_picture()) {
      if (picture_ != _default_picture_) {
        picture_->assign(*_default_picture_);
      }
    }
    if (has_picturetype()) {
      if (picturetype_ != _default_picturetype_) {
        picturetype_->assign(*_default_picturetype_);
      }
    }
    if (has_actiondatatype()) {
      if (actiondatatype_ != _default_actiondatatype_) {
        actiondatatype_->assign(*_default_actiondatatype_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaptureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.CaptureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string scannerdevicecode = 1 [default = "default"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scannerdevicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scannerdevicecode().data(), this->scannerdevicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scannerdevicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wristmac;
        break;
      }

      // required string wristmac = 2 [default = "default"];
      case 2: {
        if (tag == 18) {
         parse_wristmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wristmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wristmac().data(), this->wristmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wristmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // required string time = 3 [default = "default"];
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actiontype;
        break;
      }

      // required string actiontype = 4 [default = "default"];
      case 4: {
        if (tag == 34) {
         parse_actiontype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actiontype().data(), this->actiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actiontype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_actiondescribe;
        break;
      }

      // required string actiondescribe = 5 [default = "default"];
      case 5: {
        if (tag == 42) {
         parse_actiondescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiondescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actiondescribe().data(), this->actiondescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actiondescribe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_actiondata1;
        break;
      }

      // optional bytes actiondata1 = 6 [default = "default"];
      case 6: {
        if (tag == 50) {
         parse_actiondata1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actiondata1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_actiondata2;
        break;
      }

      // optional bytes actiondata2 = 7 [default = "default"];
      case 7: {
        if (tag == 58) {
         parse_actiondata2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actiondata2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_actiondata3;
        break;
      }

      // optional bytes actiondata3 = 8 [default = "default"];
      case 8: {
        if (tag == 66) {
         parse_actiondata3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actiondata3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_actiondata;
        break;
      }

      // optional bytes actiondata = 9 [default = "default"];
      case 9: {
        if (tag == 74) {
         parse_actiondata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actiondata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_picture;
        break;
      }

      // optional bytes picture = 10 [default = "default"];
      case 10: {
        if (tag == 82) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_picturetype;
        break;
      }

      // required string picturetype = 11 [default = "default"];
      case 11: {
        if (tag == 90) {
         parse_picturetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picturetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picturetype().data(), this->picturetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picturetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_actiondatatype;
        break;
      }

      // required string actiondatatype = 12 [default = "default"];
      case 12: {
        if (tag == 98) {
         parse_actiondatatype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiondatatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actiondatatype().data(), this->actiondatatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actiondatatype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.CaptureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.CaptureData)
  return false;
#undef DO_
}

void CaptureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.CaptureData)
  // required string scannerdevicecode = 1 [default = "default"];
  if (has_scannerdevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scannerdevicecode().data(), this->scannerdevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scannerdevicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scannerdevicecode(), output);
  }

  // required string wristmac = 2 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wristmac(), output);
  }

  // required string time = 3 [default = "default"];
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time(), output);
  }

  // required string actiontype = 4 [default = "default"];
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiontype().data(), this->actiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiontype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->actiontype(), output);
  }

  // required string actiondescribe = 5 [default = "default"];
  if (has_actiondescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiondescribe().data(), this->actiondescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiondescribe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->actiondescribe(), output);
  }

  // optional bytes actiondata1 = 6 [default = "default"];
  if (has_actiondata1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->actiondata1(), output);
  }

  // optional bytes actiondata2 = 7 [default = "default"];
  if (has_actiondata2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->actiondata2(), output);
  }

  // optional bytes actiondata3 = 8 [default = "default"];
  if (has_actiondata3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->actiondata3(), output);
  }

  // optional bytes actiondata = 9 [default = "default"];
  if (has_actiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->actiondata(), output);
  }

  // optional bytes picture = 10 [default = "default"];
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->picture(), output);
  }

  // required string picturetype = 11 [default = "default"];
  if (has_picturetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picturetype().data(), this->picturetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picturetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->picturetype(), output);
  }

  // required string actiondatatype = 12 [default = "default"];
  if (has_actiondatatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiondatatype().data(), this->actiondatatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiondatatype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->actiondatatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.CaptureData)
}

::google::protobuf::uint8* CaptureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.CaptureData)
  // required string scannerdevicecode = 1 [default = "default"];
  if (has_scannerdevicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scannerdevicecode().data(), this->scannerdevicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scannerdevicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scannerdevicecode(), target);
  }

  // required string wristmac = 2 [default = "default"];
  if (has_wristmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wristmac().data(), this->wristmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wristmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wristmac(), target);
  }

  // required string time = 3 [default = "default"];
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // required string actiontype = 4 [default = "default"];
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiontype().data(), this->actiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiontype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->actiontype(), target);
  }

  // required string actiondescribe = 5 [default = "default"];
  if (has_actiondescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiondescribe().data(), this->actiondescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiondescribe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->actiondescribe(), target);
  }

  // optional bytes actiondata1 = 6 [default = "default"];
  if (has_actiondata1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->actiondata1(), target);
  }

  // optional bytes actiondata2 = 7 [default = "default"];
  if (has_actiondata2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->actiondata2(), target);
  }

  // optional bytes actiondata3 = 8 [default = "default"];
  if (has_actiondata3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->actiondata3(), target);
  }

  // optional bytes actiondata = 9 [default = "default"];
  if (has_actiondata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->actiondata(), target);
  }

  // optional bytes picture = 10 [default = "default"];
  if (has_picture()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->picture(), target);
  }

  // required string picturetype = 11 [default = "default"];
  if (has_picturetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picturetype().data(), this->picturetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picturetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->picturetype(), target);
  }

  // required string actiondatatype = 12 [default = "default"];
  if (has_actiondatatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actiondatatype().data(), this->actiondatatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actiondatatype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->actiondatatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.CaptureData)
  return target;
}

int CaptureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string scannerdevicecode = 1 [default = "default"];
    if (has_scannerdevicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scannerdevicecode());
    }

    // required string wristmac = 2 [default = "default"];
    if (has_wristmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wristmac());
    }

    // required string time = 3 [default = "default"];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required string actiontype = 4 [default = "default"];
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actiontype());
    }

    // required string actiondescribe = 5 [default = "default"];
    if (has_actiondescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actiondescribe());
    }

    // optional bytes actiondata1 = 6 [default = "default"];
    if (has_actiondata1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actiondata1());
    }

    // optional bytes actiondata2 = 7 [default = "default"];
    if (has_actiondata2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actiondata2());
    }

    // optional bytes actiondata3 = 8 [default = "default"];
    if (has_actiondata3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actiondata3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes actiondata = 9 [default = "default"];
    if (has_actiondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actiondata());
    }

    // optional bytes picture = 10 [default = "default"];
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picture());
    }

    // required string picturetype = 11 [default = "default"];
    if (has_picturetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picturetype());
    }

    // required string actiondatatype = 12 [default = "default"];
    if (has_actiondatatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actiondatatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaptureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaptureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaptureData::MergeFrom(const CaptureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scannerdevicecode()) {
      set_scannerdevicecode(from.scannerdevicecode());
    }
    if (from.has_wristmac()) {
      set_wristmac(from.wristmac());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_actiondescribe()) {
      set_actiondescribe(from.actiondescribe());
    }
    if (from.has_actiondata1()) {
      set_actiondata1(from.actiondata1());
    }
    if (from.has_actiondata2()) {
      set_actiondata2(from.actiondata2());
    }
    if (from.has_actiondata3()) {
      set_actiondata3(from.actiondata3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actiondata()) {
      set_actiondata(from.actiondata());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_picturetype()) {
      set_picturetype(from.picturetype());
    }
    if (from.has_actiondatatype()) {
      set_actiondatatype(from.actiondatatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaptureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureData::CopyFrom(const CaptureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c1f) != 0x00000c1f) return false;

  return true;
}

void CaptureData::Swap(CaptureData* other) {
  if (other != this) {
    std::swap(scannerdevicecode_, other->scannerdevicecode_);
    std::swap(wristmac_, other->wristmac_);
    std::swap(time_, other->time_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(actiondescribe_, other->actiondescribe_);
    std::swap(actiondata1_, other->actiondata1_);
    std::swap(actiondata2_, other->actiondata2_);
    std::swap(actiondata3_, other->actiondata3_);
    std::swap(actiondata_, other->actiondata_);
    std::swap(picture_, other->picture_);
    std::swap(picturetype_, other->picturetype_);
    std::swap(actiondatatype_, other->actiondatatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaptureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureData_descriptor_;
  metadata.reflection = CaptureData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
