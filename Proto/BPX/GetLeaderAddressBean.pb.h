// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetLeaderAddressBean.proto

#ifndef PROTOBUF_GetLeaderAddressBean_2eproto__INCLUDED
#define PROTOBUF_GetLeaderAddressBean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GetLeaderAddressBean_2eproto();
void protobuf_AssignDesc_GetLeaderAddressBean_2eproto();
void protobuf_ShutdownFile_GetLeaderAddressBean_2eproto();

class ReqGetLeaderAddress;
class RspGetLeaderAddress;

// ===================================================================

class ReqGetLeaderAddress : public ::google::protobuf::Message {
 public:
  ReqGetLeaderAddress();
  virtual ~ReqGetLeaderAddress();

  ReqGetLeaderAddress(const ReqGetLeaderAddress& from);

  inline ReqGetLeaderAddress& operator=(const ReqGetLeaderAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetLeaderAddress& default_instance();

  void Swap(ReqGetLeaderAddress* other);

  // implements Message ----------------------------------------------

  ReqGetLeaderAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGetLeaderAddress& from);
  void MergeFrom(const ReqGetLeaderAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string identifier = 1 [default = ""];
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.ReqGetLeaderAddress)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identifier_;
  friend void  protobuf_AddDesc_GetLeaderAddressBean_2eproto();
  friend void protobuf_AssignDesc_GetLeaderAddressBean_2eproto();
  friend void protobuf_ShutdownFile_GetLeaderAddressBean_2eproto();

  void InitAsDefaultInstance();
  static ReqGetLeaderAddress* default_instance_;
};
// -------------------------------------------------------------------

class RspGetLeaderAddress : public ::google::protobuf::Message {
 public:
  RspGetLeaderAddress();
  virtual ~RspGetLeaderAddress();

  RspGetLeaderAddress(const RspGetLeaderAddress& from);

  inline RspGetLeaderAddress& operator=(const RspGetLeaderAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetLeaderAddress& default_instance();

  void Swap(RspGetLeaderAddress* other);

  // implements Message ----------------------------------------------

  RspGetLeaderAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetLeaderAddress& from);
  void MergeFrom(const RspGetLeaderAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leaderip = 1 [default = ""];
  inline bool has_leaderip() const;
  inline void clear_leaderip();
  static const int kLeaderipFieldNumber = 1;
  inline const ::std::string& leaderip() const;
  inline void set_leaderip(const ::std::string& value);
  inline void set_leaderip(const char* value);
  inline void set_leaderip(const char* value, size_t size);
  inline ::std::string* mutable_leaderip();
  inline ::std::string* release_leaderip();
  inline void set_allocated_leaderip(::std::string* leaderip);

  // required int32 leaderport = 2 [default = -1];
  inline bool has_leaderport() const;
  inline void clear_leaderport();
  static const int kLeaderportFieldNumber = 2;
  inline ::google::protobuf::int32 leaderport() const;
  inline void set_leaderport(::google::protobuf::int32 value);

  // optional string bpxid = 3 [default = ""];
  inline bool has_bpxid() const;
  inline void clear_bpxid();
  static const int kBpxidFieldNumber = 3;
  inline const ::std::string& bpxid() const;
  inline void set_bpxid(const ::std::string& value);
  inline void set_bpxid(const char* value);
  inline void set_bpxid(const char* value, size_t size);
  inline ::std::string* mutable_bpxid();
  inline ::std::string* release_bpxid();
  inline void set_allocated_bpxid(::std::string* bpxid);

  // optional string leaderid = 4 [default = ""];
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 4;
  inline const ::std::string& leaderid() const;
  inline void set_leaderid(const ::std::string& value);
  inline void set_leaderid(const char* value);
  inline void set_leaderid(const char* value, size_t size);
  inline ::std::string* mutable_leaderid();
  inline ::std::string* release_leaderid();
  inline void set_allocated_leaderid(::std::string* leaderid);

  // @@protoc_insertion_point(class_scope:com.arges.file.proto.RspGetLeaderAddress)
 private:
  inline void set_has_leaderip();
  inline void clear_has_leaderip();
  inline void set_has_leaderport();
  inline void clear_has_leaderport();
  inline void set_has_bpxid();
  inline void clear_has_bpxid();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* leaderip_;
  ::std::string* bpxid_;
  ::std::string* leaderid_;
  ::google::protobuf::int32 leaderport_;
  friend void  protobuf_AddDesc_GetLeaderAddressBean_2eproto();
  friend void protobuf_AssignDesc_GetLeaderAddressBean_2eproto();
  friend void protobuf_ShutdownFile_GetLeaderAddressBean_2eproto();

  void InitAsDefaultInstance();
  static RspGetLeaderAddress* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqGetLeaderAddress

// optional string identifier = 1 [default = ""];
inline bool ReqGetLeaderAddress::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGetLeaderAddress::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGetLeaderAddress::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGetLeaderAddress::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ReqGetLeaderAddress::identifier() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.ReqGetLeaderAddress.identifier)
  return *identifier_;
}
inline void ReqGetLeaderAddress::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.ReqGetLeaderAddress.identifier)
}
inline void ReqGetLeaderAddress::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.ReqGetLeaderAddress.identifier)
}
inline void ReqGetLeaderAddress::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.ReqGetLeaderAddress.identifier)
}
inline ::std::string* ReqGetLeaderAddress::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.ReqGetLeaderAddress.identifier)
  return identifier_;
}
inline ::std::string* ReqGetLeaderAddress::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetLeaderAddress::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.ReqGetLeaderAddress.identifier)
}

// -------------------------------------------------------------------

// RspGetLeaderAddress

// required string leaderip = 1 [default = ""];
inline bool RspGetLeaderAddress::has_leaderip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetLeaderAddress::set_has_leaderip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetLeaderAddress::clear_has_leaderip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetLeaderAddress::clear_leaderip() {
  if (leaderip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderip_->clear();
  }
  clear_has_leaderip();
}
inline const ::std::string& RspGetLeaderAddress::leaderip() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspGetLeaderAddress.leaderip)
  return *leaderip_;
}
inline void RspGetLeaderAddress::set_leaderip(const ::std::string& value) {
  set_has_leaderip();
  if (leaderip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderip_ = new ::std::string;
  }
  leaderip_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspGetLeaderAddress.leaderip)
}
inline void RspGetLeaderAddress::set_leaderip(const char* value) {
  set_has_leaderip();
  if (leaderip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderip_ = new ::std::string;
  }
  leaderip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspGetLeaderAddress.leaderip)
}
inline void RspGetLeaderAddress::set_leaderip(const char* value, size_t size) {
  set_has_leaderip();
  if (leaderip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderip_ = new ::std::string;
  }
  leaderip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspGetLeaderAddress.leaderip)
}
inline ::std::string* RspGetLeaderAddress::mutable_leaderip() {
  set_has_leaderip();
  if (leaderip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspGetLeaderAddress.leaderip)
  return leaderip_;
}
inline ::std::string* RspGetLeaderAddress::release_leaderip() {
  clear_has_leaderip();
  if (leaderip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leaderip_;
    leaderip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetLeaderAddress::set_allocated_leaderip(::std::string* leaderip) {
  if (leaderip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leaderip_;
  }
  if (leaderip) {
    set_has_leaderip();
    leaderip_ = leaderip;
  } else {
    clear_has_leaderip();
    leaderip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspGetLeaderAddress.leaderip)
}

// required int32 leaderport = 2 [default = -1];
inline bool RspGetLeaderAddress::has_leaderport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetLeaderAddress::set_has_leaderport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetLeaderAddress::clear_has_leaderport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetLeaderAddress::clear_leaderport() {
  leaderport_ = -1;
  clear_has_leaderport();
}
inline ::google::protobuf::int32 RspGetLeaderAddress::leaderport() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspGetLeaderAddress.leaderport)
  return leaderport_;
}
inline void RspGetLeaderAddress::set_leaderport(::google::protobuf::int32 value) {
  set_has_leaderport();
  leaderport_ = value;
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspGetLeaderAddress.leaderport)
}

// optional string bpxid = 3 [default = ""];
inline bool RspGetLeaderAddress::has_bpxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetLeaderAddress::set_has_bpxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetLeaderAddress::clear_has_bpxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetLeaderAddress::clear_bpxid() {
  if (bpxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bpxid_->clear();
  }
  clear_has_bpxid();
}
inline const ::std::string& RspGetLeaderAddress::bpxid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspGetLeaderAddress.bpxid)
  return *bpxid_;
}
inline void RspGetLeaderAddress::set_bpxid(const ::std::string& value) {
  set_has_bpxid();
  if (bpxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspGetLeaderAddress.bpxid)
}
inline void RspGetLeaderAddress::set_bpxid(const char* value) {
  set_has_bpxid();
  if (bpxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspGetLeaderAddress.bpxid)
}
inline void RspGetLeaderAddress::set_bpxid(const char* value, size_t size) {
  set_has_bpxid();
  if (bpxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bpxid_ = new ::std::string;
  }
  bpxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspGetLeaderAddress.bpxid)
}
inline ::std::string* RspGetLeaderAddress::mutable_bpxid() {
  set_has_bpxid();
  if (bpxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bpxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspGetLeaderAddress.bpxid)
  return bpxid_;
}
inline ::std::string* RspGetLeaderAddress::release_bpxid() {
  clear_has_bpxid();
  if (bpxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bpxid_;
    bpxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetLeaderAddress::set_allocated_bpxid(::std::string* bpxid) {
  if (bpxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bpxid_;
  }
  if (bpxid) {
    set_has_bpxid();
    bpxid_ = bpxid;
  } else {
    clear_has_bpxid();
    bpxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspGetLeaderAddress.bpxid)
}

// optional string leaderid = 4 [default = ""];
inline bool RspGetLeaderAddress::has_leaderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspGetLeaderAddress::set_has_leaderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspGetLeaderAddress::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspGetLeaderAddress::clear_leaderid() {
  if (leaderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderid_->clear();
  }
  clear_has_leaderid();
}
inline const ::std::string& RspGetLeaderAddress::leaderid() const {
  // @@protoc_insertion_point(field_get:com.arges.file.proto.RspGetLeaderAddress.leaderid)
  return *leaderid_;
}
inline void RspGetLeaderAddress::set_leaderid(const ::std::string& value) {
  set_has_leaderid();
  if (leaderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderid_ = new ::std::string;
  }
  leaderid_->assign(value);
  // @@protoc_insertion_point(field_set:com.arges.file.proto.RspGetLeaderAddress.leaderid)
}
inline void RspGetLeaderAddress::set_leaderid(const char* value) {
  set_has_leaderid();
  if (leaderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderid_ = new ::std::string;
  }
  leaderid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.arges.file.proto.RspGetLeaderAddress.leaderid)
}
inline void RspGetLeaderAddress::set_leaderid(const char* value, size_t size) {
  set_has_leaderid();
  if (leaderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderid_ = new ::std::string;
  }
  leaderid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.arges.file.proto.RspGetLeaderAddress.leaderid)
}
inline ::std::string* RspGetLeaderAddress::mutable_leaderid() {
  set_has_leaderid();
  if (leaderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.arges.file.proto.RspGetLeaderAddress.leaderid)
  return leaderid_;
}
inline ::std::string* RspGetLeaderAddress::release_leaderid() {
  clear_has_leaderid();
  if (leaderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leaderid_;
    leaderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetLeaderAddress::set_allocated_leaderid(::std::string* leaderid) {
  if (leaderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leaderid_;
  }
  if (leaderid) {
    set_has_leaderid();
    leaderid_ = leaderid;
  } else {
    clear_has_leaderid();
    leaderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.arges.file.proto.RspGetLeaderAddress.leaderid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GetLeaderAddressBean_2eproto__INCLUDED
