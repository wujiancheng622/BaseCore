// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkDevAndServiceBean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LinkDevAndServiceBean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace arges {
namespace file {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReqDeviceInfoListForDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeviceInfoListForDistribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspDeviceInfoListForDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspDeviceInfoListForDistribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAffiliactionOfDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAffiliactionOfDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspAffiliactionOfDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspAffiliactionOfDevice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LinkDevAndServiceBean_2eproto() {
  protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LinkDevAndServiceBean.proto");
  GOOGLE_CHECK(file != NULL);
  ReqDeviceInfoListForDistribution_descriptor_ = file->message_type(0);
  static const int ReqDeviceInfoListForDistribution_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, mstype_),
  };
  ReqDeviceInfoListForDistribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeviceInfoListForDistribution_descriptor_,
      ReqDeviceInfoListForDistribution::default_instance_,
      ReqDeviceInfoListForDistribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeviceInfoListForDistribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeviceInfoListForDistribution));
  RspDeviceInfoListForDistribution_descriptor_ = file->message_type(1);
  static const int RspDeviceInfoListForDistribution_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, devs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, dotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, resultdescribe_),
  };
  RspDeviceInfoListForDistribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspDeviceInfoListForDistribution_descriptor_,
      RspDeviceInfoListForDistribution::default_instance_,
      RspDeviceInfoListForDistribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspDeviceInfoListForDistribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspDeviceInfoListForDistribution));
  ReqAffiliactionOfDevice_descriptor_ = file->message_type(2);
  static const int ReqAffiliactionOfDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAffiliactionOfDevice, devid_),
  };
  ReqAffiliactionOfDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAffiliactionOfDevice_descriptor_,
      ReqAffiliactionOfDevice::default_instance_,
      ReqAffiliactionOfDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAffiliactionOfDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAffiliactionOfDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAffiliactionOfDevice));
  RspAffiliactionOfDevice_descriptor_ = file->message_type(3);
  static const int RspAffiliactionOfDevice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, devcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, mounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, updevcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, proxyserviceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, proxyserviceport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, proxyservicecode_),
  };
  RspAffiliactionOfDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspAffiliactionOfDevice_descriptor_,
      RspAffiliactionOfDevice::default_instance_,
      RspAffiliactionOfDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAffiliactionOfDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspAffiliactionOfDevice));
  OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor_ = file->enum_type(0);
  DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LinkDevAndServiceBean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeviceInfoListForDistribution_descriptor_, &ReqDeviceInfoListForDistribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspDeviceInfoListForDistribution_descriptor_, &RspDeviceInfoListForDistribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAffiliactionOfDevice_descriptor_, &ReqAffiliactionOfDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspAffiliactionOfDevice_descriptor_, &RspAffiliactionOfDevice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto() {
  delete ReqDeviceInfoListForDistribution::default_instance_;
  delete ReqDeviceInfoListForDistribution_reflection_;
  delete RspDeviceInfoListForDistribution::default_instance_;
  delete RspDeviceInfoListForDistribution_reflection_;
  delete ReqAffiliactionOfDevice::default_instance_;
  delete ReqAffiliactionOfDevice_reflection_;
  delete RspAffiliactionOfDevice::default_instance_;
  delete RspAffiliactionOfDevice_reflection_;
}

void protobuf_AddDesc_LinkDevAndServiceBean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::arges::file::proto::protobuf_AddDesc_DevInfoListBean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033LinkDevAndServiceBean.proto\022\024com.arges"
    ".file.proto\032\025DevInfoListBean.proto\"o\n Re"
    "qDeviceInfoListForDistribution\022\022\n\010server"
    "Id\030\001 \001(\t:\000\022\020\n\004type\030\002 \001(\005:\002-1\022\021\n\005order\030\003 "
    "\001(\005:\002-1\022\022\n\006msType\030\004 \001(\005:\002-1\"\224\001\n RspDevic"
    "eInfoListForDistribution\022.\n\004devs\030\001 \003(\0132 "
    ".com.arges.file.proto.DeviceInfo\022\022\n\006doTy"
    "pe\030\002 \001(\005:\002-1\022\022\n\006result\030\003 \001(\005:\002-1\022\030\n\016resu"
    "ltDescribe\030\004 \001(\014:\000\"*\n\027ReqAffiliactionOfD"
    "evice\022\017\n\005devId\030\001 \001(\t:\000\"\322\001\n\027RspAffiliacti"
    "onOfDevice\022\021\n\007devCode\030\001 \001(\t:\000\022\025\n\tmountTy"
    "pe\030\002 \001(\005:\002-1\022\023\n\tserviceId\030\003 \001(\t:\000\022\023\n\tupD"
    "evCode\030\004 \001(\t:\000\022\017\n\005devId\030\005 \001(\t:\000\022\030\n\016proxy"
    "ServiceIp\030\006 \001(\t:\000\022\034\n\020proxyServicePort\030\007 "
    "\001(\005:\002-1\022\032\n\020proxyServiceCode\030\010 \001(\t:\000*\201\002\n$"
    "OPRATION_TYPE_OF_DEVICE_DESTRIBUTION\0220\n,"
    "DEVICE_DESTRIBUTION_FOR_INITIACTIVE_REGI"
    "STER\020\001\022-\n)DEVICE_REDESTRIBUTE_FOR_SERVIC"
    "E_EXCEPTION\020\002\0220\n,DEVICE_DESTRIBUTION_FOR"
    "_PLATFROM_INITIACTIVE\020\003\022\"\n\036DEVICE_DESTRI"
    "BUTION_FOR_MODIFY\020\004\022\"\n\036DEVICE_DESTRIBUTI"
    "ON_FOR_DELETE\020\005*\220\001\n\035DISTRIBUTE_RESULT_TY"
    "PE_OF_DEV\022\"\n\036DISTRIBUTE_DEVICE_RESULT_IS"
    "_OK\020\001\022%\n!DISTRIBUTE_DEVICE_RESULT_IS_ERR"
    "OR\020\002\022$\n DISTRIBUTE_DEVICE_RESULT_IS_NULL"
    "\020\003", 1002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LinkDevAndServiceBean.proto", &protobuf_RegisterTypes);
  ReqDeviceInfoListForDistribution::default_instance_ = new ReqDeviceInfoListForDistribution();
  RspDeviceInfoListForDistribution::default_instance_ = new RspDeviceInfoListForDistribution();
  ReqAffiliactionOfDevice::default_instance_ = new ReqAffiliactionOfDevice();
  RspAffiliactionOfDevice::default_instance_ = new RspAffiliactionOfDevice();
  ReqDeviceInfoListForDistribution::default_instance_->InitAsDefaultInstance();
  RspDeviceInfoListForDistribution::default_instance_->InitAsDefaultInstance();
  ReqAffiliactionOfDevice::default_instance_->InitAsDefaultInstance();
  RspAffiliactionOfDevice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LinkDevAndServiceBean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LinkDevAndServiceBean_2eproto {
  StaticDescriptorInitializer_LinkDevAndServiceBean_2eproto() {
    protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  }
} static_descriptor_initializer_LinkDevAndServiceBean_2eproto_;
const ::google::protobuf::EnumDescriptor* OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_descriptor_;
}
bool OPRATION_TYPE_OF_DEVICE_DESTRIBUTION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DISTRIBUTE_RESULT_TYPE_OF_DEV_descriptor_;
}
bool DISTRIBUTE_RESULT_TYPE_OF_DEV_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeviceInfoListForDistribution::kServerIdFieldNumber;
const int ReqDeviceInfoListForDistribution::kTypeFieldNumber;
const int ReqDeviceInfoListForDistribution::kOrderFieldNumber;
const int ReqDeviceInfoListForDistribution::kMsTypeFieldNumber;
#endif  // !_MSC_VER

ReqDeviceInfoListForDistribution::ReqDeviceInfoListForDistribution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqDeviceInfoListForDistribution)
}

void ReqDeviceInfoListForDistribution::InitAsDefaultInstance() {
}

ReqDeviceInfoListForDistribution::ReqDeviceInfoListForDistribution(const ReqDeviceInfoListForDistribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqDeviceInfoListForDistribution)
}

void ReqDeviceInfoListForDistribution::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  order_ = -1;
  mstype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeviceInfoListForDistribution::~ReqDeviceInfoListForDistribution() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  SharedDtor();
}

void ReqDeviceInfoListForDistribution::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void ReqDeviceInfoListForDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeviceInfoListForDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeviceInfoListForDistribution_descriptor_;
}

const ReqDeviceInfoListForDistribution& ReqDeviceInfoListForDistribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  return *default_instance_;
}

ReqDeviceInfoListForDistribution* ReqDeviceInfoListForDistribution::default_instance_ = NULL;

ReqDeviceInfoListForDistribution* ReqDeviceInfoListForDistribution::New() const {
  return new ReqDeviceInfoListForDistribution;
}

void ReqDeviceInfoListForDistribution::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    type_ = -1;
    order_ = -1;
    mstype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeviceInfoListForDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msType;
        break;
      }

      // optional int32 msType = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_msType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstype_)));
          set_has_mstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  return false;
#undef DO_
}

void ReqDeviceInfoListForDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  // optional string serverId = 1 [default = ""];
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 order = 3 [default = -1];
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional int32 msType = 4 [default = -1];
  if (has_mstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqDeviceInfoListForDistribution)
}

::google::protobuf::uint8* ReqDeviceInfoListForDistribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  // optional string serverId = 1 [default = ""];
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional int32 type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 order = 3 [default = -1];
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // optional int32 msType = 4 [default = -1];
  if (has_mstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqDeviceInfoListForDistribution)
  return target;
}

int ReqDeviceInfoListForDistribution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serverId = 1 [default = ""];
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional int32 type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 order = 3 [default = -1];
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 msType = 4 [default = -1];
    if (has_mstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeviceInfoListForDistribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeviceInfoListForDistribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeviceInfoListForDistribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeviceInfoListForDistribution::MergeFrom(const ReqDeviceInfoListForDistribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_mstype()) {
      set_mstype(from.mstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeviceInfoListForDistribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeviceInfoListForDistribution::CopyFrom(const ReqDeviceInfoListForDistribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeviceInfoListForDistribution::IsInitialized() const {

  return true;
}

void ReqDeviceInfoListForDistribution::Swap(ReqDeviceInfoListForDistribution* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(type_, other->type_);
    std::swap(order_, other->order_);
    std::swap(mstype_, other->mstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeviceInfoListForDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeviceInfoListForDistribution_descriptor_;
  metadata.reflection = ReqDeviceInfoListForDistribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspDeviceInfoListForDistribution::kDevsFieldNumber;
const int RspDeviceInfoListForDistribution::kDoTypeFieldNumber;
const int RspDeviceInfoListForDistribution::kResultFieldNumber;
const int RspDeviceInfoListForDistribution::kResultDescribeFieldNumber;
#endif  // !_MSC_VER

RspDeviceInfoListForDistribution::RspDeviceInfoListForDistribution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspDeviceInfoListForDistribution)
}

void RspDeviceInfoListForDistribution::InitAsDefaultInstance() {
}

RspDeviceInfoListForDistribution::RspDeviceInfoListForDistribution(const RspDeviceInfoListForDistribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspDeviceInfoListForDistribution)
}

void RspDeviceInfoListForDistribution::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dotype_ = -1;
  result_ = -1;
  resultdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspDeviceInfoListForDistribution::~RspDeviceInfoListForDistribution() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspDeviceInfoListForDistribution)
  SharedDtor();
}

void RspDeviceInfoListForDistribution::SharedDtor() {
  if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdescribe_;
  }
  if (this != default_instance_) {
  }
}

void RspDeviceInfoListForDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspDeviceInfoListForDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspDeviceInfoListForDistribution_descriptor_;
}

const RspDeviceInfoListForDistribution& RspDeviceInfoListForDistribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  return *default_instance_;
}

RspDeviceInfoListForDistribution* RspDeviceInfoListForDistribution::default_instance_ = NULL;

RspDeviceInfoListForDistribution* RspDeviceInfoListForDistribution::New() const {
  return new RspDeviceInfoListForDistribution;
}

void RspDeviceInfoListForDistribution::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    dotype_ = -1;
    result_ = -1;
    if (has_resultdescribe()) {
      if (resultdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdescribe_->clear();
      }
    }
  }
  devs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspDeviceInfoListForDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspDeviceInfoListForDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.arges.file.proto.DeviceInfo devs = 1;
      case 1: {
        if (tag == 10) {
         parse_devs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_devs;
        if (input->ExpectTag(16)) goto parse_doType;
        break;
      }

      // optional int32 doType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_doType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dotype_)));
          set_has_dotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resultDescribe;
        break;
      }

      // optional bytes resultDescribe = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_resultDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspDeviceInfoListForDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspDeviceInfoListForDistribution)
  return false;
#undef DO_
}

void RspDeviceInfoListForDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspDeviceInfoListForDistribution)
  // repeated .com.arges.file.proto.DeviceInfo devs = 1;
  for (int i = 0; i < this->devs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devs(i), output);
  }

  // optional int32 doType = 2 [default = -1];
  if (has_dotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dotype(), output);
  }

  // optional int32 result = 3 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional bytes resultDescribe = 4 [default = ""];
  if (has_resultdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->resultdescribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspDeviceInfoListForDistribution)
}

::google::protobuf::uint8* RspDeviceInfoListForDistribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspDeviceInfoListForDistribution)
  // repeated .com.arges.file.proto.DeviceInfo devs = 1;
  for (int i = 0; i < this->devs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->devs(i), target);
  }

  // optional int32 doType = 2 [default = -1];
  if (has_dotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dotype(), target);
  }

  // optional int32 result = 3 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional bytes resultDescribe = 4 [default = ""];
  if (has_resultdescribe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->resultdescribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspDeviceInfoListForDistribution)
  return target;
}

int RspDeviceInfoListForDistribution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 doType = 2 [default = -1];
    if (has_dotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotype());
    }

    // optional int32 result = 3 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes resultDescribe = 4 [default = ""];
    if (has_resultdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdescribe());
    }

  }
  // repeated .com.arges.file.proto.DeviceInfo devs = 1;
  total_size += 1 * this->devs_size();
  for (int i = 0; i < this->devs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspDeviceInfoListForDistribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspDeviceInfoListForDistribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspDeviceInfoListForDistribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspDeviceInfoListForDistribution::MergeFrom(const RspDeviceInfoListForDistribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  devs_.MergeFrom(from.devs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dotype()) {
      set_dotype(from.dotype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdescribe()) {
      set_resultdescribe(from.resultdescribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspDeviceInfoListForDistribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspDeviceInfoListForDistribution::CopyFrom(const RspDeviceInfoListForDistribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDeviceInfoListForDistribution::IsInitialized() const {

  return true;
}

void RspDeviceInfoListForDistribution::Swap(RspDeviceInfoListForDistribution* other) {
  if (other != this) {
    devs_.Swap(&other->devs_);
    std::swap(dotype_, other->dotype_);
    std::swap(result_, other->result_);
    std::swap(resultdescribe_, other->resultdescribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspDeviceInfoListForDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspDeviceInfoListForDistribution_descriptor_;
  metadata.reflection = RspDeviceInfoListForDistribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAffiliactionOfDevice::kDevIdFieldNumber;
#endif  // !_MSC_VER

ReqAffiliactionOfDevice::ReqAffiliactionOfDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.ReqAffiliactionOfDevice)
}

void ReqAffiliactionOfDevice::InitAsDefaultInstance() {
}

ReqAffiliactionOfDevice::ReqAffiliactionOfDevice(const ReqAffiliactionOfDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.ReqAffiliactionOfDevice)
}

void ReqAffiliactionOfDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAffiliactionOfDevice::~ReqAffiliactionOfDevice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.ReqAffiliactionOfDevice)
  SharedDtor();
}

void ReqAffiliactionOfDevice::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (this != default_instance_) {
  }
}

void ReqAffiliactionOfDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAffiliactionOfDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAffiliactionOfDevice_descriptor_;
}

const ReqAffiliactionOfDevice& ReqAffiliactionOfDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  return *default_instance_;
}

ReqAffiliactionOfDevice* ReqAffiliactionOfDevice::default_instance_ = NULL;

ReqAffiliactionOfDevice* ReqAffiliactionOfDevice::New() const {
  return new ReqAffiliactionOfDevice;
}

void ReqAffiliactionOfDevice::Clear() {
  if (has_devid()) {
    if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      devid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAffiliactionOfDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.ReqAffiliactionOfDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devId = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.ReqAffiliactionOfDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.ReqAffiliactionOfDevice)
  return false;
#undef DO_
}

void ReqAffiliactionOfDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.ReqAffiliactionOfDevice)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.ReqAffiliactionOfDevice)
}

::google::protobuf::uint8* ReqAffiliactionOfDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.ReqAffiliactionOfDevice)
  // optional string devId = 1 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.ReqAffiliactionOfDevice)
  return target;
}

int ReqAffiliactionOfDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devId = 1 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAffiliactionOfDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAffiliactionOfDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAffiliactionOfDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAffiliactionOfDevice::MergeFrom(const ReqAffiliactionOfDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAffiliactionOfDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAffiliactionOfDevice::CopyFrom(const ReqAffiliactionOfDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAffiliactionOfDevice::IsInitialized() const {

  return true;
}

void ReqAffiliactionOfDevice::Swap(ReqAffiliactionOfDevice* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAffiliactionOfDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAffiliactionOfDevice_descriptor_;
  metadata.reflection = ReqAffiliactionOfDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspAffiliactionOfDevice::kDevCodeFieldNumber;
const int RspAffiliactionOfDevice::kMountTypeFieldNumber;
const int RspAffiliactionOfDevice::kServiceIdFieldNumber;
const int RspAffiliactionOfDevice::kUpDevCodeFieldNumber;
const int RspAffiliactionOfDevice::kDevIdFieldNumber;
const int RspAffiliactionOfDevice::kProxyServiceIpFieldNumber;
const int RspAffiliactionOfDevice::kProxyServicePortFieldNumber;
const int RspAffiliactionOfDevice::kProxyServiceCodeFieldNumber;
#endif  // !_MSC_VER

RspAffiliactionOfDevice::RspAffiliactionOfDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.arges.file.proto.RspAffiliactionOfDevice)
}

void RspAffiliactionOfDevice::InitAsDefaultInstance() {
}

RspAffiliactionOfDevice::RspAffiliactionOfDevice(const RspAffiliactionOfDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.arges.file.proto.RspAffiliactionOfDevice)
}

void RspAffiliactionOfDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mounttype_ = -1;
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updevcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyserviceip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyserviceport_ = -1;
  proxyservicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspAffiliactionOfDevice::~RspAffiliactionOfDevice() {
  // @@protoc_insertion_point(destructor:com.arges.file.proto.RspAffiliactionOfDevice)
  SharedDtor();
}

void RspAffiliactionOfDevice::SharedDtor() {
  if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devcode_;
  }
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (updevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updevcode_;
  }
  if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devid_;
  }
  if (proxyserviceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyserviceip_;
  }
  if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyservicecode_;
  }
  if (this != default_instance_) {
  }
}

void RspAffiliactionOfDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspAffiliactionOfDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspAffiliactionOfDevice_descriptor_;
}

const RspAffiliactionOfDevice& RspAffiliactionOfDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDevAndServiceBean_2eproto();
  return *default_instance_;
}

RspAffiliactionOfDevice* RspAffiliactionOfDevice::default_instance_ = NULL;

RspAffiliactionOfDevice* RspAffiliactionOfDevice::New() const {
  return new RspAffiliactionOfDevice;
}

void RspAffiliactionOfDevice::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_devcode()) {
      if (devcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devcode_->clear();
      }
    }
    mounttype_ = -1;
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    if (has_updevcode()) {
      if (updevcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updevcode_->clear();
      }
    }
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devid_->clear();
      }
    }
    if (has_proxyserviceip()) {
      if (proxyserviceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyserviceip_->clear();
      }
    }
    proxyserviceport_ = -1;
    if (has_proxyservicecode()) {
      if (proxyservicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyservicecode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspAffiliactionOfDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.arges.file.proto.RspAffiliactionOfDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devCode = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devcode().data(), this->devcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mountType;
        break;
      }

      // optional int32 mountType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_mountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mounttype_)));
          set_has_mounttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceId;
        break;
      }

      // optional string serviceId = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_serviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upDevCode;
        break;
      }

      // optional string upDevCode = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_upDevCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updevcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updevcode().data(), this->updevcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "updevcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_devId;
        break;
      }

      // optional string devId = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_devId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_proxyServiceIp;
        break;
      }

      // optional string proxyServiceIp = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_proxyServiceIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyserviceip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyserviceip().data(), this->proxyserviceip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyserviceip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_proxyServicePort;
        break;
      }

      // optional int32 proxyServicePort = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_proxyServicePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyserviceport_)));
          set_has_proxyserviceport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_proxyServiceCode;
        break;
      }

      // optional string proxyServiceCode = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_proxyServiceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyservicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyservicecode().data(), this->proxyservicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyservicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.arges.file.proto.RspAffiliactionOfDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.arges.file.proto.RspAffiliactionOfDevice)
  return false;
#undef DO_
}

void RspAffiliactionOfDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.arges.file.proto.RspAffiliactionOfDevice)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devcode(), output);
  }

  // optional int32 mountType = 2 [default = -1];
  if (has_mounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mounttype(), output);
  }

  // optional string serviceId = 3 [default = ""];
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serviceid(), output);
  }

  // optional string upDevCode = 4 [default = ""];
  if (has_updevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevcode().data(), this->updevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->updevcode(), output);
  }

  // optional string devId = 5 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devid(), output);
  }

  // optional string proxyServiceIp = 6 [default = ""];
  if (has_proxyserviceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyserviceip().data(), this->proxyserviceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyserviceip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->proxyserviceip(), output);
  }

  // optional int32 proxyServicePort = 7 [default = -1];
  if (has_proxyserviceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->proxyserviceport(), output);
  }

  // optional string proxyServiceCode = 8 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->proxyservicecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.arges.file.proto.RspAffiliactionOfDevice)
}

::google::protobuf::uint8* RspAffiliactionOfDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.arges.file.proto.RspAffiliactionOfDevice)
  // optional string devCode = 1 [default = ""];
  if (has_devcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devcode().data(), this->devcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devcode(), target);
  }

  // optional int32 mountType = 2 [default = -1];
  if (has_mounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mounttype(), target);
  }

  // optional string serviceId = 3 [default = ""];
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serviceid(), target);
  }

  // optional string upDevCode = 4 [default = ""];
  if (has_updevcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updevcode().data(), this->updevcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updevcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->updevcode(), target);
  }

  // optional string devId = 5 [default = ""];
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devid(), target);
  }

  // optional string proxyServiceIp = 6 [default = ""];
  if (has_proxyserviceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyserviceip().data(), this->proxyserviceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyserviceip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->proxyserviceip(), target);
  }

  // optional int32 proxyServicePort = 7 [default = -1];
  if (has_proxyserviceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->proxyserviceport(), target);
  }

  // optional string proxyServiceCode = 8 [default = ""];
  if (has_proxyservicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyservicecode().data(), this->proxyservicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyservicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->proxyservicecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.arges.file.proto.RspAffiliactionOfDevice)
  return target;
}

int RspAffiliactionOfDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devCode = 1 [default = ""];
    if (has_devcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devcode());
    }

    // optional int32 mountType = 2 [default = -1];
    if (has_mounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mounttype());
    }

    // optional string serviceId = 3 [default = ""];
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // optional string upDevCode = 4 [default = ""];
    if (has_updevcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updevcode());
    }

    // optional string devId = 5 [default = ""];
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // optional string proxyServiceIp = 6 [default = ""];
    if (has_proxyserviceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyserviceip());
    }

    // optional int32 proxyServicePort = 7 [default = -1];
    if (has_proxyserviceport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyserviceport());
    }

    // optional string proxyServiceCode = 8 [default = ""];
    if (has_proxyservicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyservicecode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspAffiliactionOfDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspAffiliactionOfDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspAffiliactionOfDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspAffiliactionOfDevice::MergeFrom(const RspAffiliactionOfDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devcode()) {
      set_devcode(from.devcode());
    }
    if (from.has_mounttype()) {
      set_mounttype(from.mounttype());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_updevcode()) {
      set_updevcode(from.updevcode());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_proxyserviceip()) {
      set_proxyserviceip(from.proxyserviceip());
    }
    if (from.has_proxyserviceport()) {
      set_proxyserviceport(from.proxyserviceport());
    }
    if (from.has_proxyservicecode()) {
      set_proxyservicecode(from.proxyservicecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspAffiliactionOfDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspAffiliactionOfDevice::CopyFrom(const RspAffiliactionOfDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspAffiliactionOfDevice::IsInitialized() const {

  return true;
}

void RspAffiliactionOfDevice::Swap(RspAffiliactionOfDevice* other) {
  if (other != this) {
    std::swap(devcode_, other->devcode_);
    std::swap(mounttype_, other->mounttype_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(updevcode_, other->updevcode_);
    std::swap(devid_, other->devid_);
    std::swap(proxyserviceip_, other->proxyserviceip_);
    std::swap(proxyserviceport_, other->proxyserviceport_);
    std::swap(proxyservicecode_, other->proxyservicecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspAffiliactionOfDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspAffiliactionOfDevice_descriptor_;
  metadata.reflection = RspAffiliactionOfDevice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace file
}  // namespace arges
}  // namespace com

// @@protoc_insertion_point(global_scope)
